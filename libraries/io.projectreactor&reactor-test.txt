
+###reactor/test/StepVerifier$Assertions
@3.1.0.RELEASE
+#hasDroppedElements()Lreactor/test/StepVerifier$Assertions;
+#hasNotDroppedElements()Lreactor/test/StepVerifier$Assertions;
+#hasDropped([Ljava/lang/Object;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedExactly([Ljava/lang/Object;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrors()Lreactor/test/StepVerifier$Assertions;
+#hasNotDroppedErrors()Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrors(I)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorOfType(Ljava/lang/Class;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorMatching(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorWithMessage(Ljava/lang/String;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorWithMessageContaining(Ljava/lang/String;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorsSatisfying(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Assertions;
+#hasDroppedErrorsMatching(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrors()Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrors(I)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorOfType(Ljava/lang/Class;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorMatching(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorWithMessage(Ljava/lang/String;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorWithMessageContaining(Ljava/lang/String;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorsSatisfying(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorsMatching(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Assertions;
+#tookLessThan(Ljava/time/Duration;)Lreactor/test/StepVerifier$Assertions;
+#tookMoreThan(Ljava/time/Duration;)Lreactor/test/StepVerifier$Assertions;
@3.2.0.RELEASE
+#hasDiscardedElements()Lreactor/test/StepVerifier$Assertions;
+#hasNotDiscardedElements()Lreactor/test/StepVerifier$Assertions;
+#hasDiscarded([Ljava/lang/Object;)Lreactor/test/StepVerifier$Assertions;
+#hasDiscardedExactly([Ljava/lang/Object;)Lreactor/test/StepVerifier$Assertions;
@3.3.0.RELEASE
+#hasDiscardedElementsMatching(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Assertions;
+#hasDiscardedElementsSatisfying(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Assertions;

+###reactor/test/StepVerifier$ContextExpectations
@3.1.3.RELEASE
+#hasKey(Ljava/lang/Object;)Lreactor/test/StepVerifier$ContextExpectations;
+#hasSize(I)Lreactor/test/StepVerifier$ContextExpectations;
+#contains(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$ContextExpectations;
+#containsAllOf(Lreactor/util/context/Context;)Lreactor/test/StepVerifier$ContextExpectations;
+#containsAllOf(Ljava/util/Map;)Lreactor/test/StepVerifier$ContextExpectations;
+#containsOnly(Lreactor/util/context/Context;)Lreactor/test/StepVerifier$ContextExpectations;
+#containsOnly(Ljava/util/Map;)Lreactor/test/StepVerifier$ContextExpectations;
+#assertThat(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$ContextExpectations;
+#matches(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$ContextExpectations;
+#matches(Ljava/util/function/Predicate;Ljava/lang/String;)Lreactor/test/StepVerifier$ContextExpectations;
+#then()Lreactor/test/StepVerifier$Step;

+###reactor/test/StepVerifier$FirstStep
@3.1.0.RELEASE
+#expectFusion()Lreactor/test/StepVerifier$Step;
+#expectFusion(I)Lreactor/test/StepVerifier$Step;
+#expectFusion(II)Lreactor/test/StepVerifier$Step;
+#expectNoFusionSupport()Lreactor/test/StepVerifier$Step;
+#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$FirstStep;
+#expectSubscription()Lreactor/test/StepVerifier$Step;
+#expectSubscriptionMatches(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Step;
+#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$Step;
@3.3.1.RELEASE
*#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$FirstStep;[deprecated]
*#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$Step;[deprecated]
@3.4.0
-#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$FirstStep;[deprecated]
-#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$Step;[deprecated]
@3.4.19
+#enableConditionalSupport(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$FirstStep;

+###reactor/test/StepVerifier$LastStep
@3.1.0.RELEASE
+#consumeErrorWith(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier;
+#expectError()Lreactor/test/StepVerifier;
+#expectError(Ljava/lang/Class;)Lreactor/test/StepVerifier;
+#expectErrorMessage(Ljava/lang/String;)Lreactor/test/StepVerifier;
+#expectErrorMatches(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier;
+#expectErrorSatisfies(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier;
+#expectComplete()Lreactor/test/StepVerifier;
+#thenCancel()Lreactor/test/StepVerifier;
+#verifyError()Ljava/time/Duration;
+#verifyError(Ljava/lang/Class;)Ljava/time/Duration;
+#verifyErrorMessage(Ljava/lang/String;)Ljava/time/Duration;
+#verifyErrorMatches(Ljava/util/function/Predicate;)Ljava/time/Duration;
+#verifyErrorSatisfies(Ljava/util/function/Consumer;)Ljava/time/Duration;
+#verifyComplete()Ljava/time/Duration;
@3.3.1.RELEASE
+#expectTimeout(Ljava/time/Duration;)Lreactor/test/StepVerifier;
+#verifyTimeout(Ljava/time/Duration;)Ljava/time/Duration;

+###reactor/test/StepVerifier$Step
@3.1.0.RELEASE
+#as(Ljava/lang/String;)Lreactor/test/StepVerifier$Step;
+#consumeNextWith(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Step;
+#assertNext(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Step;
+#consumeRecordedWith(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNext([Ljava/lang/Object;)Lreactor/test/StepVerifier$Step;
+#expectNextCount(J)Lreactor/test/StepVerifier$Step;
+#expectNextSequence(Ljava/lang/Iterable;)Lreactor/test/StepVerifier$Step;
+#expectNextMatches(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Step;
+#consumeSubscriptionWith(Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Step;
+#expectNoEvent(Ljava/time/Duration;)Lreactor/test/StepVerifier$Step;
+#expectRecordedMatches(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Step;
+#recordWith(Ljava/util/function/Supplier;)Lreactor/test/StepVerifier$Step;
+#then(Ljava/lang/Runnable;)Lreactor/test/StepVerifier$Step;
+#thenAwait()Lreactor/test/StepVerifier$Step;
+#thenAwait(Ljava/time/Duration;)Lreactor/test/StepVerifier$Step;
+#thenConsumeWhile(Ljava/util/function/Predicate;)Lreactor/test/StepVerifier$Step;
+#thenConsumeWhile(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Lreactor/test/StepVerifier$Step;
+#thenRequest(J)Lreactor/test/StepVerifier$Step;
@3.1.3.RELEASE
+#expectAccessibleContext()Lreactor/test/StepVerifier$ContextExpectations;
+#expectNoAccessibleContext()Lreactor/test/StepVerifier$Step;

+###reactor/test/StepVerifier
@3.1.0.RELEASE
+#setDefaultTimeout(Ljava/time/Duration;)V
+#resetDefaultTimeout()V
+#create(Lorg/reactivestreams/Publisher;)Lreactor/test/StepVerifier$FirstStep;
+#create(Lorg/reactivestreams/Publisher;J)Lreactor/test/StepVerifier$FirstStep;
+#create(Lorg/reactivestreams/Publisher;Lreactor/test/StepVerifierOptions;)Lreactor/test/StepVerifier$FirstStep;
+#withVirtualTime(Ljava/util/function/Supplier;)Lreactor/test/StepVerifier$FirstStep;
+#withVirtualTime(Ljava/util/function/Supplier;J)Lreactor/test/StepVerifier$FirstStep;
+#withVirtualTime(Ljava/util/function/Supplier;Ljava/util/function/Supplier;J)Lreactor/test/StepVerifier$FirstStep;
+#withVirtualTime(Ljava/util/function/Supplier;Lreactor/test/StepVerifierOptions;)Lreactor/test/StepVerifier$FirstStep;
+#log()Lreactor/test/StepVerifier;
+#verify()Ljava/time/Duration;
+#verify(Ljava/time/Duration;)Ljava/time/Duration;
+#verifyThenAssertThat()Lreactor/test/StepVerifier$Assertions;
@3.2.0.RELEASE
+#verifyThenAssertThat(Ljava/time/Duration;)Lreactor/test/StepVerifier$Assertions;
@3.3.0.RELEASE
+#verifyLater()Lreactor/test/StepVerifier;

+###reactor/test/StepVerifierExtensionsKt
@3.1.0.RELEASE
+#expectError(Lreactor/test/StepVerifier$LastStep;Lkotlin/reflect/KClass;)Lreactor/test/StepVerifier;
+#verifyError(Lreactor/test/StepVerifier$LastStep;Lkotlin/reflect/KClass;)Ljava/time/Duration;
+#hasDroppedErrorOfType(Lreactor/test/StepVerifier$Assertions;Lkotlin/reflect/KClass;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorOfType(Lreactor/test/StepVerifier$Assertions;Lkotlin/reflect/KClass;)Lreactor/test/StepVerifier$Assertions;
+#test(Lreactor/core/publisher/Flux;)Lreactor/test/StepVerifier$FirstStep;
+#test(Lreactor/core/publisher/Flux;J)Lreactor/test/StepVerifier$FirstStep;
+#test(Lreactor/core/publisher/Mono;)Lreactor/test/StepVerifier$FirstStep;
+#test(Lreactor/core/publisher/Mono;J)Lreactor/test/StepVerifier$FirstStep;
@3.2.17.RELEASE
+#expectError(Lreactor/test/StepVerifier$LastStep;)Lreactor/test/StepVerifier;
+#verifyError(Lreactor/test/StepVerifier$LastStep;)Ljava/time/Duration;
+#hasDroppedErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
@3.3.0.RELEASE
-#expectError(Lreactor/test/StepVerifier$LastStep;)Lreactor/test/StepVerifier;
-#verifyError(Lreactor/test/StepVerifier$LastStep;)Ljava/time/Duration;
-#hasDroppedErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
-#hasOperatorErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
@3.3.5.RELEASE
+#expectError(Lreactor/test/StepVerifier$LastStep;)Lreactor/test/StepVerifier;
+#verifyError(Lreactor/test/StepVerifier$LastStep;)Ljava/time/Duration;
+#hasDroppedErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
+#hasOperatorErrorOfType(Lreactor/test/StepVerifier$Assertions;)Lreactor/test/StepVerifier$Assertions;
@3.5.0
-###reactor/test/StepVerifierExtensionsKt

+###reactor/test/StepVerifierOptions
@3.1.0.RELEASE
+#create()Lreactor/test/StepVerifierOptions;
+#checkUnderRequesting(Z)Lreactor/test/StepVerifierOptions;
+#isCheckUnderRequesting()Z
+#initialRequest(J)Lreactor/test/StepVerifierOptions;
+#getInitialRequest()J
+#virtualTimeSchedulerSupplier(Ljava/util/function/Supplier;)Lreactor/test/StepVerifierOptions;
+#getVirtualTimeSchedulerSupplier()Ljava/util/function/Supplier;
@3.1.3.RELEASE
+#withInitialContext(Lreactor/util/context/Context;)Lreactor/test/StepVerifierOptions;
+#getInitialContext()Lreactor/util/context/Context;
@3.2.0.RELEASE
+#scenarioName(Ljava/lang/String;)Lreactor/test/StepVerifierOptions;
+#getScenarioName()Ljava/lang/String;
@3.3.0.RELEASE
+#valueFormatter(Lreactor/test/ValueFormatters$ToStringConverter;)Lreactor/test/StepVerifierOptions;
+#getValueFormatter()Lreactor/test/ValueFormatters$ToStringConverter;
+#extractor(Lreactor/test/ValueFormatters$Extractor;)Lreactor/test/StepVerifierOptions;
+#getExtractors()Ljava/util/Collection;
@3.3.17.RELEASE
+#copy()Lreactor/test/StepVerifierOptions;
@3.4.0
-#copy()Lreactor/test/StepVerifierOptions;
@3.4.6
+#copy()Lreactor/test/StepVerifierOptions;

+###reactor/test/ValueFormatters$Extractor
@3.3.0.RELEASE
+#getTargetClass()Ljava/lang/Class;
+#matches(Ljava/lang/Object;)Z
+#prefix(Ljava/lang/Object;)Ljava/lang/String;
+#suffix(Ljava/lang/Object;)Ljava/lang/String;
+#explode(Ljava/lang/Object;)Ljava/util/stream/Stream;
+#test(Ljava/lang/Object;)Z
+#apply(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/String;
+#apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

+###reactor/test/ValueFormatters$ToStringConverter
@3.3.0.RELEASE

+###reactor/test/ValueFormatters
@3.3.0.RELEASE
+#forClass(Ljava/lang/Class;Ljava/util/function/Function;)Lreactor/test/ValueFormatters$ToStringConverter;
+#forClassMatching(Ljava/lang/Class;Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/test/ValueFormatters$ToStringConverter;
+#filtering(Ljava/util/function/Predicate;Ljava/util/function/Function;)Lreactor/test/ValueFormatters$ToStringConverter;
+#signalExtractor()Lreactor/test/ValueFormatters$Extractor;
+#iterableExtractor()Lreactor/test/ValueFormatters$Extractor;
+#arrayExtractor(Ljava/lang/Class;)Lreactor/test/ValueFormatters$Extractor;

+###reactor/test/publisher/PublisherProbe$DefaultPublisherProbe
@3.1.0.RELEASE
+#mono()Lreactor/core/publisher/Mono;
+#flux()Lreactor/core/publisher/Flux;
+#wasSubscribed()Z
+#wasCancelled()Z
+#wasRequested()Z
@3.2.4.RELEASE
+#subscribeCount()J

+###reactor/test/publisher/PublisherProbe
@3.1.0.RELEASE
+#assertWasNotSubscribed()V
+#assertWasSubscribed()V
+#assertWasNotCancelled()V
+#assertWasCancelled()V
+#assertWasNotRequested()V
+#assertWasRequested()V
+#mono()Lreactor/core/publisher/Mono;
+#flux()Lreactor/core/publisher/Flux;
+#wasSubscribed()Z
+#wasCancelled()Z
+#wasRequested()Z
+#of(Lorg/reactivestreams/Publisher;)Lreactor/test/publisher/PublisherProbe;
+#empty()Lreactor/test/publisher/PublisherProbe;
@3.2.4.RELEASE
+#subscribeCount()J

+###reactor/test/publisher/TestPublisher$Violation
@3.1.0.RELEASE
+#values()[Lreactor/test/publisher/TestPublisher$Violation;
+#valueOf(Ljava/lang/String;)Lreactor/test/publisher/TestPublisher$Violation;

+###reactor/test/publisher/TestPublisher
@3.1.0.RELEASE
+#<init>()V
+#create()Lreactor/test/publisher/TestPublisher;
+#createNoncompliant(Lreactor/test/publisher/TestPublisher$Violation;[Lreactor/test/publisher/TestPublisher$Violation;)Lreactor/test/publisher/TestPublisher;
+#flux()Lreactor/core/publisher/Flux;
+#mono()Lreactor/core/publisher/Mono;
+#assertMinRequested(J)Lreactor/test/publisher/TestPublisher;
+#assertSubscribers()Lreactor/test/publisher/TestPublisher;
+#assertSubscribers(I)Lreactor/test/publisher/TestPublisher;
+#assertNoSubscribers()Lreactor/test/publisher/TestPublisher;
+#assertCancelled()Lreactor/test/publisher/TestPublisher;
+#assertCancelled(I)Lreactor/test/publisher/TestPublisher;
+#assertNotCancelled()Lreactor/test/publisher/TestPublisher;
+#assertRequestOverflow()Lreactor/test/publisher/TestPublisher;
+#assertNoRequestOverflow()Lreactor/test/publisher/TestPublisher;
+#next(Ljava/lang/Object;)Lreactor/test/publisher/TestPublisher;
+#error(Ljava/lang/Throwable;)Lreactor/test/publisher/TestPublisher;
+#complete()Lreactor/test/publisher/TestPublisher;
+#next(Ljava/lang/Object;[Ljava/lang/Object;)Lreactor/test/publisher/TestPublisher;
+#emit([Ljava/lang/Object;)Lreactor/test/publisher/TestPublisher;
@3.2.0.RELEASE
+#createCold()Lreactor/test/publisher/TestPublisher;
@3.2.10.RELEASE
+#assertMaxRequested(J)Lreactor/test/publisher/TestPublisher;
@3.4.1
+#createColdNonBuffering()Lreactor/test/publisher/TestPublisher;
+#createColdNonCompliant(ZLreactor/test/publisher/TestPublisher$Violation;[Lreactor/test/publisher/TestPublisher$Violation;)Lreactor/test/publisher/TestPublisher;

+###reactor/test/scheduler/VirtualTimeScheduler
@3.1.0.RELEASE
+#create()Lreactor/test/scheduler/VirtualTimeScheduler;
+#getOrSet()Lreactor/test/scheduler/VirtualTimeScheduler;
+#getOrSet(Lreactor/test/scheduler/VirtualTimeScheduler;)Lreactor/test/scheduler/VirtualTimeScheduler;
+#set(Lreactor/test/scheduler/VirtualTimeScheduler;)Lreactor/test/scheduler/VirtualTimeScheduler;
+#get()Lreactor/test/scheduler/VirtualTimeScheduler;
+#isFactoryEnabled()Z
+#reset()V
+#advanceTime()V
+#advanceTimeBy(Ljava/time/Duration;)V
+#advanceTimeTo(Ljava/time/Instant;)V
+#createWorker()Lreactor/test/scheduler/VirtualTimeScheduler$VirtualTimeWorker;
+#now(Ljava/util/concurrent/TimeUnit;)J
+#schedule(Ljava/lang/Runnable;)Lreactor/core/Disposable;
+#schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
+#isDisposed()Z
+#dispose()V
+#schedulePeriodically(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
+#createWorker()Lreactor/core/scheduler/Scheduler$Worker;
@3.2.13.RELEASE
+#getScheduledTaskCount()J
@3.3.3.RELEASE
+#create(Z)Lreactor/test/scheduler/VirtualTimeScheduler;
@3.3.4.RELEASE
+#getOrSet(Z)Lreactor/test/scheduler/VirtualTimeScheduler;

+###reactor/test/subscriber/ConditionalTestSubscriber
@3.4.13

+###reactor/test/subscriber/TestSubscriber$FusionRequirement
@3.4.13
+#values()[Lreactor/test/subscriber/TestSubscriber$FusionRequirement;
+#valueOf(Ljava/lang/String;)Lreactor/test/subscriber/TestSubscriber$FusionRequirement;

+###reactor/test/subscriber/TestSubscriber
@3.4.13
+#create()Lreactor/test/subscriber/TestSubscriber;
+#builder()Lreactor/test/subscriber/TestSubscriberBuilder;
+#cancel()V
+#request(J)V
+#isTerminatedOrCancelled()Z
+#isTerminated()Z
+#isTerminatedComplete()Z
+#isTerminatedError()Z
+#isCancelled()Z
+#getTerminalSignal()Lreactor/core/publisher/Signal;
+#expectTerminalSignal()Lreactor/core/publisher/Signal;
+#expectTerminalError()Ljava/lang/Throwable;
+#getReceivedOnNext()Ljava/util/List;
+#getReceivedOnNextAfterCancellation()Ljava/util/List;
+#getProtocolErrors()Ljava/util/List;
+#getFusionMode()I
+#block()V
+#block(Ljava/time/Duration;)V

+###reactor/test/subscriber/TestSubscriberBuilder
@3.4.13
+#contextPut(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/test/subscriber/TestSubscriberBuilder;
+#contextPutAll(Lreactor/util/context/ContextView;)Lreactor/test/subscriber/TestSubscriberBuilder;
+#initialRequest(J)Lreactor/test/subscriber/TestSubscriberBuilder;
+#initialRequestUnbounded()Lreactor/test/subscriber/TestSubscriberBuilder;
+#requireFusion(I)Lreactor/test/subscriber/TestSubscriberBuilder;
+#requireFusion(II)Lreactor/test/subscriber/TestSubscriberBuilder;
+#requireNotFuseable()Lreactor/test/subscriber/TestSubscriberBuilder;
+#buildConditional(Ljava/util/function/Predicate;)Lreactor/test/subscriber/ConditionalTestSubscriber;
+#build()Lreactor/test/subscriber/TestSubscriber;

+###reactor/test/util/LoggerUtils
@3.4.1
+#useCurrentLoggersWithCapture()Lreactor/core/Disposable;
+#enableCaptureWith(Lreactor/util/Logger;)V
+#disableCapture()V
@3.4.22
+#enableCaptureWith(Lreactor/util/Logger;Z)V

+###reactor/test/util/RaceTestUtils
@3.1.7.RELEASE
+#<init>()V
+#race(Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/Predicate;Ljava/util/function/BiPredicate;)Z
+#race(Ljava/lang/Runnable;Ljava/lang/Runnable;)V
+#race(Ljava/lang/Runnable;Ljava/lang/Runnable;Lreactor/core/scheduler/Scheduler;)V
@3.3.15.RELEASE
+#race([Ljava/lang/Runnable;)V
*#race(Ljava/lang/Runnable;Ljava/lang/Runnable;Lreactor/core/scheduler/Scheduler;)V[deprecated]
+#race(Lreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V
+#race(ILreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V
@3.4.0
-#race([Ljava/lang/Runnable;)V
-#race(Lreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V
-#race(ILreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V
@3.4.4
+#race([Ljava/lang/Runnable;)V
*#race(Ljava/lang/Runnable;Ljava/lang/Runnable;Lreactor/core/scheduler/Scheduler;)V[deprecated]
+#race(Lreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V
+#race(ILreactor/core/scheduler/Scheduler;[Ljava/lang/Runnable;)V

+###reactor/test/util/TestLogger
@3.2.0.RELEASE
+#<init>()V
+#getName()Ljava/lang/String;
+#getErrContent()Ljava/lang/String;
+#getOutContent()Ljava/lang/String;
+#reset()V
+#isTraceEnabled()Z
+#trace(Ljava/lang/String;)V
+#trace(Ljava/lang/String;[Ljava/lang/Object;)V
+#trace(Ljava/lang/String;Ljava/lang/Throwable;)V
+#isDebugEnabled()Z
+#debug(Ljava/lang/String;)V
+#debug(Ljava/lang/String;[Ljava/lang/Object;)V
+#debug(Ljava/lang/String;Ljava/lang/Throwable;)V
+#isInfoEnabled()Z
+#info(Ljava/lang/String;)V
+#info(Ljava/lang/String;[Ljava/lang/Object;)V
+#info(Ljava/lang/String;Ljava/lang/Throwable;)V
+#isWarnEnabled()Z
+#warn(Ljava/lang/String;)V
+#warn(Ljava/lang/String;[Ljava/lang/Object;)V
+#warn(Ljava/lang/String;Ljava/lang/Throwable;)V
+#isErrorEnabled()Z
+#error(Ljava/lang/String;)V
+#error(Ljava/lang/String;[Ljava/lang/Object;)V
+#error(Ljava/lang/String;Ljava/lang/Throwable;)V
@3.4.3
+#<init>(Z)V
+#isLogCurrentThreadName()Z
