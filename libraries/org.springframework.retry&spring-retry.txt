
+###org/springframework/retry/RetryStatistics
@1.0.0.RELEASE
+#getCompleteCount()I
+#getStartedCount()I
+#getErrorCount()I
+#getAbortCount()I
+#getName()Ljava/lang/String;
@1.2.0.RELEASE
+#getRecoveryCount()I

+###org/springframework/retry/TerminatedRetryException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/springframework/retry/RetryPolicy
@1.0.0.RELEASE
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#close(Lorg/springframework/retry/RetryContext;)V
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V

+###org/springframework/retry/interceptor/NewMethodArgumentsIdentifier
@1.0.0.RELEASE
+#isNew([Ljava/lang/Object;)Z

+###org/springframework/retry/interceptor/StatefulRetryOperationsInterceptor
@1.0.0.RELEASE
+#setRetryOperations(Lorg/springframework/retry/RetryOperations;)V
+#<init>()V
+#setRecoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)V
+#setKeyGenerator(Lorg/springframework/retry/interceptor/MethodArgumentsKeyGenerator;)V
+#setNewItemIdentifier(Lorg/springframework/retry/interceptor/NewMethodArgumentsIdentifier;)V
+#invoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
@1.2.0.RELEASE
+#setRollbackClassifier(Lorg/springframework/classify/Classifier;)V
+#setLabel(Ljava/lang/String;)V
+#setUseRawKey(Z)V

+###org/springframework/retry/interceptor/MethodInvocationRecoverer
@1.0.0.RELEASE
+#recover([Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;

+###org/springframework/retry/interceptor/RetryOperationsInterceptor
@1.0.0.RELEASE
+#<init>()V
+#setRetryOperations(Lorg/springframework/retry/RetryOperations;)V
+#setRecoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)V
+#invoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
@1.2.0.RELEASE
+#setLabel(Ljava/lang/String;)V

+###org/springframework/retry/interceptor/MethodArgumentsKeyGenerator
@1.0.0.RELEASE
+#getKey([Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/retry/RetryCallback
@1.0.0.RELEASE
+#doWithRetry(Lorg/springframework/retry/RetryContext;)Ljava/lang/Object;

+###org/springframework/retry/backoff/FixedBackOffPolicy
@1.0.0.RELEASE
+#<init>()V
+#setSleeper(Lorg/springframework/retry/backoff/Sleeper;)V
+#setBackOffPeriod(J)V
+#getBackOffPeriod()J
@1.0.2.RELEASE
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/FixedBackOffPolicy;
+#toString()Ljava/lang/String;
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/SleepingBackOffPolicy;
@2.0.0
+#backOffPeriodSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/retry/backoff/StatelessBackOffPolicy
@1.0.0.RELEASE
+#<init>()V
+#backOff(Lorg/springframework/retry/backoff/BackOffContext;)V
+#start(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/backoff/BackOffContext;

+###org/springframework/retry/backoff/BackOffContext
@1.0.0.RELEASE

+###org/springframework/retry/backoff/BackOffInterruptedException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/retry/backoff/ObjectWaitSleeper
@1.0.0.RELEASE
+#<init>()V
+#sleep(J)V

+###org/springframework/retry/backoff/Sleeper
@1.0.0.RELEASE
+#sleep(J)V

+###org/springframework/retry/backoff/ExponentialBackOffPolicy
@1.0.0.RELEASE
+#<init>()V
+#setSleeper(Lorg/springframework/retry/backoff/Sleeper;)V
+#setInitialInterval(J)V
+#setMultiplier(D)V
+#setMaxInterval(J)V
+#getInitialInterval()J
+#getMaxInterval()J
+#getMultiplier()D
+#start(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/backoff/BackOffContext;
+#backOff(Lorg/springframework/retry/backoff/BackOffContext;)V
+#toString()Ljava/lang/String;
@1.0.2.RELEASE
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/ExponentialBackOffPolicy;
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/SleepingBackOffPolicy;
@2.0.0
+#initialIntervalSupplier(Ljava/util/function/Supplier;)V
+#multiplierSupplier(Ljava/util/function/Supplier;)V
+#maxIntervalSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/retry/backoff/ExponentialRandomBackOffPolicy
@1.0.2.RELEASE
+#<init>()V
+#start(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/backoff/BackOffContext;

+###org/springframework/retry/backoff/BackOffPolicy
@1.0.0.RELEASE
+#start(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/backoff/BackOffContext;
+#backOff(Lorg/springframework/retry/backoff/BackOffContext;)V

+###org/springframework/retry/backoff/NoBackOffPolicy
@1.0.0.RELEASE
+#<init>()V
@1.2.0.RELEASE
+#toString()Ljava/lang/String;

+###org/springframework/retry/backoff/SleepingBackOffPolicy
@1.0.2.RELEASE
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/SleepingBackOffPolicy;

+###org/springframework/retry/RetryException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/springframework/retry/context/RetryContextSupport
@1.0.0.RELEASE
+#<init>(Lorg/springframework/retry/RetryContext;)V
+#getParent()Lorg/springframework/retry/RetryContext;
+#isExhaustedOnly()Z
+#setExhaustedOnly()V
+#getRetryCount()I
+#getLastThrowable()Ljava/lang/Throwable;
+#registerThrowable(Ljava/lang/Throwable;)V
+#toString()Ljava/lang/String;

+###org/springframework/retry/policy/CompositeRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#setPolicies([Lorg/springframework/retry/RetryPolicy;)V
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V
@1.0.3.RELEASE
+#setOptimistic(Z)V

+###org/springframework/retry/policy/RetryContextCache
@1.0.0.RELEASE
+#get(Ljava/lang/Object;)Lorg/springframework/retry/RetryContext;
+#put(Ljava/lang/Object;Lorg/springframework/retry/RetryContext;)V
+#remove(Ljava/lang/Object;)V
+#containsKey(Ljava/lang/Object;)Z

+###org/springframework/retry/policy/RetryCacheCapacityExceededException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/retry/policy/AlwaysRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#canRetry(Lorg/springframework/retry/RetryContext;)Z

+###org/springframework/retry/policy/TimeoutRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#setTimeout(J)V
+#getTimeout()J
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V

+###org/springframework/retry/policy/NeverRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V

+###org/springframework/retry/policy/SimpleRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#<init>(ILjava/util/Map;)V
+#setMaxAttempts(I)V
+#getMaxAttempts()I
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
@1.0.2.RELEASE
+#toString()Ljava/lang/String;
@1.0.3.RELEASE
+#<init>(ILjava/util/Map;Z)V
@1.1.5.RELEASE
+#<init>(ILjava/util/Map;ZZ)V
@1.2.0.RELEASE
+#<init>(I)V
@1.3.0
+#<init>(ILorg/springframework/classify/BinaryExceptionClassifier;)V
@2.0.0
+#setNotRecoverable([Ljava/lang/Class;)V
+#maxAttemptsSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/retry/policy/MapRetryContextCache
@1.0.0.RELEASE
+#<init>()V
+#<init>(I)V
+#setCapacity(I)V
+#containsKey(Ljava/lang/Object;)Z
+#get(Ljava/lang/Object;)Lorg/springframework/retry/RetryContext;
+#put(Ljava/lang/Object;Lorg/springframework/retry/RetryContext;)V
+#remove(Ljava/lang/Object;)V

+###org/springframework/retry/policy/ExceptionClassifierRetryPolicy
@1.0.0.RELEASE
+#<init>()V
+#setPolicyMap(Ljava/util/Map;)V
+#setExceptionClassifier(Lorg/springframework/classify/Classifier;)V
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V

+###org/springframework/retry/policy/SoftReferenceMapRetryContextCache
@1.0.0.RELEASE
+#<init>()V
+#<init>(I)V
+#setCapacity(I)V
+#containsKey(Ljava/lang/Object;)Z
+#get(Ljava/lang/Object;)Lorg/springframework/retry/RetryContext;
+#put(Ljava/lang/Object;Lorg/springframework/retry/RetryContext;)V
+#remove(Ljava/lang/Object;)V

+###org/springframework/retry/RetryOperations
@1.0.0.RELEASE
+#execute(Lorg/springframework/retry/RetryCallback;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RecoveryCallback;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RetryState;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RecoveryCallback;Lorg/springframework/retry/RetryState;)Ljava/lang/Object;

+###org/springframework/retry/RetryContext
@1.0.0.RELEASE
+#setExhaustedOnly()V
+#isExhaustedOnly()Z
+#getParent()Lorg/springframework/retry/RetryContext;
+#getRetryCount()I
+#getLastThrowable()Ljava/lang/Throwable;

+###org/springframework/retry/listener/RetryListenerSupport
@1.0.0.RELEASE
+#<init>()V
+#close(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#onError(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#open(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;)Z

+###org/springframework/retry/support/RetrySynchronizationManager
@1.0.0.RELEASE
+#getContext()Lorg/springframework/retry/RetryContext;
+#register(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#clear()Lorg/springframework/retry/RetryContext;

+###org/springframework/retry/support/RetryTemplate
@1.0.0.RELEASE
+#<init>()V
+#setRetryContextCache(Lorg/springframework/retry/policy/RetryContextCache;)V
+#setListeners([Lorg/springframework/retry/RetryListener;)V
+#registerListener(Lorg/springframework/retry/RetryListener;)V
+#setBackOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)V
+#setRetryPolicy(Lorg/springframework/retry/RetryPolicy;)V
+#execute(Lorg/springframework/retry/RetryCallback;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RecoveryCallback;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RetryState;)Ljava/lang/Object;
+#execute(Lorg/springframework/retry/RetryCallback;Lorg/springframework/retry/RecoveryCallback;Lorg/springframework/retry/RetryState;)Ljava/lang/Object;
@1.1.0.RELEASE
+#setThrowLastExceptionOnExhausted(Z)V
@1.3.0
+#builder()Lorg/springframework/retry/support/RetryTemplateBuilder;
+#defaultInstance()Lorg/springframework/retry/support/RetryTemplate;
+#registerListener(Lorg/springframework/retry/RetryListener;I)V
+#hasListeners()Z

+###org/springframework/retry/support/RetrySimulation$SleepSequence
@1.0.2.RELEASE
+#<init>(Ljava/util/List;)V
+#getSleeps()Ljava/util/List;
+#getLongestSleep()J
+#getTotalSleep()J
+#toString()Ljava/lang/String;

+###org/springframework/retry/support/RetrySimulation
@1.0.2.RELEASE
+#<init>()V
+#addSequence(Ljava/util/List;)V
+#getUniqueSleeps()Ljava/util/List;
+#getUniqueSleepsHistogram()Ljava/util/List;
+#getLongestTotalSleepSequence()Lorg/springframework/retry/support/RetrySimulation$SleepSequence;
@1.0.3.RELEASE
+#getPercentiles()Ljava/util/List;
+#getPercentile(D)D
-#getUniqueSleeps()Ljava/util/List;
-#getUniqueSleepsHistogram()Ljava/util/List;

+###org/springframework/retry/support/DefaultRetryState
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;ZLorg/springframework/classify/Classifier;)V
+#<init>(Ljava/lang/Object;Lorg/springframework/classify/Classifier;)V
+#<init>(Ljava/lang/Object;Z)V
+#<init>(Ljava/lang/Object;)V
+#getKey()Ljava/lang/Object;
+#isForceRefresh()Z
+#rollbackFor(Ljava/lang/Throwable;)Z
+#toString()Ljava/lang/String;

+###org/springframework/retry/support/RetrySimulator
@1.0.2.RELEASE
+#<init>(Lorg/springframework/retry/backoff/SleepingBackOffPolicy;Lorg/springframework/retry/RetryPolicy;)V
+#executeSimulation(I)Lorg/springframework/retry/support/RetrySimulation;
+#executeSingleSimulation()Ljava/util/List;

+###org/springframework/retry/RetryState
@1.0.0.RELEASE
+#getKey()Ljava/lang/Object;
+#isForceRefresh()Z
+#rollbackFor(Ljava/lang/Throwable;)Z

+###org/springframework/retry/RetryListener
@1.0.0.RELEASE
+#open(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;)Z
+#close(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#onError(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
@2.0.0
+#onSuccess(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Object;)V

+###org/springframework/retry/ExhaustedRetryException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/springframework/retry/RecoveryCallback
@1.0.0.RELEASE
+#recover(Lorg/springframework/retry/RetryContext;)Ljava/lang/Object;

+###org/springframework/classify/BinaryExceptionClassifier
@1.0.0.RELEASE
+#<init>(Z)V
+#<init>(Ljava/util/Collection;Z)V
+#<init>(Ljava/util/Collection;)V
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Z)V
@1.0.3.RELEASE
+#setTraverseCauses(Z)V
+#classify(Ljava/lang/Throwable;)Ljava/lang/Boolean;
+#classify(Ljava/lang/Object;)Ljava/lang/Object;
@1.3.0
+#builder()Lorg/springframework/classify/BinaryExceptionClassifierBuilder;
+#defaultClassifier()Lorg/springframework/classify/BinaryExceptionClassifier;
+#<init>(Ljava/util/Map;ZZ)V

+###org/springframework/classify/PatternMatcher
@1.0.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#match(Ljava/lang/String;Ljava/lang/String;)Z
+#match(Ljava/lang/String;)Ljava/lang/Object;

+###org/springframework/classify/Classifier
@1.0.0.RELEASE
+#classify(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/classify/BackToBackPatternClassifier
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/classify/Classifier;Lorg/springframework/classify/Classifier;)V
+#setMatcherMap(Ljava/util/Map;)V
+#setRouterDelegate(Ljava/lang/Object;)V
+#classify(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/classify/ClassifierSupport
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#classify(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/classify/util/AnnotationMethodResolver
@1.0.0.RELEASE
+#<init>(Ljava/lang/Class;)V
+#findMethod(Ljava/lang/Object;)Ljava/lang/reflect/Method;
+#findMethod(Ljava/lang/Class;)Ljava/lang/reflect/Method;

+###org/springframework/classify/util/MethodInvoker
@1.0.0.RELEASE
+#invokeMethod([Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/classify/util/MethodInvokerUtils
@1.0.0.RELEASE
+#<init>()V
+#getMethodInvokerByName(Ljava/lang/Object;Ljava/lang/String;Z[Ljava/lang/Class;)Lorg/springframework/classify/util/MethodInvoker;
+#getParamTypesString([Ljava/lang/Class;)Ljava/lang/String;
+#getMethodInvokerForInterface(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Class;)Lorg/springframework/classify/util/MethodInvoker;
+#getMethodInvokerByAnnotation(Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Class;)Lorg/springframework/classify/util/MethodInvoker;
+#getMethodInvokerByAnnotation(Ljava/lang/Class;Ljava/lang/Object;)Lorg/springframework/classify/util/MethodInvoker;
+#getMethodInvokerForSingleArgument(Ljava/lang/Object;)Lorg/springframework/classify/util/MethodInvoker;

+###org/springframework/classify/util/SimpleMethodInvoker
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#<init>(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;)V
+#invokeMethod([Ljava/lang/Object;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/springframework/classify/util/MethodResolver
@1.0.0.RELEASE
+#findMethod(Ljava/lang/Object;)Ljava/lang/reflect/Method;
+#findMethod(Ljava/lang/Class;)Ljava/lang/reflect/Method;

+###org/springframework/classify/SubclassClassifier
@1.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/Object;)V
+#<init>(Ljava/util/Map;Ljava/lang/Object;)V
+#setDefaultValue(Ljava/lang/Object;)V
+#setTypeMap(Ljava/util/Map;)V
+#classify(Ljava/lang/Object;)Ljava/lang/Object;
+#getDefault()Ljava/lang/Object;
@1.3.0
+#add(Ljava/lang/Class;Ljava/lang/Object;)V

+###org/springframework/classify/ClassifierAdapter
@1.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/Object;)V
+#<init>(Lorg/springframework/classify/Classifier;)V
+#setDelegate(Lorg/springframework/classify/Classifier;)V
+#setDelegate(Ljava/lang/Object;)V
+#classify(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/classify/annotation/Classifier
@1.0.0.RELEASE

+###org/springframework/classify/PatternMatchingClassifier
@1.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/Map;)V
+#setPatternMap(Ljava/util/Map;)V
+#classify(Ljava/lang/String;)Ljava/lang/Object;
+#classify(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/retry/interceptor/Retryable
@1.1.0.RELEASE

+###org/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder
@1.1.0.RELEASE
+#keyGenerator(Lorg/springframework/retry/interceptor/MethodArgumentsKeyGenerator;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#newMethodArgumentsIdentifier(Lorg/springframework/retry/interceptor/NewMethodArgumentsIdentifier;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#recoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#build()Lorg/springframework/retry/interceptor/StatefulRetryOperationsInterceptor;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;
+#recoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
@1.2.0.RELEASE
+#rollbackFor(Lorg/springframework/classify/Classifier;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;

+###org/springframework/retry/interceptor/RetryInterceptorBuilder
@1.1.0.RELEASE
+#stateful()Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#stateless()Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$StatelessRetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#recoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;
@1.2.0.RELEASE
+#circuitBreaker()Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#label(Ljava/lang/String;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;

+###org/springframework/retry/interceptor/RetryInterceptorBuilder$StatelessRetryInterceptorBuilder
@1.1.0.RELEASE
+#build()Lorg/springframework/retry/interceptor/RetryOperationsInterceptor;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;

+###org/springframework/retry/backoff/ThreadWaitSleeper
@1.1.0.RELEASE
+#<init>()V
+#sleep(J)V

+###org/springframework/retry/backoff/UniformRandomBackOffPolicy
@1.1.0.RELEASE
+#<init>()V
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/UniformRandomBackOffPolicy;
+#setSleeper(Lorg/springframework/retry/backoff/Sleeper;)V
+#setMinBackOffPeriod(J)V
+#getMinBackOffPeriod()J
+#setMaxBackOffPeriod(J)V
+#getMaxBackOffPeriod()J
+#toString()Ljava/lang/String;
+#withSleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/SleepingBackOffPolicy;
@2.0.0
+#minBackOffPeriodSupplier(Ljava/util/function/Supplier;)V
+#maxBackOffPeriodSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/retry/annotation/RetryConfiguration
@1.1.0.RELEASE
+#<init>()V
+#init()V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#getClassFilter()Lorg/springframework/aop/ClassFilter;
+#getInterfaces()[Ljava/lang/Class;
+#validateInterfaces()V
+#getAdvice()Lorg/aopalliance/aop/Advice;
+#getPointcut()Lorg/springframework/aop/Pointcut;
@1.3.1
+#afterPropertiesSet()V
-#init()V
@2.0.0
+#afterSingletonsInstantiated()V

+###org/springframework/retry/annotation/Retryable
@1.1.0.RELEASE
+#interceptor()Ljava/lang/String;
+#value()[Ljava/lang/Class;
+#include()[Ljava/lang/Class;
+#exclude()[Ljava/lang/Class;
+#stateful()Z
+#maxAttempts()I
+#backoff()Lorg/springframework/retry/annotation/Backoff;
@1.2.0.RELEASE
+#label()Ljava/lang/String;
+#maxAttemptsExpression()Ljava/lang/String;
+#exceptionExpression()Ljava/lang/String;
@1.2.3.RELEASE
+#listeners()[Ljava/lang/String;
@1.3.0
+#recover()Ljava/lang/String;
@2.0.0
*#value()[Ljava/lang/Class;[deprecated]
*#include()[Ljava/lang/Class;[deprecated]
+#retryFor()[Ljava/lang/Class;
*#exclude()[Ljava/lang/Class;[deprecated]
+#noRetryFor()[Ljava/lang/Class;
+#notRecoverable()[Ljava/lang/Class;

+###org/springframework/retry/annotation/RecoverAnnotationRecoveryHandler
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#recover([Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;

+###org/springframework/retry/annotation/Recover
@1.1.0.RELEASE

+###org/springframework/retry/annotation/AnnotationAwareRetryOperationsInterceptor
@1.1.0.RELEASE
+#<init>()V
+#setSleeper(Lorg/springframework/retry/backoff/Sleeper;)V
+#setRetryContextCache(Lorg/springframework/retry/policy/RetryContextCache;)V
+#setKeyGenerator(Lorg/springframework/retry/interceptor/MethodArgumentsKeyGenerator;)V
+#setNewItemIdentifier(Lorg/springframework/retry/interceptor/NewMethodArgumentsIdentifier;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#implementsInterface(Ljava/lang/Class;)Z
+#invoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
@1.2.0.RELEASE
+#setListeners(Ljava/util/Collection;)V

+###org/springframework/retry/annotation/Backoff
@1.1.0.RELEASE
+#value()J
+#delay()J
+#maxDelay()J
+#multiplier()D
+#random()Z
@1.2.0.RELEASE
+#delayExpression()Ljava/lang/String;
+#maxDelayExpression()Ljava/lang/String;
+#multiplierExpression()Ljava/lang/String;
@1.3.2
+#randomExpression()Ljava/lang/String;

+###org/springframework/retry/annotation/EnableRetry
@1.1.0.RELEASE
+#proxyTargetClass()Z

+###org/springframework/retry/annotation/CircuitBreaker
@1.2.0.RELEASE
+#value()[Ljava/lang/Class;
+#include()[Ljava/lang/Class;
+#exclude()[Ljava/lang/Class;
+#maxAttempts()I
+#label()Ljava/lang/String;
+#resetTimeout()J
+#openTimeout()J
@1.2.3.RELEASE
+#maxAttemptsExpression()Ljava/lang/String;
+#resetTimeoutExpression()Ljava/lang/String;
+#openTimeoutExpression()Ljava/lang/String;
+#exceptionExpression()Ljava/lang/String;
@2.0.0
*#include()[Ljava/lang/Class;[deprecated]
+#retryFor()[Ljava/lang/Class;
*#exclude()[Ljava/lang/Class;[deprecated]
+#noRetryFor()[Ljava/lang/Class;
+#notRecoverable()[Ljava/lang/Class;

+###org/springframework/retry/policy/ExpressionRetryPolicy
@1.2.0.RELEASE
+#<init>(Lorg/springframework/expression/Expression;)V
+#<init>(Ljava/lang/String;)V
+#<init>(ILjava/util/Map;ZLorg/springframework/expression/Expression;)V
+#<init>(ILjava/util/Map;ZLjava/lang/String;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#withBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)Lorg/springframework/retry/policy/ExpressionRetryPolicy;
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
@1.2.3.RELEASE
+#<init>(ILjava/util/Map;ZLjava/lang/String;Z)V
-#<init>(ILjava/util/Map;ZLjava/lang/String;)V
@1.3.2
+#isTemplate(Ljava/lang/String;)Z

+###org/springframework/retry/policy/CircuitBreakerRetryPolicy
@1.2.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/retry/RetryPolicy;)V
+#setResetTimeout(J)V
+#setOpenTimeout(J)V
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;
+#close(Lorg/springframework/retry/RetryContext;)V
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V
@2.0.0
+#resetTimeoutSupplier(Ljava/util/function/Supplier;)V
+#openTimeoutSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder
@1.2.0.RELEASE
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#keyGenerator(Lorg/springframework/retry/interceptor/MethodArgumentsKeyGenerator;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#recoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder$CircuitBreakerInterceptorBuilder;
+#build()Lorg/springframework/retry/interceptor/StatefulRetryOperationsInterceptor;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;
+#recoverer(Lorg/springframework/retry/interceptor/MethodInvocationRecoverer;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/retry/interceptor/RetryInterceptorBuilder;

+###org/springframework/retry/interceptor/FixedKeyGenerator
@1.2.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#getKey([Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/retry/stats/MutableRetryStatistics
@1.1.4.RELEASE
+#incrementStartedCount()V
+#incrementCompleteCount()V
+#incrementRecoveryCount()V
+#incrementErrorCount()V
+#incrementAbortCount()V
@1.1.5.RELEASE
-###org/springframework/retry/stats/MutableRetryStatistics

+###org/springframework/retry/stats/StatisticsListener
@1.2.0.RELEASE
+#<init>(Lorg/springframework/retry/stats/StatisticsRepository;)V
+#close(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#onError(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V

+###org/springframework/retry/stats/RetryStatisticsFactory
@1.1.4.RELEASE
+#create(Ljava/lang/String;)Lorg/springframework/retry/stats/MutableRetryStatistics;
@1.1.5.RELEASE
-###org/springframework/retry/stats/RetryStatisticsFactory

+###org/springframework/retry/stats/ExponentialAverageRetryStatistics
@1.1.4.RELEASE
+#<init>(Ljava/lang/String;)V
+#setWindow(J)V
+#getRollingStartedCount()I
+#getRollingErrorCount()I
+#getRollingAbortCount()I
+#getRollingRecoveryCount()I
+#getRollingCompleteCount()I
+#getRollingErrorRate()D
+#incrementStartedCount()V
+#incrementCompleteCount()V
+#incrementRecoveryCount()V
+#incrementErrorCount()V
+#incrementAbortCount()V
@1.1.5.RELEASE
-###org/springframework/retry/stats/ExponentialAverageRetryStatistics

+###org/springframework/retry/stats/DefaultRetryStatistics
@1.2.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#getCompleteCount()I
+#getStartedCount()I
+#getErrorCount()I
+#getAbortCount()I
+#getName()Ljava/lang/String;
+#getRecoveryCount()I
+#setName(Ljava/lang/String;)V
+#incrementStartedCount()V
+#incrementCompleteCount()V
+#incrementRecoveryCount()V
+#incrementErrorCount()V
+#incrementAbortCount()V
+#toString()Ljava/lang/String;

+###org/springframework/retry/stats/StatisticsRepository
@1.2.0.RELEASE
+#findOne(Ljava/lang/String;)Lorg/springframework/retry/RetryStatistics;
+#findAll()Ljava/lang/Iterable;
+#addStarted(Ljava/lang/String;)V
+#addError(Ljava/lang/String;)V
+#addRecovery(Ljava/lang/String;)V
+#addComplete(Ljava/lang/String;)V
+#addAbort(Ljava/lang/String;)V

+###org/springframework/retry/stats/DefaultRetryStatisticsFactory
@1.1.4.RELEASE
+#<init>()V
+#setWindow(J)V
+#create(Ljava/lang/String;)Lorg/springframework/retry/stats/MutableRetryStatistics;
@1.1.5.RELEASE
-###org/springframework/retry/stats/DefaultRetryStatisticsFactory

+###org/springframework/retry/stats/DefaultStatisticsRepository
@1.2.0.RELEASE
+#<init>()V
+#setRetryStatisticsFactory(Lorg/springframework/retry/stats/RetryStatisticsFactory;)V
+#findOne(Ljava/lang/String;)Lorg/springframework/retry/RetryStatistics;
+#findAll()Ljava/lang/Iterable;
+#addStarted(Ljava/lang/String;)V
+#addError(Ljava/lang/String;)V
+#addRecovery(Ljava/lang/String;)V
+#addComplete(Ljava/lang/String;)V
+#addAbort(Ljava/lang/String;)V

+###org/springframework/classify/BinaryExceptionClassifierBuilder
@1.3.0
+#<init>()V
+#retryOn(Ljava/lang/Class;)Lorg/springframework/classify/BinaryExceptionClassifierBuilder;
+#notRetryOn(Ljava/lang/Class;)Lorg/springframework/classify/BinaryExceptionClassifierBuilder;
+#traversingCauses()Lorg/springframework/classify/BinaryExceptionClassifierBuilder;
+#build()Lorg/springframework/classify/BinaryExceptionClassifier;

+###org/springframework/retry/backoff/BackOffPolicyBuilder
@1.3.3
+#newBuilder()Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#newDefaultPolicy()Lorg/springframework/retry/backoff/BackOffPolicy;
+#delay(J)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#maxDelay(J)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#multiplier(D)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#random(Z)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#sleeper(Lorg/springframework/retry/backoff/Sleeper;)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#build()Lorg/springframework/retry/backoff/BackOffPolicy;
@2.0.0
+#delaySupplier(Ljava/util/function/Supplier;)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#maxDelaySupplier(Ljava/util/function/Supplier;)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#multiplierSupplier(Ljava/util/function/Supplier;)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;
+#randomSupplier(Ljava/util/function/Supplier;)Lorg/springframework/retry/backoff/BackOffPolicyBuilder;

+###org/springframework/retry/listener/MethodInvocationRetryListenerSupport
@1.3.0
+#<init>()V
+#close(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#onError(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Throwable;)V
+#open(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;)Z
@2.0.0
+#onSuccess(Lorg/springframework/retry/RetryContext;Lorg/springframework/retry/RetryCallback;Ljava/lang/Object;)V

+###org/springframework/retry/interceptor/MethodInvocationRetryCallback
@1.3.0
+#<init>(Lorg/aopalliance/intercept/MethodInvocation;Ljava/lang/String;)V
+#getInvocation()Lorg/aopalliance/intercept/MethodInvocation;
+#getLabel()Ljava/lang/String;

+###org/springframework/retry/support/RetryTemplateBuilder
@1.3.0
+#<init>()V
+#maxAttempts(I)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#withinMillis(J)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#infiniteRetry()Lorg/springframework/retry/support/RetryTemplateBuilder;
+#customPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#exponentialBackoff(JDJ)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#exponentialBackoff(JDJZ)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#fixedBackoff(J)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#uniformRandomBackoff(JJ)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#noBackoff()Lorg/springframework/retry/support/RetryTemplateBuilder;
+#customBackoff(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#retryOn(Ljava/lang/Class;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#notRetryOn(Ljava/lang/Class;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#traversingCauses()Lorg/springframework/retry/support/RetryTemplateBuilder;
+#withListener(Lorg/springframework/retry/RetryListener;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#withListeners(Ljava/util/List;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#build()Lorg/springframework/retry/support/RetryTemplate;
@1.3.2
+#retryOn(Ljava/util/List;)Lorg/springframework/retry/support/RetryTemplateBuilder;
+#notRetryOn(Ljava/util/List;)Lorg/springframework/retry/support/RetryTemplateBuilder;

+###org/springframework/retry/policy/MaxAttemptsRetryPolicy
@1.3.0
+#<init>()V
+#<init>(I)V
+#setMaxAttempts(I)V
+#getMaxAttempts()I
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;

+###org/springframework/retry/policy/BinaryExceptionClassifierRetryPolicy
@1.3.0
+#<init>(Lorg/springframework/classify/BinaryExceptionClassifier;)V
+#getExceptionClassifier()Lorg/springframework/classify/BinaryExceptionClassifier;
+#canRetry(Lorg/springframework/retry/RetryContext;)Z
+#close(Lorg/springframework/retry/RetryContext;)V
+#registerThrowable(Lorg/springframework/retry/RetryContext;Ljava/lang/Throwable;)V
+#open(Lorg/springframework/retry/RetryContext;)Lorg/springframework/retry/RetryContext;

+###org/springframework/retry/support/Args
@2.0.0
+#<init>([Ljava/lang/Object;)V
+#getArgs()[Ljava/lang/Object;
