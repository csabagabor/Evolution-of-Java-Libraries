
+###org/apache/flink/table/sinks/TableSink
@1.8.0
+#getOutputType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getFieldNames()[Ljava/lang/String;
+#getFieldTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#configure([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/sinks/TableSink;
@1.9.0
+#getConsumedDataType()Lorg/apache/flink/table/types/DataType;
*#getOutputType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getTableSchema()Lorg/apache/flink/table/api/TableSchema;
*#getFieldNames()[Ljava/lang/String;[deprecated]
*#getFieldTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
*#configure([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/sinks/TableSink;[deprecated]

+###org/apache/flink/table/sinks/PartitionableTableSink
@1.9.0
+#getPartitionFieldNames()Ljava/util/List;
+#setStaticPartition(Ljava/util/Map;)V
+#configurePartitionGrouping(Z)Z
@1.10.0
-#getPartitionFieldNames()Ljava/util/List;

+###org/apache/flink/table/sinks/OverwritableTableSink
@1.9.0
+#setOverwrite(Z)V

+###org/apache/flink/table/sinks/TableSinkBase
@1.8.0
+#<init>()V
+#getFieldNames()[Ljava/lang/String;
+#getFieldTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#configure([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/sinks/TableSink;

+###org/apache/flink/table/connector/RuntimeConverter
@1.11.0
+#open(Lorg/apache/flink/table/connector/RuntimeConverter$Context;)V

+###org/apache/flink/table/connector/ChangelogMode
@1.11.0
+#insertOnly()Lorg/apache/flink/table/connector/ChangelogMode;
+#newBuilder()Lorg/apache/flink/table/connector/ChangelogMode$Builder;
+#getContainedKinds()Ljava/util/Set;
+#contains(Lorg/apache/flink/types/RowKind;)Z
+#containsOnly(Lorg/apache/flink/types/RowKind;)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.12.0
+#toString()Ljava/lang/String;
@1.13.0
+#upsert()Lorg/apache/flink/table/connector/ChangelogMode;
+#all()Lorg/apache/flink/table/connector/ChangelogMode;

+###org/apache/flink/table/connector/sink/SinkProvider
@1.13.0
+#of(Lorg/apache/flink/api/connector/sink/Sink;)Lorg/apache/flink/table/connector/sink/SinkProvider;
+#of(Lorg/apache/flink/api/connector/sink/Sink;Ljava/lang/Integer;)Lorg/apache/flink/table/connector/sink/SinkProvider;
+#createSink()Lorg/apache/flink/api/connector/sink/Sink;

+###org/apache/flink/table/connector/sink/DynamicTableSink$DataStructureConverter
@1.11.0
+#toExternal(Ljava/lang/Object;)Ljava/lang/Object;

+###org/apache/flink/table/connector/sink/DynamicTableSink$SinkRuntimeProvider
@1.11.0

+###org/apache/flink/table/connector/sink/abilities/SupportsWritingMetadata
@1.12.0
+#listWritableMetadata()Ljava/util/Map;
+#applyWritableMetadata(Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V

+###org/apache/flink/table/connector/sink/abilities/SupportsOverwrite
@1.11.0
+#applyOverwrite(Z)V

+###org/apache/flink/table/connector/sink/abilities/SupportsPartitioning
@1.11.0
+#applyStaticPartition(Ljava/util/Map;)V
+#requiresPartitionGrouping(Z)Z

+###org/apache/flink/table/connector/sink/DynamicTableSink
@1.11.0
+#getChangelogMode(Lorg/apache/flink/table/connector/ChangelogMode;)Lorg/apache/flink/table/connector/ChangelogMode;
+#getSinkRuntimeProvider(Lorg/apache/flink/table/connector/sink/DynamicTableSink$Context;)Lorg/apache/flink/table/connector/sink/DynamicTableSink$SinkRuntimeProvider;
+#copy()Lorg/apache/flink/table/connector/sink/DynamicTableSink;
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/connector/sink/OutputFormatProvider
@1.11.0
+#of(Lorg/apache/flink/api/common/io/OutputFormat;)Lorg/apache/flink/table/connector/sink/OutputFormatProvider;
+#createOutputFormat()Lorg/apache/flink/api/common/io/OutputFormat;
@1.13.0
+#of(Lorg/apache/flink/api/common/io/OutputFormat;Ljava/lang/Integer;)Lorg/apache/flink/table/connector/sink/OutputFormatProvider;

+###org/apache/flink/table/connector/sink/DynamicTableSink$Context
@1.11.0
+#isBounded()Z
+#createTypeInformation(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#createDataStructureConverter(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/connector/sink/DynamicTableSink$DataStructureConverter;
@1.15.0
+#createTypeInformation(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/connector/ChangelogMode$Builder
@1.11.0
+#addContainedKind(Lorg/apache/flink/types/RowKind;)Lorg/apache/flink/table/connector/ChangelogMode$Builder;
+#build()Lorg/apache/flink/table/connector/ChangelogMode;

+###org/apache/flink/table/connector/RuntimeConverter$Context
@1.11.0
+#getClassLoader()Ljava/lang/ClassLoader;
+#create(Ljava/lang/ClassLoader;)Lorg/apache/flink/table/connector/RuntimeConverter$Context;

+###org/apache/flink/table/connector/ParallelismProvider
@1.12.0
+#getParallelism()Ljava/util/Optional;

+###org/apache/flink/table/connector/source/AsyncTableFunctionProvider
@1.11.0
+#of(Lorg/apache/flink/table/functions/AsyncTableFunction;)Lorg/apache/flink/table/connector/source/AsyncTableFunctionProvider;
+#createAsyncTableFunction()Lorg/apache/flink/table/functions/AsyncTableFunction;

+###org/apache/flink/table/connector/source/ScanTableSource
@1.11.0
+#getChangelogMode()Lorg/apache/flink/table/connector/ChangelogMode;
+#getScanRuntimeProvider(Lorg/apache/flink/table/connector/source/ScanTableSource$ScanContext;)Lorg/apache/flink/table/connector/source/ScanTableSource$ScanRuntimeProvider;

+###org/apache/flink/table/connector/source/ScanTableSource$ScanContext
@1.11.0

+###org/apache/flink/table/connector/source/LookupTableSource
@1.11.0
+#getLookupRuntimeProvider(Lorg/apache/flink/table/connector/source/LookupTableSource$LookupContext;)Lorg/apache/flink/table/connector/source/LookupTableSource$LookupRuntimeProvider;

+###org/apache/flink/table/connector/source/ScanTableSource$ScanRuntimeProvider
@1.11.0
+#isBounded()Z

+###org/apache/flink/table/connector/source/DynamicTableSource$DataStructureConverter
@1.11.0
+#toInternal(Ljava/lang/Object;)Ljava/lang/Object;

+###org/apache/flink/table/connector/source/TableFunctionProvider
@1.11.0
+#of(Lorg/apache/flink/table/functions/TableFunction;)Lorg/apache/flink/table/connector/source/TableFunctionProvider;
+#createTableFunction()Lorg/apache/flink/table/functions/TableFunction;

+###org/apache/flink/table/connector/source/InputFormatProvider
@1.11.0
+#of(Lorg/apache/flink/api/common/io/InputFormat;)Lorg/apache/flink/table/connector/source/InputFormatProvider;
+#createInputFormat()Lorg/apache/flink/api/common/io/InputFormat;

+###org/apache/flink/table/connector/source/SourceProvider
@1.12.0
+#of(Lorg/apache/flink/api/connector/source/Source;)Lorg/apache/flink/table/connector/source/SourceProvider;
+#createSource()Lorg/apache/flink/api/connector/source/Source;

+###org/apache/flink/table/connector/source/abilities/SupportsAggregatePushDown
@1.13.0
+#applyAggregates(Ljava/util/List;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Z

+###org/apache/flink/table/connector/source/abilities/SupportsReadingMetadata
@1.12.0
+#listReadableMetadata()Ljava/util/Map;
+#applyReadableMetadata(Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
@1.14.0
+#supportsMetadataProjection()Z

+###org/apache/flink/table/connector/source/abilities/SupportsLimitPushDown
@1.11.0
+#applyLimit(J)V

+###org/apache/flink/table/connector/source/abilities/SupportsFilterPushDown
@1.11.0
+#applyFilters(Ljava/util/List;)Lorg/apache/flink/table/connector/source/abilities/SupportsFilterPushDown$Result;

+###org/apache/flink/table/connector/source/abilities/SupportsWatermarkPushDown
@1.11.0
+#applyWatermark(Lorg/apache/flink/table/connector/source/abilities/SupportsWatermarkPushDown$WatermarkProvider;)V
@1.12.0
+#applyWatermark(Lorg/apache/flink/api/common/eventtime/WatermarkStrategy;)V
-#applyWatermark(Lorg/apache/flink/table/connector/source/abilities/SupportsWatermarkPushDown$WatermarkProvider;)V

+###org/apache/flink/table/connector/source/abilities/SupportsFilterPushDown$Result
@1.11.0
+#of(Ljava/util/List;Ljava/util/List;)Lorg/apache/flink/table/connector/source/abilities/SupportsFilterPushDown$Result;
+#getAcceptedFilters()Ljava/util/List;
+#getRemainingFilters()Ljava/util/List;

+###org/apache/flink/table/connector/source/abilities/SupportsSourceWatermark
@1.13.0
+#applySourceWatermark()V

+###org/apache/flink/table/connector/source/abilities/SupportsProjectionPushDown
@1.11.0
+#supportsNestedProjection()Z
+#applyProjection([[I)V
@1.15.0
*#applyProjection([[I)V[deprecated]
+#applyProjection([[ILorg/apache/flink/table/types/DataType;)V

+###org/apache/flink/table/connector/source/abilities/SupportsPartitionPushDown
@1.11.0
+#listPartitions()Ljava/util/Optional;
+#applyPartitions(Ljava/util/List;)V

+###org/apache/flink/table/connector/source/DynamicTableSource
@1.11.0
+#copy()Lorg/apache/flink/table/connector/source/DynamicTableSource;
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/connector/source/DynamicTableSource$Context
@1.11.0
+#createTypeInformation(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#createDataStructureConverter(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/connector/source/DynamicTableSource$DataStructureConverter;
@1.15.0
+#createTypeInformation(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/connector/source/LookupTableSource$LookupContext
@1.11.0
+#getKeys()[[I

+###org/apache/flink/table/connector/source/LookupTableSource$LookupRuntimeProvider
@1.11.0

+###org/apache/flink/table/connector/format/EncodingFormat
@1.11.0
+#createRuntimeEncoder(Lorg/apache/flink/table/connector/sink/DynamicTableSink$Context;Lorg/apache/flink/table/types/DataType;)Ljava/lang/Object;
@1.12.0
+#listWritableMetadata()Ljava/util/Map;
+#applyWritableMetadata(Ljava/util/List;)V

+###org/apache/flink/table/connector/format/BulkDecodingFormat
@1.12.0
+#applyFilters(Ljava/util/List;)V
@1.15.0
-###org/apache/flink/table/connector/format/BulkDecodingFormat

+###org/apache/flink/table/connector/format/Format
@1.11.0
+#getChangelogMode()Lorg/apache/flink/table/connector/ChangelogMode;

+###org/apache/flink/table/connector/format/DecodingFormat
@1.11.0
+#createRuntimeDecoder(Lorg/apache/flink/table/connector/source/DynamicTableSource$Context;Lorg/apache/flink/table/types/DataType;)Ljava/lang/Object;
@1.12.0
+#listReadableMetadata()Ljava/util/Map;
+#applyReadableMetadata(Ljava/util/List;)V

+###org/apache/flink/table/types/FieldsDataType
@1.9.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;Ljava/util/Map;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/util/Map;)V
+#getFieldDataTypes()Ljava/util/Map;
+#notNull()Lorg/apache/flink/table/types/DataType;
+#nullable()Lorg/apache/flink/table/types/DataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#accept(Lorg/apache/flink/table/types/DataTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;Ljava/util/List;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/util/List;)V
+#getChildren()Ljava/util/List;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;
-#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;Ljava/util/Map;)V
-#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/util/Map;)V
-#getFieldDataTypes()Ljava/util/Map;

+###org/apache/flink/table/types/AbstractDataType
@1.11.0
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;

+###org/apache/flink/table/types/KeyValueDataType
@1.9.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;)V
+#getKeyDataType()Lorg/apache/flink/table/types/DataType;
+#getValueDataType()Lorg/apache/flink/table/types/DataType;
+#notNull()Lorg/apache/flink/table/types/DataType;
+#nullable()Lorg/apache/flink/table/types/DataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#accept(Lorg/apache/flink/table/types/DataTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#getChildren()Ljava/util/List;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;

+###org/apache/flink/table/types/AtomicDataType
@1.9.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;)V
+#notNull()Lorg/apache/flink/table/types/DataType;
+#nullable()Lorg/apache/flink/table/types/DataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#accept(Lorg/apache/flink/table/types/DataTypeVisitor;)Ljava/lang/Object;
@1.11.0
+#getChildren()Ljava/util/List;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;

+###org/apache/flink/table/types/logical/LogicalTypeRoot
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/LogicalTypeRoot;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/LogicalTypeRoot;
+#getFamilies()Ljava/util/Set;

+###org/apache/flink/table/types/logical/DoubleType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/UnresolvedUserDefinedType
@1.9.0
+#<init>(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getCatalog()Ljava/util/Optional;
+#getDatabase()Ljava/util/Optional;
+#getTypeIdentifier()Ljava/lang/String;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
+#<init>(ZLorg/apache/flink/table/catalog/UnresolvedIdentifier;)V
+#<init>(Lorg/apache/flink/table/catalog/UnresolvedIdentifier;)V
+#getUnresolvedIdentifier()Lorg/apache/flink/table/catalog/UnresolvedIdentifier;
-#<init>(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#getCatalog()Ljava/util/Optional;
-#getDatabase()Ljava/util/Optional;
-#getTypeIdentifier()Ljava/lang/String;

+###org/apache/flink/table/types/logical/CharType
@1.9.0
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#ofEmptyLiteral()Lorg/apache/flink/table/types/logical/CharType;
+#getLength()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/RowType
@1.9.0
+#<init>(ZLjava/util/List;)V
+#<init>(Ljava/util/List;)V
+#getFields()Ljava/util/List;
+#getFieldNames()Ljava/util/List;
+#getTypeAt(I)Lorg/apache/flink/table/types/logical/LogicalType;
+#getFieldCount()I
+#getFieldIndex(Ljava/lang/String;)I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#of([Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/RowType;
+#of([Lorg/apache/flink/table/types/logical/LogicalType;[Ljava/lang/String;)Lorg/apache/flink/table/types/logical/RowType;
@1.12.0
+#of(Z[Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/RowType;
+#of(Z[Lorg/apache/flink/table/types/logical/LogicalType;[Ljava/lang/String;)Lorg/apache/flink/table/types/logical/RowType;

+###org/apache/flink/table/types/logical/BigIntType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/StructuredType$StructuredAttribute
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalType;)V
+#getName()Ljava/lang/String;
+#getType()Lorg/apache/flink/table/types/logical/LogicalType;
+#getDescription()Ljava/util/Optional;
+#copy()Lorg/apache/flink/table/types/logical/StructuredType$StructuredAttribute;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.13.0
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/types/logical/DecimalType
@1.9.0
+#<init>(ZII)V
+#<init>(II)V
+#<init>(I)V
+#<init>()V
+#getPrecision()I
+#getScale()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/TinyIntType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/VarBinaryType
@1.9.0
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#ofEmptyLiteral()Lorg/apache/flink/table/types/logical/VarBinaryType;
+#getLength()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/ZonedTimestampType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/TimestampKind;I)V
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#getKind()Lorg/apache/flink/table/types/logical/TimestampKind;
+#getPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/TimeType
@1.9.0
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#getPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/RowType$RowField
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalType;)V
+#getName()Ljava/lang/String;
+#getType()Lorg/apache/flink/table/types/logical/LogicalType;
+#getDescription()Ljava/util/Optional;
+#copy()Lorg/apache/flink/table/types/logical/RowType$RowField;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/SmallIntType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/StructuredType
@1.9.0
+#getAttributes()Ljava/util/List;
+#isInstantiable()Z
+#getComparision()Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;
+#getSuperType()Ljava/util/Optional;
+#getImplementationClass()Ljava/util/Optional;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
+#newBuilder(Lorg/apache/flink/table/catalog/ObjectIdentifier;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#newBuilder(Lorg/apache/flink/table/catalog/ObjectIdentifier;Ljava/lang/Class;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#newBuilder(Ljava/lang/Class;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#asSummaryString()Ljava/lang/String;
@1.14.0
+#getComparison()Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;
-#getComparision()Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;

+###org/apache/flink/table/types/logical/YearMonthIntervalType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;I)V
+#<init>(Lorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;I)V
+#<init>(Lorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;)V
+#getResolution()Lorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;
+#getYearPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/YearMonthIntervalType$YearMonthResolution;

+###org/apache/flink/table/types/logical/SymbolType
@1.9.0
+#<init>(ZLjava/lang/Class;)V
+#<init>(Ljava/lang/Class;)V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#getSymbolClass()Ljava/lang/Class;
@1.15.0
*#<init>(ZLjava/lang/Class;)V[deprecated]
*#<init>(Ljava/lang/Class;)V[deprecated]
+#<init>(Z)V
+#<init>()V
-#getSymbolClass()Ljava/lang/Class;
-#equals(Ljava/lang/Object;)Z
-#hashCode()I

+###org/apache/flink/table/types/logical/LogicalTypeFamily
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/LogicalTypeFamily;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/LogicalTypeFamily;

+###org/apache/flink/table/types/logical/MultisetType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/LogicalType;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;)V
+#getElementType()Lorg/apache/flink/table/types/logical/LogicalType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;

+###org/apache/flink/table/types/logical/FloatType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/LocalZonedTimestampType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/TimestampKind;I)V
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#getKind()Lorg/apache/flink/table/types/logical/TimestampKind;
+#getPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/IntType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/NullType
@1.9.0
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/StructuredType$Builder
@1.9.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Ljava/util/List;)V
+#setNullable(Z)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setDescription(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setFinal(Z)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setInstantiable(Z)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setComparision(Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setSuperType(Lorg/apache/flink/table/types/logical/StructuredType;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#setImplementationClass(Ljava/lang/Class;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#build()Lorg/apache/flink/table/types/logical/StructuredType;
@1.10.0
+#<init>(Ljava/lang/Class;)V
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;)V
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Ljava/lang/Class;)V
+#attributes(Ljava/util/List;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#description(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#comparision(Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
+#superType(Lorg/apache/flink/table/types/logical/StructuredType;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
-#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Ljava/util/List;)V
-#setDescription(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
-#setComparision(Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
-#setSuperType(Lorg/apache/flink/table/types/logical/StructuredType;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
-#setImplementationClass(Ljava/lang/Class;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
@1.14.0
+#comparison(Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;
-#comparision(Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/logical/StructuredType$Builder;

+###org/apache/flink/table/types/logical/DateType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/LogicalType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/LogicalTypeRoot;)V
+#isNullable()Z
+#getTypeRoot()Lorg/apache/flink/table/types/logical/LogicalTypeRoot;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#copy()Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.15.0
+#is(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
+#isAnyOf([Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
+#is(Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Z
@1.16.0
+#isAnyOf([Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Z

+###org/apache/flink/table/types/logical/RawType
@1.10.0
+#<init>(ZLjava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#<init>(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#getOriginatingClass()Ljava/lang/Class;
+#getTypeSerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#restore(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/types/logical/RawType;
+#getSerializerString()Ljava/lang/String;

+###org/apache/flink/table/types/logical/BinaryType
@1.9.0
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#ofEmptyLiteral()Lorg/apache/flink/table/types/logical/BinaryType;
+#getLength()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/VarCharType
@1.9.0
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#ofEmptyLiteral()Lorg/apache/flink/table/types/logical/VarCharType;
+#getLength()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/TimestampKind
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/TimestampKind;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/TimestampKind;

+###org/apache/flink/table/types/logical/DayTimeIntervalType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;II)V
+#<init>(Lorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;II)V
+#<init>(Lorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;)V
+#getResolution()Lorg/apache/flink/table/types/logical/DayTimeIntervalType$DayTimeResolution;
+#getDayPrecision()I
+#getFractionalPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/LogicalTypeVisitor
@1.9.0
+#visit(Lorg/apache/flink/table/types/logical/CharType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/VarCharType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BooleanType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BinaryType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/VarBinaryType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DecimalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TinyIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/SmallIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/IntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BigIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/FloatType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DoubleType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DateType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TimeType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/ZonedTimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/LocalZonedTimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/YearMonthIntervalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DayTimeIntervalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/ArrayType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MultisetType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MapType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/RowType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DistinctType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/StructuredType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/NullType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/AnyType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/SymbolType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;
@1.10.0
+#visit(Lorg/apache/flink/table/types/logical/RawType;)Ljava/lang/Object;
-#visit(Lorg/apache/flink/table/types/logical/AnyType;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/LegacyTypeInformationType
@1.9.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getTypeInformation()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/DistinctType$Builder
@1.9.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/types/logical/LogicalType;)V
+#setDescription(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/DistinctType$Builder;
+#build()Lorg/apache/flink/table/types/logical/DistinctType;
@1.10.0
+#description(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/DistinctType$Builder;
-#setDescription(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/DistinctType$Builder;

+###org/apache/flink/table/types/logical/TimestampType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/TimestampKind;I)V
+#<init>(ZI)V
+#<init>(I)V
+#<init>()V
+#getKind()Lorg/apache/flink/table/types/logical/TimestampKind;
+#getPrecision()I
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/DistinctType
@1.9.0
+#getSourceType()Lorg/apache/flink/table/types/logical/LogicalType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
+#newBuilder(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/DistinctType$Builder;
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
@1.11.0
-#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;

+###org/apache/flink/table/types/logical/BooleanType
@1.9.0
+#<init>(Z)V
+#<init>()V
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/MapType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)V
+#getKeyType()Lorg/apache/flink/table/types/logical/LogicalType;
+#getValueType()Lorg/apache/flink/table/types/logical/LogicalType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/UserDefinedType
@1.9.0
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#isFinal()Z
+#getDescription()Ljava/util/Optional;
+#asSerializableString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
+#getOptionalObjectIdentifier()Ljava/util/Optional;
-#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
@1.11.0
+#getObjectIdentifier()Ljava/util/Optional;
-#getOptionalObjectIdentifier()Ljava/util/Optional;

+###org/apache/flink/table/types/logical/utils/LogicalTypeDefaultVisitor
@1.9.0
+#<init>()V
+#visit(Lorg/apache/flink/table/types/logical/CharType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/VarCharType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BooleanType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BinaryType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/VarBinaryType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DecimalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TinyIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/SmallIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/IntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/BigIntType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/FloatType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DoubleType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DateType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TimeType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/TimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/ZonedTimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/LocalZonedTimestampType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/YearMonthIntervalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DayTimeIntervalType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/ArrayType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MultisetType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MapType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/RowType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DistinctType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/StructuredType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/NullType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/AnyType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/SymbolType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;
@1.10.0
+#visit(Lorg/apache/flink/table/types/logical/RawType;)Ljava/lang/Object;
-#visit(Lorg/apache/flink/table/types/logical/AnyType;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/utils/LogicalTypeDuplicator
@1.9.0
+#<init>()V
+#visit(Lorg/apache/flink/table/types/logical/ArrayType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/MultisetType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/MapType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/RowType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/DistinctType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/StructuredType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#visit(Lorg/apache/flink/table/types/logical/StructuredType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/DistinctType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/RowType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MapType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/MultisetType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/logical/ArrayType;)Ljava/lang/Object;

+###org/apache/flink/table/types/logical/utils/LogicalTypeMerging
@1.12.0
+#findCommonType(Ljava/util/List;)Ljava/util/Optional;
+#findDivisionDecimalType(IIII)Lorg/apache/flink/table/types/logical/DecimalType;
+#findModuloDecimalType(IIII)Lorg/apache/flink/table/types/logical/DecimalType;
+#findMultiplicationDecimalType(IIII)Lorg/apache/flink/table/types/logical/DecimalType;
+#findAdditionDecimalType(IIII)Lorg/apache/flink/table/types/logical/DecimalType;
+#findRoundDecimalType(III)Lorg/apache/flink/table/types/logical/DecimalType;
@1.13.0
+#findAvgAggType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#findSumAggType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/LogicalType;

+###org/apache/flink/table/types/logical/utils/LogicalTypeCasts
@1.9.0
+#supportsImplicitCast(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#supportsExplicitCast(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Z
@1.11.0
+#supportsAvoidingCast(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#supportsAvoidingCast(Ljava/util/List;Ljava/util/List;)Z

+###org/apache/flink/table/types/logical/utils/LogicalTypeUtils
@1.9.0
+#removeTimeAttributes(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/LogicalType;
@1.11.0
+#toInternalConversionClass(Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Class;
@1.12.0
+#toRowType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/RowType;
+#getAtomicName(Ljava/util/List;)Ljava/lang/String;
+#renameRowFields(Lorg/apache/flink/table/types/logical/RowType;Ljava/util/List;)Lorg/apache/flink/table/types/logical/RowType;

+###org/apache/flink/table/types/logical/utils/LogicalTypeParser
@1.9.0
+#<init>()V
+#parse(Ljava/lang/String;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/types/logical/LogicalType;
+#parse(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/LogicalType;
@1.16.0
*#parse(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/LogicalType;[deprecated]

+###org/apache/flink/table/types/logical/utils/LogicalTypeChecks
@1.9.0
+#hasRoot(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
+#hasFamily(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Z
+#isTimeAttribute(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#isRowtimeAttribute(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#isProctimeAttribute(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#getLength(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasLength(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#getPrecision(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasPrecision(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#getScale(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasScale(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#getYearPrecision(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasYearPrecision(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#getDayPrecision(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasDayPrecision(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#getFractionalPrecision(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#hasFractionalPrecision(Lorg/apache/flink/table/types/logical/LogicalType;I)Z
+#isSingleFieldInterval(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#areTypesCompatible(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Z
@1.10.0
+#isCompositeType(Lorg/apache/flink/table/types/logical/LogicalType;)Z
@1.10.2
+#getFieldCount(Lorg/apache/flink/table/types/logical/LogicalType;)I
@1.11.0
+#hasNestedRoot(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
+#getFieldNames(Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/util/List;
+#getFieldTypes(Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/util/List;
-#areTypesCompatible(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Z
@1.12.0
+#hasNested(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/util/function/Predicate;)Z
+#hasLegacyTypes(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#hasWellDefinedString(Lorg/apache/flink/table/types/logical/LogicalType;)Z
-#hasNestedRoot(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
@1.13.0
+#canBeTimeAttributeType(Lorg/apache/flink/table/types/logical/LogicalType;)Z
@1.15.0
-#hasRoot(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Z
-#hasFamily(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Z

+###org/apache/flink/table/types/logical/TypeInformationRawType
@1.10.0
+#<init>(ZLorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>()V
+#getTypeInformation()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#resolve(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/table/types/logical/RawType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/logical/StructuredType$StructuredComparison
@1.14.0
+#values()[Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;
+#isEquality()Z
+#isComparison()Z

+###org/apache/flink/table/types/logical/ArrayType
@1.9.0
+#<init>(ZLorg/apache/flink/table/types/logical/LogicalType;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;)V
+#getElementType()Lorg/apache/flink/table/types/logical/LogicalType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/extraction/ExtractionUtils
@1.11.0
+#collectMethods(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/List;
+#isInvokable(Ljava/lang/reflect/Executable;[Ljava/lang/Class;)Z
+#createMethodSignatureString(Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/String;
+#getStructuredField(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field;
+#getStructuredFieldGetter(Ljava/lang/Class;Ljava/lang/reflect/Field;)Ljava/util/Optional;
+#getStructuredFieldSetter(Ljava/lang/Class;Ljava/lang/reflect/Field;)Ljava/util/Optional;
+#hasInvokableConstructor(Ljava/lang/Class;[Ljava/lang/Class;)Z
+#isStructuredFieldDirectlyReadable(Ljava/lang/reflect/Field;)Z
+#isStructuredFieldDirectlyWritable(Ljava/lang/reflect/Field;)Z
+#isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z
+#primitiveToWrapper(Ljava/lang/Class;)Ljava/lang/Class;
+#wrapperToPrimitive(Ljava/lang/Class;)Ljava/lang/Class;
@1.12.0
+#validateStructuredClass(Ljava/lang/Class;)V
@1.13.0
+#extractSimpleGeneric(Ljava/lang/Class;Ljava/lang/Class;I)Ljava/util/Optional;
+#extractAssigningConstructor(Ljava/lang/Class;Ljava/util/List;)Lorg/apache/flink/table/types/extraction/ExtractionUtils$AssigningConstructor;
@1.15.0
+#classForName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;

+###org/apache/flink/table/types/extraction/DataTypeExtractor
@1.10.0
+#extractFromType(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromType(Lorg/apache/flink/table/catalog/DataTypeLookup;Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromGeneric(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;ILjava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromMethodParameter(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;Ljava/lang/reflect/Method;I)Lorg/apache/flink/table/types/DataType;
+#extractFromMethodOutput(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;Ljava/lang/reflect/Method;)Lorg/apache/flink/table/types/DataType;
@1.11.0
+#extractFromType(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromType(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/table/types/extraction/DataTypeTemplate;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromGeneric(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;ILjava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
+#extractFromMethodParameter(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;Ljava/lang/reflect/Method;I)Lorg/apache/flink/table/types/DataType;
+#extractFromMethodOutput(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;Ljava/lang/reflect/Method;)Lorg/apache/flink/table/types/DataType;
-#extractFromType(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
-#extractFromType(Lorg/apache/flink/table/catalog/DataTypeLookup;Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;Ljava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
-#extractFromGeneric(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;ILjava/lang/reflect/Type;)Lorg/apache/flink/table/types/DataType;
-#extractFromMethodParameter(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;Ljava/lang/reflect/Method;I)Lorg/apache/flink/table/types/DataType;
-#extractFromMethodOutput(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;Ljava/lang/reflect/Method;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/extraction/TypeInferenceExtractor
@1.11.0
+#<init>()V
+#forScalarFunction(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/TypeInference;
+#forAggregateFunction(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/TypeInference;
+#forTableFunction(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/TypeInference;
+#forTableAggregateFunction(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/TypeInference;
+#forAsyncTableFunction(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/types/extraction/ExtractionUtils$AssigningConstructor
@1.13.0

+###org/apache/flink/table/types/inference/ArgumentTypeStrategy
@1.10.0
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;

+###org/apache/flink/table/types/inference/strategies/AnyArgumentTypeStrategy
@1.10.0
+#<init>()V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/CompositeArgumentTypeStrategy
@1.12.0
+#<init>()V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;

+###org/apache/flink/table/types/inference/strategies/ExplicitArgumentTypeStrategy
@1.10.0
+#<init>(Lorg/apache/flink/table/types/DataType;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/SymbolArgumentTypeStrategy
@1.14.0
+#<init>(Ljava/lang/Class;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.16.0
+#<init>(Ljava/lang/Class;Ljava/util/Set;)V

+###org/apache/flink/table/types/inference/strategies/SequenceInputTypeStrategy
@1.10.0
+#<init>(Ljava/util/List;Ljava/util/List;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/FamilyArgumentTypeStrategy
@1.11.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalTypeFamily;Ljava/lang/Boolean;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/UseArgumentTypeStrategy
@1.11.0
+#<init>(I)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
@1.16.0
-###org/apache/flink/table/types/inference/strategies/UseArgumentTypeStrategy

+###org/apache/flink/table/types/inference/strategies/OrInputTypeStrategy
@1.10.0
+#<init>(Ljava/util/List;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/SubsequenceInputTypeStrategy
@1.12.0
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;

+###org/apache/flink/table/types/inference/strategies/VaryingStringTypeStrategy
@1.12.0
+#<init>(Lorg/apache/flink/table/types/inference/TypeStrategy;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/CommonInputTypeStrategy
@1.12.0
+#<init>(Lorg/apache/flink/table/types/inference/ArgumentCount;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;

+###org/apache/flink/table/types/inference/strategies/TypeLiteralArgumentTypeStrategy
@1.14.0
+#<init>()V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;

+###org/apache/flink/table/types/inference/strategies/CommonArgumentTypeStrategy
@1.13.0
+#<init>(Z)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;

+###org/apache/flink/table/types/inference/strategies/ComparableTypeStrategy
@1.12.0
+#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.14.0
+#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;)V
-#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)V

+###org/apache/flink/table/types/inference/strategies/ForceNullableTypeStrategy
@1.14.0
+#<init>(Lorg/apache/flink/table/types/inference/TypeStrategy;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;

+###org/apache/flink/table/types/inference/strategies/MissingTypeStrategy
@1.9.0
+#<init>()V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
@1.10.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/OutputArgumentTypeStrategy
@1.10.0
+#<init>()V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/VaryingSequenceInputTypeStrategy
@1.10.0
+#<init>(Ljava/util/List;Ljava/util/List;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/AndArgumentTypeStrategy
@1.10.0
+#<init>(Ljava/util/List;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/OrArgumentTypeStrategy
@1.10.0
+#<init>(Ljava/util/List;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/WildcardInputTypeStrategy
@1.10.0
+#<init>()V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#<init>(Lorg/apache/flink/table/types/inference/ArgumentCount;)V

+###org/apache/flink/table/types/inference/strategies/MappingTypeStrategy
@1.10.0
+#<init>(Ljava/util/Map;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/LiteralArgumentTypeStrategy
@1.10.0
+#<init>(Z)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/ExplicitTypeStrategy
@1.10.0
+#<init>(Lorg/apache/flink/table/types/DataType;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/RootArgumentTypeStrategy
@1.11.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;Ljava/lang/Boolean;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/SpecificInputTypeStrategies
@1.14.0

+###org/apache/flink/table/types/inference/strategies/ConstraintArgumentTypeStrategy
@1.12.0
+#<init>(Ljava/lang/String;Ljava/util/function/Function;)V
+#inferArgumentType(Lorg/apache/flink/table/types/inference/CallContext;IZ)Ljava/util/Optional;
+#getExpectedArgument(Lorg/apache/flink/table/functions/FunctionDefinition;I)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.16.0
+#<init>(Ljava/lang/String;Ljava/util/function/Predicate;)V
-#<init>(Ljava/lang/String;Ljava/util/function/Function;)V

+###org/apache/flink/table/types/inference/strategies/FirstTypeStrategy
@1.12.0
+#<init>(Ljava/util/List;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/SubsequenceInputTypeStrategy$SubsequenceStrategyBuilder
@1.12.0
+#<init>()V
+#argument(Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/strategies/SubsequenceInputTypeStrategy$SubsequenceStrategyBuilder;
+#subsequence(Lorg/apache/flink/table/types/inference/InputTypeStrategy;)Lorg/apache/flink/table/types/inference/strategies/SubsequenceInputTypeStrategy$SubsequenceStrategyBuilder;
+#finishWithVarying(Lorg/apache/flink/table/types/inference/InputTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#finish()Lorg/apache/flink/table/types/inference/InputTypeStrategy;

+###org/apache/flink/table/types/inference/strategies/CommonTypeStrategy
@1.12.0
+#<init>()V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/SpecificTypeStrategies
@1.14.0

+###org/apache/flink/table/types/inference/strategies/MatchFamilyTypeStrategy
@1.12.0
+#<init>(ILorg/apache/flink/table/types/logical/LogicalTypeFamily;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/NullableIfArgsTypeStrategy
@1.14.0
+#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.15.0
+#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;Z)V
-#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)V

+###org/apache/flink/table/types/inference/TypeInferenceUtil$SurroundingInfo
@1.10.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;II)V
@1.13.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;IIZ)V
-#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;II)V
@1.13.1
+#of(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;IIZ)Lorg/apache/flink/table/types/inference/TypeInferenceUtil$SurroundingInfo;
+#of(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/TypeInferenceUtil$SurroundingInfo;
+#inferOutputType(Lorg/apache/flink/table/catalog/DataTypeFactory;)Ljava/util/Optional;
-#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;IIZ)V

+###org/apache/flink/table/types/inference/TypeStrategies
@1.9.0
@1.10.0
+#explicit(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#mapping(Ljava/util/Map;)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.11.0
+#argument(I)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.12.0
+#first([Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#matchFamily(ILorg/apache/flink/table/types/logical/LogicalTypeFamily;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#nullable(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#nullable(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#varyingString(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.13.0
+#aggArg0(Ljava/util/function/Function;Z)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.14.0
+#forceNullable(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#nullableIfArgs(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#nullableIfArgs(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
-#nullable(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
-#nullable(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.15.0
+#nullableIfAllArgs(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
+#nullableIfAllArgs(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeStrategy;
@1.16.0
+#argument(ILjava/util/function/Function;)Lorg/apache/flink/table/types/inference/TypeStrategy;

+###org/apache/flink/table/types/inference/InputTypeStrategies
@1.10.0
+#sequence([Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#sequence([Ljava/lang/String;[Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#varyingSequence([Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#varyingSequence([Ljava/lang/String;[Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#explicitSequence([Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#explicitSequence([Ljava/lang/String;[Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#or([Lorg/apache/flink/table/types/inference/InputTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#explicit(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/strategies/ExplicitArgumentTypeStrategy;
+#and([Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/strategies/AndArgumentTypeStrategy;
+#or([Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/strategies/OrArgumentTypeStrategy;
@1.11.0
+#wildcardWithCount(Lorg/apache/flink/table/types/inference/ArgumentCount;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#logical(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Lorg/apache/flink/table/types/inference/strategies/RootArgumentTypeStrategy;
+#logical(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;Z)Lorg/apache/flink/table/types/inference/strategies/RootArgumentTypeStrategy;
+#logical(Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Lorg/apache/flink/table/types/inference/strategies/FamilyArgumentTypeStrategy;
+#logical(Lorg/apache/flink/table/types/logical/LogicalTypeFamily;Z)Lorg/apache/flink/table/types/inference/strategies/FamilyArgumentTypeStrategy;
@1.12.0
+#compositeSequence()Lorg/apache/flink/table/types/inference/strategies/SubsequenceInputTypeStrategy$SubsequenceStrategyBuilder;
+#comparable(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#constraint(Ljava/lang/String;Ljava/util/function/Function;)Lorg/apache/flink/table/types/inference/strategies/ConstraintArgumentTypeStrategy;
+#commonType(I)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
@1.14.0
+#comparable(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparison;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#symbol(Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/strategies/SymbolArgumentTypeStrategy;
-#comparable(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
@1.15.0
+#repeatingSequence([Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
@1.16.0
+#sequence(Ljava/util/List;Ljava/util/List;)Lorg/apache/flink/table/types/inference/InputTypeStrategy;
+#constraint(Ljava/lang/String;Ljava/util/function/Predicate;)Lorg/apache/flink/table/types/inference/strategies/ConstraintArgumentTypeStrategy;
+#symbol(Ljava/lang/Enum;[Ljava/lang/Enum;)Lorg/apache/flink/table/types/inference/strategies/SymbolArgumentTypeStrategy;
-#constraint(Ljava/lang/String;Ljava/util/function/Function;)Lorg/apache/flink/table/types/inference/strategies/ConstraintArgumentTypeStrategy;

+###org/apache/flink/table/types/inference/ConstantArgumentCount
@1.10.0
+#of(I)Lorg/apache/flink/table/types/inference/ArgumentCount;
+#between(II)Lorg/apache/flink/table/types/inference/ArgumentCount;
+#from(I)Lorg/apache/flink/table/types/inference/ArgumentCount;
+#any()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#isValidCount(I)Z
+#getMinCount()Ljava/util/Optional;
+#getMaxCount()Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.12.0
+#of(I)Lorg/apache/flink/table/types/inference/ConstantArgumentCount;
+#between(II)Lorg/apache/flink/table/types/inference/ConstantArgumentCount;
+#from(I)Lorg/apache/flink/table/types/inference/ConstantArgumentCount;
+#to(I)Lorg/apache/flink/table/types/inference/ConstantArgumentCount;
+#any()Lorg/apache/flink/table/types/inference/ConstantArgumentCount;
-#of(I)Lorg/apache/flink/table/types/inference/ArgumentCount;
-#between(II)Lorg/apache/flink/table/types/inference/ArgumentCount;
-#from(I)Lorg/apache/flink/table/types/inference/ArgumentCount;
-#any()Lorg/apache/flink/table/types/inference/ArgumentCount;

+###org/apache/flink/table/types/inference/CallContext
@1.9.0
+#getArgumentDataTypes()Ljava/util/List;
@1.10.0
+#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#isArgumentLiteral(I)Z
+#isArgumentNull(I)Z
+#getArgumentValue(ILjava/lang/Class;)Ljava/util/Optional;
+#getName()Ljava/lang/String;
+#getOutputDataType()Ljava/util/Optional;
+#newValidationError(Ljava/lang/String;[Ljava/lang/Object;)Lorg/apache/flink/table/api/ValidationException;
@1.11.0
+#getDataTypeFactory()Lorg/apache/flink/table/catalog/DataTypeFactory;
-#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
@1.13.0
+#isGroupedAggregation()Z
@1.16.0
+#fail(ZLjava/lang/String;[Ljava/lang/Object;)Ljava/util/Optional;

+###org/apache/flink/table/types/inference/TypeInference
@1.9.0
+#getInputTypeValidator()Lorg/apache/flink/table/types/inference/InputTypeValidator;
+#getAccumulatorTypeStrategy()Ljava/util/Optional;
+#getOutputTypeStrategy()Lorg/apache/flink/table/types/inference/TypeStrategy;
+#getArgumentNames()Ljava/util/Optional;
+#getArgumentTypes()Ljava/util/Optional;
@1.10.0
+#newBuilder()Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#getNamedArguments()Ljava/util/Optional;
+#getTypedArguments()Ljava/util/Optional;
+#getInputTypeStrategy()Lorg/apache/flink/table/types/inference/InputTypeStrategy;
-#getInputTypeValidator()Lorg/apache/flink/table/types/inference/InputTypeValidator;
-#getArgumentNames()Ljava/util/Optional;
-#getArgumentTypes()Ljava/util/Optional;

+###org/apache/flink/table/types/inference/TypeTransformation
@1.9.0
+#transform(Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
@1.10.0
+#transform(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
-#transform(Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
@1.13.0
+#transform(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/inference/TypeInferenceUtil
@1.9.0
+#runTypeInference(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;)Lorg/apache/flink/table/types/inference/TypeInferenceUtil$Result;
@1.10.0
+#generateSignature(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;)Ljava/lang/String;
+#runTypeInference(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/inference/TypeInferenceUtil$SurroundingInfo;)Lorg/apache/flink/table/types/inference/TypeInferenceUtil$Result;
-#runTypeInference(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;)Lorg/apache/flink/table/types/inference/TypeInferenceUtil$Result;
@1.11.0
+#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/utils/AdaptedCallContext;
+#inferOutputType(Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/DataType;
+#generateSignature(Lorg/apache/flink/table/types/inference/TypeInference;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/lang/String;
+#createInvalidInputException(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/api/ValidationException;)Lorg/apache/flink/table/api/ValidationException;
+#createInvalidCallException(Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/api/ValidationException;)Lorg/apache/flink/table/api/ValidationException;
+#createUnexpectedException(Lorg/apache/flink/table/types/inference/CallContext;Ljava/lang/Throwable;)Lorg/apache/flink/table/api/TableException;
-#generateSignature(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/TypeInference;)Ljava/lang/String;
@1.11.4
+#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/CallContext;
-#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/utils/AdaptedCallContext;
@1.12.0
+#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/utils/AdaptedCallContext;
-#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/CallContext;
@1.12.3
+#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/CallContext;
-#adaptArguments(Lorg/apache/flink/table/types/inference/TypeInference;Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/utils/AdaptedCallContext;

+###org/apache/flink/table/types/inference/TypeTransformations
@1.10.0
+#<init>()V
+#timeToSqlTypes()Lorg/apache/flink/table/types/inference/TypeTransformation;
+#legacyDecimalToDefaultDecimal()Lorg/apache/flink/table/types/inference/TypeTransformation;
+#toNullable()Lorg/apache/flink/table/types/inference/TypeTransformation;
@1.10.1
+#legacyRawToTypeInfoRaw()Lorg/apache/flink/table/types/inference/TypeTransformation;
@1.11.0
-#<init>()V
@1.13.0
+#legacyToNonLegacy()Lorg/apache/flink/table/types/inference/TypeTransformation;
-#legacyDecimalToDefaultDecimal()Lorg/apache/flink/table/types/inference/TypeTransformation;

+###org/apache/flink/table/types/inference/Signature$Argument
@1.9.0
+#of(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#of(Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#getName()Ljava/util/Optional;
+#getType()Ljava/lang/String;
@1.16.0
+#of(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofVarying(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#of(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofVarying(Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/String;Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/String;Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroupVarying(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Lorg/apache/flink/table/types/logical/LogicalTypeRoot;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Lorg/apache/flink/table/types/logical/LogicalTypeFamily;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroup(Ljava/lang/Class;)Lorg/apache/flink/table/types/inference/Signature$Argument;
+#ofGroupVarying(Ljava/lang/String;)Lorg/apache/flink/table/types/inference/Signature$Argument;

+###org/apache/flink/table/types/inference/ArgumentCount
@1.9.0
+#isValidCount(I)Z
+#getMinCount()Ljava/util/Optional;
+#getMaxCount()Ljava/util/Optional;

+###org/apache/flink/table/types/inference/transforms/DataTypeConversionClassTransformation
@1.10.0
+#<init>(Ljava/util/Map;)V
+#transform(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/inference/transforms/LegacyToNonLegacyTransformation
@1.13.0
+#<init>()V
+#transform(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#transform(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/inference/transforms/LegacyRawTypeTransformation
@1.10.1
+#<init>()V
+#transform(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/inference/InputTypeStrategy
@1.10.0
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;

+###org/apache/flink/table/types/inference/TypeInferenceUtil$Result
@1.9.0
+#<init>(Ljava/util/List;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;)V
+#getExpectedArgumentTypes()Ljava/util/List;
+#getAccumulatorDataType()Ljava/util/Optional;
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/inference/utils/AdaptedCallContext
@1.10.0
+#<init>(Lorg/apache/flink/table/types/inference/CallContext;Lorg/apache/flink/table/types/DataType;)V
+#setExpectedArguments(Ljava/util/List;)V
+#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#isArgumentLiteral(I)Z
+#isArgumentNull(I)Z
+#getArgumentValue(ILjava/lang/Class;)Ljava/util/Optional;
+#getName()Ljava/lang/String;
+#getArgumentDataTypes()Ljava/util/List;
+#getOutputDataType()Ljava/util/Optional;
@1.11.0
+#getDataTypeFactory()Lorg/apache/flink/table/catalog/DataTypeFactory;
-#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
@1.13.0
+#isGroupedAggregation()Z

+###org/apache/flink/table/types/inference/utils/UnknownCallContext
@1.10.0
+#<init>(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;I)V
+#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#isArgumentLiteral(I)Z
+#isArgumentNull(I)Z
+#getArgumentValue(ILjava/lang/Class;)Ljava/util/Optional;
+#getName()Ljava/lang/String;
+#getArgumentDataTypes()Ljava/util/List;
+#getOutputDataType()Ljava/util/Optional;
@1.11.0
+#<init>(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;I)V
+#getDataTypeFactory()Lorg/apache/flink/table/catalog/DataTypeFactory;
-#<init>(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;I)V
-#getDataTypeLookup()Lorg/apache/flink/table/catalog/DataTypeLookup;
@1.13.0
+#<init>(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;IZ)V
+#isGroupedAggregation()Z
-#<init>(Lorg/apache/flink/table/catalog/DataTypeFactory;Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;I)V

+###org/apache/flink/table/types/inference/Signature
@1.9.0
+#of([Lorg/apache/flink/table/types/inference/Signature$Argument;)Lorg/apache/flink/table/types/inference/Signature;
+#of(Ljava/util/List;)Lorg/apache/flink/table/types/inference/Signature;
+#getArguments()Ljava/util/List;

+###org/apache/flink/table/types/inference/TypeInference$Builder
@1.9.0
+#<init>()V
+#inputTypeValidator(Lorg/apache/flink/table/types/inference/InputTypeValidator;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#accumulatorTypeStrategy(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#outputTypeStrategy(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#namedArguments(Ljava/util/List;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#typedArguments(Ljava/util/List;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#build()Lorg/apache/flink/table/types/inference/TypeInference;
@1.10.0
+#inputTypeStrategy(Lorg/apache/flink/table/types/inference/InputTypeStrategy;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
-#inputTypeValidator(Lorg/apache/flink/table/types/inference/InputTypeValidator;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
@1.11.0
+#namedArguments([Ljava/lang/String;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;
+#typedArguments([Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/inference/TypeInference$Builder;

+###org/apache/flink/table/types/inference/TypeStrategy
@1.9.0
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;

+###org/apache/flink/table/types/CollectionDataType
@1.9.0
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/Class;Lorg/apache/flink/table/types/DataType;)V
+#<init>(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/DataType;)V
+#getElementDataType()Lorg/apache/flink/table/types/DataType;
+#notNull()Lorg/apache/flink/table/types/DataType;
+#nullable()Lorg/apache/flink/table/types/DataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#accept(Lorg/apache/flink/table/types/DataTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#getChildren()Ljava/util/List;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;

+###org/apache/flink/table/types/DataTypeQueryable
@1.12.0
+#getDataType()Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/UnresolvedDataType
@1.11.0
+#<init>(Ljava/util/function/Supplier;Ljava/util/function/Function;)V
+#toDataType(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/DataType;
+#notNull()Lorg/apache/flink/table/types/UnresolvedDataType;
+#nullable()Lorg/apache/flink/table/types/UnresolvedDataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#toString()Ljava/lang/String;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/AbstractDataType;
+#nullable()Lorg/apache/flink/table/types/AbstractDataType;
+#notNull()Lorg/apache/flink/table/types/AbstractDataType;

+###org/apache/flink/table/types/DataTypeVisitor
@1.9.0
+#visit(Lorg/apache/flink/table/types/AtomicDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/CollectionDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/FieldsDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/KeyValueDataType;)Ljava/lang/Object;

+###org/apache/flink/table/types/utils/DataTypeUtils
@1.9.0
+#replaceLogicalType(Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/DataType;
@1.10.0
+#transform(Lorg/apache/flink/table/types/DataType;[Lorg/apache/flink/table/types/inference/TypeTransformation;)Lorg/apache/flink/table/types/DataType;
+#expandCompositeTypeToSchema(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableSchema;
@1.11.0
+#isInternal(Lorg/apache/flink/table/types/DataType;)Z
@1.12.0
+#projectRow(Lorg/apache/flink/table/types/DataType;[[I)Lorg/apache/flink/table/types/DataType;
+#projectRow(Lorg/apache/flink/table/types/DataType;[I)Lorg/apache/flink/table/types/DataType;
+#stripRowPrefix(Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/types/DataType;
+#appendRowFields(Lorg/apache/flink/table/types/DataType;Ljava/util/List;)Lorg/apache/flink/table/types/DataType;
+#toInternalDataType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/DataType;
+#getField(Lorg/apache/flink/table/types/DataType;I)Ljava/util/Optional;
+#getField(Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Ljava/util/Optional;
+#flattenToDataTypes(Lorg/apache/flink/table/types/DataType;)Ljava/util/List;
+#flattenToNames(Lorg/apache/flink/table/types/DataType;)Ljava/util/List;
+#flattenToNames(Lorg/apache/flink/table/types/DataType;Ljava/util/List;)Ljava/util/List;
+#validateInputDataType(Lorg/apache/flink/table/types/DataType;)V
+#validateOutputDataType(Lorg/apache/flink/table/types/DataType;)V
@1.13.0
+#toInternalDataType(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#removeTimeAttribute(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#transform(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/table/types/DataType;[Lorg/apache/flink/table/types/inference/TypeTransformation;)Lorg/apache/flink/table/types/DataType;
+#expandCompositeTypeToSchema(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#createProctimeDataType()Lorg/apache/flink/table/types/DataType;
-#expandCompositeTypeToSchema(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableSchema;
@1.15.0
*#projectRow(Lorg/apache/flink/table/types/DataType;[[I)Lorg/apache/flink/table/types/DataType;[deprecated]
*#projectRow(Lorg/apache/flink/table/types/DataType;[I)Lorg/apache/flink/table/types/DataType;[deprecated]
+#isInternal(Lorg/apache/flink/table/types/DataType;Z)Z

+###org/apache/flink/table/types/utils/TypeInfoDataTypeConverter
@1.13.0
+#<init>()V
+#toDataType(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
+#toDataType(Lorg/apache/flink/table/catalog/DataTypeFactory;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Z)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter
@1.9.0
+#toDataType(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
+#toLegacyTypeInfo(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/types/utils/TypeConversions
@1.9.0
+#fromLegacyInfoToDataType(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
+#fromLegacyInfoToDataType([Lorg/apache/flink/api/common/typeinfo/TypeInformation;)[Lorg/apache/flink/table/types/DataType;
+#fromDataTypeToLegacyInfo(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#fromDataTypeToLegacyInfo([Lorg/apache/flink/table/types/DataType;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#fromClassToDataType(Ljava/lang/Class;)Ljava/util/Optional;
+#fromLogicalToDataType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/DataType;
+#fromLogicalToDataType([Lorg/apache/flink/table/types/logical/LogicalType;)[Lorg/apache/flink/table/types/DataType;
+#fromDataToLogicalType(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#fromDataToLogicalType([Lorg/apache/flink/table/types/DataType;)[Lorg/apache/flink/table/types/logical/LogicalType;
@1.13.0
*#fromLegacyInfoToDataType(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;[deprecated]
*#fromLegacyInfoToDataType([Lorg/apache/flink/api/common/typeinfo/TypeInformation;)[Lorg/apache/flink/table/types/DataType;[deprecated]
*#fromDataTypeToLegacyInfo(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
*#fromDataTypeToLegacyInfo([Lorg/apache/flink/table/types/DataType;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]

+###org/apache/flink/table/types/utils/DataTypeDefaultVisitor
@1.9.0
+#<init>()V
+#visit(Lorg/apache/flink/table/types/AtomicDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/CollectionDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/FieldsDataType;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/types/KeyValueDataType;)Ljava/lang/Object;

+###org/apache/flink/table/types/utils/LogicalTypeDataTypeConverter
@1.9.0
+#toDataType(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/DataType;
+#toLogicalType(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/logical/LogicalType;

+###org/apache/flink/table/types/utils/ClassDataTypeConverter
@1.9.0
+#extractDataType(Ljava/lang/Class;)Ljava/util/Optional;

+###org/apache/flink/table/types/utils/ValueDataTypeConverter
@1.9.0
+#extractDataType(Ljava/lang/Object;)Ljava/util/Optional;

+###org/apache/flink/table/types/DataType
@1.9.0
+#getLogicalType()Lorg/apache/flink/table/types/logical/LogicalType;
+#getConversionClass()Ljava/lang/Class;
+#notNull()Lorg/apache/flink/table/types/DataType;
+#nullable()Lorg/apache/flink/table/types/DataType;
+#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#accept(Lorg/apache/flink/table/types/DataTypeVisitor;)Ljava/lang/Object;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
+#getChildren()Ljava/util/List;
-#notNull()Lorg/apache/flink/table/types/DataType;
-#nullable()Lorg/apache/flink/table/types/DataType;
-#bridgedTo(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
@1.15.0
+#toInternal()Lorg/apache/flink/table/types/DataType;
+#getFieldNames(Lorg/apache/flink/table/types/DataType;)Ljava/util/List;
+#getFieldDataTypes(Lorg/apache/flink/table/types/DataType;)Ljava/util/List;
+#getFieldCount(Lorg/apache/flink/table/types/DataType;)I
+#getFields(Lorg/apache/flink/table/types/DataType;)Ljava/util/List;

+###org/apache/flink/table/dataview/NullAwareMapSerializerSnapshot
@1.9.2
+#<init>()V
+#<init>(Lorg/apache/flink/table/dataview/NullAwareMapSerializer;)V
+#getCurrentOuterSnapshotVersion()I

+###org/apache/flink/table/dataview/ListViewTypeInfo
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Z)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getElementType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#isNullSerializer()Z
+#setNullSerializer(Z)V
+#isBasicType()Z
+#isTupleType()Z
+#getArity()I
+#getTotalFields()I
+#getTypeClass()Ljava/lang/Class;
+#isKeyType()Z
+#createSerializer(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#canEqual(Ljava/lang/Object;)Z

+###org/apache/flink/table/dataview/ListViewSerializerSnapshot
@1.9.0
+#<init>()V
+#<init>(Lorg/apache/flink/table/dataview/ListViewSerializer;)V
+#getCurrentOuterSnapshotVersion()I

+###org/apache/flink/table/dataview/NullSerializer$NullSerializerSnapshot
@1.9.2
+#<init>()V

+###org/apache/flink/table/dataview/MapViewTypeInfo
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;ZZ)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getKeyType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getValueType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#isNullAware()Z
+#isNullSerializer()Z
+#setNullSerializer(Z)V
+#isBasicType()Z
+#isTupleType()Z
+#getArity()I
+#getTotalFields()I
+#getTypeClass()Ljava/lang/Class;
+#isKeyType()Z
+#createSerializer(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#canEqual(Ljava/lang/Object;)Z

+###org/apache/flink/table/dataview/MapViewSerializerSnapshot
@1.9.0
+#<init>()V
+#<init>(Lorg/apache/flink/table/dataview/MapViewSerializer;)V
+#getCurrentOuterSnapshotVersion()I

+###org/apache/flink/table/dataview/ListViewTypeInfoFactory
@1.9.0
+#<init>()V
+#createTypeInfo(Ljava/lang/reflect/Type;Ljava/util/Map;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/dataview/MapViewTypeInfoFactory
@1.9.0
+#<init>()V
+#createTypeInfo(Ljava/lang/reflect/Type;Ljava/util/Map;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/dataview/MapViewSerializer
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#isImmutableType()Z
+#duplicate()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#createInstance()Lorg/apache/flink/table/api/dataview/MapView;
+#copy(Lorg/apache/flink/table/api/dataview/MapView;)Lorg/apache/flink/table/api/dataview/MapView;
+#copy(Lorg/apache/flink/table/api/dataview/MapView;Lorg/apache/flink/table/api/dataview/MapView;)Lorg/apache/flink/table/api/dataview/MapView;
+#getLength()I
+#serialize(Lorg/apache/flink/table/api/dataview/MapView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Lorg/apache/flink/table/api/dataview/MapView;
+#deserialize(Lorg/apache/flink/table/api/dataview/MapView;Lorg/apache/flink/core/memory/DataInputView;)Lorg/apache/flink/table/api/dataview/MapView;
+#copy(Lorg/apache/flink/core/memory/DataInputView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#snapshotConfiguration()Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
+#transformLegacySerializerSnapshot(Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;)Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
+#getMapSerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#deserialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#serialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataOutputView;)V
+#copy(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#copy(Ljava/lang/Object;)Ljava/lang/Object;
+#createInstance()Ljava/lang/Object;

+###org/apache/flink/table/dataview/NullAwareMapSerializer
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeutils/TypeSerializer;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#getKeySerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#getValueSerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#isImmutableType()Z
+#duplicate()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#createInstance()Ljava/util/Map;
+#copy(Ljava/util/Map;)Ljava/util/Map;
+#copy(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
+#getLength()I
+#serialize(Ljava/util/Map;Lorg/apache/flink/core/memory/DataOutputView;)V
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Ljava/util/Map;
+#deserialize(Ljava/util/Map;Lorg/apache/flink/core/memory/DataInputView;)Ljava/util/Map;
+#copy(Lorg/apache/flink/core/memory/DataInputView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#snapshotConfiguration()Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
+#deserialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#serialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataOutputView;)V
+#copy(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#copy(Ljava/lang/Object;)Ljava/lang/Object;
+#createInstance()Ljava/lang/Object;

+###org/apache/flink/table/dataview/NullSerializer
@1.9.0
+#<init>()V
+#isImmutableType()Z
+#createInstance()Ljava/lang/Object;
+#copy(Ljava/lang/Object;)Ljava/lang/Object;
+#copy(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#getLength()I
+#serialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataOutputView;)V
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#deserialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#copy(Lorg/apache/flink/core/memory/DataInputView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#snapshotConfiguration()Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
@1.9.2
-#<init>()V

+###org/apache/flink/table/dataview/ListViewSerializer
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#isImmutableType()Z
+#duplicate()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#createInstance()Lorg/apache/flink/table/api/dataview/ListView;
+#copy(Lorg/apache/flink/table/api/dataview/ListView;)Lorg/apache/flink/table/api/dataview/ListView;
+#copy(Lorg/apache/flink/table/api/dataview/ListView;Lorg/apache/flink/table/api/dataview/ListView;)Lorg/apache/flink/table/api/dataview/ListView;
+#getLength()I
+#serialize(Lorg/apache/flink/table/api/dataview/ListView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Lorg/apache/flink/table/api/dataview/ListView;
+#deserialize(Lorg/apache/flink/table/api/dataview/ListView;Lorg/apache/flink/core/memory/DataInputView;)Lorg/apache/flink/table/api/dataview/ListView;
+#copy(Lorg/apache/flink/core/memory/DataInputView;Lorg/apache/flink/core/memory/DataOutputView;)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#snapshotConfiguration()Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
+#transformLegacySerializerSnapshot(Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;)Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;
+#getListSerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#deserialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#deserialize(Lorg/apache/flink/core/memory/DataInputView;)Ljava/lang/Object;
+#serialize(Ljava/lang/Object;Lorg/apache/flink/core/memory/DataOutputView;)V
+#copy(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#copy(Ljava/lang/Object;)Ljava/lang/Object;
+#createInstance()Ljava/lang/Object;

+###org/apache/flink/table/api/Schema$Builder
@1.13.0
+#fromSchema(Lorg/apache/flink/table/api/Schema;)Lorg/apache/flink/table/api/Schema$Builder;
+#fromResolvedSchema(Lorg/apache/flink/table/catalog/ResolvedSchema;)Lorg/apache/flink/table/api/Schema$Builder;
+#fromRowDataType(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/Schema$Builder;
+#fromFields([Ljava/lang/String;[Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/api/Schema$Builder;
+#fromFields(Ljava/util/List;Ljava/util/List;)Lorg/apache/flink/table/api/Schema$Builder;
+#fromColumns(Ljava/util/List;)Lorg/apache/flink/table/api/Schema$Builder;
+#column(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/api/Schema$Builder;
+#column(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByExpression(Ljava/lang/String;Lorg/apache/flink/table/expressions/Expression;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByExpression(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;Z)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;Ljava/lang/String;Z)Lorg/apache/flink/table/api/Schema$Builder;
+#columnByMetadata(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/flink/table/api/Schema$Builder;
+#watermark(Ljava/lang/String;Lorg/apache/flink/table/expressions/Expression;)Lorg/apache/flink/table/api/Schema$Builder;
+#watermark(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#primaryKey([Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#primaryKey(Ljava/util/List;)Lorg/apache/flink/table/api/Schema$Builder;
+#primaryKeyNamed(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;
+#primaryKeyNamed(Ljava/lang/String;Ljava/util/List;)Lorg/apache/flink/table/api/Schema$Builder;
+#build()Lorg/apache/flink/table/api/Schema;
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$Builder;

+###org/apache/flink/table/api/CatalogNotExistException
@1.9.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/apache/flink/table/api/NoMatchingTableFactoryException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V
+#getMessage()Ljava/lang/String;
@1.10.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V
-#<init>(Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V

+###org/apache/flink/table/api/JsonExistsOnError
@1.14.0
+#values()[Lorg/apache/flink/table/api/JsonExistsOnError;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonExistsOnError;

+###org/apache/flink/table/api/TableSchema
@1.7.0
+#<init>([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#copy()Lorg/apache/flink/table/api/TableSchema;
+#getFieldTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getFieldType(I)Ljava/util/Optional;
+#getFieldType(Ljava/lang/String;)Ljava/util/Optional;
+#getFieldCount()I
+#getFieldNames()[Ljava/lang/String;
+#getFieldName(I)Ljava/util/Optional;
+#getTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getColumnNames()[Ljava/lang/String;[deprecated]
+#toRowType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#fromTypeInfo(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/api/TableSchema;
+#builder()Lorg/apache/flink/table/api/TableSchema$Builder;
@1.9.0
*#<init>([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V[deprecated]
+#getFieldDataTypes()[Lorg/apache/flink/table/types/DataType;
*#getFieldTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getFieldDataType(I)Ljava/util/Optional;
*#getFieldType(I)Ljava/util/Optional;[deprecated]
+#getFieldDataType(Ljava/lang/String;)Ljava/util/Optional;
*#getFieldType(Ljava/lang/String;)Ljava/util/Optional;[deprecated]
+#toRowDataType()Lorg/apache/flink/table/types/DataType;
*#toRowType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
*#fromTypeInfo(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/api/TableSchema;[deprecated]
-#getTypes()[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
-#getColumnNames()[Ljava/lang/String;[deprecated]
@1.10.0
+#getTableColumn(I)Ljava/util/Optional;
+#getTableColumn(Ljava/lang/String;)Ljava/util/Optional;
+#getTableColumns()Ljava/util/List;
+#getWatermarkSpecs()Ljava/util/List;
+#getPrimaryKey()Ljava/util/Optional;
@1.11.0
+#toPhysicalRowDataType()Lorg/apache/flink/table/types/DataType;
@1.12.0
+#toPersistedRowDataType()Lorg/apache/flink/table/types/DataType;
@1.13.0
+#toSchema()Lorg/apache/flink/table/api/Schema;
+#fromResolvedSchema(Lorg/apache/flink/table/catalog/ResolvedSchema;)Lorg/apache/flink/table/api/TableSchema;

+###org/apache/flink/table/api/ValidationException
@1.7.0
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/apache/flink/table/api/dataview/ListView
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Ljava/util/List;)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>()V
+#get()Ljava/lang/Iterable;
+#add(Ljava/lang/Object;)V
+#addAll(Ljava/util/List;)V
+#remove(Ljava/lang/Object;)Z
+#clear()V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.12.0
+#getList()Ljava/util/List;
+#setList(Ljava/util/List;)V
+#newListViewDataType(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
*#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V[deprecated]
-#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Ljava/util/List;)V

+###org/apache/flink/table/api/dataview/MapView
@1.9.0
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Ljava/util/Map;)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>()V
+#get(Ljava/lang/Object;)Ljava/lang/Object;
+#put(Ljava/lang/Object;Ljava/lang/Object;)V
+#putAll(Ljava/util/Map;)V
+#remove(Ljava/lang/Object;)V
+#contains(Ljava/lang/Object;)Z
+#entries()Ljava/lang/Iterable;
+#keys()Ljava/lang/Iterable;
+#values()Ljava/lang/Iterable;
+#iterator()Ljava/util/Iterator;
+#clear()V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
+#isEmpty()Z
@1.12.0
+#getMap()Ljava/util/Map;
+#setMap(Ljava/util/Map;)V
+#newMapViewDataType(Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
*#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V[deprecated]
-#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Ljava/util/Map;)V

+###org/apache/flink/table/api/dataview/DataView
@1.9.0
+#clear()V

+###org/apache/flink/table/api/DataTypes$UnresolvedField
@1.11.0
@1.12.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/UnresolvedException
@1.9.0
+#<init>(Ljava/lang/String;)V
@1.15.0
-###org/apache/flink/table/api/UnresolvedException

+###org/apache/flink/table/api/AmbiguousTableFactoryException
@1.9.0
+#<init>(Ljava/util/List;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V
+#<init>(Ljava/util/List;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V
+#getMessage()Ljava/lang/String;

+###org/apache/flink/table/api/TableColumn
@1.10.0
+#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableColumn;
+#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableColumn;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#getType()Lorg/apache/flink/table/types/DataType;
+#getName()Ljava/lang/String;
+#getExpr()Ljava/util/Optional;
+#isGenerated()Z
@1.12.0
+#physical(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableColumn$PhysicalColumn;
+#computed(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableColumn$ComputedColumn;
+#metadata(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableColumn$MetadataColumn;
+#metadata(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Z)Lorg/apache/flink/table/api/TableColumn$MetadataColumn;
+#metadata(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableColumn$MetadataColumn;
+#metadata(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;Z)Lorg/apache/flink/table/api/TableColumn$MetadataColumn;
+#isPhysical()Z
+#isPersisted()Z
+#asSummaryString()Ljava/lang/String;
+#explainExtras()Ljava/util/Optional;
+#toString()Ljava/lang/String;
-#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableColumn;
-#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableColumn;
-#getExpr()Ljava/util/Optional;
-#isGenerated()Z
@1.12.2
+#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableColumn;[deprecated]
+#of(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableColumn;[deprecated]

+###org/apache/flink/table/api/JsonValueOnEmptyOrError
@1.14.0
+#values()[Lorg/apache/flink/table/api/JsonValueOnEmptyOrError;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonValueOnEmptyOrError;

+###org/apache/flink/table/api/ExpressionParserException
@1.9.0
+#<init>(Ljava/lang/String;)V

+###org/apache/flink/table/api/Schema$UnresolvedWatermarkSpec
@1.13.0
+#getColumnName()Ljava/lang/String;
+#getWatermarkExpression()Lorg/apache/flink/table/expressions/Expression;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/TableNotExistException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/apache/flink/table/api/Types
@1.9.0
+#STRING()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#BOOLEAN()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#BYTE()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#SHORT()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#INT()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#LONG()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#FLOAT()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#DOUBLE()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#DECIMAL()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#SQL_DATE()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#SQL_TIME()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#SQL_TIMESTAMP()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#LOCAL_DATE()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#LOCAL_TIME()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#LOCAL_DATE_TIME()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#INTERVAL_MONTHS()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#INTERVAL_MILLIS()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#ROW([Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#ROW([Ljava/lang/String;[Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#PRIMITIVE_ARRAY(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#OBJECT_ARRAY(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#MAP(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#MULTISET(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/api/TableColumn$ComputedColumn
@1.12.0
+#isPhysical()Z
+#isPersisted()Z
+#getExpression()Ljava/lang/String;
+#explainExtras()Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/Schema$UnresolvedConstraint
@1.13.0
+#getConstraintName()Ljava/lang/String;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/constraints/UniqueConstraint
@1.10.0
+#primaryKey(Ljava/lang/String;Ljava/util/List;)Lorg/apache/flink/table/api/constraints/UniqueConstraint;
+#getColumns()Ljava/util/List;
+#getType()Lorg/apache/flink/table/api/constraints/Constraint$ConstraintType;
+#asSummaryString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#isEnforced()Z
+#getName()Ljava/lang/String;

+###org/apache/flink/table/api/constraints/Constraint$ConstraintType
@1.10.0
+#values()[Lorg/apache/flink/table/api/constraints/Constraint$ConstraintType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/constraints/Constraint$ConstraintType;

+###org/apache/flink/table/api/constraints/Constraint
@1.10.0
+#getName()Ljava/lang/String;
+#isEnforced()Z
+#getType()Lorg/apache/flink/table/api/constraints/Constraint$ConstraintType;
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/api/Schema$UnresolvedPhysicalColumn
@1.13.0
+#getDataType()Lorg/apache/flink/table/types/AbstractDataType;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/TableSchema$Builder
@1.7.0
+#<init>()V
+#field(Ljava/lang/String;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#build()Lorg/apache/flink/table/api/TableSchema;
@1.9.0
+#field(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#fields([Ljava/lang/String;[Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableSchema$Builder;
*#field(Ljava/lang/String;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/api/TableSchema$Builder;[deprecated]
@1.10.0
+#field(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#watermark(Ljava/lang/String;Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#primaryKey([Ljava/lang/String;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#primaryKey(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/flink/table/api/TableSchema$Builder;
@1.11.0
+#add(Lorg/apache/flink/table/api/TableColumn;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#watermark(Lorg/apache/flink/table/api/WatermarkSpec;)Lorg/apache/flink/table/api/TableSchema$Builder;

+###org/apache/flink/table/api/TableColumn$PhysicalColumn
@1.12.0
+#isPhysical()Z
+#isPersisted()Z
+#explainExtras()Ljava/util/Optional;

+###org/apache/flink/table/api/Schema
@1.13.0
+#newBuilder()Lorg/apache/flink/table/api/Schema$Builder;
+#getColumns()Ljava/util/List;
+#getWatermarkSpecs()Ljava/util/List;
+#getPrimaryKey()Ljava/util/Optional;
+#resolve(Lorg/apache/flink/table/catalog/SchemaResolver;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#derived()Lorg/apache/flink/table/api/Schema;

+###org/apache/flink/table/api/DataTypes
@1.9.0
+#CHAR(I)Lorg/apache/flink/table/types/DataType;
+#VARCHAR(I)Lorg/apache/flink/table/types/DataType;
+#STRING()Lorg/apache/flink/table/types/DataType;
+#BOOLEAN()Lorg/apache/flink/table/types/DataType;
+#BINARY(I)Lorg/apache/flink/table/types/DataType;
+#VARBINARY(I)Lorg/apache/flink/table/types/DataType;
+#BYTES()Lorg/apache/flink/table/types/DataType;
+#DECIMAL(II)Lorg/apache/flink/table/types/DataType;
+#TINYINT()Lorg/apache/flink/table/types/DataType;
+#SMALLINT()Lorg/apache/flink/table/types/DataType;
+#INT()Lorg/apache/flink/table/types/DataType;
+#BIGINT()Lorg/apache/flink/table/types/DataType;
+#FLOAT()Lorg/apache/flink/table/types/DataType;
+#DOUBLE()Lorg/apache/flink/table/types/DataType;
+#DATE()Lorg/apache/flink/table/types/DataType;
+#TIME(I)Lorg/apache/flink/table/types/DataType;
+#TIME()Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP(I)Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP()Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP_WITH_TIME_ZONE(I)Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP_WITH_TIME_ZONE()Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP_WITH_LOCAL_TIME_ZONE(I)Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP_WITH_LOCAL_TIME_ZONE()Lorg/apache/flink/table/types/DataType;
+#INTERVAL(Lorg/apache/flink/table/api/DataTypes$Resolution;)Lorg/apache/flink/table/types/DataType;
+#INTERVAL(Lorg/apache/flink/table/api/DataTypes$Resolution;Lorg/apache/flink/table/api/DataTypes$Resolution;)Lorg/apache/flink/table/types/DataType;
+#ARRAY(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#MULTISET(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#MAP(Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#ROW([Lorg/apache/flink/table/api/DataTypes$Field;)Lorg/apache/flink/table/types/DataType;
+#NULL()Lorg/apache/flink/table/types/DataType;
+#ANY(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Lorg/apache/flink/table/types/DataType;
+#ANY(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
+#SECOND()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#SECOND(I)Lorg/apache/flink/table/api/DataTypes$Resolution;
+#MINUTE()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#HOUR()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#DAY(I)Lorg/apache/flink/table/api/DataTypes$Resolution;
+#DAY()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#MONTH()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#YEAR(I)Lorg/apache/flink/table/api/DataTypes$Resolution;
+#YEAR()Lorg/apache/flink/table/api/DataTypes$Resolution;
+#FIELD(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/api/DataTypes$Field;
+#FIELD(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;)Lorg/apache/flink/table/api/DataTypes$Field;
@1.10.0
+#RAW(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Lorg/apache/flink/table/types/DataType;
*#ANY(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Lorg/apache/flink/table/types/DataType;[deprecated]
+#RAW(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
*#ANY(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;[deprecated]
@1.11.0
+#of(Ljava/lang/Class;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#of(Ljava/lang/String;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#ARRAY(Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#MULTISET(Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#MAP(Lorg/apache/flink/table/types/AbstractDataType;Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#ROW()Lorg/apache/flink/table/types/DataType;
+#ROW([Lorg/apache/flink/table/api/DataTypes$AbstractField;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#RAW(Ljava/lang/Class;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#FIELD(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/api/DataTypes$UnresolvedField;
+#FIELD(Ljava/lang/String;Lorg/apache/flink/table/types/AbstractDataType;Ljava/lang/String;)Lorg/apache/flink/table/api/DataTypes$UnresolvedField;
-#ANY(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Lorg/apache/flink/table/types/DataType;[deprecated]
-#ANY(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;[deprecated]
@1.12.0
+#STRUCTURED(Ljava/lang/Class;[Lorg/apache/flink/table/api/DataTypes$Field;)Lorg/apache/flink/table/types/DataType;
@1.13.0
+#of(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#TIMESTAMP_LTZ(I)Lorg/apache/flink/table/types/DataType;
+#TIMESTAMP_LTZ()Lorg/apache/flink/table/types/DataType;
+#ROW([Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#ROW([Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/types/UnresolvedDataType;
+#RAW(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/UnresolvedDataType;
-#RAW(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
@1.15.0
+#of(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/DataType;
+#ROW(Ljava/util/List;)Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/api/Schema$UnresolvedColumn
@1.13.0
+#getName()Ljava/lang/String;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#getComment()Ljava/util/Optional;

+###org/apache/flink/table/api/Schema$UnresolvedComputedColumn
@1.13.0
+#getExpression()Lorg/apache/flink/table/expressions/Expression;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$UnresolvedComputedColumn;
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/api/Schema$UnresolvedColumn;

+###org/apache/flink/table/api/DataTypes$Field
@1.9.0
+#getName()Ljava/lang/String;
+#getDataType()Lorg/apache/flink/table/types/DataType;
+#getDescription()Ljava/util/Optional;
@1.11.0
-#getName()Ljava/lang/String;
-#getDescription()Ljava/util/Optional;
@1.12.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/DataTypes$Resolution
@1.9.0
+#toString()Ljava/lang/String;

+###org/apache/flink/table/api/WatermarkSpec
@1.10.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)V
+#getRowtimeAttribute()Ljava/lang/String;
+#getWatermarkExpr()Ljava/lang/String;
+#getWatermarkExprOutputType()Lorg/apache/flink/table/types/DataType;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.12.0
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/api/DataTypes$AbstractField
@1.11.0
+#getName()Ljava/lang/String;
+#getDescription()Ljava/util/Optional;
+#toString()Ljava/lang/String;
@1.12.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/TableColumn$MetadataColumn
@1.12.0
+#isVirtual()Z
+#getMetadataAlias()Ljava/util/Optional;
+#isPhysical()Z
+#isPersisted()Z
+#explainExtras()Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/Schema$UnresolvedMetadataColumn
@1.13.0
+#getDataType()Lorg/apache/flink/table/types/AbstractDataType;
+#getMetadataKey()Ljava/lang/String;
+#isVirtual()Z
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/Schema$UnresolvedPrimaryKey
@1.13.0
+#getColumnNames()Ljava/util/List;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/api/TableException
@1.7.0
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/apache/flink/table/functions/TableAggregateFunctionDefinition
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/TableAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getTableAggregateFunction()Lorg/apache/flink/table/functions/TableAggregateFunction;
+#getResultTypeInfo()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeInfo()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
+#isDeterministic()Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#getName()Ljava/lang/String;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/SpecializedFunction
@1.13.0
+#specialize(Lorg/apache/flink/table/functions/SpecializedFunction$SpecializedContext;)Lorg/apache/flink/table/functions/UserDefinedFunction;

+###org/apache/flink/table/functions/ScalarFunction
@1.8.0
+#<init>()V
+#getResultType([Ljava/lang/Class;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.9.0
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
@1.11.0
*#getResultType([Ljava/lang/Class;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
*#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/FunctionDefinition
@1.9.0
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
+#isDeterministic()Z
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/TemporalTableFunction
@1.9.0
+#<init>()V

+###org/apache/flink/table/functions/AggregateFunctionDefinition
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/AggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getAggregateFunction()Lorg/apache/flink/table/functions/AggregateFunction;
+#getResultTypeInfo()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeInfo()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
+#isDeterministic()Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#getName()Ljava/lang/String;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/BuiltInFunctionDefinition$Builder
@1.9.0
+#<init>()V
+#name(Ljava/lang/String;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#kind(Lorg/apache/flink/table/functions/FunctionKind;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#inputTypeValidator(Lorg/apache/flink/table/types/inference/InputTypeValidator;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#accumulatorTypeStrategy(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#outputTypeStrategy(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#namedArguments(Ljava/util/List;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#typedArguments(Ljava/util/List;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#build()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition;
@1.10.0
+#inputTypeStrategy(Lorg/apache/flink/table/types/inference/InputTypeStrategy;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
-#inputTypeValidator(Lorg/apache/flink/table/types/inference/InputTypeValidator;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
@1.11.0
+#namedArguments([Ljava/lang/String;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#typedArguments([Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
-#namedArguments(Ljava/util/List;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
-#typedArguments(Ljava/util/List;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
@1.12.0
+#notDeterministic()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
@1.13.0
+#runtimeClass(Ljava/lang/String;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
-#accumulatorTypeStrategy(Lorg/apache/flink/table/types/inference/TypeStrategy;)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
@1.14.0
+#runtimeProvided()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#runtimeDeferred()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
@1.15.0
+#version(I)Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#internal()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;

+###org/apache/flink/table/functions/UserDefinedFunction
@1.8.0
+#<init>()V
+#functionIdentifier()Ljava/lang/String;
+#open(Lorg/apache/flink/table/functions/FunctionContext;)V
+#close()V
+#isDeterministic()Z
+#toString()Ljava/lang/String;
@1.9.0
-#isDeterministic()Z
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/ImperativeAggregateFunction
@1.12.0
+#<init>()V
+#createAccumulator()Ljava/lang/Object;
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]

+###org/apache/flink/table/functions/AsyncTableFunction
@1.9.0
+#<init>()V
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
@1.13.0
-#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/functions/ScalarFunctionDefinition
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/ScalarFunction;)V
+#getScalarFunction()Lorg/apache/flink/table/functions/ScalarFunction;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
+#isDeterministic()Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#getName()Ljava/lang/String;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/TableFunctionDefinition
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/functions/TableFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getTableFunction()Lorg/apache/flink/table/functions/TableFunction;
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
+#isDeterministic()Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#getName()Ljava/lang/String;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/FunctionContext
@1.8.0
+#<init>(Lorg/apache/flink/api/common/functions/RuntimeContext;)V
+#getMetricGroup()Lorg/apache/flink/metrics/MetricGroup;
+#getCachedFile(Ljava/lang/String;)Ljava/io/File;
+#getJobParameter(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
@1.11.0
+#getExternalResourceInfos(Ljava/lang/String;)Ljava/util/Set;
@1.16.0
+#<init>(Lorg/apache/flink/api/common/functions/RuntimeContext;Ljava/lang/ClassLoader;Lorg/apache/flink/configuration/Configuration;)V
+#getUserCodeClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/functions/SpecializedFunction$SpecializedContext
@1.13.0
+#getCallContext()Lorg/apache/flink/table/types/inference/CallContext;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getBuiltInClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/functions/FunctionRequirement
@1.9.0
+#values()[Lorg/apache/flink/table/functions/FunctionRequirement;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/FunctionRequirement;

+###org/apache/flink/table/functions/FunctionIdentifier
@1.10.0
+#of(Lorg/apache/flink/table/catalog/ObjectIdentifier;)Lorg/apache/flink/table/functions/FunctionIdentifier;
+#of(Ljava/lang/String;)Lorg/apache/flink/table/functions/FunctionIdentifier;
+#normalizeName(Ljava/lang/String;)Ljava/lang/String;
+#normalizeObjectIdentifier(Lorg/apache/flink/table/catalog/ObjectIdentifier;)Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getIdentifier()Ljava/util/Optional;
+#getSimpleName()Ljava/util/Optional;
+#getNames()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.11.0
+#toList()Ljava/util/List;
-#getNames()Ljava/util/List;
@1.16.0
+#getFunctionName()Ljava/lang/String;

+###org/apache/flink/table/functions/FunctionKind
@1.9.0
+#values()[Lorg/apache/flink/table/functions/FunctionKind;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/FunctionKind;

+###org/apache/flink/table/functions/ConstantFunctionContext
@1.12.0
+#<init>(Lorg/apache/flink/configuration/Configuration;)V
+#getMetricGroup()Lorg/apache/flink/metrics/MetricGroup;
+#getCachedFile(Ljava/lang/String;)Ljava/io/File;
+#getJobParameter(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#getExternalResourceInfos(Ljava/lang/String;)Ljava/util/Set;
@1.16.0
-###org/apache/flink/table/functions/ConstantFunctionContext

+###org/apache/flink/table/functions/TableAggregateFunction$RetractableCollector
@1.9.0
+#retract(Ljava/lang/Object;)V

+###org/apache/flink/table/functions/BuiltInFunctionDefinition
@1.9.0
+#getName()Ljava/lang/String;
+#getTypeInference()Lorg/apache/flink/table/types/inference/TypeInference;
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#toString()Ljava/lang/String;
@1.11.0
+#newBuilder()Lorg/apache/flink/table/functions/BuiltInFunctionDefinition$Builder;
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
-#getTypeInference()Lorg/apache/flink/table/types/inference/TypeInference;
@1.12.0
+#isDeterministic()Z
@1.13.0
+#getRuntimeClass()Ljava/util/Optional;
+#specialize(Lorg/apache/flink/table/functions/SpecializedFunction$SpecializedContext;)Lorg/apache/flink/table/functions/UserDefinedFunction;
@1.14.0
+#hasRuntimeImplementation()Z
@1.15.0
+#getVersion()Ljava/util/Optional;
+#isInternal()Z
+#getQualifiedName()Ljava/lang/String;
+#validateFunction(Ljava/lang/String;Ljava/lang/Integer;Z)V
+#qualifyFunctionName(Ljava/lang/String;I)Ljava/lang/String;

+###org/apache/flink/table/functions/TableFunction
@1.8.0
+#<init>()V
+#setCollector(Lorg/apache/flink/util/Collector;)V
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.9.0
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
@1.11.0
*#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
*#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/BuiltInFunctionDefinitions
@1.9.0
+#<init>()V
+#getDefinitions()Ljava/util/List;

+###org/apache/flink/table/functions/AggregateFunction
@1.8.0
+#<init>()V
+#createAccumulator()Ljava/lang/Object;
+#getValue(Ljava/lang/Object;)Ljava/lang/Object;
+#requiresOver()Z
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.9.0
*#requiresOver()Z[deprecated]
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
+#getRequirements()Ljava/util/Set;
-#createAccumulator()Ljava/lang/Object;
-#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
-#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
@1.12.0
-#requiresOver()Z[deprecated]
-#getRequirements()Ljava/util/Set;

+###org/apache/flink/table/functions/TableAggregateFunction
@1.9.0
+#<init>()V
+#getKind()Lorg/apache/flink/table/functions/FunctionKind;
@1.11.0
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;

+###org/apache/flink/table/functions/UserDefinedFunctionHelper
@1.11.0
+#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getReturnTypeOfTableFunction(Lorg/apache/flink/table/functions/TableFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getReturnTypeOfTableFunction(Lorg/apache/flink/table/functions/TableFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#instantiateFunction(Ljava/lang/Class;)Lorg/apache/flink/table/functions/UserDefinedFunction;
+#prepareInstance(Lorg/apache/flink/configuration/ReadableConfig;Lorg/apache/flink/table/functions/UserDefinedFunction;)V
+#validateClass(Ljava/lang/Class;)V
@1.12.0
+#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/ImperativeAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/ImperativeAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/ImperativeAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/ImperativeAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#instantiateFunction(Ljava/lang/ClassLoader;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogFunction;)Lorg/apache/flink/table/functions/UserDefinedFunction;
+#validateClassForRuntime(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)V
-#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
-#getReturnTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
-#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
-#getAccumulatorTypeOfAggregateFunction(Lorg/apache/flink/table/functions/UserDefinedAggregateFunction;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.13.0
+#createSpecializedFunction(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/CallContext;Ljava/lang/ClassLoader;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/functions/UserDefinedFunction;
@1.15.0
+#isClassNameSerializable(Lorg/apache/flink/table/functions/UserDefinedFunction;)Z
+#generateInlineFunctionName(Lorg/apache/flink/table/functions/UserDefinedFunction;)Ljava/lang/String;
@1.16.0
+#createSpecializedFunction(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/CallContext;Ljava/lang/ClassLoader;Lorg/apache/flink/configuration/ReadableConfig;Lorg/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluatorFactory;)Lorg/apache/flink/table/functions/UserDefinedFunction;
-#createSpecializedFunction(Ljava/lang/String;Lorg/apache/flink/table/functions/FunctionDefinition;Lorg/apache/flink/table/types/inference/CallContext;Ljava/lang/ClassLoader;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/functions/UserDefinedFunction;

+###org/apache/flink/table/functions/python/PythonFunctionKind
@1.11.0
+#values()[Lorg/apache/flink/table/functions/python/PythonFunctionKind;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/python/PythonFunctionKind;

+###org/apache/flink/table/functions/python/PythonScalarFunction
@1.11.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#eval([Ljava/lang/Object;)Ljava/lang/Object;
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
+#getPythonFunctionKind()Lorg/apache/flink/table/functions/python/PythonFunctionKind;
+#isDeterministic()Z
+#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getResultType([Ljava/lang/Class;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
+#toString()Ljava/lang/String;
@1.13.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#takesRowAsInput()Z
-#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V
@1.16.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
-#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V

+###org/apache/flink/table/functions/python/PythonAggregateFunctionInfo
@1.12.0
+#<init>(Lorg/apache/flink/table/functions/python/PythonFunction;[Ljava/lang/Object;IZ)V
+#isDistinct()Z
+#getFilterArg()I

+###org/apache/flink/table/functions/python/PythonAggregateFunction
@1.12.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#accumulate(Ljava/lang/Object;[Ljava/lang/Object;)V
+#getValue(Ljava/lang/Object;)Ljava/lang/Object;
+#createAccumulator()Ljava/lang/Object;
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
+#getPythonFunctionKind()Lorg/apache/flink/table/functions/python/PythonFunctionKind;
+#isDeterministic()Z
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
+#toString()Ljava/lang/String;
@1.13.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#takesRowAsInput()Z
-#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V

+###org/apache/flink/table/functions/python/PythonTableAggregateFunction
@1.13.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#accumulate(Ljava/lang/Object;[Ljava/lang/Object;)V
+#emitValue(Ljava/lang/Object;Ljava/lang/Object;)V
+#createAccumulator()Ljava/lang/Object;
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
+#getPythonFunctionKind()Lorg/apache/flink/table/functions/python/PythonFunctionKind;
+#takesRowAsInput()Z
+#isDeterministic()Z
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
+#toString()Ljava/lang/String;

+###org/apache/flink/table/functions/python/PythonTableFunction
@1.11.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/java/typeutils/RowTypeInfo;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#eval([Ljava/lang/Object;)V
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
+#getPythonFunctionKind()Lorg/apache/flink/table/functions/python/PythonFunctionKind;
+#isDeterministic()Z
+#getParameterTypes([Ljava/lang/Class;)[Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getTypeInference(Lorg/apache/flink/table/catalog/DataTypeFactory;)Lorg/apache/flink/table/types/inference/TypeInference;
+#toString()Ljava/lang/String;
@1.13.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/java/typeutils/RowTypeInfo;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
+#takesRowAsInput()Z
-#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/java/typeutils/RowTypeInfo;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZLorg/apache/flink/table/functions/python/PythonEnv;)V
@1.16.0
+#<init>(Ljava/lang/String;[B[Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/types/DataType;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V
-#<init>(Ljava/lang/String;[B[Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/api/java/typeutils/RowTypeInfo;Lorg/apache/flink/table/functions/python/PythonFunctionKind;ZZLorg/apache/flink/table/functions/python/PythonEnv;)V

+###org/apache/flink/table/functions/python/PythonEnv
@1.10.0
+#<init>(Lorg/apache/flink/table/functions/python/PythonEnv$ExecType;)V
+#getExecType()Lorg/apache/flink/table/functions/python/PythonEnv$ExecType;

+###org/apache/flink/table/functions/python/PythonFunction
@1.10.0
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
@1.11.0
+#getPythonFunctionKind()Lorg/apache/flink/table/functions/python/PythonFunctionKind;
@1.13.0
+#takesRowAsInput()Z

+###org/apache/flink/table/functions/python/PythonEnv$ExecType
@1.10.0
+#values()[Lorg/apache/flink/table/functions/python/PythonEnv$ExecType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/python/PythonEnv$ExecType;

+###org/apache/flink/table/functions/python/utils/PythonFunctionUtils
@1.11.0
+#values()[Lorg/apache/flink/table/functions/python/utils/PythonFunctionUtils;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/python/utils/PythonFunctionUtils;
+#getPythonFunction(Ljava/lang/String;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/functions/python/PythonFunction;
@1.13.0
+#getPythonFunction(Ljava/lang/String;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/functions/python/PythonFunction;
-#getPythonFunction(Ljava/lang/String;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/functions/python/PythonFunction;

+###org/apache/flink/table/functions/python/PythonFunctionInfo
@1.10.0
+#<init>(Lorg/apache/flink/table/functions/python/PythonFunction;[Ljava/lang/Object;)V
+#getPythonFunction()Lorg/apache/flink/table/functions/python/PythonFunction;
+#getInputs()[Ljava/lang/Object;
@1.14.0
+#setInputs([Ljava/lang/Object;)V

+###org/apache/flink/table/functions/python/BuiltInPythonAggregateFunction
@1.12.0
+#values()[Lorg/apache/flink/table/functions/python/BuiltInPythonAggregateFunction;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/functions/python/BuiltInPythonAggregateFunction;
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;

+###org/apache/flink/table/expressions/TimeIntervalUnit
@1.9.0
+#values()[Lorg/apache/flink/table/expressions/TimeIntervalUnit;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/expressions/TimeIntervalUnit;

+###org/apache/flink/table/expressions/ResolvedExpression
@1.9.0
+#asSerializableString()Ljava/lang/String;
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;

+###org/apache/flink/table/expressions/ResolvedFieldReference
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/api/common/typeinfo/TypeInformation;I)V
+#resultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#name()Ljava/lang/String;
+#fieldIndex()I

+###org/apache/flink/table/expressions/SqlCallExpression
@1.13.0
+#<init>(Ljava/lang/String;)V
+#getSqlExpression()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/expressions/TableSymbol
@1.9.0

+###org/apache/flink/table/expressions/TypeLiteralExpression
@1.9.0
+#<init>(Lorg/apache/flink/table/types/DataType;)V
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/expressions/CallExpression
@1.9.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
+#<init>(Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
+#getObjectIdentifier()Ljava/util/Optional;
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#<init>(Lorg/apache/flink/table/functions/FunctionIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
+#getFunctionIdentifier()Ljava/util/Optional;
-#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
-#getObjectIdentifier()Ljava/util/Optional;
@1.12.0
+#getFunctionName()Ljava/lang/String;
@1.15.0
+#<init>(ZLorg/apache/flink/table/functions/FunctionIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V
+#permanent(Lorg/apache/flink/table/functions/FunctionIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/expressions/CallExpression;
+#permanent(Lorg/apache/flink/table/functions/BuiltInFunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/expressions/CallExpression;
+#temporary(Lorg/apache/flink/table/functions/FunctionIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/expressions/CallExpression;
+#anonymous(Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/expressions/CallExpression;
*#<init>(Lorg/apache/flink/table/functions/FunctionIdentifier;Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V[deprecated]
*#<init>(Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/types/DataType;)V[deprecated]
+#isTemporary()Z
+#replaceArgs(Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/expressions/CallExpression;

+###org/apache/flink/table/expressions/ValueLiteralExpression
@1.9.0
+#<init>(Ljava/lang/Object;)V
+#<init>(Ljava/lang/Object;Lorg/apache/flink/table/types/DataType;)V
+#isNull()Z
+#getValueAs(Ljava/lang/Class;)Ljava/util/Optional;
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/expressions/AggregateExpression
@1.13.0
+#<init>(Lorg/apache/flink/table/functions/FunctionDefinition;Ljava/util/List;Lorg/apache/flink/table/expressions/CallExpression;Lorg/apache/flink/table/types/DataType;ZZZ)V
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#isDistinct()Z
+#isApproximate()Z
+#isIgnoreNulls()Z
+#getArgs()Ljava/util/List;
+#getFilterExpression()Ljava/util/Optional;
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/expressions/ExpressionUtils
@1.9.0
+#extractValue(Lorg/apache/flink/table/expressions/Expression;Ljava/lang/Class;)Ljava/util/Optional;

+###org/apache/flink/table/expressions/Expression
@1.9.0
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;

+###org/apache/flink/table/expressions/ExpressionDefaultVisitor
@1.9.0
+#<init>()V
+#visit(Lorg/apache/flink/table/expressions/CallExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/ValueLiteralExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/FieldReferenceExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/TypeLiteralExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/Expression;)Ljava/lang/Object;

+###org/apache/flink/table/expressions/ExpressionVisitor
@1.9.0
+#visit(Lorg/apache/flink/table/expressions/CallExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/ValueLiteralExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/FieldReferenceExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/TypeLiteralExpression;)Ljava/lang/Object;
+#visit(Lorg/apache/flink/table/expressions/Expression;)Ljava/lang/Object;

+###org/apache/flink/table/expressions/TimePointUnit
@1.9.0
+#values()[Lorg/apache/flink/table/expressions/TimePointUnit;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/expressions/TimePointUnit;

+###org/apache/flink/table/expressions/FieldReferenceExpression
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;II)V
+#getName()Ljava/lang/String;
+#getInputIndex()I
+#getFieldIndex()I
+#getOutputDataType()Lorg/apache/flink/table/types/DataType;
+#getResolvedChildren()Ljava/util/List;
+#asSummaryString()Ljava/lang/String;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/expressions/ExpressionVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/module/ModuleException
@1.14.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/apache/flink/table/module/Module
@1.10.0
+#listFunctions()Ljava/util/Set;
+#getFunctionDefinition(Ljava/lang/String;)Ljava/util/Optional;
@1.15.0
+#listFunctions(Z)Ljava/util/Set;
+#getTableSourceFactory()Ljava/util/Optional;
+#getTableSinkFactory()Ljava/util/Optional;

+###org/apache/flink/table/module/CommonModuleOptions
@1.14.0
+#<init>()V

+###org/apache/flink/table/module/CoreModule
@1.10.0
+#listFunctions()Ljava/util/Set;
+#getFunctionDefinition(Ljava/lang/String;)Ljava/util/Optional;
@1.15.0
+#listFunctions(Z)Ljava/util/Set;

+###org/apache/flink/table/module/CoreModuleFactory
@1.10.0
+#<init>()V
+#createModule(Ljava/util/Map;)Lorg/apache/flink/table/module/Module;
+#requiredContext()Ljava/util/Map;
+#supportedProperties()Ljava/util/List;
@1.14.0
+#factoryIdentifier()Ljava/lang/String;
+#requiredOptions()Ljava/util/Set;
+#optionalOptions()Ljava/util/Set;
+#createModule(Lorg/apache/flink/table/factories/ModuleFactory$Context;)Lorg/apache/flink/table/module/Module;
-#createModule(Ljava/util/Map;)Lorg/apache/flink/table/module/Module;
-#requiredContext()Ljava/util/Map;
-#supportedProperties()Ljava/util/List;

+###org/apache/flink/table/sources/ProjectableTableSource
@1.8.0
+#projectFields([I)Lorg/apache/flink/table/sources/TableSource;

+###org/apache/flink/table/sources/wmstrategies/PreserveWatermarks
@1.9.0
+#<init>()V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toProperties()Ljava/util/Map;

+###org/apache/flink/table/sources/wmstrategies/WatermarkStrategy
@1.9.0
+#<init>()V
+#toProperties()Ljava/util/Map;

+###org/apache/flink/table/sources/DefinedProctimeAttribute
@1.9.0
+#getProctimeAttribute()Ljava/lang/String;

+###org/apache/flink/table/sources/TableSource
@1.8.0
+#getReturnType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getTableSchema()Lorg/apache/flink/table/api/TableSchema;
+#explainSource()Ljava/lang/String;
@1.9.0
+#getProducedDataType()Lorg/apache/flink/table/types/DataType;
*#getReturnType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;[deprecated]
@1.10.0
*#getTableSchema()Lorg/apache/flink/table/api/TableSchema;[deprecated]

+###org/apache/flink/table/sources/LimitableTableSource
@1.10.0
+#isLimitPushedDown()Z
+#applyLimit(J)Lorg/apache/flink/table/sources/TableSource;

+###org/apache/flink/table/sources/RowtimeAttributeDescriptor
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/sources/tsextractors/TimestampExtractor;Lorg/apache/flink/table/sources/wmstrategies/WatermarkStrategy;)V
+#getAttributeName()Ljava/lang/String;
+#getTimestampExtractor()Lorg/apache/flink/table/sources/tsextractors/TimestampExtractor;
+#getWatermarkStrategy()Lorg/apache/flink/table/sources/wmstrategies/WatermarkStrategy;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/sources/DefinedFieldMapping
@1.8.0
+#getFieldMapping()Ljava/util/Map;

+###org/apache/flink/table/sources/LookupableTableSource
@1.9.0
+#getLookupFunction([Ljava/lang/String;)Lorg/apache/flink/table/functions/TableFunction;
+#getAsyncLookupFunction([Ljava/lang/String;)Lorg/apache/flink/table/functions/AsyncTableFunction;
+#isAsyncEnabled()Z

+###org/apache/flink/table/sources/FilterableTableSource
@1.9.0
+#applyPredicate(Ljava/util/List;)Lorg/apache/flink/table/sources/TableSource;
+#isFilterPushedDown()Z

+###org/apache/flink/table/sources/DefinedRowtimeAttributes
@1.9.0
+#getRowtimeAttributeDescriptors()Ljava/util/List;

+###org/apache/flink/table/sources/TableSourceValidation
@1.9.0
+#validateTableSource(Lorg/apache/flink/table/sources/TableSource;)V
+#hasRowtimeAttribute(Lorg/apache/flink/table/sources/TableSource;)Z
@1.10.0
+#validateTableSource(Lorg/apache/flink/table/sources/TableSource;Lorg/apache/flink/table/api/TableSchema;)V
-#validateTableSource(Lorg/apache/flink/table/sources/TableSource;)V
@1.10.2
+#hasProctimeAttribute(Lorg/apache/flink/table/sources/TableSource;)Z

+###org/apache/flink/table/sources/NestedFieldsProjectableTableSource
@1.8.0
+#projectNestedFields([I[[Ljava/lang/String;)Lorg/apache/flink/table/sources/TableSource;

+###org/apache/flink/table/sources/tsextractors/TimestampExtractorUtils
@1.10.0
+#getAccessedFields(Lorg/apache/flink/table/sources/tsextractors/TimestampExtractor;Lorg/apache/flink/table/types/DataType;Ljava/util/function/Function;)[Lorg/apache/flink/table/expressions/ResolvedFieldReference;

+###org/apache/flink/table/sources/tsextractors/TimestampExtractor
@1.9.0
+#<init>()V
+#getReturnType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#toProperties()Ljava/util/Map;

+###org/apache/flink/table/sources/FieldComputer
@1.9.0
+#getArgumentFields()[Ljava/lang/String;
+#getReturnType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#validateArgumentFields([Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#getExpression([Lorg/apache/flink/table/expressions/ResolvedFieldReference;)Lorg/apache/flink/table/expressions/Expression;

+###org/apache/flink/table/sources/PartitionableTableSource
@1.9.0
+#getPartitions()Ljava/util/List;
+#getPartitionFieldNames()Ljava/util/List;
+#applyPartitionPruning(Ljava/util/List;)Lorg/apache/flink/table/sources/TableSource;
@1.10.0
-#getPartitionFieldNames()Ljava/util/List;

+###org/apache/flink/table/plan/stats/ColumnStats$Builder
@1.10.0
+#<init>()V
+#builder()Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setNdv(Ljava/lang/Long;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setNullCount(Ljava/lang/Long;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setAvgLen(Ljava/lang/Double;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setMaxLen(Ljava/lang/Integer;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setMax(Ljava/lang/Comparable;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#setMin(Ljava/lang/Comparable;)Lorg/apache/flink/table/plan/stats/ColumnStats$Builder;
+#build()Lorg/apache/flink/table/plan/stats/ColumnStats;

+###org/apache/flink/table/plan/stats/TableStats
@1.9.0
+#<init>(J)V
+#<init>(JLjava/util/Map;)V
+#getRowCount()J
+#getColumnStats()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/plan/stats/TableStats;
@1.10.0
+#merge(Lorg/apache/flink/table/plan/stats/TableStats;)Lorg/apache/flink/table/plan/stats/TableStats;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.16.0
+#merge(Lorg/apache/flink/table/plan/stats/TableStats;Ljava/util/Set;)Lorg/apache/flink/table/plan/stats/TableStats;
-#merge(Lorg/apache/flink/table/plan/stats/TableStats;)Lorg/apache/flink/table/plan/stats/TableStats;

+###org/apache/flink/table/plan/stats/ColumnStats
@1.9.0
+#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Number;Ljava/lang/Number;)V
+#getNdv()Ljava/lang/Long;
+#getNullCount()Ljava/lang/Long;
+#getAvgLen()Ljava/lang/Double;
+#getMaxLen()Ljava/lang/Integer;
+#getMaxValue()Ljava/lang/Number;
+#getMinValue()Ljava/lang/Number;
+#toString()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/plan/stats/ColumnStats;
@1.10.0
*#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Integer;Ljava/lang/Number;Ljava/lang/Number;)V[deprecated]
*#getMaxValue()Ljava/lang/Number;[deprecated]
+#getMax()Ljava/lang/Comparable;
*#getMinValue()Ljava/lang/Number;[deprecated]
+#getMin()Ljava/lang/Comparable;
+#merge(Lorg/apache/flink/table/plan/stats/ColumnStats;)Lorg/apache/flink/table/plan/stats/ColumnStats;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.16.0
+#merge(Lorg/apache/flink/table/plan/stats/ColumnStats;Z)Lorg/apache/flink/table/plan/stats/ColumnStats;
-#merge(Lorg/apache/flink/table/plan/stats/ColumnStats;)Lorg/apache/flink/table/plan/stats/ColumnStats;

+###org/apache/flink/table/annotation/HintFlag
@1.10.0
+#values()[Lorg/apache/flink/table/annotation/HintFlag;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/annotation/HintFlag;

+###org/apache/flink/table/annotation/FunctionHints
@1.11.0
+#value()[Lorg/apache/flink/table/annotation/FunctionHint;

+###org/apache/flink/table/annotation/FunctionHint
@1.11.0
+#input()[Lorg/apache/flink/table/annotation/DataTypeHint;
+#isVarArgs()Z
+#argumentNames()[Ljava/lang/String;
+#accumulator()Lorg/apache/flink/table/annotation/DataTypeHint;
+#output()Lorg/apache/flink/table/annotation/DataTypeHint;

+###org/apache/flink/table/annotation/ExtractionVersion
@1.10.0
+#values()[Lorg/apache/flink/table/annotation/ExtractionVersion;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/annotation/ExtractionVersion;

+###org/apache/flink/table/annotation/DataTypeHint
@1.10.0
+#value()Ljava/lang/String;
+#bridgedTo()Ljava/lang/Class;
+#rawSerializer()Ljava/lang/Class;
+#inputGroup()Lorg/apache/flink/table/annotation/InputGroup;
+#version()Lorg/apache/flink/table/annotation/ExtractionVersion;
+#allowRawGlobally()Lorg/apache/flink/table/annotation/HintFlag;
+#allowRawPattern()[Ljava/lang/String;
+#forceRawPattern()[Ljava/lang/String;
+#defaultDecimalPrecision()I
+#defaultDecimalScale()I
+#defaultYearPrecision()I
+#defaultSecondPrecision()I

+###org/apache/flink/table/annotation/InputGroup
@1.10.0
+#values()[Lorg/apache/flink/table/annotation/InputGroup;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/annotation/InputGroup;

+###org/apache/flink/table/factories/TableSinkFactory
@1.9.0
+#createTableSink(Ljava/util/Map;)Lorg/apache/flink/table/sinks/TableSink;
+#createTableSink(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogTable;)Lorg/apache/flink/table/sinks/TableSink;
@1.11.0
*#createTableSink(Ljava/util/Map;)Lorg/apache/flink/table/sinks/TableSink;[deprecated]
*#createTableSink(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogTable;)Lorg/apache/flink/table/sinks/TableSink;[deprecated]
+#createTableSink(Lorg/apache/flink/table/factories/TableSinkFactory$Context;)Lorg/apache/flink/table/sinks/TableSink;

+###org/apache/flink/table/factories/FactoryUtil$DefaultModuleContext
@1.14.0
+#<init>(Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)V
+#getOptions()Ljava/util/Map;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/factories/DynamicTableSinkFactory
@1.11.0
+#createDynamicTableSink(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;)Lorg/apache/flink/table/connector/sink/DynamicTableSink;

+###org/apache/flink/table/factories/DynamicTableFactory
@1.11.0
@1.15.0
+#forwardOptions()Ljava/util/Set;

+###org/apache/flink/table/factories/ModuleFactory$Context
@1.14.0
+#getOptions()Ljava/util/Map;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/factories/FileSystemFormatFactory
@1.11.0
+#createReader(Lorg/apache/flink/table/factories/FileSystemFormatFactory$ReaderContext;)Lorg/apache/flink/api/common/io/InputFormat;
+#createEncoder(Lorg/apache/flink/table/factories/FileSystemFormatFactory$WriterContext;)Ljava/util/Optional;
+#createBulkWriterFactory(Lorg/apache/flink/table/factories/FileSystemFormatFactory$WriterContext;)Ljava/util/Optional;
@1.12.0
-#createEncoder(Lorg/apache/flink/table/factories/FileSystemFormatFactory$WriterContext;)Ljava/util/Optional;
-#createBulkWriterFactory(Lorg/apache/flink/table/factories/FileSystemFormatFactory$WriterContext;)Ljava/util/Optional;
@1.15.0
-###org/apache/flink/table/factories/FileSystemFormatFactory

+###org/apache/flink/table/factories/TableSourceFactory$Context
@1.11.0
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getTable()Lorg/apache/flink/table/catalog/CatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
@1.12.0
+#isTemporary()Z

+###org/apache/flink/table/factories/BulkWriterFormatFactory
@1.12.0
@1.15.0
-###org/apache/flink/table/factories/BulkWriterFormatFactory

+###org/apache/flink/table/factories/FactoryUtil$TableFactoryHelper
@1.11.0
+#discoverDecodingFormat(Ljava/lang/Class;Lorg/apache/flink/configuration/ConfigOption;)Lorg/apache/flink/table/connector/format/DecodingFormat;
+#discoverOptionalDecodingFormat(Ljava/lang/Class;Lorg/apache/flink/configuration/ConfigOption;)Ljava/util/Optional;
+#discoverEncodingFormat(Ljava/lang/Class;Lorg/apache/flink/configuration/ConfigOption;)Lorg/apache/flink/table/connector/format/EncodingFormat;
+#discoverOptionalEncodingFormat(Ljava/lang/Class;Lorg/apache/flink/configuration/ConfigOption;)Ljava/util/Optional;
+#validate()V
+#validateExcept([Ljava/lang/String;)V
+#getOptions()Lorg/apache/flink/configuration/ReadableConfig;
@1.16.0
-#validateExcept([Ljava/lang/String;)V
-#validate()V

+###org/apache/flink/table/factories/EncodingFormatFactory
@1.11.0
+#createEncodingFormat(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/format/EncodingFormat;

+###org/apache/flink/table/factories/FunctionDefinitionFactory
@1.9.0
+#createFunctionDefinition(Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogFunction;)Lorg/apache/flink/table/functions/FunctionDefinition;
@1.16.0
*#createFunctionDefinition(Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogFunction;)Lorg/apache/flink/table/functions/FunctionDefinition;[deprecated]
+#createFunctionDefinition(Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogFunction;Lorg/apache/flink/table/factories/FunctionDefinitionFactory$Context;)Lorg/apache/flink/table/functions/FunctionDefinition;

+###org/apache/flink/table/factories/TableSinkFactoryContextImpl
@1.11.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Z)V
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getTable()Lorg/apache/flink/table/catalog/CatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#isBounded()Z
@1.12.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;ZZ)V
+#isTemporary()Z
-#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Z)V

+###org/apache/flink/table/factories/FactoryUtil
@1.11.0
+#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/connector/source/DynamicTableSource;
+#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
+#createTableFactoryHelper(Lorg/apache/flink/table/factories/DynamicTableFactory;Lorg/apache/flink/table/factories/DynamicTableFactory$Context;)Lorg/apache/flink/table/factories/FactoryUtil$TableFactoryHelper;
+#discoverFactory(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;)Lorg/apache/flink/table/factories/Factory;
+#validateFactoryOptions(Lorg/apache/flink/table/factories/Factory;Lorg/apache/flink/configuration/ReadableConfig;)V
@1.12.0
+#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;
+#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
+#validateFactoryOptions(Ljava/util/Set;Ljava/util/Set;Lorg/apache/flink/configuration/ReadableConfig;)V
+#validateUnconsumedKeys(Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)V
-#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/connector/source/DynamicTableSource;
-#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
@1.13.0
+#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;
+#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
+#createCatalogFactoryHelper(Lorg/apache/flink/table/factories/CatalogFactory;Lorg/apache/flink/table/factories/CatalogFactory$Context;)Lorg/apache/flink/table/factories/FactoryUtil$CatalogFactoryHelper;
+#createCatalog(Ljava/lang/String;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/catalog/Catalog;
-#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;
-#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
@1.14.0
+#createModuleFactoryHelper(Lorg/apache/flink/table/factories/ModuleFactory;Lorg/apache/flink/table/factories/ModuleFactory$Context;)Lorg/apache/flink/table/factories/FactoryUtil$ModuleFactoryHelper;
+#createModule(Ljava/lang/String;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/module/Module;
+#validateUnconsumedKeys(Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;)V
+#getFormatPrefix(Lorg/apache/flink/configuration/ConfigOption;Ljava/lang/String;)Ljava/lang/String;
@1.15.0
+#createDynamicTableSource(Lorg/apache/flink/table/factories/DynamicTableSourceFactory;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;
+#createDynamicTableSource(Lorg/apache/flink/table/factories/DynamicTableSourceFactory;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;[deprecated]
*#createTableSource(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/source/DynamicTableSource;[deprecated]
+#createDynamicTableSink(Lorg/apache/flink/table/factories/DynamicTableSinkFactory;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;
+#createDynamicTableSink(Lorg/apache/flink/table/factories/DynamicTableSinkFactory;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;[deprecated]
*#createTableSink(Lorg/apache/flink/table/catalog/Catalog;Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/connector/sink/DynamicTableSink;[deprecated]

+###org/apache/flink/table/factories/TableSinkFactory$Context
@1.11.0
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getTable()Lorg/apache/flink/table/catalog/CatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#isBounded()Z
@1.12.0
+#isTemporary()Z

+###org/apache/flink/table/factories/TableFactoryService
@1.9.0
+#<init>()V
+#find(Ljava/lang/Class;Lorg/apache/flink/table/descriptors/Descriptor;)Lorg/apache/flink/table/factories/TableFactory;
+#find(Ljava/lang/Class;Lorg/apache/flink/table/descriptors/Descriptor;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/factories/TableFactory;
+#find(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/flink/table/factories/TableFactory;
+#find(Ljava/lang/Class;Ljava/util/Map;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/factories/TableFactory;
+#findAll(Ljava/lang/Class;Ljava/util/Map;)Ljava/util/List;

+###org/apache/flink/table/factories/BulkReaderFormatFactory
@1.12.0
+#createDecodingFormat(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/format/BulkDecodingFormat;
+#createDecodingFormat(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/format/DecodingFormat;
@1.15.0
-###org/apache/flink/table/factories/BulkReaderFormatFactory

+###org/apache/flink/table/factories/SerializationSchemaFactory
@1.7.0
+#createSerializationSchema(Ljava/util/Map;)Lorg/apache/flink/api/common/serialization/SerializationSchema;
@1.16.0
-###org/apache/flink/table/factories/SerializationSchemaFactory

+###org/apache/flink/table/factories/DeserializationFormatFactory
@1.11.0

+###org/apache/flink/table/factories/FactoryUtil$CatalogFactoryHelper
@1.13.0
+#<init>(Lorg/apache/flink/table/factories/CatalogFactory;Lorg/apache/flink/table/factories/CatalogFactory$Context;)V
+#validate()V
+#validateExcept([Ljava/lang/String;)V
+#getOptions()Lorg/apache/flink/configuration/ReadableConfig;
@1.16.0
-#getOptions()Lorg/apache/flink/configuration/ReadableConfig;
-#validateExcept([Ljava/lang/String;)V
-#validate()V

+###org/apache/flink/table/factories/FactoryUtil$DefaultDynamicTableContext
@1.13.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)V
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getCatalogTable()Lorg/apache/flink/table/catalog/ResolvedCatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;
+#isTemporary()Z
@1.15.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)V
+#getEnrichmentOptions()Ljava/util/Map;
-#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/ResolvedCatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;Z)V

+###org/apache/flink/table/factories/Factory
@1.11.0
+#factoryIdentifier()Ljava/lang/String;
+#requiredOptions()Ljava/util/Set;
+#optionalOptions()Ljava/util/Set;

+###org/apache/flink/table/factories/FactoryUtil$ModuleFactoryHelper
@1.14.0
+#<init>(Lorg/apache/flink/table/factories/ModuleFactory;Lorg/apache/flink/table/factories/ModuleFactory$Context;)V
+#getOptions()Lorg/apache/flink/configuration/ReadableConfig;
+#validateExcept([Ljava/lang/String;)V
+#validate()V
@1.16.0
-#getOptions()Lorg/apache/flink/configuration/ReadableConfig;
-#validateExcept([Ljava/lang/String;)V
-#validate()V

+###org/apache/flink/table/factories/CatalogFactory
@1.9.0
+#createCatalog(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/flink/table/catalog/Catalog;
@1.13.0
*#createCatalog(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/flink/table/catalog/Catalog;[deprecated]
+#createCatalog(Lorg/apache/flink/table/factories/CatalogFactory$Context;)Lorg/apache/flink/table/catalog/Catalog;
+#factoryIdentifier()Ljava/lang/String;
+#requiredOptions()Ljava/util/Set;
+#optionalOptions()Ljava/util/Set;
+#requiredContext()Ljava/util/Map;[deprecated]
+#supportedProperties()Ljava/util/List;[deprecated]

+###org/apache/flink/table/factories/DynamicTableSourceFactory
@1.11.0
+#createDynamicTableSource(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;)Lorg/apache/flink/table/connector/source/DynamicTableSource;

+###org/apache/flink/table/factories/SerializationFormatFactory
@1.11.0

+###org/apache/flink/table/factories/TableFormatFactoryBase
@1.7.0
+#<init>(Ljava/lang/String;IZ)V
+#requiredContext()Ljava/util/Map;
+#supportsSchemaDerivation()Z
+#supportedProperties()Ljava/util/List;
+#deriveSchema(Ljava/util/Map;)Lorg/apache/flink/table/api/TableSchema;
@1.16.0
-###org/apache/flink/table/factories/TableFormatFactoryBase

+###org/apache/flink/table/factories/ModuleFactory
@1.10.0
+#createModule(Ljava/util/Map;)Lorg/apache/flink/table/module/Module;
@1.14.0
*#createModule(Ljava/util/Map;)Lorg/apache/flink/table/module/Module;[deprecated]
+#createModule(Lorg/apache/flink/table/factories/ModuleFactory$Context;)Lorg/apache/flink/table/module/Module;
+#factoryIdentifier()Ljava/lang/String;
+#requiredOptions()Ljava/util/Set;
+#optionalOptions()Ljava/util/Set;
+#requiredContext()Ljava/util/Map;[deprecated]
+#supportedProperties()Ljava/util/List;[deprecated]

+###org/apache/flink/table/factories/FactoryUtil$DefaultCatalogContext
@1.13.0
+#<init>(Ljava/lang/String;Ljava/util/Map;Lorg/apache/flink/configuration/ReadableConfig;Ljava/lang/ClassLoader;)V
+#getName()Ljava/lang/String;
+#getOptions()Ljava/util/Map;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/factories/DecodingFormatFactory
@1.11.0
+#createDecodingFormat(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/format/DecodingFormat;

+###org/apache/flink/table/factories/DeserializationSchemaFactory
@1.7.0
+#createDeserializationSchema(Ljava/util/Map;)Lorg/apache/flink/api/common/serialization/DeserializationSchema;
@1.16.0
-###org/apache/flink/table/factories/DeserializationSchemaFactory

+###org/apache/flink/table/factories/FileSystemFormatFactory$ReaderContext
@1.11.0
+#getSchema()Lorg/apache/flink/table/api/TableSchema;
+#getFormatOptions()Lorg/apache/flink/configuration/ReadableConfig;
+#getPartitionKeys()Ljava/util/List;
+#getDefaultPartName()Ljava/lang/String;
+#getPaths()[Lorg/apache/flink/core/fs/Path;
+#getProjectFields()[I
+#getPushedDownLimit()J
+#getPushedDownFilters()Ljava/util/List;
+#getFormatFieldNames()[Ljava/lang/String;
+#getFormatFieldTypes()[Lorg/apache/flink/table/types/DataType;
+#getFormatRowType()Lorg/apache/flink/table/types/logical/RowType;
+#getFormatProjectFields()Ljava/util/List;
@1.15.0
-###org/apache/flink/table/factories/FileSystemFormatFactory$ReaderContext

+###org/apache/flink/table/factories/TableSourceFactory
@1.9.0
+#createTableSource(Ljava/util/Map;)Lorg/apache/flink/table/sources/TableSource;
+#createTableSource(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogTable;)Lorg/apache/flink/table/sources/TableSource;
@1.11.0
*#createTableSource(Ljava/util/Map;)Lorg/apache/flink/table/sources/TableSource;[deprecated]
*#createTableSource(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogTable;)Lorg/apache/flink/table/sources/TableSource;[deprecated]
+#createTableSource(Lorg/apache/flink/table/factories/TableSourceFactory$Context;)Lorg/apache/flink/table/sources/TableSource;

+###org/apache/flink/table/factories/TableSourceFactoryContextImpl
@1.11.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;)V
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getTable()Lorg/apache/flink/table/catalog/CatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
@1.12.0
+#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;Z)V
+#isTemporary()Z
-#<init>(Lorg/apache/flink/table/catalog/ObjectIdentifier;Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/configuration/ReadableConfig;)V

+###org/apache/flink/table/factories/TableFactory
@1.7.0
+#requiredContext()Ljava/util/Map;
+#supportedProperties()Ljava/util/List;

+###org/apache/flink/table/factories/DynamicTableFactory$Context
@1.11.0
+#getObjectIdentifier()Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getCatalogTable()Lorg/apache/flink/table/catalog/CatalogTable;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;
@1.12.0
+#isTemporary()Z
@1.13.0
+#getCatalogTable()Lorg/apache/flink/table/catalog/ResolvedCatalogTable;
-#getCatalogTable()Lorg/apache/flink/table/catalog/CatalogTable;
@1.15.0
+#getEnrichmentOptions()Ljava/util/Map;
+#getPhysicalRowDataType()Lorg/apache/flink/table/types/DataType;
+#getPrimaryKeyIndexes()[I

+###org/apache/flink/table/factories/CatalogFactory$Context
@1.13.0
+#getName()Ljava/lang/String;
+#getOptions()Ljava/util/Map;
+#getConfiguration()Lorg/apache/flink/configuration/ReadableConfig;
+#getClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/factories/TableFormatFactory
@1.7.0
+#supportsSchemaDerivation()Z
+#supportedProperties()Ljava/util/List;
@1.16.0
-###org/apache/flink/table/factories/TableFormatFactory

+###org/apache/flink/table/catalog/CatalogBaseTable$TableKind
@1.13.0
+#values()[Lorg/apache/flink/table/catalog/CatalogBaseTable$TableKind;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/catalog/CatalogBaseTable$TableKind;

+###org/apache/flink/table/catalog/AbstractCatalog
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#getDefaultDatabase()Ljava/lang/String;

+###org/apache/flink/table/catalog/CatalogTable
@1.9.0
+#isPartitioned()Z
+#getPartitionKeys()Ljava/util/List;
+#toProperties()Ljava/util/Map;
@1.11.0
+#copy(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;
@1.13.0
+#of(Lorg/apache/flink/table/api/Schema;Ljava/lang/String;Ljava/util/List;Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;
+#fromProperties(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;
+#getTableKind()Lorg/apache/flink/table/catalog/CatalogBaseTable$TableKind;
*#toProperties()Ljava/util/Map;[deprecated]

+###org/apache/flink/table/catalog/CatalogDatabase
@1.9.0
+#getProperties()Ljava/util/Map;
+#getComment()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/catalog/CatalogDatabase;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
@1.13.0
+#copy(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogDatabase;

+###org/apache/flink/table/catalog/TemporaryOperationListener
@1.13.0
+#onCreateTemporaryTable(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogBaseTable;)Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#onDropTemporaryTable(Lorg/apache/flink/table/catalog/ObjectPath;)V
+#onCreateTemporaryFunction(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogFunction;)Lorg/apache/flink/table/catalog/CatalogFunction;
+#onDropTemporaryFunction(Lorg/apache/flink/table/catalog/ObjectPath;)V

+###org/apache/flink/table/catalog/CommonCatalogOptions
@1.13.0
+#<init>()V

+###org/apache/flink/table/catalog/ResolvedCatalogBaseTable
@1.13.0
+#getOrigin()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#getResolvedSchema()Lorg/apache/flink/table/catalog/ResolvedSchema;
+#getSchema()Lorg/apache/flink/table/api/TableSchema;[deprecated]

+###org/apache/flink/table/catalog/ObjectIdentifier
@1.9.0
+#of(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/catalog/ObjectIdentifier;
+#getCatalogName()Ljava/lang/String;
+#getDatabaseName()Ljava/lang/String;
+#getObjectName()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.10.0
+#toObjectPath()Lorg/apache/flink/table/catalog/ObjectPath;
+#asSummaryString()Ljava/lang/String;
@1.11.0
+#toList()Ljava/util/List;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataString
@1.9.0
+#<init>(JDJJ)V
+#<init>(JDJJLjava/util/Map;)V
+#getMaxLength()J
+#getAvgLength()D
+#getNdv()J
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataString;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Long;)V
+#<init>(Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)V
+#getMaxLength()Ljava/lang/Long;
+#getAvgLength()Ljava/lang/Double;
+#getNdv()Ljava/lang/Long;
-#<init>(JDJJ)V
-#<init>(JDJJLjava/util/Map;)V
-#getMaxLength()J
-#getAvgLength()D
-#getNdv()J
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatistics
@1.9.0
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Ljava/util/Map;)V
+#getColumnStatisticsData()Ljava/util/Map;
+#getProperties()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatistics;
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBinary
@1.9.0
+#<init>(JDJ)V
+#<init>(JDJLjava/util/Map;)V
+#getMaxLength()J
+#getAvgLength()D
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBinary;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;)V
+#<init>(Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Long;Ljava/util/Map;)V
+#getMaxLength()Ljava/lang/Long;
+#getAvgLength()Ljava/lang/Double;
-#<init>(JDJ)V
-#<init>(JDJLjava/util/Map;)V
-#getMaxLength()J
-#getAvgLength()D
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataDate
@1.9.0
+#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;JJ)V
+#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;JJLjava/util/Map;)V
+#getMin()Lorg/apache/flink/table/catalog/stats/Date;
+#getMax()Lorg/apache/flink/table/catalog/stats/Date;
+#getNdv()J
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataDate;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;Ljava/lang/Long;Ljava/lang/Long;)V
+#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)V
+#getNdv()Ljava/lang/Long;
-#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;JJ)V
-#<init>(Lorg/apache/flink/table/catalog/stats/Date;Lorg/apache/flink/table/catalog/stats/Date;JJLjava/util/Map;)V
-#getNdv()J
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/Date
@1.9.0
+#<init>(J)V
+#getDaysSinceEpoch()J
+#copy()Lorg/apache/flink/table/catalog/stats/Date;
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataLong
@1.9.0
+#<init>(JJJJ)V
+#<init>(JJJJLjava/util/Map;)V
+#getMin()J
+#getMax()J
+#getNdv()J
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataLong;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)V
+#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)V
+#getMin()Ljava/lang/Long;
+#getMax()Ljava/lang/Long;
+#getNdv()Ljava/lang/Long;
-#<init>(JJJJ)V
-#<init>(JJJJLjava/util/Map;)V
-#getMin()J
-#getMax()J
-#getNdv()J
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataDouble
@1.9.0
+#<init>(DDJJ)V
+#<init>(DDJJLjava/util/Map;)V
+#getMin()D
+#getMax()D
+#getNdv()J
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataDouble;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Long;)V
+#<init>(Ljava/lang/Double;Ljava/lang/Double;Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)V
+#getMin()Ljava/lang/Double;
+#getMax()Ljava/lang/Double;
+#getNdv()Ljava/lang/Long;
-#<init>(DDJJ)V
-#<init>(DDJJLjava/util/Map;)V
-#getMin()D
-#getMax()D
-#getNdv()J
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBoolean
@1.9.0
+#<init>(JJJ)V
+#<init>(JJJLjava/util/Map;)V
+#getTrueCount()Ljava/lang/Long;
+#getFalseCount()Ljava/lang/Long;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBoolean;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;)V
+#<init>(Ljava/lang/Long;Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)V
-#<init>(JJJ)V
-#<init>(JJJLjava/util/Map;)V
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase
@1.9.0
+#<init>(J)V
+#<init>(JLjava/util/Map;)V
+#getNullCount()J
+#getProperties()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogColumnStatisticsDataBase;
@1.10.0
+#<init>(Ljava/lang/Long;)V
+#<init>(Ljava/lang/Long;Ljava/util/Map;)V
+#getNullCount()Ljava/lang/Long;
-#<init>(J)V
-#<init>(JLjava/util/Map;)V
-#getNullCount()J

+###org/apache/flink/table/catalog/stats/CatalogTableStatistics
@1.9.0
+#<init>(JIJJ)V
+#<init>(JIJJLjava/util/Map;)V
+#getRowCount()J
+#getFileCount()I
+#getTotalSize()J
+#getRawDataSize()J
+#getProperties()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/catalog/stats/CatalogTableStatistics;
@1.16.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/exceptions/TableNotPartitionedException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/DatabaseAlreadyExistException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V

+###org/apache/flink/table/catalog/exceptions/TablePartitionedException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/TableAlreadyExistException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/CatalogException
@1.9.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/TableNotExistException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/PartitionNotExistException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/FunctionNotExistException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/DatabaseNotEmptyException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V

+###org/apache/flink/table/catalog/exceptions/PartitionSpecInvalidException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/util/List;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)V
+#<init>(Ljava/lang/String;Ljava/util/List;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/FunctionAlreadyExistException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/PartitionAlreadyExistsException
@1.9.0
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)V
+#<init>(Ljava/lang/String;Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Ljava/lang/Throwable;)V

+###org/apache/flink/table/catalog/exceptions/DatabaseNotExistException
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V

+###org/apache/flink/table/catalog/ResolvedSchema
@1.13.0
+#<init>(Ljava/util/List;Ljava/util/List;Lorg/apache/flink/table/catalog/UniqueConstraint;)V
+#of(Ljava/util/List;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#of([Lorg/apache/flink/table/catalog/Column;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#physical(Ljava/util/List;Ljava/util/List;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#physical([Ljava/lang/String;[Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/ResolvedSchema;
+#getColumnCount()I
+#getColumns()Ljava/util/List;
+#getColumnNames()Ljava/util/List;
+#getColumnDataTypes()Ljava/util/List;
+#getColumn(I)Ljava/util/Optional;
+#getColumn(Ljava/lang/String;)Ljava/util/Optional;
+#getWatermarkSpecs()Ljava/util/List;
+#getPrimaryKey()Ljava/util/Optional;
+#toSourceRowDataType()Lorg/apache/flink/table/types/DataType;
+#toPhysicalRowDataType()Lorg/apache/flink/table/types/DataType;
+#toSinkRowDataType()Lorg/apache/flink/table/types/DataType;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.15.0
+#getPrimaryKeyIndexes()[I

+###org/apache/flink/table/catalog/FunctionLanguage
@1.10.0
+#values()[Lorg/apache/flink/table/catalog/FunctionLanguage;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/catalog/FunctionLanguage;

+###org/apache/flink/table/catalog/CatalogView
@1.9.0
+#getOriginalQuery()Ljava/lang/String;
+#getExpandedQuery()Ljava/lang/String;
@1.13.0
+#of(Lorg/apache/flink/table/api/Schema;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogView;
+#getTableKind()Lorg/apache/flink/table/catalog/CatalogBaseTable$TableKind;

+###org/apache/flink/table/catalog/CatalogPropertiesUtil
@1.13.0
+#serializeCatalogTable(Lorg/apache/flink/table/catalog/ResolvedCatalogTable;)Ljava/util/Map;
+#deserializeCatalogTable(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;

+###org/apache/flink/table/catalog/DataTypeFactory
@1.11.0
+#createDataType(Lorg/apache/flink/table/types/AbstractDataType;)Lorg/apache/flink/table/types/DataType;
+#createDataType(Ljava/lang/String;)Lorg/apache/flink/table/types/DataType;
+#createDataType(Lorg/apache/flink/table/catalog/UnresolvedIdentifier;)Lorg/apache/flink/table/types/DataType;
+#createDataType(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#createRawDataType(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
@1.13.0
+#createDataType(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
+#createRawDataType(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/types/DataType;
@1.15.0
+#createLogicalType(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/LogicalType;
+#createLogicalType(Lorg/apache/flink/table/catalog/UnresolvedIdentifier;)Lorg/apache/flink/table/types/logical/LogicalType;

+###org/apache/flink/table/catalog/CatalogPartition
@1.9.0
+#getProperties()Ljava/util/Map;
+#getComment()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/catalog/CatalogPartition;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;

+###org/apache/flink/table/catalog/CatalogFunction
@1.9.0
+#getClassName()Ljava/lang/String;
+#getProperties()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/catalog/CatalogFunction;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
@1.10.0
+#isGeneric()Z
+#getFunctionLanguage()Lorg/apache/flink/table/catalog/FunctionLanguage;
-#getProperties()Ljava/util/Map;
@1.16.0
*#isGeneric()Z[deprecated]
+#getFunctionResources()Ljava/util/List;

+###org/apache/flink/table/catalog/ObjectPath
@1.9.0
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#getDatabaseName()Ljava/lang/String;
+#getObjectName()Ljava/lang/String;
+#getFullName()Ljava/lang/String;
+#fromString(Ljava/lang/String;)Lorg/apache/flink/table/catalog/ObjectPath;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/CatalogBaseTable
@1.9.0
+#getProperties()Ljava/util/Map;
+#getSchema()Lorg/apache/flink/table/api/TableSchema;
+#getComment()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
@1.11.0
*#getProperties()Ljava/util/Map;[deprecated]
+#getOptions()Ljava/util/Map;
@1.13.0
+#getTableKind()Lorg/apache/flink/table/catalog/CatalogBaseTable$TableKind;
*#getSchema()Lorg/apache/flink/table/api/TableSchema;[deprecated]
+#getUnresolvedSchema()Lorg/apache/flink/table/api/Schema;
-#getProperties()Ljava/util/Map;[deprecated]

+###org/apache/flink/table/catalog/Column$MetadataColumn
@1.13.0
+#isVirtual()Z
+#getMetadataKey()Ljava/util/Optional;
+#isPhysical()Z
+#isPersisted()Z
+#explainExtras()Ljava/util/Optional;
+#copy(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/Column;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column$MetadataColumn;
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column;

+###org/apache/flink/table/catalog/UniqueConstraint
@1.13.0
+#primaryKey(Ljava/lang/String;Ljava/util/List;)Lorg/apache/flink/table/catalog/UniqueConstraint;
+#getColumns()Ljava/util/List;
+#getType()Lorg/apache/flink/table/catalog/Constraint$ConstraintType;
+#asSummaryString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#isEnforced()Z
+#getName()Ljava/lang/String;

+###org/apache/flink/table/catalog/Catalog
@1.9.0
+#getTableFactory()Ljava/util/Optional;
+#open()V
+#close()V
+#getDefaultDatabase()Ljava/lang/String;
+#listDatabases()Ljava/util/List;
+#getDatabase(Ljava/lang/String;)Lorg/apache/flink/table/catalog/CatalogDatabase;
+#databaseExists(Ljava/lang/String;)Z
+#createDatabase(Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogDatabase;Z)V
+#dropDatabase(Ljava/lang/String;Z)V
+#alterDatabase(Ljava/lang/String;Lorg/apache/flink/table/catalog/CatalogDatabase;Z)V
+#listTables(Ljava/lang/String;)Ljava/util/List;
+#listViews(Ljava/lang/String;)Ljava/util/List;
+#getTable(Lorg/apache/flink/table/catalog/ObjectPath;)Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#tableExists(Lorg/apache/flink/table/catalog/ObjectPath;)Z
+#dropTable(Lorg/apache/flink/table/catalog/ObjectPath;Z)V
+#renameTable(Lorg/apache/flink/table/catalog/ObjectPath;Ljava/lang/String;Z)V
+#createTable(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogBaseTable;Z)V
+#alterTable(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogBaseTable;Z)V
+#listPartitions(Lorg/apache/flink/table/catalog/ObjectPath;)Ljava/util/List;
+#listPartitions(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Ljava/util/List;
+#getPartition(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Lorg/apache/flink/table/catalog/CatalogPartition;
+#partitionExists(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Z
+#createPartition(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Lorg/apache/flink/table/catalog/CatalogPartition;Z)V
+#dropPartition(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Z)V
+#alterPartition(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Lorg/apache/flink/table/catalog/CatalogPartition;Z)V
+#listFunctions(Ljava/lang/String;)Ljava/util/List;
+#getFunction(Lorg/apache/flink/table/catalog/ObjectPath;)Lorg/apache/flink/table/catalog/CatalogFunction;
+#functionExists(Lorg/apache/flink/table/catalog/ObjectPath;)Z
+#createFunction(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogFunction;Z)V
+#alterFunction(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogFunction;Z)V
+#dropFunction(Lorg/apache/flink/table/catalog/ObjectPath;Z)V
+#getTableStatistics(Lorg/apache/flink/table/catalog/ObjectPath;)Lorg/apache/flink/table/catalog/stats/CatalogTableStatistics;
+#getTableColumnStatistics(Lorg/apache/flink/table/catalog/ObjectPath;)Lorg/apache/flink/table/catalog/stats/CatalogColumnStatistics;
+#getPartitionStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Lorg/apache/flink/table/catalog/stats/CatalogTableStatistics;
+#getPartitionColumnStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Lorg/apache/flink/table/catalog/stats/CatalogColumnStatistics;
+#alterTableStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/stats/CatalogTableStatistics;Z)V
+#alterTableColumnStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/stats/CatalogColumnStatistics;Z)V
+#alterPartitionStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Lorg/apache/flink/table/catalog/stats/CatalogTableStatistics;Z)V
+#alterPartitionColumnStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;Lorg/apache/flink/table/catalog/stats/CatalogColumnStatistics;Z)V
@1.10.0
+#getFunctionDefinitionFactory()Ljava/util/Optional;
+#dropDatabase(Ljava/lang/String;ZZ)V
+#listPartitionsByFilter(Lorg/apache/flink/table/catalog/ObjectPath;Ljava/util/List;)Ljava/util/List;
@1.11.0
+#getFactory()Ljava/util/Optional;
*#getTableFactory()Ljava/util/Optional;[deprecated]
@1.15.0
+#supportsManagedTable()Z
@1.16.0
+#bulkGetPartitionStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Ljava/util/List;)Ljava/util/List;
+#bulkGetPartitionColumnStatistics(Lorg/apache/flink/table/catalog/ObjectPath;Ljava/util/List;)Ljava/util/List;

+###org/apache/flink/table/catalog/Column
@1.13.0
+#physical(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/Column$PhysicalColumn;
+#computed(Ljava/lang/String;Lorg/apache/flink/table/expressions/ResolvedExpression;)Lorg/apache/flink/table/catalog/Column$ComputedColumn;
+#metadata(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;Ljava/lang/String;Z)Lorg/apache/flink/table/catalog/Column$MetadataColumn;
+#isPhysical()Z
+#isPersisted()Z
+#getDataType()Lorg/apache/flink/table/types/DataType;
+#getName()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#explainExtras()Ljava/util/Optional;
+#copy(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/Column;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column;
+#getComment()Ljava/util/Optional;

+###org/apache/flink/table/catalog/CatalogPartitionSpec
@1.9.0
+#<init>(Ljava/util/Map;)V
+#getPartitionSpec()Ljava/util/Map;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/Column$PhysicalColumn
@1.13.0
+#isPhysical()Z
+#isPersisted()Z
+#explainExtras()Ljava/util/Optional;
+#copy(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/Column;
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column$PhysicalColumn;
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column;

+###org/apache/flink/table/catalog/ResolvedCatalogView
@1.13.0
+#<init>(Lorg/apache/flink/table/catalog/CatalogView;Lorg/apache/flink/table/catalog/ResolvedSchema;)V
+#getOrigin()Lorg/apache/flink/table/catalog/CatalogView;
+#getResolvedSchema()Lorg/apache/flink/table/catalog/ResolvedSchema;
+#getOptions()Ljava/util/Map;
+#getUnresolvedSchema()Lorg/apache/flink/table/api/Schema;
+#getComment()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
+#getOriginalQuery()Ljava/lang/String;
+#getExpandedQuery()Ljava/lang/String;
+#getOrigin()Lorg/apache/flink/table/catalog/CatalogBaseTable;

+###org/apache/flink/table/catalog/Constraint$ConstraintType
@1.13.0
+#values()[Lorg/apache/flink/table/catalog/Constraint$ConstraintType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Constraint$ConstraintType;

+###org/apache/flink/table/catalog/WatermarkSpec
@1.13.0
+#of(Ljava/lang/String;Lorg/apache/flink/table/expressions/ResolvedExpression;)Lorg/apache/flink/table/catalog/WatermarkSpec;
+#getRowtimeAttribute()Ljava/lang/String;
+#getWatermarkExpression()Lorg/apache/flink/table/expressions/ResolvedExpression;
+#asSummaryString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/DefaultCatalogTable
@1.14.0
+#getUnresolvedSchema()Lorg/apache/flink/table/api/Schema;
+#getComment()Ljava/lang/String;
+#isPartitioned()Z
+#getPartitionKeys()Ljava/util/List;
+#getOptions()Ljava/util/Map;
+#copy()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#copy(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
+#toProperties()Ljava/util/Map;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.15.0
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/SchemaResolver
@1.13.0
+#resolve(Lorg/apache/flink/table/api/Schema;)Lorg/apache/flink/table/catalog/ResolvedSchema;

+###org/apache/flink/table/catalog/ResolvedCatalogTable
@1.13.0
+#<init>(Lorg/apache/flink/table/catalog/CatalogTable;Lorg/apache/flink/table/catalog/ResolvedSchema;)V
+#getOrigin()Lorg/apache/flink/table/catalog/CatalogTable;
+#getResolvedSchema()Lorg/apache/flink/table/catalog/ResolvedSchema;
+#toProperties()Ljava/util/Map;
+#getOptions()Ljava/util/Map;
+#getUnresolvedSchema()Lorg/apache/flink/table/api/Schema;
+#getComment()Ljava/lang/String;
+#copy()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#getDescription()Ljava/util/Optional;
+#getDetailedDescription()Ljava/util/Optional;
+#isPartitioned()Z
+#getPartitionKeys()Ljava/util/List;
+#copy(Ljava/util/Map;)Lorg/apache/flink/table/catalog/ResolvedCatalogTable;
+#getOrigin()Lorg/apache/flink/table/catalog/CatalogBaseTable;
+#copy(Ljava/util/Map;)Lorg/apache/flink/table/catalog/CatalogTable;
@1.15.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/catalog/Column$ComputedColumn
@1.13.0
+#isPhysical()Z
+#isPersisted()Z
+#getExpression()Lorg/apache/flink/table/expressions/ResolvedExpression;
+#explainExtras()Ljava/util/Optional;
+#copy(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/catalog/Column;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column$ComputedColumn;
+#withComment(Ljava/lang/String;)Lorg/apache/flink/table/catalog/Column;

+###org/apache/flink/table/catalog/UnresolvedIdentifier
@1.10.0
+#of([Ljava/lang/String;)Lorg/apache/flink/table/catalog/UnresolvedIdentifier;
+#getCatalogName()Ljava/util/Optional;
+#getDatabaseName()Ljava/util/Optional;
+#getObjectName()Ljava/lang/String;
+#asSummaryString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.11.0
+#of(Ljava/util/List;)Lorg/apache/flink/table/catalog/UnresolvedIdentifier;
@1.15.0
+#of(Lorg/apache/flink/table/catalog/ObjectIdentifier;)Lorg/apache/flink/table/catalog/UnresolvedIdentifier;

+###org/apache/flink/table/catalog/Constraint
@1.13.0
+#getName()Ljava/lang/String;
+#isEnforced()Z
+#getType()Lorg/apache/flink/table/catalog/Constraint$ConstraintType;
+#asSummaryString()Ljava/lang/String;

+###org/apache/flink/table/typeutils/TimeIndicatorTypeInfo
@1.9.0
+#createSerializer(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#isEventTime()Z
+#toString()Ljava/lang/String;

+###org/apache/flink/table/typeutils/TimeIntervalTypeInfo
@1.9.0
+#isBasicType()Z
+#isTupleType()Z
+#getArity()I
+#getTotalFields()I
+#getTypeClass()Ljava/lang/Class;
+#isKeyType()Z
+#createSerializer(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#createComparator(ZLorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeComparator;
+#hashCode()I
+#canEqual(Ljava/lang/Object;)Z
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
@1.13.0
+#getDataType()Lorg/apache/flink/table/types/DataType;

+###org/apache/flink/table/utils/TypeStringUtils
@1.7.0
+#<init>()V
+#writeTypeInfo(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Ljava/lang/String;
+#readTypeInfo(Ljava/lang/String;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;

+###org/apache/flink/table/utils/TableSchemaUtils
@1.10.0
+#<init>()V
+#getPhysicalSchema(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/api/TableSchema;
+#containsGeneratedColumns(Lorg/apache/flink/table/api/TableSchema;)Z
+#checkNoGeneratedColumns(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/api/TableSchema;
@1.11.0
+#projectSchema(Lorg/apache/flink/table/api/TableSchema;[[I)Lorg/apache/flink/table/api/TableSchema;
+#getPrimaryKeyIndices(Lorg/apache/flink/table/api/TableSchema;)[I
+#builderWithGivenSchema(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/api/TableSchema$Builder;
+#dropConstraint(Lorg/apache/flink/table/api/TableSchema;Ljava/lang/String;)Lorg/apache/flink/table/api/TableSchema;
@1.12.0
+#containsPhysicalColumnsOnly(Lorg/apache/flink/table/api/TableSchema;)Z
+#checkOnlyPhysicalColumns(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/api/TableSchema;
-#containsGeneratedColumns(Lorg/apache/flink/table/api/TableSchema;)Z
-#checkNoGeneratedColumns(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/api/TableSchema;
@1.15.0
-#projectSchema(Lorg/apache/flink/table/api/TableSchema;[[I)Lorg/apache/flink/table/api/TableSchema;

+###org/apache/flink/table/utils/TimestampStringUtils
@1.13.0
+#<init>()V
+#timestampToString(Ljava/time/LocalDateTime;I)Ljava/lang/String;
+#unixTimeToString(I)Ljava/lang/String;
+#timeToInternal(Ljava/sql/Time;)I
+#localTimeToUnixDate(Ljava/time/LocalTime;)I
@1.15.0
-###org/apache/flink/table/utils/TimestampStringUtils

+###org/apache/flink/table/utils/EncodingUtils
@1.7.0
+#encodeObjectToString(Ljava/io/Serializable;)Ljava/lang/String;
+#decodeStringToObject(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;
+#decodeStringToObject(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/io/Serializable;
+#loadClass(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#encodeStringToBase64(Ljava/lang/String;)Ljava/lang/String;
+#decodeBase64ToString(Ljava/lang/String;)Ljava/lang/String;
+#md5(Ljava/lang/String;)[B
+#hex(Ljava/lang/String;)Ljava/lang/String;
+#hex([B)Ljava/lang/String;
+#repeat(Ljava/lang/String;I)Ljava/lang/String;
+#repeat(CI)Ljava/lang/String;
+#escapeJava(Ljava/lang/String;)Ljava/lang/String;
@1.9.0
+#escapeBackticks(Ljava/lang/String;)Ljava/lang/String;
+#escapeSingleQuotes(Ljava/lang/String;)Ljava/lang/String;
+#escapeIdentifier(Ljava/lang/String;)Ljava/lang/String;
+#encodeBytesToBase64([B)Ljava/lang/String;
+#decodeBase64ToBytes(Ljava/lang/String;)[B
+#objectToString(Ljava/lang/Object;)Ljava/lang/String;
@1.11.0
-#objectToString(Ljava/lang/Object;)Ljava/lang/String;
@1.13.0
+#encodeObjectToString(Ljava/lang/Object;)Ljava/lang/String;
+#decodeStringToObject(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Object;
@1.15.0
+#decodeHex(Ljava/lang/String;)[B
@1.16.0
*#loadClass(Ljava/lang/String;)Ljava/lang/Class;[deprecated]

+###org/apache/flink/table/utils/ThreadLocalCache
@1.9.0
+#get(Ljava/lang/Object;)Ljava/lang/Object;
+#getNewInstance(Ljava/lang/Object;)Ljava/lang/Object;
@1.15.0
+#of(Ljava/util/function/Function;)Lorg/apache/flink/table/utils/ThreadLocalCache;

+###org/apache/flink/table/utils/PartitionPathUtils
@1.11.0
+#<init>()V
+#generatePartitionPath(Ljava/util/LinkedHashMap;)Ljava/lang/String;
+#extractPartitionValues(Lorg/apache/flink/core/fs/Path;)Ljava/util/List;
+#extractPartitionSpecFromPath(Lorg/apache/flink/core/fs/Path;)Ljava/util/LinkedHashMap;
+#unescapePathName(Ljava/lang/String;)Ljava/lang/String;
+#listStatusWithoutHidden(Lorg/apache/flink/core/fs/FileSystem;Lorg/apache/flink/core/fs/Path;)[Lorg/apache/flink/core/fs/FileStatus;
+#searchPartSpecAndPaths(Lorg/apache/flink/core/fs/FileSystem;Lorg/apache/flink/core/fs/Path;I)Ljava/util/List;
+#fillPartitionValueForRecord([Ljava/lang/String;[Lorg/apache/flink/table/types/DataType;[ILjava/util/List;Lorg/apache/flink/core/fs/Path;Ljava/lang/String;)Lorg/apache/flink/table/data/GenericRowData;
+#convertStringToInternalValue(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Ljava/lang/Object;

+###org/apache/flink/table/utils/TableConnectorUtils
@1.8.0
+#generateRuntimeName(Ljava/lang/Class;[Ljava/lang/String;)Ljava/lang/String;

+###org/apache/flink/table/utils/TypeMappingUtils
@1.10.0
+#computePhysicalIndices(Ljava/util/List;Lorg/apache/flink/table/types/DataType;Ljava/util/function/Function;)[I
+#computePhysicalIndicesOrTimeAttributeMarkers(Lorg/apache/flink/table/sources/TableSource;Ljava/util/List;ZLjava/util/function/Function;)[I
+#checkPhysicalLogicalTypeCompatible(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;Ljava/lang/String;Ljava/lang/String;Z)V

+###org/apache/flink/table/utils/PrintUtils
@1.11.0
+#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;)V
+#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;ILjava/lang/String;Z)V
+#rowToString(Lorg/apache/flink/types/Row;)[Ljava/lang/String;
+#rowToString(Lorg/apache/flink/types/Row;Ljava/lang/String;)[Ljava/lang/String;
+#genBorderLine([I)Ljava/lang/String;
+#columnWidthsByType(Ljava/util/List;ILjava/lang/String;Ljava/lang/String;)[I
+#printSingleRow([I[Ljava/lang/String;Ljava/io/PrintWriter;)V
+#getStringDisplayWidth(Ljava/lang/String;)I
+#isFullWidth(I)Z
@1.12.0
+#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;ILjava/lang/String;ZZ)V
+#rowToString(Lorg/apache/flink/types/Row;Ljava/lang/String;Z)[Ljava/lang/String;
-#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;ILjava/lang/String;Z)V
-#rowToString(Lorg/apache/flink/types/Row;Ljava/lang/String;)[Ljava/lang/String;
@1.13.0
+#printAsTableauForm(Lorg/apache/flink/table/catalog/ResolvedSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;Ljava/time/ZoneId;)V
+#printAsTableauForm(Lorg/apache/flink/table/catalog/ResolvedSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;ILjava/lang/String;ZZLjava/time/ZoneId;)V
+#rowToString(Lorg/apache/flink/types/Row;Lorg/apache/flink/table/catalog/ResolvedSchema;Ljava/time/ZoneId;)[Ljava/lang/String;
+#rowToString(Lorg/apache/flink/types/Row;Ljava/lang/String;ZLorg/apache/flink/table/catalog/ResolvedSchema;Ljava/time/ZoneId;)[Ljava/lang/String;
-#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;)V
-#printAsTableauForm(Lorg/apache/flink/table/api/TableSchema;Ljava/util/Iterator;Ljava/io/PrintWriter;ILjava/lang/String;ZZ)V
-#rowToString(Lorg/apache/flink/types/Row;)[Ljava/lang/String;
-#rowToString(Lorg/apache/flink/types/Row;Ljava/lang/String;Z)[Ljava/lang/String;
@1.15.0
-###org/apache/flink/table/utils/PrintUtils

+###org/apache/flink/table/data/StringData
@1.11.0
+#toBytes()[B
+#toString()Ljava/lang/String;
+#fromString(Ljava/lang/String;)Lorg/apache/flink/table/data/StringData;
+#fromBytes([B)Lorg/apache/flink/table/data/StringData;
+#fromBytes([BII)Lorg/apache/flink/table/data/StringData;

+###org/apache/flink/table/data/MapData
@1.11.0
+#size()I
+#keyArray()Lorg/apache/flink/table/data/ArrayData;
+#valueArray()Lorg/apache/flink/table/data/ArrayData;

+###org/apache/flink/table/data/RowData
@1.11.0
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#get(Lorg/apache/flink/table/data/RowData;ILorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;
+#createFieldGetter(Lorg/apache/flink/table/types/logical/LogicalType;I)Lorg/apache/flink/table/data/RowData$FieldGetter;
@1.12.0
-#get(Lorg/apache/flink/table/data/RowData;ILorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;

+###org/apache/flink/table/data/ArrayData$ElementGetter
@1.11.0
+#getElementOrNull(Lorg/apache/flink/table/data/ArrayData;I)Ljava/lang/Object;

+###org/apache/flink/table/data/RowData$FieldGetter
@1.11.0
+#getFieldOrNull(Lorg/apache/flink/table/data/RowData;)Ljava/lang/Object;

+###org/apache/flink/table/data/GenericArrayData
@1.11.0
+#<init>([Ljava/lang/Object;)V
+#<init>([I)V
+#<init>([J)V
+#<init>([F)V
+#<init>([D)V
+#<init>([S)V
+#<init>([B)V
+#<init>([Z)V
+#isPrimitiveArray()Z
+#toObjectArray()[Ljava/lang/Object;
+#size()I
+#isNullAt(I)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getBinary(I)[B
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#toBooleanArray()[Z
+#toByteArray()[B
+#toShortArray()[S
+#toIntArray()[I
+#toLongArray()[J
+#toFloatArray()[F
+#toDoubleArray()[D

+###org/apache/flink/table/data/DecimalData
@1.11.0
+#precision()I
+#scale()I
+#toBigDecimal()Ljava/math/BigDecimal;
+#toUnscaledLong()J
+#toUnscaledBytes()[B
+#isCompact()Z
+#copy()Lorg/apache/flink/table/data/DecimalData;
+#hashCode()I
+#compareTo(Lorg/apache/flink/table/data/DecimalData;)I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
+#fromBigDecimal(Ljava/math/BigDecimal;II)Lorg/apache/flink/table/data/DecimalData;
+#fromUnscaledLong(JII)Lorg/apache/flink/table/data/DecimalData;
+#fromUnscaledBytes([BII)Lorg/apache/flink/table/data/DecimalData;
+#zero(II)Lorg/apache/flink/table/data/DecimalData;
+#isCompact(I)Z
+#compareTo(Ljava/lang/Object;)I

+###org/apache/flink/table/data/GenericRowData
@1.11.0
+#<init>(Lorg/apache/flink/types/RowKind;I)V
+#<init>(I)V
+#setField(ILjava/lang/Object;)V
+#getField(I)Ljava/lang/Object;
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#of([Ljava/lang/Object;)Lorg/apache/flink/table/data/GenericRowData;
+#ofKind(Lorg/apache/flink/types/RowKind;[Ljava/lang/Object;)Lorg/apache/flink/table/data/GenericRowData;

+###org/apache/flink/table/data/TimestampData
@1.11.0
+#getMillisecond()J
+#getNanoOfMillisecond()I
+#toTimestamp()Ljava/sql/Timestamp;
+#toLocalDateTime()Ljava/time/LocalDateTime;
+#toInstant()Ljava/time/Instant;
+#compareTo(Lorg/apache/flink/table/data/TimestampData;)I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
+#hashCode()I
+#fromEpochMillis(J)Lorg/apache/flink/table/data/TimestampData;
+#fromEpochMillis(JI)Lorg/apache/flink/table/data/TimestampData;
+#fromLocalDateTime(Ljava/time/LocalDateTime;)Lorg/apache/flink/table/data/TimestampData;
+#fromTimestamp(Ljava/sql/Timestamp;)Lorg/apache/flink/table/data/TimestampData;
+#fromInstant(Ljava/time/Instant;)Lorg/apache/flink/table/data/TimestampData;
+#isCompact(I)Z
+#compareTo(Ljava/lang/Object;)I

+###org/apache/flink/table/data/GenericMapData
@1.11.0
+#<init>(Ljava/util/Map;)V
+#get(Ljava/lang/Object;)Ljava/lang/Object;
+#size()I
+#keyArray()Lorg/apache/flink/table/data/ArrayData;
+#valueArray()Lorg/apache/flink/table/data/ArrayData;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/data/ArrayData
@1.11.0
+#size()I
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#toBooleanArray()[Z
+#toByteArray()[B
+#toShortArray()[S
+#toIntArray()[I
+#toLongArray()[J
+#toFloatArray()[F
+#toDoubleArray()[D
+#get(Lorg/apache/flink/table/data/ArrayData;ILorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;[deprecated]
+#createElementGetter(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/data/ArrayData$ElementGetter;
@1.12.0
-#get(Lorg/apache/flink/table/data/ArrayData;ILorg/apache/flink/table/types/logical/LogicalType;)Ljava/lang/Object;[deprecated]

+###org/apache/flink/table/data/utils/JoinedRowData
@1.12.0
+#<init>()V
+#<init>(Lorg/apache/flink/table/data/RowData;Lorg/apache/flink/table/data/RowData;)V
+#replace(Lorg/apache/flink/table/data/RowData;Lorg/apache/flink/table/data/RowData;)Lorg/apache/flink/table/data/utils/JoinedRowData;
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.13.0
+#<init>(Lorg/apache/flink/types/RowKind;Lorg/apache/flink/table/data/RowData;Lorg/apache/flink/table/data/RowData;)V

+###org/apache/flink/table/data/RawValueData
@1.11.0
+#toObject(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Ljava/lang/Object;
+#toBytes(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)[B
+#fromObject(Ljava/lang/Object;)Lorg/apache/flink/table/data/RawValueData;
+#fromBytes([B)Lorg/apache/flink/table/data/RawValueData;

+###org/apache/flink/table/data/binary/BinaryArrayData
@1.11.0
+#calculateHeaderInBytes(I)I
+#calculateFixLengthPartSize(Lorg/apache/flink/table/types/logical/LogicalType;)I
+#<init>()V
+#size()I
+#pointTo([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#isNullAt(I)Z
+#setNullAt(I)V
+#setNotNullAt(I)V
+#getLong(I)J
+#setLong(IJ)V
+#setNullLong(I)V
+#getInt(I)I
+#setInt(II)V
+#setNullInt(I)V
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#getBoolean(I)Z
+#setBoolean(IZ)V
+#setNullBoolean(I)V
+#getByte(I)B
+#setByte(IB)V
+#setNullByte(I)V
+#getShort(I)S
+#setShort(IS)V
+#setNullShort(I)V
+#getFloat(I)F
+#setFloat(IF)V
+#setNullFloat(I)V
+#getDouble(I)D
+#setDouble(ID)V
+#setNullDouble(I)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V
+#anyNull()Z
+#toBooleanArray()[Z
+#toByteArray()[B
+#toShortArray()[S
+#toIntArray()[I
+#toLongArray()[J
+#toFloatArray()[F
+#toDoubleArray()[D
+#toObjectArray(Lorg/apache/flink/table/types/logical/LogicalType;)[Ljava/lang/Object;
+#copy()Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#copy(Lorg/apache/flink/table/data/binary/BinaryArrayData;)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#hashCode()I
+#fromPrimitiveArray([Z)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([B)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([S)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([I)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([J)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([F)Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#fromPrimitiveArray([D)Lorg/apache/flink/table/data/binary/BinaryArrayData;

+###org/apache/flink/table/data/binary/BinarySegmentUtils
@1.11.0
+#allocateReuseBytes(I)[B
+#allocateReuseChars(I)[C
+#copyToBytes([Lorg/apache/flink/core/memory/MemorySegment;II)[B
+#copyToBytes([Lorg/apache/flink/core/memory/MemorySegment;I[BII)[B
+#copyMultiSegmentsToBytes([Lorg/apache/flink/core/memory/MemorySegment;I[BII)V
+#copyToUnsafe([Lorg/apache/flink/core/memory/MemorySegment;ILjava/lang/Object;II)V
+#copyToView([Lorg/apache/flink/core/memory/MemorySegment;IILorg/apache/flink/core/memory/DataOutputView;)V
+#copyFromBytes([Lorg/apache/flink/core/memory/MemorySegment;I[BII)V
+#getBytes([Lorg/apache/flink/core/memory/MemorySegment;II)[B
+#equals([Lorg/apache/flink/core/memory/MemorySegment;I[Lorg/apache/flink/core/memory/MemorySegment;II)Z
+#hashByWords([Lorg/apache/flink/core/memory/MemorySegment;II)I
+#hash([Lorg/apache/flink/core/memory/MemorySegment;II)I
+#bitUnSet(Lorg/apache/flink/core/memory/MemorySegment;II)V
+#bitSet(Lorg/apache/flink/core/memory/MemorySegment;II)V
+#bitGet(Lorg/apache/flink/core/memory/MemorySegment;II)Z
+#bitUnSet([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#bitSet([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#bitGet([Lorg/apache/flink/core/memory/MemorySegment;II)Z
+#getBoolean([Lorg/apache/flink/core/memory/MemorySegment;I)Z
+#setBoolean([Lorg/apache/flink/core/memory/MemorySegment;IZ)V
+#getByte([Lorg/apache/flink/core/memory/MemorySegment;I)B
+#setByte([Lorg/apache/flink/core/memory/MemorySegment;IB)V
+#getInt([Lorg/apache/flink/core/memory/MemorySegment;I)I
+#setInt([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#getLong([Lorg/apache/flink/core/memory/MemorySegment;I)J
+#setLong([Lorg/apache/flink/core/memory/MemorySegment;IJ)V
+#getShort([Lorg/apache/flink/core/memory/MemorySegment;I)S
+#setShort([Lorg/apache/flink/core/memory/MemorySegment;IS)V
+#getFloat([Lorg/apache/flink/core/memory/MemorySegment;I)F
+#setFloat([Lorg/apache/flink/core/memory/MemorySegment;IF)V
+#getDouble([Lorg/apache/flink/core/memory/MemorySegment;I)D
+#setDouble([Lorg/apache/flink/core/memory/MemorySegment;ID)V
+#readDecimalData([Lorg/apache/flink/core/memory/MemorySegment;IJII)Lorg/apache/flink/table/data/DecimalData;
+#readTimestampData([Lorg/apache/flink/core/memory/MemorySegment;IJ)Lorg/apache/flink/table/data/TimestampData;
+#readBinary([Lorg/apache/flink/core/memory/MemorySegment;IIJ)[B
+#readStringData([Lorg/apache/flink/core/memory/MemorySegment;IIJ)Lorg/apache/flink/table/data/StringData;
+#readRawValueData([Lorg/apache/flink/core/memory/MemorySegment;IJ)Lorg/apache/flink/table/data/RawValueData;
+#readMapData([Lorg/apache/flink/core/memory/MemorySegment;IJ)Lorg/apache/flink/table/data/MapData;
+#readArrayData([Lorg/apache/flink/core/memory/MemorySegment;IJ)Lorg/apache/flink/table/data/ArrayData;
+#readRowData([Lorg/apache/flink/core/memory/MemorySegment;IIJ)Lorg/apache/flink/table/data/RowData;
+#find([Lorg/apache/flink/core/memory/MemorySegment;II[Lorg/apache/flink/core/memory/MemorySegment;II)I

+###org/apache/flink/table/data/binary/NullAwareGetters
@1.13.0
+#anyNull()Z
+#anyNull([I)Z

+###org/apache/flink/table/data/binary/BinaryRowData
@1.11.0
+#calculateBitSetWidthInBytes(I)I
+#calculateFixPartSizeInBytes(I)I
+#isInFixedLengthPart(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#isMutable(Lorg/apache/flink/table/types/logical/LogicalType;)Z
+#<init>(I)V
+#getFixedLengthPartSize()I
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#setTotalSize(I)V
+#isNullAt(I)Z
+#setNullAt(I)V
+#setInt(II)V
+#setLong(IJ)V
+#setDouble(ID)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V
+#setBoolean(IZ)V
+#setShort(IS)V
+#setByte(IB)V
+#setFloat(IF)V
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#anyNull()Z
+#anyNull([I)Z
+#copy()Lorg/apache/flink/table/data/binary/BinaryRowData;
+#copy(Lorg/apache/flink/table/data/binary/BinaryRowData;)Lorg/apache/flink/table/data/binary/BinaryRowData;
+#clear()V
+#hashCode()I
@1.12.0
+#equals(Ljava/lang/Object;)Z

+###org/apache/flink/table/data/binary/NestedRowData
@1.11.0
+#<init>(I)V
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#setNullAt(I)V
+#setInt(II)V
+#setLong(IJ)V
+#setDouble(ID)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V
+#setBoolean(IZ)V
+#setShort(IS)V
+#setByte(IB)V
+#setFloat(IF)V
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#copy()Lorg/apache/flink/table/data/binary/NestedRowData;
+#copy(Lorg/apache/flink/table/data/RowData;)Lorg/apache/flink/table/data/binary/NestedRowData;
+#hashCode()I
@1.12.0
+#equals(Ljava/lang/Object;)Z

+###org/apache/flink/table/data/binary/TypedSetters
@1.11.0
+#setNullAt(I)V
+#setBoolean(IZ)V
+#setByte(IB)V
+#setShort(IS)V
+#setInt(II)V
+#setLong(IJ)V
+#setFloat(IF)V
+#setDouble(ID)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V

+###org/apache/flink/table/data/binary/BinaryStringData
@1.11.0
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;IILjava/lang/String;)V
+#fromAddress([Lorg/apache/flink/core/memory/MemorySegment;II)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#fromString(Ljava/lang/String;)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#fromBytes([B)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#fromBytes([BII)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#blankString(I)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#toBytes()[B
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#compareTo(Lorg/apache/flink/table/data/StringData;)I
+#numChars()I
+#byteAt(I)B
+#getSegments()[Lorg/apache/flink/core/memory/MemorySegment;
+#getOffset()I
+#getSizeInBytes()I
+#ensureMaterialized()V
+#copy()Lorg/apache/flink/table/data/binary/BinaryStringData;
+#substring(II)Lorg/apache/flink/table/data/binary/BinaryStringData;
+#contains(Lorg/apache/flink/table/data/binary/BinaryStringData;)Z
+#startsWith(Lorg/apache/flink/table/data/binary/BinaryStringData;)Z
+#endsWith(Lorg/apache/flink/table/data/binary/BinaryStringData;)Z
+#trim()Lorg/apache/flink/table/data/binary/BinaryStringData;
+#indexOf(Lorg/apache/flink/table/data/binary/BinaryStringData;I)I
+#toUpperCase()Lorg/apache/flink/table/data/binary/BinaryStringData;
+#toLowerCase()Lorg/apache/flink/table/data/binary/BinaryStringData;
+#compareTo(Ljava/lang/Object;)I

+###org/apache/flink/table/data/binary/BinaryMapData
@1.11.0
+#<init>()V
+#size()I
+#pointTo([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#keyArray()Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#valueArray()Lorg/apache/flink/table/data/binary/BinaryArrayData;
+#toJavaMap(Lorg/apache/flink/table/types/logical/LogicalType;Lorg/apache/flink/table/types/logical/LogicalType;)Ljava/util/Map;
+#copy()Lorg/apache/flink/table/data/binary/BinaryMapData;
+#copy(Lorg/apache/flink/table/data/binary/BinaryMapData;)Lorg/apache/flink/table/data/binary/BinaryMapData;
+#hashCode()I
+#valueOf(Lorg/apache/flink/table/data/binary/BinaryArrayData;Lorg/apache/flink/table/data/binary/BinaryArrayData;)Lorg/apache/flink/table/data/binary/BinaryMapData;
+#valueArray()Lorg/apache/flink/table/data/ArrayData;
+#keyArray()Lorg/apache/flink/table/data/ArrayData;

+###org/apache/flink/table/data/binary/BinaryRawValueData
@1.11.0
+#<init>(Ljava/lang/Object;)V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;IILjava/lang/Object;)V
+#toObject(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)Ljava/lang/Object;
+#toBytes(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)[B
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#fromObject(Ljava/lang/Object;)Lorg/apache/flink/table/data/binary/BinaryRawValueData;
+#fromBytes([B)Lorg/apache/flink/table/data/binary/BinaryRawValueData;
+#fromBytes([BII)Lorg/apache/flink/table/data/binary/BinaryRawValueData;

+###org/apache/flink/table/data/binary/BinarySection
@1.11.0
+#<init>()V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#pointTo(Lorg/apache/flink/core/memory/MemorySegment;II)V
+#pointTo([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#getSegments()[Lorg/apache/flink/core/memory/MemorySegment;
+#getOffset()I
+#getSizeInBytes()I
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/data/binary/LazyBinaryFormat
@1.11.0
+#<init>()V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;IILjava/lang/Object;)V
+#<init>([Lorg/apache/flink/core/memory/MemorySegment;II)V
+#<init>(Ljava/lang/Object;)V
+#<init>(Ljava/lang/Object;Lorg/apache/flink/table/data/binary/BinarySection;)V
+#getJavaObject()Ljava/lang/Object;
+#getBinarySection()Lorg/apache/flink/table/data/binary/BinarySection;
+#setJavaObject(Ljava/lang/Object;)V
+#getSegments()[Lorg/apache/flink/core/memory/MemorySegment;
+#getOffset()I
+#getSizeInBytes()I
+#ensureMaterialized(Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V

+###org/apache/flink/table/data/binary/BinaryFormat
@1.11.0
+#getSegments()[Lorg/apache/flink/core/memory/MemorySegment;
+#getOffset()I
+#getSizeInBytes()I

+###org/apache/flink/table/descriptors/DescriptorValidator
@1.7.0
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V

+###org/apache/flink/table/descriptors/FileSystemValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V

+###org/apache/flink/table/descriptors/Descriptor
@1.7.0
+#toProperties()Ljava/util/Map;

+###org/apache/flink/table/descriptors/DescriptorProperties
@1.7.0
+#<init>(Z)V
+#<init>()V
+#putProperties(Ljava/util/Map;)V
+#putProperties(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
+#putClass(Ljava/lang/String;Ljava/lang/Class;)V
+#putString(Ljava/lang/String;Ljava/lang/String;)V
+#putBoolean(Ljava/lang/String;Z)V
+#putLong(Ljava/lang/String;J)V
+#putInt(Ljava/lang/String;I)V
+#putCharacter(Ljava/lang/String;C)V
+#putTableSchema(Ljava/lang/String;Lorg/apache/flink/table/api/TableSchema;)V
+#putMemorySize(Ljava/lang/String;Lorg/apache/flink/configuration/MemorySize;)V
+#putIndexedFixedProperties(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
+#putIndexedVariableProperties(Ljava/lang/String;Ljava/util/List;)V
+#getOptionalString(Ljava/lang/String;)Ljava/util/Optional;
+#getString(Ljava/lang/String;)Ljava/lang/String;
+#getOptionalCharacter(Ljava/lang/String;)Ljava/util/Optional;
+#getCharacter(Ljava/lang/String;)Ljava/lang/Character;
+#getOptionalClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/Optional;
+#getClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;
+#getOptionalBigDecimal(Ljava/lang/String;)Ljava/util/Optional;
+#getBigDecimal(Ljava/lang/String;)Ljava/math/BigDecimal;
+#getOptionalBoolean(Ljava/lang/String;)Ljava/util/Optional;
+#getBoolean(Ljava/lang/String;)Z
+#getOptionalByte(Ljava/lang/String;)Ljava/util/Optional;
+#getByte(Ljava/lang/String;)B
+#getOptionalDouble(Ljava/lang/String;)Ljava/util/Optional;
+#getDouble(Ljava/lang/String;)D
+#getOptionalFloat(Ljava/lang/String;)Ljava/util/Optional;
+#getFloat(Ljava/lang/String;)F
+#getOptionalInt(Ljava/lang/String;)Ljava/util/Optional;
+#getInt(Ljava/lang/String;)I
+#getOptionalLong(Ljava/lang/String;)Ljava/util/Optional;
+#getLong(Ljava/lang/String;)J
+#getOptionalShort(Ljava/lang/String;)Ljava/util/Optional;
+#getShort(Ljava/lang/String;)S
+#getOptionalType(Ljava/lang/String;)Ljava/util/Optional;
+#getType(Ljava/lang/String;)Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getOptionalTableSchema(Ljava/lang/String;)Ljava/util/Optional;
+#getTableSchema(Ljava/lang/String;)Lorg/apache/flink/table/api/TableSchema;
+#getOptionalMemorySize(Ljava/lang/String;)Ljava/util/Optional;
+#getMemorySize(Ljava/lang/String;)Lorg/apache/flink/configuration/MemorySize;
+#getFixedIndexedProperties(Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
+#getVariableIndexedProperties(Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
+#getIndexedProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#getOptionalArray(Ljava/lang/String;Ljava/util/function/Function;)Ljava/util/Optional;
+#getArray(Ljava/lang/String;Ljava/util/function/Function;)Ljava/util/List;
+#isValue(Ljava/lang/String;Ljava/lang/String;)Z
+#validateString(Ljava/lang/String;Z)V
+#validateString(Ljava/lang/String;ZI)V
+#validateString(Ljava/lang/String;ZII)V
+#validateInt(Ljava/lang/String;Z)V
+#validateInt(Ljava/lang/String;ZI)V
+#validateInt(Ljava/lang/String;ZII)V
+#validateLong(Ljava/lang/String;Z)V
+#validateLong(Ljava/lang/String;ZJ)V
+#validateLong(Ljava/lang/String;ZJJ)V
+#validateValue(Ljava/lang/String;Ljava/lang/String;Z)V
+#validateBoolean(Ljava/lang/String;Z)V
+#validateDouble(Ljava/lang/String;Z)V
+#validateDouble(Ljava/lang/String;ZD)V
+#validateDouble(Ljava/lang/String;ZDD)V
+#validateBigDecimal(Ljava/lang/String;Z)V
+#validateBigDecimal(Ljava/lang/String;ZLjava/math/BigDecimal;Ljava/math/BigDecimal;)V
+#validateByte(Ljava/lang/String;Z)V
+#validateByte(Ljava/lang/String;ZB)V
+#validateByte(Ljava/lang/String;ZBB)V
+#validateFloat(Ljava/lang/String;Z)V
+#validateFloat(Ljava/lang/String;ZF)V
+#validateFloat(Ljava/lang/String;ZFF)V
+#validateShort(Ljava/lang/String;Z)V
+#validateShort(Ljava/lang/String;ZS)V
+#validateShort(Ljava/lang/String;ZSS)V
+#validateFixedIndexedProperties(Ljava/lang/String;ZLjava/util/Map;)V
+#validateTableSchema(Ljava/lang/String;Z)V
+#validateMemorySize(Ljava/lang/String;ZI)V
+#validateMemorySize(Ljava/lang/String;ZIJ)V
+#validateMemorySize(Ljava/lang/String;ZIJJ)V
+#validateEnum(Ljava/lang/String;ZLjava/util/Map;)V
+#validateEnumValues(Ljava/lang/String;ZLjava/util/List;)V
+#validateType(Ljava/lang/String;ZZ)V
+#validateArray(Ljava/lang/String;Ljava/util/function/Consumer;I)V
+#validateArray(Ljava/lang/String;Ljava/util/function/Consumer;II)V
+#validatePrefixExclusion(Ljava/lang/String;)V
+#validateExclusion(Ljava/lang/String;)V
+#containsKey(Ljava/lang/String;)Z
+#hasPrefix(Ljava/lang/String;)Z
+#asMap()Ljava/util/Map;
+#asPrefixedMap(Ljava/lang/String;)Ljava/util/Map;
+#withoutKeys(Ljava/util/List;)Lorg/apache/flink/table/descriptors/DescriptorProperties;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#noValidation()Ljava/util/function/Consumer;
+#toString(Ljava/lang/String;)Ljava/lang/String;
+#toString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#toString(Ljava/util/Map;)Ljava/lang/String;
@1.9.0
+#putPropertiesWithPrefix(Ljava/lang/String;Ljava/util/Map;)V
+#getOptionalDuration(Ljava/lang/String;)Ljava/util/Optional;
+#getDuration(Ljava/lang/String;)Ljava/time/Duration;
+#getPropertiesWithPrefix(Ljava/lang/String;)Ljava/util/Map;
+#validateDuration(Ljava/lang/String;ZI)V
+#validateDuration(Ljava/lang/String;ZIJ)V
+#validateDuration(Ljava/lang/String;ZIJJ)V
@1.10.0
+#putIndexedOptionalProperties(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
+#getOptionalDataType(Ljava/lang/String;)Ljava/util/Optional;
+#getDataType(Ljava/lang/String;)Lorg/apache/flink/table/types/DataType;
+#validateDataType(Ljava/lang/String;Ljava/lang/String;Z)V
@1.11.0
+#putPartitionKeys(Ljava/util/List;)V
+#getPartitionKeys()Ljava/util/List;

+###org/apache/flink/table/descriptors/Rowtime
@1.9.0
+#<init>()V
+#timestampsFromField(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/Rowtime;
+#timestampsFromSource()Lorg/apache/flink/table/descriptors/Rowtime;
+#timestampsFromExtractor(Lorg/apache/flink/table/sources/tsextractors/TimestampExtractor;)Lorg/apache/flink/table/descriptors/Rowtime;
+#watermarksPeriodicAscending()Lorg/apache/flink/table/descriptors/Rowtime;
+#watermarksPeriodicBounded(J)Lorg/apache/flink/table/descriptors/Rowtime;
+#watermarksFromSource()Lorg/apache/flink/table/descriptors/Rowtime;
+#watermarksFromStrategy(Lorg/apache/flink/table/sources/wmstrategies/WatermarkStrategy;)Lorg/apache/flink/table/descriptors/Rowtime;
+#toProperties()Ljava/util/Map;

+###org/apache/flink/table/descriptors/ConnectorDescriptorValidator
@1.7.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V

+###org/apache/flink/table/descriptors/Schema
@1.9.0
+#<init>()V
+#schema(Lorg/apache/flink/table/api/TableSchema;)Lorg/apache/flink/table/descriptors/Schema;
+#field(Ljava/lang/String;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/descriptors/Schema;
+#field(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/descriptors/Schema;
+#from(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/Schema;
+#proctime()Lorg/apache/flink/table/descriptors/Schema;
+#rowtime(Lorg/apache/flink/table/descriptors/Rowtime;)Lorg/apache/flink/table/descriptors/Schema;
+#toProperties()Ljava/util/Map;
@1.10.0
+#field(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/descriptors/Schema;
*#field(Ljava/lang/String;Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/descriptors/Schema;[deprecated]

+###org/apache/flink/table/descriptors/ConnectorDescriptor
@1.7.0
+#<init>(Ljava/lang/String;IZ)V
+#toProperties()Ljava/util/Map;
@1.14.0
-###org/apache/flink/table/descriptors/ConnectorDescriptor

+###org/apache/flink/table/descriptors/DescriptorBase
@1.7.0
+#<init>()V
+#toString()Ljava/lang/String;
@1.14.0
-###org/apache/flink/table/descriptors/DescriptorBase

+###org/apache/flink/table/descriptors/FormatDescriptor
@1.7.0
+#<init>(Ljava/lang/String;I)V
+#toProperties()Ljava/util/Map;
@1.14.0
-###org/apache/flink/table/descriptors/FormatDescriptor

+###org/apache/flink/table/descriptors/FormatDescriptorValidator
@1.7.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/FormatDescriptorValidator

+###org/apache/flink/table/types/logical/StructuredType$StructuredComparision
@1.9.0
+#values()[Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/types/logical/StructuredType$StructuredComparision;
@1.12.0
+#isEquality()Z
+#isComparison()Z
@1.14.0
-###org/apache/flink/table/types/logical/StructuredType$StructuredComparision

+###org/apache/flink/table/types/inference/strategies/NullableTypeStrategy
@1.12.0
+#<init>(Lorg/apache/flink/table/types/inference/ConstantArgumentCount;Lorg/apache/flink/table/types/inference/TypeStrategy;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.14.0
-###org/apache/flink/table/types/inference/strategies/NullableTypeStrategy

+###org/apache/flink/table/types/inference/strategies/CastInputTypeStrategy
@1.12.0
+#<init>()V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.14.0
-###org/apache/flink/table/types/inference/strategies/CastInputTypeStrategy

+###org/apache/flink/table/types/inference/strategies/MapInputTypeStrategy
@1.11.0
+#<init>()V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.14.0
-###org/apache/flink/table/types/inference/strategies/MapInputTypeStrategy

+###org/apache/flink/table/types/inference/transforms/LegacyDecimalTypeTransformation
@1.10.0
+#<init>()V
+#transform(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
@1.13.0
-###org/apache/flink/table/types/inference/transforms/LegacyDecimalTypeTransformation

+###org/apache/flink/table/util/TableConnectorUtil
@1.8.0
+#<init>()V
+#generateRuntimeName(Ljava/lang/Class;[Ljava/lang/String;)Ljava/lang/String;
@1.14.0
-###org/apache/flink/table/util/TableConnectorUtil

+###org/apache/flink/table/catalog/config/CatalogConfig
@1.9.0
+#<init>()V
@1.13.0
-###org/apache/flink/table/catalog/config/CatalogConfig

+###org/apache/flink/table/descriptors/HierarchyDescriptor
@1.9.0
+#<init>()V
+#addPropertiesWithPrefix(Ljava/lang/String;Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/HierarchyDescriptor

+###org/apache/flink/table/descriptors/FunctionDescriptor
@1.9.0
+#<init>()V
+#fromClass(Lorg/apache/flink/table/descriptors/ClassInstance;)Lorg/apache/flink/table/descriptors/FunctionDescriptor;
+#toProperties()Ljava/util/Map;
@1.14.0
-###org/apache/flink/table/descriptors/FunctionDescriptor

+###org/apache/flink/table/descriptors/PythonFunctionValidator
@1.11.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/PythonFunctionValidator

+###org/apache/flink/table/descriptors/HierarchyDescriptorValidator
@1.9.0
+#<init>(Ljava/lang/String;)V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/HierarchyDescriptorValidator

+###org/apache/flink/table/descriptors/CoreModuleDescriptorValidator
@1.10.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/CoreModuleDescriptorValidator

+###org/apache/flink/table/descriptors/FileSystem
@1.9.0
+#<init>()V
+#path(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/FileSystem;
@1.14.0
-###org/apache/flink/table/descriptors/FileSystem

+###org/apache/flink/table/descriptors/LiteralValueValidator
@1.9.0
+#getValue(Ljava/lang/String;Lorg/apache/flink/table/descriptors/DescriptorProperties;)Ljava/lang/Object;
+#<init>(Ljava/lang/String;)V
@1.14.0
-###org/apache/flink/table/descriptors/LiteralValueValidator

+###org/apache/flink/table/descriptors/LiteralValue
@1.9.0
+#<init>()V
+#of(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)Lorg/apache/flink/table/descriptors/LiteralValue;
+#of(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(Z)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(I)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(D)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(F)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(J)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(B)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(S)Lorg/apache/flink/table/descriptors/LiteralValue;
+#value(Ljava/math/BigDecimal;)Lorg/apache/flink/table/descriptors/LiteralValue;
+#toProperties()Ljava/util/Map;
+#addPropertiesWithPrefix(Ljava/lang/String;Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/LiteralValue

+###org/apache/flink/table/descriptors/CustomConnectorDescriptor
@1.11.0
+#<init>(Ljava/lang/String;IZ)V
+#property(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/descriptors/CustomConnectorDescriptor;
+#properties(Ljava/util/Map;)Lorg/apache/flink/table/descriptors/CustomConnectorDescriptor;
@1.14.0
-###org/apache/flink/table/descriptors/CustomConnectorDescriptor

+###org/apache/flink/table/descriptors/StreamTableDescriptorValidator
@1.9.0
+#<init>(ZZZ)V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/StreamTableDescriptorValidator

+###org/apache/flink/table/descriptors/CatalogDescriptor
@1.9.0
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;ILjava/lang/String;)V
+#toProperties()Ljava/util/Map;
+#getDefaultDatabase()Ljava/lang/String;
@1.13.0
-###org/apache/flink/table/descriptors/CatalogDescriptor

+###org/apache/flink/table/descriptors/FunctionDescriptorValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/FunctionDescriptorValidator

+###org/apache/flink/table/descriptors/CatalogDescriptorValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.13.0
-###org/apache/flink/table/descriptors/CatalogDescriptorValidator

+###org/apache/flink/table/descriptors/CoreModuleDescriptor
@1.10.0
+#<init>()V
@1.14.0
-###org/apache/flink/table/descriptors/CoreModuleDescriptor

+###org/apache/flink/table/descriptors/ClassInstanceValidator
@1.9.0
+#<init>(Ljava/lang/String;)V
+#<init>()V
@1.14.0
-###org/apache/flink/table/descriptors/ClassInstanceValidator

+###org/apache/flink/table/descriptors/ClassInstance
@1.9.0
+#<init>()V
+#of(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameterString(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Ljava/lang/String;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Z)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(D)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(F)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(I)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(J)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(B)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(S)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Ljava/math/BigDecimal;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#parameter(Lorg/apache/flink/table/descriptors/ClassInstance;)Lorg/apache/flink/table/descriptors/ClassInstance;
+#toProperties()Ljava/util/Map;
+#addPropertiesWithPrefix(Ljava/lang/String;Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/ClassInstance

+###org/apache/flink/table/descriptors/TableDescriptor
@1.8.0
+#<init>()V
@1.9.0
+#withFormat(Lorg/apache/flink/table/descriptors/FormatDescriptor;)Lorg/apache/flink/table/descriptors/TableDescriptor;
+#inAppendMode()Lorg/apache/flink/table/descriptors/TableDescriptor;
+#inRetractMode()Lorg/apache/flink/table/descriptors/TableDescriptor;
+#inUpsertMode()Lorg/apache/flink/table/descriptors/TableDescriptor;
+#toProperties()Ljava/util/Map;
-#<init>()V
@1.14.0
-###org/apache/flink/table/descriptors/TableDescriptor

+###org/apache/flink/table/descriptors/ModuleDescriptorValidator
@1.10.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.14.0
-###org/apache/flink/table/descriptors/ModuleDescriptorValidator

+###org/apache/flink/table/descriptors/ModuleDescriptor
@1.10.0
+#<init>(Ljava/lang/String;)V
+#toProperties()Ljava/util/Map;
@1.14.0
-###org/apache/flink/table/descriptors/ModuleDescriptor

+###org/apache/flink/table/functions/FunctionService
@1.10.0
+#<init>()V
+#createFunction(Lorg/apache/flink/table/descriptors/FunctionDescriptor;)Lorg/apache/flink/table/functions/UserDefinedFunction;
+#createFunction(Lorg/apache/flink/table/descriptors/FunctionDescriptor;Ljava/lang/ClassLoader;)Lorg/apache/flink/table/functions/UserDefinedFunction;
+#createFunction(Lorg/apache/flink/table/descriptors/FunctionDescriptor;Ljava/lang/ClassLoader;Z)Lorg/apache/flink/table/functions/UserDefinedFunction;
@1.11.0
+#createFunction(Lorg/apache/flink/table/descriptors/FunctionDescriptor;Ljava/lang/ClassLoader;ZLorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/functions/UserDefinedFunction;
@1.14.0
-###org/apache/flink/table/functions/FunctionService

+###org/apache/flink/table/typeutils/InternalTypeInfo
@1.9.0
+#<init>(Ljava/lang/Class;)V
+#isBasicType()Z
+#isTupleType()Z
+#getArity()I
+#getTotalFields()I
+#getTypeClass()Ljava/lang/Class;
+#isKeyType()Z
+#createSerializer(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#createComparator(ZLorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/api/common/typeutils/TypeComparator;
+#hashCode()I
+#canEqual(Ljava/lang/Object;)Z
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
@1.12.0
-###org/apache/flink/table/typeutils/InternalTypeInfo

+###org/apache/flink/table/types/inference/InputTypeValidator
@1.9.0
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#validate(Lorg/apache/flink/table/types/inference/CallContext;Z)Z
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.10.0
-###org/apache/flink/table/types/inference/InputTypeValidator

+###org/apache/flink/table/types/inference/validators/PassingTypeValidator
@1.9.0
+#<init>()V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#validate(Lorg/apache/flink/table/types/inference/CallContext;Z)Z
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.10.0
-###org/apache/flink/table/types/inference/validators/PassingTypeValidator

+###org/apache/flink/table/types/inference/InputTypeValidators
@1.9.0
@1.10.0
-###org/apache/flink/table/types/inference/InputTypeValidators

+###org/apache/flink/table/types/inference/CallContextBase
@1.9.0
+#getFunctionDefinition()Lorg/apache/flink/table/functions/FunctionDefinition;
+#isArgumentLiteral(I)Z
+#isArgumentNull(I)Z
+#getArgumentValue(ILjava/lang/Class;)Ljava/util/Optional;
+#getName()Ljava/lang/String;
@1.10.0
-###org/apache/flink/table/types/inference/CallContextBase

+###org/apache/flink/table/types/logical/AnyType
@1.9.0
+#<init>(ZLjava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#<init>(Ljava/lang/Class;Lorg/apache/flink/api/common/typeutils/TypeSerializer;)V
+#getOriginatingClass()Ljava/lang/Class;
+#getTypeSerializer()Lorg/apache/flink/api/common/typeutils/TypeSerializer;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
-###org/apache/flink/table/types/logical/AnyType

+###org/apache/flink/table/types/logical/utils/LogicalTypeGeneralization
@1.9.0
+#findCommonType(Ljava/util/List;)Ljava/util/Optional;
@1.12.0
-###org/apache/flink/table/types/logical/utils/LogicalTypeGeneralization

+###org/apache/flink/table/types/logical/TypeInformationAnyType
@1.9.0
+#<init>(ZLorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;)V
+#<init>()V
+#getTypeInformation()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#resolve(Lorg/apache/flink/api/common/ExecutionConfig;)Lorg/apache/flink/table/types/logical/AnyType;
+#copy(Z)Lorg/apache/flink/table/types/logical/LogicalType;
+#asSummaryString()Ljava/lang/String;
+#asSerializableString()Ljava/lang/String;
+#supportsInputConversion(Ljava/lang/Class;)Z
+#supportsOutputConversion(Ljava/lang/Class;)Z
+#getDefaultConversion()Ljava/lang/Class;
+#getChildren()Ljava/util/List;
+#accept(Lorg/apache/flink/table/types/logical/LogicalTypeVisitor;)Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.10.0
-###org/apache/flink/table/types/logical/TypeInformationAnyType

+###org/apache/flink/table/functions/UserDefinedAggregateFunction
@1.9.0
+#<init>()V
+#createAccumulator()Ljava/lang/Object;
+#getResultType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
+#getAccumulatorType()Lorg/apache/flink/api/common/typeinfo/TypeInformation;
@1.12.0
-###org/apache/flink/table/functions/UserDefinedAggregateFunction

+###org/apache/flink/table/catalog/ExternalCatalogTable
@1.9.0
+#<init>(ZZZZLjava/util/Map;)V
+#getTableStats()Ljava/util/Optional;[deprecated]
+#isTableSource()Z
+#isTableSink()Z
+#isBatchTable()Z
+#isStreamTable()Z
+#toProperties()Ljava/util/Map;
@1.10.0
-###org/apache/flink/table/catalog/ExternalCatalogTable

+###org/apache/flink/table/catalog/ExternalCatalog
@1.9.0
+#getTable(Ljava/lang/String;)Lorg/apache/flink/table/catalog/ExternalCatalogTable;
+#listTables()Ljava/util/List;
+#getSubCatalog(Ljava/lang/String;)Lorg/apache/flink/table/catalog/ExternalCatalog;
+#listSubCatalogs()Ljava/util/List;
@1.10.0
-###org/apache/flink/table/catalog/ExternalCatalog

+###org/apache/flink/table/factories/ExternalCatalogFactory
@1.9.0
+#createExternalCatalog(Ljava/util/Map;)Lorg/apache/flink/table/catalog/ExternalCatalog;
@1.10.0
-###org/apache/flink/table/factories/ExternalCatalogFactory

+###org/apache/flink/table/descriptors/Metadata
@1.9.0
+#<init>()V
+#comment(Ljava/lang/String;)Lorg/apache/flink/table/descriptors/Metadata;
+#creationTime(J)Lorg/apache/flink/table/descriptors/Metadata;
+#lastAccessTime(J)Lorg/apache/flink/table/descriptors/Metadata;
+#toProperties()Ljava/util/Map;
@1.10.0
-###org/apache/flink/table/descriptors/Metadata

+###org/apache/flink/table/descriptors/Statistics
@1.9.0
+#<init>()V
+#tableStats(Lorg/apache/flink/table/plan/stats/TableStats;)Lorg/apache/flink/table/descriptors/Statistics;
+#rowCount(J)Lorg/apache/flink/table/descriptors/Statistics;
+#columnStats(Ljava/lang/String;Lorg/apache/flink/table/plan/stats/ColumnStats;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnDistinctCount(Ljava/lang/String;Ljava/lang/Long;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnNullCount(Ljava/lang/String;Ljava/lang/Long;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnAvgLength(Ljava/lang/String;Ljava/lang/Double;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnMaxLength(Ljava/lang/String;Ljava/lang/Integer;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnMaxValue(Ljava/lang/String;Ljava/lang/Number;)Lorg/apache/flink/table/descriptors/Statistics;
+#columnMinValue(Ljava/lang/String;Ljava/lang/Number;)Lorg/apache/flink/table/descriptors/Statistics;
+#toProperties()Ljava/util/Map;
@1.10.0
-###org/apache/flink/table/descriptors/Statistics

+###org/apache/flink/table/descriptors/ExternalCatalogDescriptorValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.10.0
-###org/apache/flink/table/descriptors/ExternalCatalogDescriptorValidator

+###org/apache/flink/table/descriptors/MetadataValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
@1.10.0
-###org/apache/flink/table/descriptors/MetadataValidator

+###org/apache/flink/table/descriptors/ExternalCatalogDescriptor
@1.9.0
+#<init>(Ljava/lang/String;I)V
+#toProperties()Ljava/util/Map;
@1.10.0
-###org/apache/flink/table/descriptors/ExternalCatalogDescriptor

+###org/apache/flink/table/descriptors/StatisticsValidator
@1.9.0
+#<init>()V
+#validate(Lorg/apache/flink/table/descriptors/DescriptorProperties;)V
+#normalizeColumnStats(Lorg/apache/flink/table/plan/stats/ColumnStats;)Ljava/util/Map;
+#validateColumnStats(Lorg/apache/flink/table/descriptors/DescriptorProperties;Ljava/lang/String;)V
+#readColumnStats(Lorg/apache/flink/table/descriptors/DescriptorProperties;Ljava/lang/String;)Ljava/util/Map;
@1.10.0
-###org/apache/flink/table/descriptors/StatisticsValidator

+###org/apache/flink/table/descriptors/SchematicDescriptor
@1.9.0
+#withSchema(Lorg/apache/flink/table/descriptors/Schema;)Lorg/apache/flink/table/descriptors/SchematicDescriptor;
@1.10.0
-###org/apache/flink/table/descriptors/SchematicDescriptor

+###org/apache/flink/table/types/inference/strategies/ArrayInputTypeStrategy
@1.11.0
+#<init>()V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
@1.12.0
-###org/apache/flink/table/types/inference/strategies/ArrayInputTypeStrategy

+###org/apache/flink/table/factories/FileSystemFormatFactory$WriterContext
@1.11.0
+#getSchema()Lorg/apache/flink/table/api/TableSchema;
+#getFormatOptions()Lorg/apache/flink/configuration/ReadableConfig;
+#getPartitionKeys()Ljava/util/List;
+#getFormatFieldNames()[Ljava/lang/String;
+#getFormatFieldTypes()[Lorg/apache/flink/table/types/DataType;
+#getFormatRowType()Lorg/apache/flink/table/types/logical/RowType;
@1.12.0
-###org/apache/flink/table/factories/FileSystemFormatFactory$WriterContext

+###org/apache/flink/table/connector/source/abilities/SupportsWatermarkPushDown$WatermarkProvider
@1.11.0
@1.12.0
-###org/apache/flink/table/connector/source/abilities/SupportsWatermarkPushDown$WatermarkProvider

+###org/apache/flink/table/connector/source/abilities/SupportsComputedColumnPushDown
@1.11.0
+#applyComputedColumn(Lorg/apache/flink/table/connector/source/abilities/SupportsComputedColumnPushDown$ComputedColumnConverter;Lorg/apache/flink/table/types/DataType;)V
@1.12.0
-###org/apache/flink/table/connector/source/abilities/SupportsComputedColumnPushDown

+###org/apache/flink/table/connector/source/abilities/SupportsComputedColumnPushDown$ComputedColumnConverter
@1.11.0
+#convert(Lorg/apache/flink/table/data/RowData;)Lorg/apache/flink/table/data/RowData;
@1.12.0
-###org/apache/flink/table/connector/source/abilities/SupportsComputedColumnPushDown$ComputedColumnConverter

+###org/apache/flink/table/types/inference/strategies/RepeatingSequenceInputTypeStrategy
@1.15.0
+#<init>(Ljava/util/List;)V
+#getArgumentCount()Lorg/apache/flink/table/types/inference/ArgumentCount;
+#inferInputTypes(Lorg/apache/flink/table/types/inference/CallContext;Z)Ljava/util/Optional;
+#getExpectedSignatures(Lorg/apache/flink/table/functions/FunctionDefinition;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/types/inference/strategies/ArgumentMappingTypeStrategy
@1.16.0
+#<init>(ILjava/util/function/Function;)V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;

+###org/apache/flink/table/types/inference/strategies/ToTimestampLtzTypeStrategy
@1.16.0
+#<init>()V
+#inferType(Lorg/apache/flink/table/types/inference/CallContext;)Ljava/util/Optional;

+###org/apache/flink/table/catalog/CatalogLock
@1.15.0
+#runWithLock(Ljava/lang/String;Ljava/lang/String;Ljava/util/concurrent/Callable;)Ljava/lang/Object;

+###org/apache/flink/table/catalog/CatalogLock$Factory
@1.15.0
+#create()Lorg/apache/flink/table/catalog/CatalogLock;

+###org/apache/flink/table/utils/DateTimeUtils
@1.15.0
+#<init>()V
+#toSQLDate(I)Ljava/sql/Date;
+#toSQLTime(I)Ljava/sql/Time;
+#toSQLTimestamp(J)Ljava/sql/Timestamp;
+#toInternal(Ljava/sql/Date;)I
+#toInternal(Ljava/sql/Time;)I
+#toInternal(Ljava/sql/Timestamp;)J
+#toLocalDate(I)Ljava/time/LocalDate;
+#toInternal(Ljava/time/LocalDate;)I
+#toLocalTime(I)Ljava/time/LocalTime;
+#toInternal(Ljava/time/LocalTime;)I
+#toLocalDateTime(J)Ljava/time/LocalDateTime;
+#toTimestampMillis(Ljava/time/LocalDateTime;)J
+#toTimestampData(JI)Lorg/apache/flink/table/data/TimestampData;
+#toTimestampData(DI)Lorg/apache/flink/table/data/TimestampData;
+#toTimestampData(Lorg/apache/flink/table/data/DecimalData;I)Lorg/apache/flink/table/data/TimestampData;
+#parseTimestampData(Ljava/lang/String;)Lorg/apache/flink/table/data/TimestampData;
+#parseTimestampData(Ljava/lang/String;I)Lorg/apache/flink/table/data/TimestampData;
+#parseTimestampData(Ljava/lang/String;ILjava/util/TimeZone;)Lorg/apache/flink/table/data/TimestampData;
+#parseTimestampData(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/flink/table/data/TimestampData;
+#parseDate(Ljava/lang/String;Ljava/lang/String;)I
+#parseDate(Ljava/lang/String;)Ljava/lang/Integer;
+#parseTime(Ljava/lang/String;)Ljava/lang/Integer;
+#formatTimestamp(Lorg/apache/flink/table/data/TimestampData;Ljava/lang/String;)Ljava/lang/String;
+#formatTimestamp(Lorg/apache/flink/table/data/TimestampData;Ljava/lang/String;Ljava/util/TimeZone;)Ljava/lang/String;
+#formatTimestamp(Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;I)Ljava/lang/String;
+#formatTimestampMillis(JLjava/lang/String;Ljava/util/TimeZone;)Ljava/lang/String;
+#formatTimestampString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)Ljava/lang/String;
+#formatTimestampString(Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)Ljava/lang/String;
+#formatTimestampString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#formatTimestampMillis(II)Ljava/lang/String;
+#formatDate(I)Ljava/lang/String;
+#formatIntervalYearMonth(I)Ljava/lang/String;
+#number(Ljava/lang/StringBuilder;II)Ljava/lang/StringBuilder;
+#formatIntervalDayTime(J)Ljava/lang/String;
+#extractFromTimestamp(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;)J
+#extractFromDate(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;J)J
+#extractFromDate(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;I)J
+#timestampFloor(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;JLjava/util/TimeZone;)J
+#timestampCeil(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;JLjava/util/TimeZone;)J
+#convertTz(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#timestampMillisToDate(J)I
+#timestampMillisToTime(J)I
+#fromTimestamp(J)J
+#formatUnixTimestamp(JLjava/util/TimeZone;)Ljava/lang/String;
+#formatUnixTimestamp(JLjava/lang/String;Ljava/util/TimeZone;)Ljava/lang/String;
+#unixTimestamp()J
+#unixTimestamp(J)J
+#unixTimestamp(Ljava/lang/String;Ljava/util/TimeZone;)J
+#unixTimestamp(Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)J
+#timestampToTimestampWithLocalZone(Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;)Lorg/apache/flink/table/data/TimestampData;
+#timestampWithLocalZoneToTimestamp(Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;)Lorg/apache/flink/table/data/TimestampData;
+#timestampWithLocalZoneToDate(Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;)I
+#timestampWithLocalZoneToTime(Lorg/apache/flink/table/data/TimestampData;Ljava/util/TimeZone;)I
+#dateToTimestampWithLocalZone(ILjava/util/TimeZone;)Lorg/apache/flink/table/data/TimestampData;
+#timeToTimestampWithLocalZone(ILjava/util/TimeZone;)Lorg/apache/flink/table/data/TimestampData;
+#truncate(Lorg/apache/flink/table/data/TimestampData;I)Lorg/apache/flink/table/data/TimestampData;
+#unixDateCeil(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;J)J
+#unixDateFloor(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;J)J
+#unixTimestampFloor(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;J)J
+#unixTimestampCeil(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;J)J
+#addMonths(JI)J
+#addMonths(II)I
+#subtractMonths(II)I
+#subtractMonths(JJ)I

+###org/apache/flink/table/utils/DateTimeUtils$TimeUnitRange
@1.15.0
+#values()[Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;
+#of(Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnit;Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnit;)Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnitRange;
+#monthly()Z

+###org/apache/flink/table/utils/DateTimeUtils$TimeUnit
@1.15.0
+#values()[Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnit;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnit;
+#getValue(I)Lorg/apache/flink/table/utils/DateTimeUtils$TimeUnit;
+#isValidValue(Ljava/math/BigDecimal;)Z

+###org/apache/flink/table/utils/print/PrintStyle
@1.15.0
+#print(Ljava/util/Iterator;Ljava/io/PrintWriter;)V
+#tableauWithTypeInferredColumnWidths(Lorg/apache/flink/table/catalog/ResolvedSchema;Lorg/apache/flink/table/utils/print/RowDataToStringConverter;IZZ)Lorg/apache/flink/table/utils/print/TableauStyle;
+#tableauWithDataInferredColumnWidths(Lorg/apache/flink/table/catalog/ResolvedSchema;Lorg/apache/flink/table/utils/print/RowDataToStringConverter;IZZ)Lorg/apache/flink/table/utils/print/TableauStyle;
+#tableauWithDataInferredColumnWidths(Lorg/apache/flink/table/catalog/ResolvedSchema;Lorg/apache/flink/table/utils/print/RowDataToStringConverter;)Lorg/apache/flink/table/utils/print/TableauStyle;
+#rawContent(Lorg/apache/flink/table/utils/print/RowDataToStringConverter;)Lorg/apache/flink/table/utils/print/RawContentStyle;

+###org/apache/flink/table/utils/print/TableauStyle
@1.15.0
+#getColumnWidths()[I
+#print(Ljava/util/Iterator;Ljava/io/PrintWriter;)V
+#rowFieldsToString(Lorg/apache/flink/table/data/RowData;)[Ljava/lang/String;
+#printColumnNamesTableauRow(Ljava/io/PrintWriter;)V
+#printTableauRow([Ljava/lang/String;Ljava/io/PrintWriter;)V
+#printBorderLine(Ljava/io/PrintWriter;)V

+###org/apache/flink/table/utils/print/RowDataToStringConverter
@1.15.0
+#convert(Lorg/apache/flink/table/data/RowData;)[Ljava/lang/String;

+###org/apache/flink/table/utils/print/RawContentStyle
@1.15.0
+#print(Ljava/util/Iterator;Ljava/io/PrintWriter;)V

+###org/apache/flink/table/factories/FormatFactory
@1.15.0
+#forwardOptions()Ljava/util/Set;

+###org/apache/flink/table/factories/ManagedTableFactory
@1.15.0
+#factoryIdentifier()Ljava/lang/String;
+#enrichOptions(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;)Ljava/util/Map;
+#onCreateTable(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Z)V
+#onDropTable(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Z)V
+#onCompactTable(Lorg/apache/flink/table/factories/DynamicTableFactory$Context;Lorg/apache/flink/table/catalog/CatalogPartitionSpec;)Ljava/util/Map;
+#discoverManagedTableFactory(Ljava/lang/ClassLoader;)Lorg/apache/flink/table/factories/ManagedTableFactory;

+###org/apache/flink/table/factories/FactoryUtil$FactoryHelper
@1.16.0
+#<init>(Lorg/apache/flink/table/factories/Factory;Ljava/util/Map;[Lorg/apache/flink/configuration/ConfigOption;)V
+#validate()V
+#validateExcept([Ljava/lang/String;)V
+#getOptions()Lorg/apache/flink/configuration/ReadableConfig;

+###org/apache/flink/table/factories/NoMatchingTableFactoryException
@1.15.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V

+###org/apache/flink/table/factories/FunctionDefinitionFactory$Context
@1.16.0
+#getClassLoader()Ljava/lang/ClassLoader;

+###org/apache/flink/table/factories/AmbiguousTableFactoryException
@1.15.0
+#<init>(Ljava/util/List;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;Ljava/lang/Throwable;)V
+#<init>(Ljava/util/List;Ljava/lang/Class;Ljava/util/List;Ljava/util/Map;)V

+###org/apache/flink/table/expressions/ExpressionParserException
@1.15.0
+#<init>(Ljava/lang/String;)V

+###org/apache/flink/table/connector/RequireCatalogLock
@1.15.0
+#setLockFactory(Lorg/apache/flink/table/catalog/CatalogLock$Factory;)V

+###org/apache/flink/table/connector/source/DynamicFilteringEvent
@1.16.0
+#<init>(Lorg/apache/flink/table/connector/source/DynamicFilteringData;)V
+#getData()Lorg/apache/flink/table/connector/source/DynamicFilteringData;
+#toString()Ljava/lang/String;

+###org/apache/flink/table/connector/source/lookup/cache/LookupCache
@1.16.0
+#open(Lorg/apache/flink/metrics/groups/CacheMetricGroup;)V
+#getIfPresent(Lorg/apache/flink/table/data/RowData;)Ljava/util/Collection;
+#put(Lorg/apache/flink/table/data/RowData;Ljava/util/Collection;)Ljava/util/Collection;
+#invalidate(Lorg/apache/flink/table/data/RowData;)V
+#size()J

+###org/apache/flink/table/connector/source/lookup/cache/trigger/TimedCacheReloadTrigger
@1.16.0
+#<init>(Ljava/time/OffsetTime;I)V
+#<init>(Ljava/time/LocalTime;I)V
+#open(Lorg/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger$Context;)V
+#close()V
+#fromConfig(Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/source/lookup/cache/trigger/TimedCacheReloadTrigger;

+###org/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger
@1.16.0
+#open(Lorg/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger$Context;)V

+###org/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger
@1.16.0
+#<init>(Ljava/time/Duration;Lorg/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger$ScheduleMode;)V
+#open(Lorg/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger$Context;)V
+#close()V
+#fromConfig(Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger;

+###org/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger$ScheduleMode
@1.16.0
+#values()[Lorg/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger$ScheduleMode;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/connector/source/lookup/cache/trigger/PeriodicCacheReloadTrigger$ScheduleMode;

+###org/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger$Context
@1.16.0
+#currentProcessingTime()J
+#currentWatermark()J
+#triggerReload()Ljava/util/concurrent/CompletableFuture;

+###org/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder
@1.16.0
+#<init>()V
+#expireAfterAccess(Ljava/time/Duration;)Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder;
+#expireAfterWrite(Ljava/time/Duration;)Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder;
+#maximumSize(J)Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder;
+#cacheMissingKey(Z)Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder;
+#build()Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache;

+###org/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache
@1.16.0
+#newBuilder()Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache$Builder;
+#fromConfig(Lorg/apache/flink/configuration/ReadableConfig;)Lorg/apache/flink/table/connector/source/lookup/cache/DefaultLookupCache;
+#open(Lorg/apache/flink/metrics/groups/CacheMetricGroup;)V
+#getIfPresent(Lorg/apache/flink/table/data/RowData;)Ljava/util/Collection;
+#put(Lorg/apache/flink/table/data/RowData;Ljava/util/Collection;)Ljava/util/Collection;
+#invalidate(Lorg/apache/flink/table/data/RowData;)V
+#size()J
+#close()V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/connector/source/lookup/LookupFunctionProvider
@1.16.0
+#of(Lorg/apache/flink/table/functions/LookupFunction;)Lorg/apache/flink/table/connector/source/lookup/LookupFunctionProvider;
+#createLookupFunction()Lorg/apache/flink/table/functions/LookupFunction;

+###org/apache/flink/table/connector/source/lookup/LookupOptions
@1.16.0
+#<init>()V

+###org/apache/flink/table/connector/source/lookup/AsyncLookupFunctionProvider
@1.16.0
+#of(Lorg/apache/flink/table/functions/AsyncLookupFunction;)Lorg/apache/flink/table/connector/source/lookup/AsyncLookupFunctionProvider;
+#createAsyncLookupFunction()Lorg/apache/flink/table/functions/AsyncLookupFunction;

+###org/apache/flink/table/connector/source/lookup/LookupOptions$ReloadStrategy
@1.16.0
+#values()[Lorg/apache/flink/table/connector/source/lookup/LookupOptions$ReloadStrategy;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/connector/source/lookup/LookupOptions$ReloadStrategy;

+###org/apache/flink/table/connector/source/lookup/PartialCachingLookupProvider
@1.16.0
+#of(Lorg/apache/flink/table/functions/LookupFunction;Lorg/apache/flink/table/connector/source/lookup/cache/LookupCache;)Lorg/apache/flink/table/connector/source/lookup/PartialCachingLookupProvider;
+#getCache()Lorg/apache/flink/table/connector/source/lookup/cache/LookupCache;

+###org/apache/flink/table/connector/source/lookup/PartialCachingAsyncLookupProvider
@1.16.0
+#of(Lorg/apache/flink/table/functions/AsyncLookupFunction;Lorg/apache/flink/table/connector/source/lookup/cache/LookupCache;)Lorg/apache/flink/table/connector/source/lookup/PartialCachingAsyncLookupProvider;
+#getCache()Lorg/apache/flink/table/connector/source/lookup/cache/LookupCache;

+###org/apache/flink/table/connector/source/lookup/LookupOptions$LookupCacheType
@1.16.0
+#values()[Lorg/apache/flink/table/connector/source/lookup/LookupOptions$LookupCacheType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/connector/source/lookup/LookupOptions$LookupCacheType;

+###org/apache/flink/table/connector/source/lookup/FullCachingLookupProvider
@1.16.0
+#of(Lorg/apache/flink/table/connector/source/ScanTableSource$ScanRuntimeProvider;Lorg/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger;)Lorg/apache/flink/table/connector/source/lookup/FullCachingLookupProvider;
+#getScanRuntimeProvider()Lorg/apache/flink/table/connector/source/ScanTableSource$ScanRuntimeProvider;
+#getCacheReloadTrigger()Lorg/apache/flink/table/connector/source/lookup/cache/trigger/CacheReloadTrigger;

+###org/apache/flink/table/connector/source/abilities/SupportsDynamicFiltering
@1.16.0
+#listAcceptedFilterFields()Ljava/util/List;
+#applyDynamicFiltering(Ljava/util/List;)V

+###org/apache/flink/table/connector/source/abilities/SupportsStatisticReport
@1.16.0
+#reportStatistics()Lorg/apache/flink/table/plan/stats/TableStats;

+###org/apache/flink/table/connector/source/DynamicFilteringData
@1.16.0
+#<init>(Lorg/apache/flink/api/common/typeinfo/TypeInformation;Lorg/apache/flink/table/types/logical/RowType;Ljava/util/List;Z)V
+#isFiltering()Z
+#getRowType()Lorg/apache/flink/table/types/logical/RowType;
+#contains(Lorg/apache/flink/table/data/RowData;)Z
+#isEqual(Lorg/apache/flink/table/connector/source/DynamicFilteringData;Lorg/apache/flink/table/connector/source/DynamicFilteringData;)Z
+#getData()Ljava/util/Collection;
+#toString()Ljava/lang/String;

+###org/apache/flink/table/connector/sink/SinkV2Provider
@1.15.0
+#of(Lorg/apache/flink/api/connector/sink2/Sink;)Lorg/apache/flink/table/connector/sink/SinkV2Provider;
+#of(Lorg/apache/flink/api/connector/sink2/Sink;Ljava/lang/Integer;)Lorg/apache/flink/table/connector/sink/SinkV2Provider;
+#createSink()Lorg/apache/flink/api/connector/sink2/Sink;

+###org/apache/flink/table/connector/format/ProjectableDecodingFormat
@1.15.0
+#supportsNestedProjection()Z
+#createRuntimeDecoder(Lorg/apache/flink/table/connector/source/DynamicTableSource$Context;Lorg/apache/flink/table/types/DataType;[[I)Ljava/lang/Object;
+#createRuntimeDecoder(Lorg/apache/flink/table/connector/source/DynamicTableSource$Context;Lorg/apache/flink/table/types/DataType;)Ljava/lang/Object;

+###org/apache/flink/table/connector/format/FileBasedStatisticsReportableInputFormat
@1.16.0
+#reportStatistics(Ljava/util/List;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/plan/stats/TableStats;

+###org/apache/flink/table/connector/Projection
@1.15.0
+#project(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/DataType;
+#project(Lorg/apache/flink/table/types/logical/LogicalType;)Lorg/apache/flink/table/types/logical/LogicalType;
+#isNested()Z
+#difference(Lorg/apache/flink/table/connector/Projection;)Lorg/apache/flink/table/connector/Projection;
+#complement(I)Lorg/apache/flink/table/connector/Projection;
+#complement(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/connector/Projection;
+#toTopLevelIndexes()[I
+#toNestedIndexes()[[I
+#empty()Lorg/apache/flink/table/connector/Projection;
+#of([I)Lorg/apache/flink/table/connector/Projection;
+#of([[I)Lorg/apache/flink/table/connector/Projection;
+#fromFieldNames(Lorg/apache/flink/table/types/DataType;Ljava/util/List;)Lorg/apache/flink/table/connector/Projection;
+#all(Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/connector/Projection;
+#range(II)Lorg/apache/flink/table/connector/Projection;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/api/JsonQueryWrapper
@1.15.0
+#values()[Lorg/apache/flink/table/api/JsonQueryWrapper;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonQueryWrapper;

+###org/apache/flink/table/api/JsonOnNull
@1.15.0
+#values()[Lorg/apache/flink/table/api/JsonOnNull;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonOnNull;

+###org/apache/flink/table/api/JsonQueryOnEmptyOrError
@1.15.0
+#values()[Lorg/apache/flink/table/api/JsonQueryOnEmptyOrError;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonQueryOnEmptyOrError;

+###org/apache/flink/table/api/JsonType
@1.15.0
+#values()[Lorg/apache/flink/table/api/JsonType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/api/JsonType;

+###org/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluator
@1.16.0
+#open(Lorg/apache/flink/table/functions/FunctionContext;)Ljava/lang/invoke/MethodHandle;
+#close()V

+###org/apache/flink/table/functions/LookupFunction
@1.16.0
+#<init>()V
+#lookup(Lorg/apache/flink/table/data/RowData;)Ljava/util/Collection;
+#eval([Ljava/lang/Object;)V

+###org/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluatorFactory
@1.16.0
+#createEvaluator(Lorg/apache/flink/table/expressions/Expression;Lorg/apache/flink/table/types/DataType;[Lorg/apache/flink/table/api/DataTypes$Field;)Lorg/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluator;
+#createEvaluator(Ljava/lang/String;Lorg/apache/flink/table/types/DataType;[Lorg/apache/flink/table/api/DataTypes$Field;)Lorg/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluator;
+#createEvaluator(Lorg/apache/flink/table/functions/BuiltInFunctionDefinition;Lorg/apache/flink/table/types/DataType;[Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/functions/SpecializedFunction$ExpressionEvaluator;

+###org/apache/flink/table/functions/AsyncLookupFunction
@1.16.0
+#<init>()V
+#asyncLookup(Lorg/apache/flink/table/data/RowData;)Ljava/util/concurrent/CompletableFuture;
+#eval(Ljava/util/concurrent/CompletableFuture;[Ljava/lang/Object;)V

+###org/apache/flink/table/resource/ResourceUri
@1.16.0
+#<init>(Lorg/apache/flink/table/resource/ResourceType;Ljava/lang/String;)V
+#getResourceType()Lorg/apache/flink/table/resource/ResourceType;
+#getUri()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/flink/table/resource/ResourceType
@1.16.0
+#values()[Lorg/apache/flink/table/resource/ResourceType;
+#valueOf(Ljava/lang/String;)Lorg/apache/flink/table/resource/ResourceType;

+###org/apache/flink/table/data/columnar/ColumnarMapData
@1.15.0
+#<init>(Lorg/apache/flink/table/data/columnar/vector/ColumnVector;Lorg/apache/flink/table/data/columnar/vector/ColumnVector;II)V
+#size()I
+#keyArray()Lorg/apache/flink/table/data/ArrayData;
+#valueArray()Lorg/apache/flink/table/data/ArrayData;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/data/columnar/ColumnarArrayData
@1.15.0
+#<init>(Lorg/apache/flink/table/data/columnar/vector/ColumnVector;II)V
+#size()I
+#isNullAt(I)Z
+#setNullAt(I)V
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#setBoolean(IZ)V
+#setByte(IB)V
+#setShort(IS)V
+#setInt(II)V
+#setLong(IJ)V
+#setFloat(IF)V
+#setDouble(ID)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V
+#toBooleanArray()[Z
+#toByteArray()[B
+#toShortArray()[S
+#toIntArray()[I
+#toLongArray()[J
+#toFloatArray()[F
+#toDoubleArray()[D

+###org/apache/flink/table/data/columnar/ColumnarRowData
@1.15.0
+#<init>()V
+#<init>(Lorg/apache/flink/table/data/columnar/vector/VectorizedColumnBatch;)V
+#<init>(Lorg/apache/flink/table/data/columnar/vector/VectorizedColumnBatch;I)V
+#setVectorizedColumnBatch(Lorg/apache/flink/table/data/columnar/vector/VectorizedColumnBatch;)V
+#setRowId(I)V
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#getArity()I
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#setNullAt(I)V
+#setBoolean(IZ)V
+#setByte(IB)V
+#setShort(IS)V
+#setInt(II)V
+#setLong(IJ)V
+#setFloat(IF)V
+#setDouble(ID)V
+#setDecimal(ILorg/apache/flink/table/data/DecimalData;I)V
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;I)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/flink/table/data/columnar/vector/VectorizedColumnBatch
@1.15.0
+#<init>([Lorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#setNumRows(I)V
+#getNumRows()I
+#getArity()I
+#isNullAt(II)Z
+#getBoolean(II)Z
+#getByte(II)B
+#getShort(II)S
+#getInt(II)I
+#getLong(II)J
+#getFloat(II)F
+#getDouble(II)D
+#getByteArray(II)Lorg/apache/flink/table/data/columnar/vector/BytesColumnVector$Bytes;
+#getString(II)Ljava/lang/String;
+#getDecimal(IIII)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(III)Lorg/apache/flink/table/data/TimestampData;
+#getArray(II)Lorg/apache/flink/table/data/ArrayData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#getMap(II)Lorg/apache/flink/table/data/MapData;

+###org/apache/flink/table/data/columnar/vector/ShortColumnVector
@1.15.0
+#getShort(I)S

+###org/apache/flink/table/data/columnar/vector/DecimalColumnVector
@1.15.0
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;

+###org/apache/flink/table/data/columnar/vector/BytesColumnVector
@1.15.0
+#getBytes(I)Lorg/apache/flink/table/data/columnar/vector/BytesColumnVector$Bytes;

+###org/apache/flink/table/data/columnar/vector/writable/WritableByteVector
@1.15.0
+#setByte(IB)V
+#fill(B)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableBooleanVector
@1.15.0
+#setBoolean(IZ)V
+#fill(Z)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableLongVector
@1.15.0
+#setLong(IJ)V
+#setLongsFromBinary(II[BI)V
+#fill(J)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableDoubleVector
@1.15.0
+#setDouble(ID)V
+#setDoublesFromBinary(II[BI)V
+#fill(D)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableColumnVector
@1.15.0
+#reset()V
+#setNullAt(I)V
+#setNulls(II)V
+#fillWithNulls()V
+#setDictionary(Lorg/apache/flink/table/data/columnar/vector/Dictionary;)V
+#hasDictionary()Z
+#reserveDictionaryIds(I)Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;
+#getDictionaryIds()Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;

+###org/apache/flink/table/data/columnar/vector/writable/WritableBytesVector
@1.15.0
+#appendBytes(I[BII)V
+#fill([B)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableFloatVector
@1.15.0
+#setFloat(IF)V
+#setFloatsFromBinary(II[BI)V
+#fill(F)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableTimestampVector
@1.15.0
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;)V
+#fill(Lorg/apache/flink/table/data/TimestampData;)V

+###org/apache/flink/table/data/columnar/vector/writable/WritableShortVector
@1.15.0
+#setShort(IS)V
+#fill(S)V

+###org/apache/flink/table/data/columnar/vector/writable/AbstractWritableVector
@1.15.0
+#<init>()V
+#setDictionary(Lorg/apache/flink/table/data/columnar/vector/Dictionary;)V
+#hasDictionary()Z

+###org/apache/flink/table/data/columnar/vector/writable/WritableIntVector
@1.15.0
+#setInt(II)V
+#setIntsFromBinary(II[BI)V
+#setInts(III)V
+#setInts(II[II)V
+#fill(I)V

+###org/apache/flink/table/data/columnar/vector/TimestampColumnVector
@1.15.0
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;

+###org/apache/flink/table/data/columnar/vector/MapColumnVector
@1.15.0
+#getMap(I)Lorg/apache/flink/table/data/MapData;

+###org/apache/flink/table/data/columnar/vector/RowColumnVector
@1.15.0
+#getRow(I)Lorg/apache/flink/table/data/columnar/ColumnarRowData;

+###org/apache/flink/table/data/columnar/vector/ArrayColumnVector
@1.15.0
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;

+###org/apache/flink/table/data/columnar/vector/heap/HeapShortVector
@1.15.0
+#<init>(I)V
+#getShort(I)S
+#setShort(IS)V
+#fill(S)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapFloatVector
@1.15.0
+#<init>(I)V
+#getFloat(I)F
+#setFloat(IF)V
+#setFloatsFromBinary(II[BI)V
+#fill(F)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapBytesVector
@1.15.0
+#<init>(I)V
+#reset()V
+#appendBytes(I[BII)V
+#fill([B)V
+#getBytes(I)Lorg/apache/flink/table/data/columnar/vector/BytesColumnVector$Bytes;

+###org/apache/flink/table/data/columnar/vector/heap/AbstractHeapVector
@1.15.0
+#<init>(I)V
+#reset()V
+#setNullAt(I)V
+#setNulls(II)V
+#fillWithNulls()V
+#isNullAt(I)Z
+#reserveDictionaryIds(I)Lorg/apache/flink/table/data/columnar/vector/heap/HeapIntVector;
+#getDictionaryIds()Lorg/apache/flink/table/data/columnar/vector/heap/HeapIntVector;
+#getDictionaryIds()Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;
+#reserveDictionaryIds(I)Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;
@1.16.0
+#getLen()I

+###org/apache/flink/table/data/columnar/vector/heap/HeapRowVector
@1.16.0
+#<init>(I[Lorg/apache/flink/table/data/columnar/vector/writable/WritableColumnVector;)V
+#getFields()[Lorg/apache/flink/table/data/columnar/vector/writable/WritableColumnVector;
+#getRow(I)Lorg/apache/flink/table/data/columnar/ColumnarRowData;
+#reset()V

+###org/apache/flink/table/data/columnar/vector/heap/HeapIntVector
@1.15.0
+#<init>(I)V
+#getInt(I)I
+#setInt(II)V
+#setIntsFromBinary(II[BI)V
+#setInts(III)V
+#setInts(II[II)V
+#fill(I)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapMapVector
@1.16.0
+#<init>(ILorg/apache/flink/table/data/columnar/vector/ColumnVector;Lorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#setOffsets([J)V
+#setLengths([J)V
+#getSize()I
+#setSize(I)V
+#setKeys(Lorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#setValues(Lorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#getMap(I)Lorg/apache/flink/table/data/MapData;

+###org/apache/flink/table/data/columnar/vector/heap/HeapTimestampVector
@1.15.0
+#<init>(I)V
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#setTimestamp(ILorg/apache/flink/table/data/TimestampData;)V
+#fill(Lorg/apache/flink/table/data/TimestampData;)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapArrayVector
@1.16.0
+#<init>(I)V
+#<init>(ILorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#getOffsets()[J
+#setOffsets([J)V
+#getLengths()[J
+#setLengths([J)V
+#getSize()I
+#setSize(I)V
+#getChild()Lorg/apache/flink/table/data/columnar/vector/ColumnVector;
+#setChild(Lorg/apache/flink/table/data/columnar/vector/ColumnVector;)V
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;

+###org/apache/flink/table/data/columnar/vector/heap/HeapDoubleVector
@1.15.0
+#<init>(I)V
+#getDouble(I)D
+#setDouble(ID)V
+#setDoublesFromBinary(II[BI)V
+#fill(D)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapLongVector
@1.15.0
+#<init>(I)V
+#getLong(I)J
+#setLong(IJ)V
+#setLongsFromBinary(II[BI)V
+#fill(J)V

+###org/apache/flink/table/data/columnar/vector/heap/HeapBooleanVector
@1.15.0
+#<init>(I)V
+#reserveDictionaryIds(I)Lorg/apache/flink/table/data/columnar/vector/heap/HeapIntVector;
+#getDictionaryIds()Lorg/apache/flink/table/data/columnar/vector/heap/HeapIntVector;
+#getBoolean(I)Z
+#setBoolean(IZ)V
+#fill(Z)V
+#getDictionaryIds()Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;
+#reserveDictionaryIds(I)Lorg/apache/flink/table/data/columnar/vector/writable/WritableIntVector;

+###org/apache/flink/table/data/columnar/vector/heap/HeapByteVector
@1.15.0
+#<init>(I)V
+#getByte(I)B
+#setByte(IB)V
+#fill(B)V

+###org/apache/flink/table/data/columnar/vector/DoubleColumnVector
@1.15.0
+#getDouble(I)D

+###org/apache/flink/table/data/columnar/vector/Dictionary
@1.15.0
+#decodeToInt(I)I
+#decodeToLong(I)J
+#decodeToFloat(I)F
+#decodeToDouble(I)D
+#decodeToBinary(I)[B
+#decodeToTimestamp(I)Lorg/apache/flink/table/data/TimestampData;

+###org/apache/flink/table/data/columnar/vector/IntColumnVector
@1.15.0
+#getInt(I)I

+###org/apache/flink/table/data/columnar/vector/LongColumnVector
@1.15.0
+#getLong(I)J

+###org/apache/flink/table/data/columnar/vector/BooleanColumnVector
@1.15.0
+#getBoolean(I)Z

+###org/apache/flink/table/data/columnar/vector/BytesColumnVector$Bytes
@1.15.0
+#<init>([BII)V
+#getBytes()[B

+###org/apache/flink/table/data/columnar/vector/ByteColumnVector
@1.15.0
+#getByte(I)B

+###org/apache/flink/table/data/columnar/vector/ColumnVector
@1.15.0
+#isNullAt(I)Z

+###org/apache/flink/table/data/columnar/vector/FloatColumnVector
@1.15.0
+#getFloat(I)F

+###org/apache/flink/table/data/utils/ProjectedRowData
@1.15.0
+#replaceRow(Lorg/apache/flink/table/data/RowData;)Lorg/apache/flink/table/data/utils/ProjectedRowData;
+#getArity()I
+#getRowKind()Lorg/apache/flink/types/RowKind;
+#setRowKind(Lorg/apache/flink/types/RowKind;)V
+#isNullAt(I)Z
+#getBoolean(I)Z
+#getByte(I)B
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getString(I)Lorg/apache/flink/table/data/StringData;
+#getDecimal(III)Lorg/apache/flink/table/data/DecimalData;
+#getTimestamp(II)Lorg/apache/flink/table/data/TimestampData;
+#getRawValue(I)Lorg/apache/flink/table/data/RawValueData;
+#getBinary(I)[B
+#getArray(I)Lorg/apache/flink/table/data/ArrayData;
+#getMap(I)Lorg/apache/flink/table/data/MapData;
+#getRow(II)Lorg/apache/flink/table/data/RowData;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#from([[I)Lorg/apache/flink/table/data/utils/ProjectedRowData;
+#from([I)Lorg/apache/flink/table/data/utils/ProjectedRowData;
+#from(Lorg/apache/flink/table/connector/Projection;)Lorg/apache/flink/table/data/utils/ProjectedRowData;

+###org/apache/flink/table/data/utils/CastExecutor
@1.15.0
+#cast(Ljava/lang/Object;)Ljava/lang/Object;

+###org/apache/flink/table/types/extraction/utils/DataTypeTemplate
@1.10.0
+#fromAnnotation(Lorg/apache/flink/table/catalog/DataTypeLookup;Lorg/apache/flink/table/annotation/DataTypeHint;)Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;
+#fromAnnotation(Lorg/apache/flink/table/annotation/DataTypeHint;Lorg/apache/flink/table/types/DataType;)Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;
+#fromDefaults()Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;
+#copyWithoutDataType()Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;
+#mergeWithInnerAnnotation(Lorg/apache/flink/table/catalog/DataTypeLookup;Lorg/apache/flink/table/annotation/DataTypeHint;)Lorg/apache/flink/table/types/extraction/utils/DataTypeTemplate;
+#hasDataTypeDefinition()Z
+#hasInputGroupDefinition()Z
+#toArgumentTypeStrategy()Lorg/apache/flink/table/types/inference/ArgumentTypeStrategy;
+#toTypeStrategy()Lorg/apache/flink/table/types/inference/TypeStrategy;
+#isAllowRawGlobally()Z
+#isAllowAnyPattern(Ljava/lang/Class;)Z
+#isForceAnyPattern(Ljava/lang/Class;)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@1.11.0
-###org/apache/flink/table/types/extraction/utils/DataTypeTemplate

+###org/apache/flink/table/types/extraction/utils/ExtractionUtils
@1.10.0
+#extractionError(Ljava/lang/String;[Ljava/lang/Object;)Lorg/apache/flink/table/api/ValidationException;
+#extractionError(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Lorg/apache/flink/table/api/ValidationException;
+#collectTypeHierarchy(Ljava/lang/reflect/Type;)Ljava/util/List;
+#toClass(Ljava/lang/reflect/Type;)Ljava/lang/Class;
+#createRawType(Lorg/apache/flink/table/catalog/DataTypeLookup;Ljava/lang/Class;Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
+#resolveVariable(Ljava/util/List;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;
+#validateStructuredClass(Ljava/lang/Class;)V
+#collectStructuredFields(Ljava/lang/Class;)Ljava/util/List;
+#validateStructuredFieldReadability(Ljava/lang/Class;Ljava/lang/reflect/Field;)V
+#isStructuredFieldMutable(Ljava/lang/Class;Ljava/lang/reflect/Field;)Z
+#hasFieldSetter(Ljava/lang/Class;Ljava/lang/reflect/Field;)Z
+#boxPrimitive(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;
+#hasStructuredFieldGetter(Ljava/lang/Class;Ljava/lang/reflect/Field;)Z
+#collectStructuredMethods(Ljava/lang/Class;)Ljava/util/List;
+#extractAssigningConstructor(Ljava/lang/Class;Ljava/util/List;)Lorg/apache/flink/table/types/extraction/utils/ExtractionUtils$AssigningConstructor;
@1.11.0
-###org/apache/flink/table/types/extraction/utils/ExtractionUtils

+###org/apache/flink/table/types/extraction/utils/ExtractionUtils$AssigningConstructor
@1.10.0
@1.11.0
-###org/apache/flink/table/types/extraction/utils/ExtractionUtils$AssigningConstructor

+###org/apache/flink/table/functions/python/SimplePythonFunction
@1.10.0
+#<init>([BLorg/apache/flink/table/functions/python/PythonEnv;)V
+#getSerializedPythonFunction()[B
+#getPythonEnv()Lorg/apache/flink/table/functions/python/PythonEnv;
@1.11.0
-###org/apache/flink/table/functions/python/SimplePythonFunction

+###org/apache/flink/table/catalog/DataTypeLookup
@1.10.0
+#lookupDataType(Ljava/lang/String;)Ljava/util/Optional;
+#lookupDataType(Lorg/apache/flink/table/catalog/UnresolvedIdentifier;)Ljava/util/Optional;
+#resolveRawDataType(Ljava/lang/Class;)Lorg/apache/flink/table/types/DataType;
@1.11.0
-###org/apache/flink/table/catalog/DataTypeLookup
