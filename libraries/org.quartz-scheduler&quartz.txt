
+###org/quartz/InterruptableJob
@1.7.2
+#interrupt()V

+###org/quartz/DisallowConcurrentExecution
@2.0.0

+###org/quartz/xml/ValidationException
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/util/Collection;)V
+#getValidationExceptions()Ljava/util/Collection;
+#getMessage()Ljava/lang/String;
@1.8.0
+#<init>(Ljava/lang/String;Ljava/util/Collection;)V

+###org/quartz/xml/XMLSchedulingDataProcessor
@1.8.0
+#<init>(Lorg/quartz/spi/ClassLoadHelper;)V
+#isOverWriteExistingData()Z
+#isIgnoreDuplicates()Z
+#setIgnoreDuplicates(Z)V
+#addJobGroupToNeverDelete(Ljava/lang/String;)V
+#removeJobGroupToNeverDelete(Ljava/lang/String;)Z
+#getJobGroupsToNeverDelete()Ljava/util/List;
+#addTriggerGroupToNeverDelete(Ljava/lang/String;)V
+#removeTriggerGroupToNeverDelete(Ljava/lang/String;)Z
+#getTriggerGroupsToNeverDelete()Ljava/util/List;
+#processStreamAndScheduleJobs(Ljava/io/InputStream;Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#processFileAndScheduleJobs(Lorg/quartz/Scheduler;Z)V
+#processFileAndScheduleJobs(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#processFileAndScheduleJobs(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#warning(Lorg/xml/sax/SAXParseException;)V
+#error(Lorg/xml/sax/SAXParseException;)V
+#fatalError(Lorg/xml/sax/SAXParseException;)V

+###org/quartz/StatefulJob
@1.7.2

+###org/quartz/JobBuilder
@2.0.0
+#newJob()Lorg/quartz/JobBuilder;
+#newJob(Ljava/lang/Class;)Lorg/quartz/JobBuilder;
+#build()Lorg/quartz/JobDetail;
+#withIdentity(Ljava/lang/String;)Lorg/quartz/JobBuilder;
+#withIdentity(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobBuilder;
+#withIdentity(Lorg/quartz/JobKey;)Lorg/quartz/JobBuilder;
+#withDescription(Ljava/lang/String;)Lorg/quartz/JobBuilder;
+#ofType(Ljava/lang/Class;)Lorg/quartz/JobBuilder;
+#requestRecovery()Lorg/quartz/JobBuilder;
+#requestRecovery(Z)Lorg/quartz/JobBuilder;
+#storeDurably()Lorg/quartz/JobBuilder;
+#storeDurably(Z)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Integer;)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Long;)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Float;)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Double;)Lorg/quartz/JobBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Boolean;)Lorg/quartz/JobBuilder;
+#usingJobData(Lorg/quartz/JobDataMap;)Lorg/quartz/JobBuilder;
@2.2.0
+#setJobData(Lorg/quartz/JobDataMap;)Lorg/quartz/JobBuilder;

+###org/quartz/plugins/management/ShutdownHookPlugin
@1.7.2
+#<init>()V
+#isCleanShutdown()Z
+#setCleanShutdown(Z)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start()V
+#shutdown()V
@2.2.0
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V
-#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V

+###org/quartz/plugins/xml/XMLSchedulingDataProcessorPlugin
@1.8.0
+#<init>()V
+#getFileNames()Ljava/lang/String;
+#setFileNames(Ljava/lang/String;)V
+#getScanInterval()J
+#setScanInterval(J)V
+#isFailOnFileNotFound()Z
+#setFailOnFileNotFound(Z)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start(Ljavax/transaction/UserTransaction;)V
+#shutdown()V
+#processFile(Ljava/lang/String;)V
+#fileUpdated(Ljava/lang/String;)V
@2.2.0
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V
-#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V

+###org/quartz/plugins/SchedulerPluginWithUserTransactionSupport
@1.7.2
+#<init>()V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#getWrapInUserTransaction()Z
+#setWrapInUserTransaction(Z)V
+#start()V
+#shutdown()V

+###org/quartz/plugins/history/LoggingTriggerHistoryPlugin
@1.7.2
+#<init>()V
+#getTriggerCompleteMessage()Ljava/lang/String;
+#getTriggerFiredMessage()Ljava/lang/String;
+#getTriggerMisfiredMessage()Ljava/lang/String;
+#setTriggerCompleteMessage(Ljava/lang/String;)V
+#setTriggerFiredMessage(Ljava/lang/String;)V
+#setTriggerMisfiredMessage(Ljava/lang/String;)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start()V
+#shutdown()V
+#getName()Ljava/lang/String;
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#triggerMisfired(Lorg/quartz/Trigger;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V
+#vetoJobExecution(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)Z
@2.0.0
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
-#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V
@2.2.0
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V
-#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V

+###org/quartz/plugins/history/LoggingJobHistoryPlugin
@1.7.2
+#<init>()V
+#getJobSuccessMessage()Ljava/lang/String;
+#getJobFailedMessage()Ljava/lang/String;
+#getJobToBeFiredMessage()Ljava/lang/String;
+#setJobSuccessMessage(Ljava/lang/String;)V
+#setJobFailedMessage(Ljava/lang/String;)V
+#setJobToBeFiredMessage(Ljava/lang/String;)V
+#getJobWasVetoedMessage()Ljava/lang/String;
+#setJobWasVetoedMessage(Ljava/lang/String;)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start()V
+#shutdown()V
+#getName()Ljava/lang/String;
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
@2.2.0
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V
-#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V

+###org/quartz/core/SampledStatisticsImpl
@1.8.0
+#shutdown()V
+#clearStatistics()V
+#getJobsCompletedMostRecentSample()J
+#getJobsExecutingMostRecentSample()J
+#getJobsScheduledMostRecentSample()J
+#getName()Ljava/lang/String;
+#jobScheduled(Lorg/quartz/Trigger;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
+#jobAdded(Lorg/quartz/JobDetail;)V
+#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V

+###org/quartz/core/NullSampledStatisticsImpl
@1.8.0
+#<init>()V
+#getJobsCompletedMostRecentSample()J
+#getJobsExecutingMostRecentSample()J
+#getJobsScheduledMostRecentSample()J
+#shutdown()V

+###org/quartz/core/QuartzSchedulerMBeanImpl
@1.8.0
+#getCurrentlyExecutingJobs()Ljavax/management/openmbean/TabularData;
+#getAllJobDetails(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#getAllTriggers(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#addJob(Ljava/lang/String;Ljavax/management/openmbean/CompositeData;Z)V
+#deleteCalendar(Ljava/lang/String;Ljava/lang/String;)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#getCalendarNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getJobGroupNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#getJobStoreClassName()Ljava/lang/String;
+#getPausedTriggerGroups(Ljava/lang/String;)Ljava/util/Set;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getTriggerGroupNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#interruptJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#getVersion()Ljava/lang/String;
+#isShutdown()Z
+#isStarted()Z
+#start()V
+#shutdown()V
+#standby()V
+#isStandbyMode()Z
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getThreadPoolClassName()Ljava/lang/String;
+#getThreadPoolSize()I
+#pauseJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Ljava/lang/String;Ljava/lang/String;)V
+#pauseAllTriggers(Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#resumeAllTriggers(Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#jobAdded(Lorg/quartz/JobDetail;)V
+#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
+#jobScheduled(Lorg/quartz/Trigger;)V
+#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
+#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#schedulerStarted()V
+#schedulerInStandbyMode()V
+#schedulerShutdown()V
+#triggerFinalized(Lorg/quartz/Trigger;)V
+#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
+#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
+#sendNotification(Ljava/lang/String;)V
+#sendNotification(Ljava/lang/String;Ljava/lang/Object;)V
+#sendNotification(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;)V
+#addNotificationListener(Ljavax/management/NotificationListener;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
+#getNotificationInfo()[Ljavax/management/MBeanNotificationInfo;
+#removeNotificationListener(Ljavax/management/NotificationListener;)V
+#removeNotificationListener(Ljavax/management/NotificationListener;Ljavax/management/NotificationFilter;Ljava/lang/Object;)V
+#isSampledStatisticsEnabled()Z
+#setSampledStatisticsEnabled(Z)V
+#getJobsCompletedMostRecentSample()J
+#getJobsExecutedMostRecentSample()J
+#getJobsScheduledMostRecentSample()J
+#getPerformanceMetrics()Ljava/util/Map;
@1.8.1
+#schedulerShuttingdown()V
@2.0.0
+#getAllJobDetails()Ljavax/management/openmbean/TabularData;
+#getAllTriggers()Ljava/util/List;
+#addJob(Ljavax/management/openmbean/CompositeData;Z)V
+#scheduleBasicJob(Ljava/util/Map;Ljava/util/Map;)V
+#scheduleJob(Ljava/util/Map;Ljava/util/Map;)V
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#addJob(Ljava/util/Map;Z)V
+#deleteCalendar(Ljava/lang/String;)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#getCalendarNames()Ljava/util/List;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getJobGroupNames()Ljava/util/List;
+#getJobNames(Ljava/lang/String;)Ljava/util/List;
+#getPausedTriggerGroups()Ljava/util/Set;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerNames(Ljava/lang/String;)Ljava/util/List;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#interruptJob(Ljava/lang/String;Ljava/lang/String;)Z
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#clear()V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJobGroup(Ljava/lang/String;)V
+#pauseJobsStartingWith(Ljava/lang/String;)V
+#pauseJobsEndingWith(Ljava/lang/String;)V
+#pauseJobsContaining(Ljava/lang/String;)V
+#pauseAllTriggers()V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#pauseTriggersStartingWith(Ljava/lang/String;)V
+#pauseTriggersEndingWith(Ljava/lang/String;)V
+#pauseTriggersContaining(Ljava/lang/String;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeAllTriggers()V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#resumeJobsStartingWith(Ljava/lang/String;)V
+#resumeJobsEndingWith(Ljava/lang/String;)V
+#resumeJobsContaining(Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#resumeTriggersStartingWith(Ljava/lang/String;)V
+#resumeTriggersEndingWith(Ljava/lang/String;)V
+#resumeTriggersContaining(Ljava/lang/String;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#triggerJob(Ljavax/management/openmbean/CompositeData;)V
+#jobDeleted(Lorg/quartz/JobKey;)V
+#jobUnscheduled(Lorg/quartz/TriggerKey;)V
+#schedulingDataCleared()V
+#jobPaused(Lorg/quartz/JobKey;)V
+#jobsPaused(Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;)V
+#jobResumed(Lorg/quartz/JobKey;)V
+#triggersPaused(Ljava/lang/String;)V
+#triggerPaused(Lorg/quartz/TriggerKey;)V
+#triggersResumed(Ljava/lang/String;)V
+#triggerResumed(Lorg/quartz/TriggerKey;)V
-#getAllJobDetails(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#getAllTriggers(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#addJob(Ljava/lang/String;Ljavax/management/openmbean/CompositeData;Z)V
-#deleteCalendar(Ljava/lang/String;Ljava/lang/String;)V
-#deleteJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#getCalendarNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
-#getJobGroupNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#getPausedTriggerGroups(Ljava/lang/String;)Ljava/util/Set;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
-#getTriggerGroupNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#interruptJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#pauseJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Ljava/lang/String;Ljava/lang/String;)V
-#pauseAllTriggers(Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#resumeAllTriggers(Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
-#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
-#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
-#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
-#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
-#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
@2.1.1
+#interruptJob(Ljava/lang/String;)Z
@2.2.0
+#schedulerStarting()V
@2.2.1
+#pauseJobsAll()V
+#pauseTriggersAll()V
+#resumeJobsAll()V
+#resumeTriggersAll()V

+###org/quartz/core/JobRunShellFactory
@1.7.2
+#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
+#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
+#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V
@2.0.0
+#initialize(Lorg/quartz/Scheduler;)V
+#createJobRunShell(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/core/JobRunShell;
-#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
-#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
-#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V

+###org/quartz/core/JobRunShell
@1.7.2
+#<init>(Lorg/quartz/core/JobRunShellFactory;Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
+#initialize(Lorg/quartz/core/QuartzScheduler;Lorg/quartz/spi/TriggerFiredBundle;)V
+#requestShutdown()V
+#run()V
+#passivate()V
+#completeTriggerRetryLoop(Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)Z
+#vetoedJobRetryLoop(Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)Z
@1.8.1
+#schedulerShuttingdown()V
@2.0.0
+#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;)V
+#initialize(Lorg/quartz/core/QuartzScheduler;)V
+#completeTriggerRetryLoop(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)Z
+#vetoedJobRetryLoop(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)Z
-#<init>(Lorg/quartz/core/JobRunShellFactory;Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
-#initialize(Lorg/quartz/core/QuartzScheduler;Lorg/quartz/spi/TriggerFiredBundle;)V
-#completeTriggerRetryLoop(Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)Z
-#vetoedJobRetryLoop(Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)Z
@2.2.1
-#completeTriggerRetryLoop(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)Z
-#vetoedJobRetryLoop(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)Z

+###org/quartz/core/QuartzSchedulerThread
@1.7.2
+#setDbFailureRetryInterval(J)V
+#signalSchedulingChange(J)V
+#clearSignaledSchedulingChange()V
+#isScheduleChanged()Z
+#getSignaledNextFireTime()J
+#run()V
+#errorTriggerRetryLoop(Lorg/quartz/spi/TriggerFiredBundle;)V
+#releaseTriggerRetryLoop(Lorg/quartz/Trigger;)V
+#getLog()Lorg/apache/commons/logging/Log;
@1.8.0
+#getLog()Lorg/slf4j/Logger;
-#getLog()Lorg/apache/commons/logging/Log;
@2.0.0
+#releaseTriggerRetryLoop(Lorg/quartz/spi/OperableTrigger;)V
-#releaseTriggerRetryLoop(Lorg/quartz/Trigger;)V
@2.2.1
-#setDbFailureRetryInterval(J)V
-#errorTriggerRetryLoop(Lorg/quartz/spi/TriggerFiredBundle;)V
-#releaseTriggerRetryLoop(Lorg/quartz/spi/OperableTrigger;)V

+###org/quartz/core/QuartzScheduler
@1.7.2
+#<init>(Lorg/quartz/core/QuartzSchedulerResources;Lorg/quartz/core/SchedulingContext;JJ)V
+#getVersion()Ljava/lang/String;
+#getVersionMajor()Ljava/lang/String;
+#getVersionMinor()Ljava/lang/String;
+#getVersionIteration()Ljava/lang/String;
+#getSchedulerSignaler()Lorg/quartz/spi/SchedulerSignaler;
+#getLog()Lorg/apache/commons/logging/Log;
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getSchedulerThreadGroup()Ljava/lang/ThreadGroup;
+#addNoGCObject(Ljava/lang/Object;)V
+#removeNoGCObject(Ljava/lang/Object;)Z
+#getSchedulerContext()Lorg/quartz/SchedulerContext;
+#isSignalOnSchedulingChange()Z
+#setSignalOnSchedulingChange(Z)V
+#start()V
+#startDelayed(I)V
+#standby()V
+#isInStandbyMode()Z
+#runningSince()Ljava/util/Date;
+#numJobsExecuted()I
+#getJobStoreClass()Ljava/lang/Class;
+#supportsPersistence()Z
+#getThreadPoolClass()Ljava/lang/Class;
+#getThreadPoolSize()I
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#validateState()V
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
+#notifyTriggerListenersFired(Lorg/quartz/JobExecutionContext;)Z
+#notifyTriggerListenersMisfired(Lorg/quartz/Trigger;)V
+#notifyTriggerListenersComplete(Lorg/quartz/JobExecutionContext;I)V
+#notifyJobListenersToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#notifyJobListenersWasVetoed(Lorg/quartz/JobExecutionContext;)V
+#notifyJobListenersWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
+#notifySchedulerListenersError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#notifySchedulerListenersSchduled(Lorg/quartz/Trigger;)V
+#notifySchedulerListenersUnschduled(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersFinalized(Lorg/quartz/Trigger;)V
+#notifySchedulerListenersPausedTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersResumedTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersPausedJob(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersResumedJob(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersShutdown()V
+#setJobFactory(Lorg/quartz/spi/JobFactory;)V
+#getJobFactory()Lorg/quartz/spi/JobFactory;
+#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@1.8.0
+#initialize()V
+#getLog()Lorg/slf4j/Logger;
+#isClustered()Z
+#isStarted()Z
+#notifySchedulerListenersUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
+#notifySchedulerListenersInStandbyMode()V
+#notifySchedulerListenersStarted()V
+#notifySchedulerListenersJobAdded(Lorg/quartz/JobDetail;)V
+#notifySchedulerListenersJobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#getLog()Lorg/apache/commons/logging/Log;
-#notifySchedulerListenersUnschduled(Ljava/lang/String;Ljava/lang/String;)V
@1.8.1
+#notifySchedulerListenersShuttingdown()V
@1.8.6
+#getDbRetryInterval()J
@2.0.0
+#<init>(Lorg/quartz/core/QuartzSchedulerResources;JJ)V
+#isShuttingDown()Z
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Lorg/quartz/JobKey;)Z
+#deleteJobs(Ljava/util/List;)Z
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJobs(Ljava/util/List;)Z
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#triggerJob(Lorg/quartz/spi/OperableTrigger;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getPausedTriggerGroups()Ljava/util/Set;
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clear()V
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()Ljava/util/List;
+#getListenerManager()Lorg/quartz/ListenerManager;
+#addInternalJobListener(Lorg/quartz/JobListener;)V
+#removeInternalJobListener(Ljava/lang/String;)Z
+#getInternalJobListeners()Ljava/util/List;
+#getInternalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addInternalTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeinternalTriggerListener(Ljava/lang/String;)Z
+#getInternalTriggerListeners()Ljava/util/List;
+#getInternalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addInternalSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeInternalSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getInternalSchedulerListeners()Ljava/util/List;
+#notifyTriggerListenersComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#notifySchedulerListenersUnscheduled(Lorg/quartz/TriggerKey;)V
+#notifySchedulerListenersPausedTrigger(Lorg/quartz/TriggerKey;)V
+#notifySchedulerListenersPausedTriggers(Ljava/lang/String;)V
+#notifySchedulerListenersResumedTrigger(Lorg/quartz/TriggerKey;)V
+#notifySchedulerListenersResumedTriggers(Ljava/lang/String;)V
+#notifySchedulerListenersPausedJob(Lorg/quartz/JobKey;)V
+#notifySchedulerListenersPausedJobs(Ljava/lang/String;)V
+#notifySchedulerListenersResumedJob(Lorg/quartz/JobKey;)V
+#notifySchedulerListenersResumedJobs(Ljava/lang/String;)V
+#notifySchedulerListenersJobDeleted(Lorg/quartz/JobKey;)V
+#interrupt(Lorg/quartz/JobKey;)Z
-#<init>(Lorg/quartz/core/QuartzSchedulerResources;Lorg/quartz/core/SchedulingContext;JJ)V
-#getDbRetryInterval()J
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
-#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
-#notifyTriggerListenersComplete(Lorg/quartz/JobExecutionContext;I)V
-#notifySchedulerListenersUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
-#notifySchedulerListenersPausedTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#notifySchedulerListenersResumedTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#notifySchedulerListenersPausedJob(Ljava/lang/String;Ljava/lang/String;)V
-#notifySchedulerListenersResumedJob(Ljava/lang/String;Ljava/lang/String;)V
-#notifySchedulerListenersJobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.1.1
+#getDbRetryInterval()J
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
+#notifySchedulerListenersStarting()V
@2.2.1
-#getDbRetryInterval()J
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/core/SampledStatistics
@1.8.0
+#getJobsScheduledMostRecentSample()J
+#getJobsExecutingMostRecentSample()J
+#getJobsCompletedMostRecentSample()J
+#shutdown()V

+###org/quartz/core/ListenerManagerImpl
@2.0.0
+#<init>()V
+#addJobListener(Lorg/quartz/JobListener;[Lorg/quartz/Matcher;)V
+#addJobListener(Lorg/quartz/JobListener;Ljava/util/List;)V
+#addJobListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#removeJobListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#getJobListenerMatchers(Ljava/lang/String;)Ljava/util/List;
+#setJobListenerMatchers(Ljava/lang/String;Ljava/util/List;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getJobListeners()Ljava/util/List;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addTriggerListener(Lorg/quartz/TriggerListener;[Lorg/quartz/Matcher;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;Ljava/util/List;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;Lorg/quartz/Matcher;)V
+#addTriggerListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#removeTriggerListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#getTriggerListenerMatchers(Ljava/lang/String;)Ljava/util/List;
+#setTriggerListenerMatchers(Ljava/lang/String;Ljava/util/List;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getTriggerListeners()Ljava/util/List;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
@2.1.0
+#addJobListener(Lorg/quartz/JobListener;Lorg/quartz/Matcher;)V
@2.1.4
+#addJobListener(Lorg/quartz/JobListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V

+###org/quartz/core/QuartzSchedulerResources
@1.7.2
+#<init>()V
+#getName()Ljava/lang/String;
+#setName(Ljava/lang/String;)V
+#getInstanceId()Ljava/lang/String;
+#setInstanceId(Ljava/lang/String;)V
+#getUniqueIdentifier(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#getUniqueIdentifier()Ljava/lang/String;
+#getRMIRegistryHost()Ljava/lang/String;
+#setRMIRegistryHost(Ljava/lang/String;)V
+#getRMIRegistryPort()I
+#setRMIRegistryPort(I)V
+#getRMIServerPort()I
+#setRMIServerPort(I)V
+#getRMICreateRegistryStrategy()Ljava/lang/String;
+#getThreadName()Ljava/lang/String;
+#setThreadName(Ljava/lang/String;)V
+#setRMICreateRegistryStrategy(Ljava/lang/String;)V
+#getThreadPool()Lorg/quartz/spi/ThreadPool;
+#setThreadPool(Lorg/quartz/spi/ThreadPool;)V
+#getJobStore()Lorg/quartz/spi/JobStore;
+#setJobStore(Lorg/quartz/spi/JobStore;)V
+#getJobRunShellFactory()Lorg/quartz/core/JobRunShellFactory;
+#setJobRunShellFactory(Lorg/quartz/core/JobRunShellFactory;)V
+#addSchedulerPlugin(Lorg/quartz/spi/SchedulerPlugin;)V
+#getSchedulerPlugins()Ljava/util/List;
+#getMakeSchedulerThreadDaemon()Z
+#setMakeSchedulerThreadDaemon(Z)V
+#isThreadsInheritInitializersClassLoadContext()Z
+#setThreadsInheritInitializersClassLoadContext(Z)V
+#getRMIBindName()Ljava/lang/String;
+#setRMIBindName(Ljava/lang/String;)V
+#getJMXExport()Z
+#setJMXExport(Z)V
+#getJMXObjectName()Ljava/lang/String;
+#setJMXObjectName(Ljava/lang/String;)V
+#generateJMXObjectName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
@1.8.0
+#isRunUpdateCheck()Z
+#setRunUpdateCheck(Z)V
@1.8.1
+#isInterruptJobsOnShutdown()Z
+#setInterruptJobsOnShutdown(Z)V
+#isInterruptJobsOnShutdownWithWait()Z
+#setInterruptJobsOnShutdownWithWait(Z)V
@1.8.6
+#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
+#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
@2.0.0
+#getBatchTimeWindow()J
+#setBatchTimeWindow(J)V
+#getMaxBatchSize()I
+#setMaxBatchSize(I)V
-#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
-#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
@2.0.2
+#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
+#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
@2.2.0
+#getManagementRESTServiceConfiguration()Lorg/quartz/management/ManagementRESTServiceConfiguration;
+#setManagementRESTServiceConfiguration(Lorg/quartz/management/ManagementRESTServiceConfiguration;)V
@2.3.0
-#isRunUpdateCheck()Z
-#setRunUpdateCheck(Z)V

+###org/quartz/core/SchedulerSignalerImpl
@1.7.2
+#<init>(Lorg/quartz/core/QuartzScheduler;Lorg/quartz/core/QuartzSchedulerThread;)V
+#notifyTriggerListenersMisfired(Lorg/quartz/Trigger;)V
+#notifySchedulerListenersFinalized(Lorg/quartz/Trigger;)V
+#signalSchedulingChange(J)V
@2.0.0
+#notifySchedulerListenersJobDeleted(Lorg/quartz/JobKey;)V
@2.2.1
+#notifySchedulerListenersError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V

+###org/quartz/core/QuartzScheduler_Stub
@1.7.2
+#<init>(Ljava/rmi/server/RemoteRef;)V
+#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getGlobalJobListeners()Ljava/util/List;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getGlobalTriggerListeners()Ljava/util/List;
+#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListenerNames()Ljava/util/Set;
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobStoreClass()Ljava/lang/Class;
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#getSchedulerContext()Lorg/quartz/SchedulerContext;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getSchedulerListeners()Ljava/util/List;
+#getSchedulerName()Ljava/lang/String;
+#getThreadPoolClass()Ljava/lang/Class;
+#getThreadPoolSize()I
+#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListenerNames()Ljava/util/Set;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getVersion()Ljava/lang/String;
+#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#isInStandbyMode()Z
+#isShutdown()Z
+#numJobsExecuted()I
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#runningSince()Ljava/util/Date;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
+#shutdown()V
+#shutdown(Z)V
+#standby()V
+#start()V
+#startDelayed(I)V
+#supportsPersistence()Z
+#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@1.8.0
+#isClustered()Z
@2.0.0
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#addJob(Lorg/quartz/JobDetail;Z)V
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clear()V
+#deleteCalendar(Ljava/lang/String;)Z
+#deleteJob(Lorg/quartz/JobKey;)Z
+#deleteJobs(Ljava/util/List;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()Ljava/util/List;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getPausedTriggerGroups()Ljava/util/Set;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#interrupt(Lorg/quartz/JobKey;)Z
+#pauseAll()V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#resumeAll()V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJobs(Ljava/util/Map;Z)V
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#triggerJob(Lorg/quartz/spi/OperableTrigger;)V
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#unscheduleJobs(Ljava/util/List;)Z
-#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getGlobalJobListeners()Ljava/util/List;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getGlobalTriggerListeners()Ljava/util/List;
-#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListenerNames()Ljava/util/Set;
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#getSchedulerListeners()Ljava/util/List;
-#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListenerNames()Ljava/util/Set;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/core/RemotableQuartzScheduler
@1.7.2
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getSchedulerContext()Lorg/quartz/SchedulerContext;
+#start()V
+#startDelayed(I)V
+#standby()V
+#isInStandbyMode()Z
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#runningSince()Ljava/util/Date;
+#getVersion()Ljava/lang/String;
+#numJobsExecuted()I
+#getJobStoreClass()Ljava/lang/Class;
+#supportsPersistence()Z
+#getThreadPoolClass()Ljava/lang/Class;
+#getThreadPoolSize()I
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
+#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@1.8.0
+#isClustered()Z
@2.0.0
+#clear()V
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Lorg/quartz/JobKey;)Z
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#triggerJob(Lorg/quartz/spi/OperableTrigger;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getPausedTriggerGroups()Ljava/util/Set;
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()Ljava/util/List;
+#interrupt(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#deleteJobs(Ljava/util/List;)Z
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJobs(Ljava/util/List;)Z
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
-#scheduleJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Ljava/util/Date;
-#addJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#deleteJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#unscheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggersOfJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#addCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#deleteCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#getCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
-#interrupt(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/core/jmx/CronTriggerSupport
@2.0.0
+#<init>()V
+#getItemNames()[Ljava/lang/String;
+#getItemDescriptions()[Ljava/lang/String;
+#getItemTypes()[Ljavax/management/openmbean/OpenType;
+#toCompositeData(Lorg/quartz/CronTrigger;)Ljavax/management/openmbean/CompositeData;
+#toTabularData(Ljava/util/List;)Ljavax/management/openmbean/TabularData;
+#newTrigger(Ljavax/management/openmbean/CompositeData;)Lorg/quartz/spi/OperableTrigger;
+#newTrigger(Ljava/util/Map;)Lorg/quartz/spi/OperableTrigger;

+###org/quartz/core/jmx/JobDetailSupport
@1.8.0
+#<init>()V
+#newJobDetail(Ljavax/management/openmbean/CompositeData;)Lorg/quartz/JobDetail;
+#toCompositeData(Lorg/quartz/JobDetail;)Ljavax/management/openmbean/CompositeData;
+#toTabularData([Lorg/quartz/JobDetail;)Ljavax/management/openmbean/TabularData;
@2.0.0
+#newJobDetail(Ljava/util/Map;)Lorg/quartz/JobDetail;

+###org/quartz/core/jmx/QuartzSchedulerMBean
@1.8.0
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#isStandbyMode()Z
+#isShutdown()Z
+#getVersion()Ljava/lang/String;
+#getJobStoreClassName()Ljava/lang/String;
+#getThreadPoolClassName()Ljava/lang/String;
+#getThreadPoolSize()I
+#getJobsScheduledMostRecentSample()J
+#getJobsExecutedMostRecentSample()J
+#getJobsCompletedMostRecentSample()J
+#getPerformanceMetrics()Ljava/util/Map;
+#getCurrentlyExecutingJobs()Ljavax/management/openmbean/TabularData;
+#getAllJobDetails(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#getAllTriggers(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#getJobGroupNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#isStarted()Z
+#start()V
+#shutdown()V
+#standby()V
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#interruptJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
+#addJob(Ljava/lang/String;Ljavax/management/openmbean/CompositeData;Z)V
+#pauseJobGroup(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;Ljava/lang/String;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getTriggerGroupNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
+#getPausedTriggerGroups(Ljava/lang/String;)Ljava/util/Set;
+#pauseAllTriggers(Ljava/lang/String;)V
+#resumeAllTriggers(Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getCalendarNames(Ljava/lang/String;)[Ljava/lang/String;
+#deleteCalendar(Ljava/lang/String;Ljava/lang/String;)V
+#setSampledStatisticsEnabled(Z)V
+#isSampledStatisticsEnabled()Z
@2.0.0
+#getAllJobDetails()Ljavax/management/openmbean/TabularData;
+#getAllTriggers()Ljava/util/List;
+#getJobGroupNames()Ljava/util/List;
+#getJobNames(Ljava/lang/String;)Ljava/util/List;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#clear()V
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
+#scheduleBasicJob(Ljava/util/Map;Ljava/util/Map;)V
+#scheduleJob(Ljava/util/Map;Ljava/util/Map;)V
+#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#interruptJob(Ljava/lang/String;Ljava/lang/String;)Z
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#addJob(Ljavax/management/openmbean/CompositeData;Z)V
+#addJob(Ljava/util/Map;Z)V
+#pauseJobGroup(Ljava/lang/String;)V
+#pauseJobsStartingWith(Ljava/lang/String;)V
+#pauseJobsEndingWith(Ljava/lang/String;)V
+#pauseJobsContaining(Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#resumeJobsStartingWith(Ljava/lang/String;)V
+#resumeJobsEndingWith(Ljava/lang/String;)V
+#resumeJobsContaining(Ljava/lang/String;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerNames(Ljava/lang/String;)Ljava/util/List;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#getPausedTriggerGroups()Ljava/util/Set;
+#pauseAllTriggers()V
+#resumeAllTriggers()V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#pauseTriggersStartingWith(Ljava/lang/String;)V
+#pauseTriggersEndingWith(Ljava/lang/String;)V
+#pauseTriggersContaining(Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#resumeTriggersStartingWith(Ljava/lang/String;)V
+#resumeTriggersEndingWith(Ljava/lang/String;)V
+#resumeTriggersContaining(Ljava/lang/String;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#getCalendarNames()Ljava/util/List;
+#deleteCalendar(Ljava/lang/String;)V
-#getAllJobDetails(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#getAllTriggers(Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#getJobGroupNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
-#scheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date;
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#interruptJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
-#deleteJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
-#addJob(Ljava/lang/String;Ljavax/management/openmbean/CompositeData;Z)V
-#pauseJobGroup(Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;Ljava/lang/String;)V
-#pauseJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#getTriggerGroupNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/TabularData;
-#getPausedTriggerGroups(Ljava/lang/String;)Ljava/util/Set;
-#pauseAllTriggers(Ljava/lang/String;)V
-#resumeAllTriggers(Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#getCalendarNames(Ljava/lang/String;)[Ljava/lang/String;
-#deleteCalendar(Ljava/lang/String;Ljava/lang/String;)V
@2.1.1
+#interruptJob(Ljava/lang/String;)Z
@2.2.1
+#pauseJobsAll()V
+#resumeJobsAll()V
+#pauseTriggersAll()V
+#resumeTriggersAll()V

+###org/quartz/core/jmx/SimpleTriggerSupport
@2.0.0
+#<init>()V
+#getItemNames()[Ljava/lang/String;
+#getItemDescriptions()[Ljava/lang/String;
+#getItemTypes()[Ljavax/management/openmbean/OpenType;
+#toCompositeData(Lorg/quartz/SimpleTrigger;)Ljavax/management/openmbean/CompositeData;
+#toTabularData(Ljava/util/List;)Ljavax/management/openmbean/TabularData;
+#newTrigger(Ljavax/management/openmbean/CompositeData;)Lorg/quartz/spi/OperableTrigger;
+#newTrigger(Ljava/util/Map;)Lorg/quartz/spi/OperableTrigger;

+###org/quartz/core/jmx/JobExecutionContextSupport
@1.8.0
+#<init>()V
+#toCompositeData(Lorg/quartz/JobExecutionContext;)Ljavax/management/openmbean/CompositeData;
+#toTabularData(Ljava/util/List;)Ljavax/management/openmbean/TabularData;

+###org/quartz/core/jmx/TriggerSupport
@1.8.0
+#<init>()V
+#toCompositeData(Lorg/quartz/Trigger;)Ljavax/management/openmbean/CompositeData;
+#toTabularData([Lorg/quartz/Trigger;)Ljavax/management/openmbean/TabularData;
@2.0.0
+#getItemNames()[Ljava/lang/String;
+#getItemDescriptions()[Ljava/lang/String;
+#getItemTypes()[Ljavax/management/openmbean/OpenType;
+#getIndexNames()[Ljava/lang/String;
+#toTabularData(Ljava/util/List;)Ljavax/management/openmbean/TabularData;
+#toCompositeList(Ljava/util/List;)Ljava/util/List;
+#initializeTrigger(Lorg/quartz/spi/MutableTrigger;Ljavax/management/openmbean/CompositeData;)V
+#initializeTrigger(Lorg/quartz/spi/MutableTrigger;Ljava/util/Map;)V
+#newTrigger(Ljavax/management/openmbean/CompositeData;)Lorg/quartz/spi/OperableTrigger;
+#newTrigger(Ljava/util/Map;)Lorg/quartz/spi/OperableTrigger;
-#toTabularData([Lorg/quartz/Trigger;)Ljavax/management/openmbean/TabularData;

+###org/quartz/core/jmx/JobDataMapSupport
@1.8.0
+#<init>()V
+#newJobDataMap(Ljavax/management/openmbean/TabularData;)Lorg/quartz/JobDataMap;
+#toCompositeData(Ljava/lang/String;Ljava/lang/String;)Ljavax/management/openmbean/CompositeData;
+#toTabularData(Lorg/quartz/JobDataMap;)Ljavax/management/openmbean/TabularData;
@2.0.0
+#newJobDataMap(Ljava/util/Map;)Lorg/quartz/JobDataMap;

+###org/quartz/TriggerKey
@2.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#triggerKey(Ljava/lang/String;)Lorg/quartz/TriggerKey;
+#triggerKey(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/TriggerKey;

+###org/quartz/JobDetail
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;Ljava/lang/Class;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZZ)V
+#getName()Ljava/lang/String;
+#setName(Ljava/lang/String;)V
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
+#getFullName()Ljava/lang/String;
+#getKey()Lorg/quartz/utils/Key;
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#getJobClass()Ljava/lang/Class;
+#setJobClass(Ljava/lang/Class;)V
+#getJobDataMap()Lorg/quartz/JobDataMap;
+#setJobDataMap(Lorg/quartz/JobDataMap;)V
+#validate()V
+#setVolatility(Z)V
+#setDurability(Z)V
+#setRequestsRecovery(Z)V
+#isVolatile()Z
+#isDurable()Z
+#isStateful()Z
+#requestsRecovery()Z
+#addJobListener(Ljava/lang/String;)V
+#removeJobListener(Ljava/lang/String;)Z
+#getJobListenerNames()[Ljava/lang/String;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#clone()Ljava/lang/Object;
@2.0.0
+#getKey()Lorg/quartz/JobKey;
+#isPersistJobDataAfterExecution()Z
+#isConcurrentExectionDisallowed()Z
+#getJobBuilder()Lorg/quartz/JobBuilder;
-#<init>()V
-#<init>(Ljava/lang/String;Ljava/lang/Class;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZZ)V
-#getName()Ljava/lang/String;
-#setName(Ljava/lang/String;)V
-#getGroup()Ljava/lang/String;
-#setGroup(Ljava/lang/String;)V
-#getFullName()Ljava/lang/String;
-#getKey()Lorg/quartz/utils/Key;
-#setDescription(Ljava/lang/String;)V
-#setJobClass(Ljava/lang/Class;)V
-#setJobDataMap(Lorg/quartz/JobDataMap;)V
-#validate()V
-#setVolatility(Z)V
-#setDurability(Z)V
-#setRequestsRecovery(Z)V
-#isVolatile()Z
-#isStateful()Z
-#addJobListener(Ljava/lang/String;)V
-#removeJobListener(Ljava/lang/String;)Z
-#getJobListenerNames()[Ljava/lang/String;
-#toString()Ljava/lang/String;
-#equals(Ljava/lang/Object;)Z
-#hashCode()I

+###org/quartz/impl/DirectSchedulerFactory
@1.7.2
+#getInstance()Lorg/quartz/impl/DirectSchedulerFactory;
+#createVolatileScheduler(I)V
+#createVolatileSchduler(I)V
+#createRemoteScheduler(Ljava/lang/String;I)V
+#createRemoteScheduler(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
+#createRemoteScheduler(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
+#createScheduler(Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;)V
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;)V
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;Ljava/lang/String;IJJ)V
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJ)V
+#getScheduler()Lorg/quartz/Scheduler;
+#getScheduler(Ljava/lang/String;)Lorg/quartz/Scheduler;
+#getAllSchedulers()Ljava/util/Collection;
@1.8.5
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJZLjava/lang/String;)V
-#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJ)V
@1.8.6
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/ThreadExecutor;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJZLjava/lang/String;)V
@2.0.0
-#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/ThreadExecutor;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJZLjava/lang/String;)V
@2.0.2
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/ThreadExecutor;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJZLjava/lang/String;)V
+#createScheduler(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ThreadPool;Lorg/quartz/spi/ThreadExecutor;Lorg/quartz/spi/JobStore;Ljava/util/Map;Ljava/lang/String;IJJZLjava/lang/String;IJ)V
-#createVolatileSchduler(I)V

+###org/quartz/impl/matchers/NameMatcher
@2.0.0
+#nameEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#nameStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#nameEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#nameContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
@2.1.0
+#jobNameEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#triggerNameEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#jobNameStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#triggerNameStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#jobNameEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#triggerNameEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#jobNameContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;
+#triggerNameContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/NameMatcher;

+###org/quartz/impl/matchers/GroupMatcher
@2.0.0
+#groupEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#groupStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#groupEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#groupContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
@2.1.0
+#jobGroupEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#triggerGroupEquals(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#jobGroupStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#triggerGroupStartsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#jobGroupEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#triggerGroupEndsWith(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#jobGroupContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
+#triggerGroupContains(Ljava/lang/String;)Lorg/quartz/impl/matchers/GroupMatcher;
@2.2.0
+#anyGroup()Lorg/quartz/impl/matchers/GroupMatcher;
+#anyJobGroup()Lorg/quartz/impl/matchers/GroupMatcher;
+#anyTriggerGroup()Lorg/quartz/impl/matchers/GroupMatcher;

+###org/quartz/impl/matchers/KeyMatcher
@2.0.0
+#keyEquals(Lorg/quartz/utils/Key;)Lorg/quartz/impl/matchers/KeyMatcher;
+#isMatch(Lorg/quartz/utils/Key;)Z
+#getCompareToValue()Lorg/quartz/utils/Key;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z

+###org/quartz/impl/matchers/OrMatcher
@2.0.0
+#or(Lorg/quartz/Matcher;Lorg/quartz/Matcher;)Lorg/quartz/impl/matchers/OrMatcher;
+#isMatch(Lorg/quartz/utils/Key;)Z
+#getLeftOperand()Lorg/quartz/Matcher;
+#getRightOperand()Lorg/quartz/Matcher;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z

+###org/quartz/impl/matchers/StringMatcher
@2.0.0
+#isMatch(Lorg/quartz/utils/Key;)Z
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#getCompareToValue()Ljava/lang/String;
+#getCompareWithOperator()Lorg/quartz/impl/matchers/StringMatcher$StringOperatorName;

+###org/quartz/impl/matchers/EverythingMatcher
@2.0.0
+#allJobs()Lorg/quartz/impl/matchers/EverythingMatcher;
+#allTriggers()Lorg/quartz/impl/matchers/EverythingMatcher;
+#isMatch(Lorg/quartz/utils/Key;)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/quartz/impl/matchers/StringMatcher$StringOperatorName
@2.0.0
+#values()[Lorg/quartz/impl/matchers/StringMatcher$StringOperatorName;
+#valueOf(Ljava/lang/String;)Lorg/quartz/impl/matchers/StringMatcher$StringOperatorName;
+#evaluate(Ljava/lang/String;Ljava/lang/String;)Z

+###org/quartz/impl/matchers/AndMatcher
@2.0.0
+#and(Lorg/quartz/Matcher;Lorg/quartz/Matcher;)Lorg/quartz/impl/matchers/AndMatcher;
+#isMatch(Lorg/quartz/utils/Key;)Z
+#getLeftOperand()Lorg/quartz/Matcher;
+#getRightOperand()Lorg/quartz/Matcher;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z

+###org/quartz/impl/matchers/NotMatcher
@2.0.0
+#not(Lorg/quartz/Matcher;)Lorg/quartz/impl/matchers/NotMatcher;
+#isMatch(Lorg/quartz/utils/Key;)Z
+#getOperand()Lorg/quartz/Matcher;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z

+###org/quartz/impl/StdSchedulerFactory
@1.7.2
+#<init>()V
+#<init>(Ljava/util/Properties;)V
+#<init>(Ljava/lang/String;)V
+#getLog()Lorg/apache/commons/logging/Log;
+#initialize()V
+#initialize(Ljava/lang/String;)V
+#initialize(Ljava/io/InputStream;)V
+#initialize(Ljava/util/Properties;)V
+#getScheduler()Lorg/quartz/Scheduler;
+#getDefaultScheduler()Lorg/quartz/Scheduler;
+#getScheduler(Ljava/lang/String;)Lorg/quartz/Scheduler;
+#getAllSchedulers()Ljava/util/Collection;
@1.8.0
+#getLog()Lorg/slf4j/Logger;
-#getLog()Lorg/apache/commons/logging/Log;

+###org/quartz/impl/JobDetailImpl
@2.0.0
+#<init>()V
+#<init>(Ljava/lang/String;Ljava/lang/Class;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZ)V
+#getName()Ljava/lang/String;
+#setName(Ljava/lang/String;)V
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
+#getFullName()Ljava/lang/String;
+#getKey()Lorg/quartz/JobKey;
+#setKey(Lorg/quartz/JobKey;)V
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#getJobClass()Ljava/lang/Class;
+#setJobClass(Ljava/lang/Class;)V
+#getJobDataMap()Lorg/quartz/JobDataMap;
+#setJobDataMap(Lorg/quartz/JobDataMap;)V
+#setDurability(Z)V
+#setRequestsRecovery(Z)V
+#isDurable()Z
+#isPersistJobDataAfterExecution()Z
+#isConcurrentExectionDisallowed()Z
+#requestsRecovery()Z
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#clone()Ljava/lang/Object;
+#getJobBuilder()Lorg/quartz/JobBuilder;

+###org/quartz/impl/triggers/CoreTrigger
@2.0.0
+#hasAdditionalProperties()Z

+###org/quartz/impl/triggers/CronTriggerImpl
@2.0.0
+#<init>()V
+#<init>(Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;Ljava/util/TimeZone;)V[deprecated]
+#clone()Ljava/lang/Object;
+#setCronExpression(Ljava/lang/String;)V
+#getCronExpression()Ljava/lang/String;
+#setCronExpression(Lorg/quartz/CronExpression;)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#willFireOn(Ljava/util/Calendar;)Z
+#willFireOn(Ljava/util/Calendar;Z)Z
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#getExpressionSummary()Ljava/lang/String;
+#hasAdditionalProperties()Z
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;

+###org/quartz/impl/triggers/SimpleTriggerImpl
@2.0.0
+#<init>()V
+#<init>(Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#<init>(Ljava/lang/String;IJ)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;IJ)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/util/Date;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V[deprecated]
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V[deprecated]
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getRepeatCount()I
+#setRepeatCount(I)V
+#getRepeatInterval()J
+#setRepeatInterval(J)V
+#getTimesTriggered()I
+#setTimesTriggered(I)V
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFireTimeBefore(Ljava/util/Date;)Ljava/util/Date;
+#computeNumTimesFiredBetween(Ljava/util/Date;Ljava/util/Date;)I
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#validate()V
+#hasAdditionalProperties()Z
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;

+###org/quartz/impl/triggers/CalendarIntervalTriggerImpl
@2.0.0
+#<init>()V
+#<init>(Ljava/lang/String;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getRepeatIntervalUnit()Lorg/quartz/DateBuilder$IntervalUnit;
+#setRepeatIntervalUnit(Lorg/quartz/DateBuilder$IntervalUnit;)V
+#getRepeatInterval()I
+#setRepeatInterval(I)V
+#getTimesTriggered()I
+#setTimesTriggered(I)V
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#validate()V
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;
+#hasAdditionalProperties()Z
@2.1.3
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#isPreserveHourOfDayAcrossDaylightSavings()Z
+#setPreserveHourOfDayAcrossDaylightSavings(Z)V
+#isSkipDayIfHourDoesNotExist()Z
+#setSkipDayIfHourDoesNotExist(Z)V

+###org/quartz/impl/triggers/AbstractTrigger
@2.0.0
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#setName(Ljava/lang/String;)V
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
+#setKey(Lorg/quartz/TriggerKey;)V
+#getJobName()Ljava/lang/String;
+#setJobName(Ljava/lang/String;)V
+#getJobGroup()Ljava/lang/String;
+#setJobGroup(Ljava/lang/String;)V
+#setJobKey(Lorg/quartz/JobKey;)V
+#getFullName()Ljava/lang/String;
+#getKey()Lorg/quartz/TriggerKey;
+#getJobKey()Lorg/quartz/JobKey;
+#getFullJobName()Ljava/lang/String;
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#setCalendarName(Ljava/lang/String;)V
+#getCalendarName()Ljava/lang/String;
+#getJobDataMap()Lorg/quartz/JobDataMap;
+#setJobDataMap(Lorg/quartz/JobDataMap;)V
+#getPriority()I
+#setPriority(I)V
+#triggered(Lorg/quartz/Calendar;)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)Lorg/quartz/Trigger$CompletedExecutionInstruction;
+#mayFireAgain()Z
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#setEndTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#setMisfireInstruction(I)V
+#getMisfireInstruction()I
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#validate()V
+#setFireInstanceId(Ljava/lang/String;)V
+#getFireInstanceId()Ljava/lang/String;
+#toString()Ljava/lang/String;
+#compareTo(Lorg/quartz/Trigger;)I
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#clone()Ljava/lang/Object;
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;
+#compareTo(Ljava/lang/Object;)I

+###org/quartz/impl/StdScheduler
@1.7.2
+#<init>(Lorg/quartz/core/QuartzScheduler;Lorg/quartz/core/SchedulingContext;)V
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getMetaData()Lorg/quartz/SchedulerMetaData;
+#getContext()Lorg/quartz/SchedulerContext;
+#start()V
+#startDelayed(I)V
+#standby()V
+#isStarted()Z
+#isInStandbyMode()Z
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#getPausedTriggerGroups()Ljava/util/Set;
+#pauseJobGroup(Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()[Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerGroupNames()[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()[Ljava/lang/String;
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
+#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
+#setJobFactory(Lorg/quartz/spi/JobFactory;)V
@2.0.0
+#<init>(Lorg/quartz/core/QuartzScheduler;)V
+#clear()V
+#deleteJobs(Ljava/util/List;)Z
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJobs(Ljava/util/List;)Z
+#deleteJob(Lorg/quartz/JobKey;)Z
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/JobKey;)V
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getJobGroupNames()Ljava/util/List;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getCalendarNames()Ljava/util/List;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#getListenerManager()Lorg/quartz/ListenerManager;
+#interrupt(Lorg/quartz/JobKey;)Z
-#<init>(Lorg/quartz/core/QuartzScheduler;Lorg/quartz/core/SchedulingContext;)V
-#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;)V
-#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;)V
-#getJobGroupNames()[Ljava/lang/String;
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerGroupNames()[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
-#getCalendarNames()[Ljava/lang/String;
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
-#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/impl/calendar/CronCalendar
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Lorg/quartz/Calendar;Ljava/lang/String;)V
+#<init>(Lorg/quartz/Calendar;Ljava/lang/String;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J
+#toString()Ljava/lang/String;
+#getCronExpression()Lorg/quartz/CronExpression;
+#setCronExpression(Ljava/lang/String;)V
+#setCronExpression(Lorg/quartz/CronExpression;)V

+###org/quartz/impl/calendar/AnnualCalendar
@1.7.2
+#<init>()V
+#<init>(Lorg/quartz/Calendar;)V
+#<init>(Ljava/util/TimeZone;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#getDaysExcluded()Ljava/util/ArrayList;
+#isDayExcluded(Ljava/util/Calendar;)Z
+#setDaysExcluded(Ljava/util/ArrayList;)V
+#setDayExcluded(Ljava/util/Calendar;Z)V
+#removeExcludedDay(Ljava/util/Calendar;)V
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J

+###org/quartz/impl/calendar/MonthlyCalendar
@1.7.2
+#<init>()V
+#<init>(Lorg/quartz/Calendar;)V
+#<init>(Ljava/util/TimeZone;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#getDaysExcluded()[Z
+#isDayExcluded(I)Z
+#setDaysExcluded([Z)V
+#setDayExcluded(IZ)V
+#areAllDaysExcluded()Z
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J

+###org/quartz/impl/calendar/HolidayCalendar
@1.7.2
+#<init>()V
+#<init>(Lorg/quartz/Calendar;)V
+#<init>(Ljava/util/TimeZone;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J
+#addExcludedDate(Ljava/util/Date;)V
+#removeExcludedDate(Ljava/util/Date;)V
+#getExcludedDates()Ljava/util/SortedSet;

+###org/quartz/impl/calendar/BaseCalendar
@1.7.2
+#<init>()V
+#<init>(Lorg/quartz/Calendar;)V
+#<init>(Ljava/util/TimeZone;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#setBaseCalendar(Lorg/quartz/Calendar;)V
+#getBaseCalendar()Lorg/quartz/Calendar;
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J

+###org/quartz/impl/calendar/DailyCalendar
@1.7.2
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/quartz/Calendar;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(IIIIIIII)V
+#<init>(Lorg/quartz/Calendar;IIIIIIII)V
+#<init>(Ljava/util/Calendar;Ljava/util/Calendar;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/Calendar;Ljava/util/Calendar;)V
+#<init>(JJ)V
+#<init>(Lorg/quartz/Calendar;JJ)V
+#<init>(Ljava/util/TimeZone;JJ)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;JJ)V
+#clone()Ljava/lang/Object;
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J
+#getTimeRangeStartingTimeInMillis(J)J
+#getTimeRangeEndingTimeInMillis(J)J
+#getInvertTimeRange()Z
+#setInvertTimeRange(Z)V
+#toString()Ljava/lang/String;
+#setTimeRange(Ljava/lang/String;Ljava/lang/String;)V
+#setTimeRange(IIIIIIII)V
+#setTimeRange(Ljava/util/Calendar;Ljava/util/Calendar;)V
+#setTimeRange(JJ)V

+###org/quartz/impl/calendar/WeeklyCalendar
@1.7.2
+#<init>()V
+#<init>(Lorg/quartz/Calendar;)V
+#<init>(Ljava/util/TimeZone;)V
+#<init>(Lorg/quartz/Calendar;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#getDaysExcluded()[Z
+#isDayExcluded(I)Z
+#setDaysExcluded([Z)V
+#setDayExcluded(IZ)V
+#areAllDaysExcluded()Z
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J

+###org/quartz/impl/SchedulerRepository
@1.7.2
+#getInstance()Lorg/quartz/impl/SchedulerRepository;
+#bind(Lorg/quartz/Scheduler;)V
+#remove(Ljava/lang/String;)Z
+#lookup(Ljava/lang/String;)Lorg/quartz/Scheduler;
+#lookupAll()Ljava/util/Collection;

+###org/quartz/impl/QuartzServer
@1.7.2
+#serve(Lorg/quartz/SchedulerFactory;Z)V
+#schedulerError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#schedulerShutdown()V
+#main([Ljava/lang/String;)V

+###org/quartz/impl/JobExecutionContextImpl
@2.0.0
+#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Job;)V
+#getScheduler()Lorg/quartz/Scheduler;
+#getTrigger()Lorg/quartz/Trigger;
+#getCalendar()Lorg/quartz/Calendar;
+#isRecovering()Z
+#incrementRefireCount()V
+#getRefireCount()I
+#getMergedJobDataMap()Lorg/quartz/JobDataMap;
+#getJobDetail()Lorg/quartz/JobDetail;
+#getJobInstance()Lorg/quartz/Job;
+#getFireTime()Ljava/util/Date;
+#getScheduledFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#toString()Ljava/lang/String;
+#getResult()Ljava/lang/Object;
+#setResult(Ljava/lang/Object;)V
+#getJobRunTime()J
+#setJobRunTime(J)V
+#put(Ljava/lang/Object;Ljava/lang/Object;)V
+#get(Ljava/lang/Object;)Ljava/lang/Object;
@2.1.0
+#getFireInstanceId()Ljava/lang/String;
@2.2.0
+#getRecoveringTriggerKey()Lorg/quartz/TriggerKey;

+###org/quartz/impl/StdJobRunShellFactory
@1.7.2
+#<init>()V
+#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
+#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
+#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V
@2.0.0
+#initialize(Lorg/quartz/Scheduler;)V
+#createJobRunShell(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/core/JobRunShell;
-#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
-#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
-#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V

+###org/quartz/impl/RemoteScheduler
@1.7.2
+#<init>(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;I)V
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getMetaData()Lorg/quartz/SchedulerMetaData;
+#getContext()Lorg/quartz/SchedulerContext;
+#start()V
+#startDelayed(I)V
+#standby()V
+#isStarted()Z
+#isInStandbyMode()Z
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()[Ljava/lang/String;
+#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerGroupNames()[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()[Ljava/lang/String;
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
+#getPausedTriggerGroups()Ljava/util/Set;
+#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
+#setJobFactory(Lorg/quartz/spi/JobFactory;)V
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/String;I)V
+#deleteJobs(Ljava/util/List;)Z
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJobs(Ljava/util/List;)Z
+#deleteJob(Lorg/quartz/JobKey;)Z
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/JobKey;)V
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clear()V
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getCalendarNames()Ljava/util/List;
+#getListenerManager()Lorg/quartz/ListenerManager;
+#interrupt(Lorg/quartz/JobKey;)Z
-#<init>(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;I)V
-#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;)V
-#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;)V
-#getJobGroupNames()[Ljava/lang/String;
-#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerGroupNames()[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
-#getCalendarNames()[Ljava/lang/String;
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
-#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/impl/jdbcjobstore/StdJDBCConstants
@1.7.2

+###org/quartz/impl/jdbcjobstore/SimplePropertiesTriggerPersistenceDelegateSupport
@2.0.0
+#<init>()V
+#initialize(Ljava/lang/String;Ljava/lang/String;)V
+#deleteExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#insertExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#loadExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate$TriggerPropertyBundle;
+#updateExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I

+###org/quartz/impl/jdbcjobstore/TablePrefixAware
@1.7.2
+#setTablePrefix(Ljava/lang/String;)V
@2.0.0
+#setSchedName(Ljava/lang/String;)V

+###org/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate$TriggerPropertyBundle
@2.0.0
+#<init>(Lorg/quartz/ScheduleBuilder;[Ljava/lang/String;[Ljava/lang/Object;)V
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;
+#getStatePropertyNames()[Ljava/lang/String;
+#getStatePropertyValues()[Ljava/lang/Object;

+###org/quartz/impl/jdbcjobstore/Util
@1.7.2
+#rtp(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
@2.0.0
+#rtp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#closeResultSet(Ljava/sql/ResultSet;)V
+#closeStatement(Ljava/sql/Statement;)V
+#setBeanProps(Ljava/lang/Object;[Ljava/lang/String;[Ljava/lang/Object;)V
-#rtp(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

+###org/quartz/impl/jdbcjobstore/CalendarIntervalTriggerPersistenceDelegate
@2.0.0
+#<init>()V
+#canHandleTriggerType(Lorg/quartz/spi/OperableTrigger;)Z
+#getHandledTriggerTypeDiscriminator()Ljava/lang/String;

+###org/quartz/impl/jdbcjobstore/Semaphore
@1.7.2
+#obtainLock(Ljava/sql/Connection;Ljava/lang/String;)Z
+#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
+#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z
+#requiresConnection()Z
@2.2.0
+#releaseLock(Ljava/lang/String;)V
-#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
-#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z

+###org/quartz/impl/jdbcjobstore/InvalidConfigurationException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>()V

+###org/quartz/impl/jdbcjobstore/SchedulerStateRecord
@1.7.2
+#<init>()V
+#getCheckinInterval()J
+#getCheckinTimestamp()J
+#getSchedulerInstanceId()Ljava/lang/String;
+#setCheckinInterval(J)V
+#setCheckinTimestamp(J)V
+#setSchedulerInstanceId(Ljava/lang/String;)V

+###org/quartz/impl/jdbcjobstore/JobStoreSupport$VoidTransactionCallback
@1.7.2
+#execute(Ljava/sql/Connection;)V
@2.2.1
+#execute(Ljava/sql/Connection;)Ljava/lang/Void;
+#execute(Ljava/sql/Connection;)Ljava/lang/Object;
-#execute(Ljava/sql/Connection;)V

+###org/quartz/impl/jdbcjobstore/NoSuchDelegateException
@1.7.2
+#<init>(Ljava/lang/String;)V
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/quartz/impl/jdbcjobstore/SybaseDelegate
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/JTANonClusteredSemaphore
@1.7.2
+#<init>()V
+#setTransactionManagerJNDIName(Ljava/lang/String;)V
+#obtainLock(Ljava/sql/Connection;Ljava/lang/String;)Z
+#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
+#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z
+#requiresConnection()Z
@2.2.0
+#releaseLock(Ljava/lang/String;)V
-#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V

+###org/quartz/impl/jdbcjobstore/HSQLDBDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/DriverDelegate
@1.7.2
+#updateTriggerStatesFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#selectMisfiredTriggers(Ljava/sql/Connection;J)[Lorg/quartz/utils/Key;
+#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
+#selectMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;JILjava/util/List;)Z
+#countMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)I
+#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
+#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)[Lorg/quartz/Trigger;
+#deleteFiredTriggers(Ljava/sql/Connection;)I
+#deleteFiredTriggers(Ljava/sql/Connection;Ljava/lang/String;)I
+#deleteVolatileFiredTriggers(Ljava/sql/Connection;)I
+#selectVolatileTriggers(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
+#selectVolatileJobs(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
+#insertJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#updateJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#selectTriggerNamesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/utils/Key;
+#deleteJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#isJobStateful(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#jobExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#updateJobData(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#insertJobListener(Ljava/sql/Connection;Lorg/quartz/JobDetail;Ljava/lang/String;)I
+#selectJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#selectJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectNumJobs(Ljava/sql/Connection;)I
+#selectJobGroups(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectJobsInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#insertSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
+#insertBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
+#insertCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
+#updateCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
+#updateBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
+#triggerExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#updateTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStatesBeforeTime(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)I
+#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#deleteTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#insertTriggerListener(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;)I
+#selectTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#deleteSimpleTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteBlobTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteCronTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#selectJobForTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectStatefulJobsOfTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#selectTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#selectTriggerJobDataMap(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDataMap;
+#selectTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#selectTriggerStatus(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/utils/TriggerStatus;
+#selectNumTriggers(Ljava/sql/Connection;)I
+#selectTriggerGroups(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectTriggersInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
+#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/utils/Key;
+#insertPausedTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)I
+#deletePausedTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)I
+#deleteAllPausedTriggerGroups(Ljava/sql/Connection;)I
+#isTriggerGroupPaused(Ljava/sql/Connection;Ljava/lang/String;)Z
+#selectPausedTriggerGroups(Ljava/sql/Connection;)Ljava/util/Set;
+#isExistingTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Z
+#insertCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#updateCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#calendarExists(Ljava/sql/Connection;Ljava/lang/String;)Z
+#selectCalendar(Ljava/sql/Connection;Ljava/lang/String;)Lorg/quartz/Calendar;
+#calendarIsReferenced(Ljava/sql/Connection;Ljava/lang/String;)Z
+#deleteCalendar(Ljava/sql/Connection;Ljava/lang/String;)I
+#selectNumCalendars(Ljava/sql/Connection;)I
+#selectCalendars(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectNextFireTime(Ljava/sql/Connection;)J
+#selectTriggerForFireTime(Ljava/sql/Connection;J)Lorg/quartz/utils/Key;
+#selectTriggerToAcquire(Ljava/sql/Connection;JJ)Ljava/util/List;
+#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#selectFiredTriggerRecords(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#selectFiredTriggerRecordsByJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#selectInstancesFiredTriggerRecords(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectFiredTriggerInstanceNames(Ljava/sql/Connection;)Ljava/util/Set;
+#deleteFiredTrigger(Ljava/sql/Connection;Ljava/lang/String;)I
+#selectJobExecutionCount(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#insertSchedulerState(Ljava/sql/Connection;Ljava/lang/String;JJ)I
+#deleteSchedulerState(Ljava/sql/Connection;Ljava/lang/String;)I
+#updateSchedulerState(Ljava/sql/Connection;Ljava/lang/String;J)I
+#selectSchedulerStateRecords(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
@2.0.0
+#initialize(Ljava/lang/String;)V
+#selectMisfiredTriggers(Ljava/sql/Connection;J)Ljava/util/List;
+#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)Ljava/util/List;
+#hasMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;JILjava/util/List;)Z
+#countMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)I
+#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)Ljava/util/List;
+#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)Ljava/util/List;
+#selectTriggerKeysForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)Ljava/util/List;
+#deleteJobDetail(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
+#isJobNonConcurrent(Ljava/sql/Connection;Lorg/quartz/JobKey;)Z
+#jobExists(Ljava/sql/Connection;Lorg/quartz/JobKey;)Z
+#selectJobDetail(Ljava/sql/Connection;Lorg/quartz/JobKey;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectJobGroups(Ljava/sql/Connection;)Ljava/util/List;
+#selectJobsInGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#triggerExists(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Z
+#updateTriggerState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;)I
+#updateTriggerStateFromOtherState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;Ljava/lang/String;)I
+#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Lorg/quartz/JobKey;Ljava/lang/String;Ljava/lang/String;)I
+#deleteTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#selectNumTriggersForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
+#selectJobForTrigger(Ljava/sql/Connection;Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/TriggerKey;)Lorg/quartz/JobDetail;
+#selectTriggersForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)Ljava/util/List;
+#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#selectTriggerState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Ljava/lang/String;
+#selectTriggerStatus(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerStatus;
+#selectTriggerGroups(Ljava/sql/Connection;)Ljava/util/List;
+#selectTriggerGroups(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/List;
+#selectTriggersInGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#deletePausedTriggerGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)I
+#selectCalendars(Ljava/sql/Connection;)Ljava/util/List;
+#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateFiredTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#selectJobExecutionCount(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
+#clearData(Ljava/sql/Connection;)V
-#selectMisfiredTriggers(Ljava/sql/Connection;J)[Lorg/quartz/utils/Key;
-#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
-#selectMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;JILjava/util/List;)Z
-#countMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)I
-#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
-#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)[Lorg/quartz/Trigger;
-#deleteVolatileFiredTriggers(Ljava/sql/Connection;)I
-#selectVolatileTriggers(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
-#selectVolatileJobs(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
-#selectTriggerNamesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/utils/Key;
-#deleteJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#isJobStateful(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#jobExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#insertJobListener(Ljava/sql/Connection;Lorg/quartz/JobDetail;Ljava/lang/String;)I
-#selectJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#selectJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
-#selectJobGroups(Ljava/sql/Connection;)[Ljava/lang/String;
-#selectJobsInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
-#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#insertSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
-#insertBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
-#insertCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
-#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#updateSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
-#updateCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
-#updateBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
-#triggerExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#updateTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherStatesBeforeTime(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)I
-#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStatesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#deleteTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#insertTriggerListener(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;)I
-#selectTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#deleteSimpleTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteBlobTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteCronTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#selectJobForTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
-#selectStatefulJobsOfTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
-#selectTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#selectTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#selectTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
-#selectTriggerStatus(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/utils/TriggerStatus;
-#selectTriggerGroups(Ljava/sql/Connection;)[Ljava/lang/String;
-#selectTriggersInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
-#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/utils/Key;
-#selectCalendars(Ljava/sql/Connection;)[Ljava/lang/String;
-#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#selectJobExecutionCount(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
@2.1.0
+#selectTriggerToAcquire(Ljava/sql/Connection;JJI)Ljava/util/List;
@2.2.0
+#initialize(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;ZLjava/lang/String;)V
-#initialize(Ljava/lang/String;)V
@2.2.1
+#selectJobForTrigger(Ljava/sql/Connection;Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/TriggerKey;Z)Lorg/quartz/JobDetail;

+###org/quartz/impl/jdbcjobstore/DB2v6Delegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
+#selectNumJobs(Ljava/sql/Connection;)I
+#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#selectNumTriggers(Ljava/sql/Connection;)I
+#selectNumCalendars(Ljava/sql/Connection;)I
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
+#selectNumTriggersForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/StdJDBCDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
+#updateTriggerStatesFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#selectMisfiredTriggers(Ljava/sql/Connection;J)[Lorg/quartz/utils/Key;
+#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/utils/Key;
+#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
+#selectMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;JILjava/util/List;)Z
+#countMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)I
+#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
+#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)[Lorg/quartz/Trigger;
+#deleteFiredTriggers(Ljava/sql/Connection;)I
+#deleteFiredTriggers(Ljava/sql/Connection;Ljava/lang/String;)I
+#insertJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#updateJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#selectTriggerNamesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/utils/Key;
+#deleteJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#isJobStateful(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#jobExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#updateJobData(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#insertJobListener(Ljava/sql/Connection;Lorg/quartz/JobDetail;Ljava/lang/String;)I
+#selectJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#selectJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectNumJobs(Ljava/sql/Connection;)I
+#selectJobGroups(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectJobsInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#insertSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
+#insertCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
+#insertBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
+#updateCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
+#updateBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
+#triggerExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
+#updateTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStatesBeforeTime(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)I
+#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#deleteTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#insertTriggerListener(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;)I
+#selectTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
+#deleteSimpleTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteCronTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteBlobTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#selectJobForTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#selectStatefulJobsOfTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#selectTriggerJobDataMap(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDataMap;
+#selectTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#selectTriggerStatus(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/utils/TriggerStatus;
+#selectNumTriggers(Ljava/sql/Connection;)I
+#selectTriggerGroups(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectTriggersInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
+#insertPausedTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)I
+#deletePausedTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)I
+#deleteAllPausedTriggerGroups(Ljava/sql/Connection;)I
+#isTriggerGroupPaused(Ljava/sql/Connection;Ljava/lang/String;)Z
+#isExistingTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Z
+#insertCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#updateCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#calendarExists(Ljava/sql/Connection;Ljava/lang/String;)Z
+#selectCalendar(Ljava/sql/Connection;Ljava/lang/String;)Lorg/quartz/Calendar;
+#calendarIsReferenced(Ljava/sql/Connection;Ljava/lang/String;)Z
+#deleteCalendar(Ljava/sql/Connection;Ljava/lang/String;)I
+#selectNumCalendars(Ljava/sql/Connection;)I
+#selectCalendars(Ljava/sql/Connection;)[Ljava/lang/String;
+#selectNextFireTime(Ljava/sql/Connection;)J
+#selectTriggerForFireTime(Ljava/sql/Connection;J)Lorg/quartz/utils/Key;
+#selectTriggerToAcquire(Ljava/sql/Connection;JJ)Ljava/util/List;
+#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#selectFiredTriggerRecords(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#selectFiredTriggerRecordsByJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
+#selectInstancesFiredTriggerRecords(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectFiredTriggerInstanceNames(Ljava/sql/Connection;)Ljava/util/Set;
+#deleteFiredTrigger(Ljava/sql/Connection;Ljava/lang/String;)I
+#selectJobExecutionCount(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
+#deleteVolatileFiredTriggers(Ljava/sql/Connection;)I
+#insertSchedulerState(Ljava/sql/Connection;Ljava/lang/String;JJ)I
+#deleteSchedulerState(Ljava/sql/Connection;Ljava/lang/String;)I
+#updateSchedulerState(Ljava/sql/Connection;Ljava/lang/String;J)I
+#selectSchedulerStateRecords(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectVolatileTriggers(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
+#selectVolatileJobs(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
+#selectPausedTriggerGroups(Ljava/sql/Connection;)Ljava/util/Set;
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
+#initialize(Ljava/lang/String;)V
+#addTriggerPersistenceDelegate(Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate;)V
+#findTriggerPersistenceDelegate(Lorg/quartz/spi/OperableTrigger;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate;
+#findTriggerPersistenceDelegate(Ljava/lang/String;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate;
+#selectMisfiredTriggers(Ljava/sql/Connection;J)Ljava/util/List;
+#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)Ljava/util/List;
+#hasMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;JILjava/util/List;)Z
+#countMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)I
+#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)Ljava/util/List;
+#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)Ljava/util/List;
+#clearData(Ljava/sql/Connection;)V
+#selectTriggerKeysForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)Ljava/util/List;
+#deleteJobDetail(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
+#isJobNonConcurrent(Ljava/sql/Connection;Lorg/quartz/JobKey;)Z
+#jobExists(Ljava/sql/Connection;Lorg/quartz/JobKey;)Z
+#selectJobDetail(Ljava/sql/Connection;Lorg/quartz/JobKey;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
+#selectJobGroups(Ljava/sql/Connection;)Ljava/util/List;
+#selectJobsInGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#insertBlobTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateBlobTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;)I
+#triggerExists(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Z
+#updateTriggerState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;)I
+#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStateFromOtherState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;Ljava/lang/String;Ljava/lang/String;)I
+#updateTriggerStatesForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;Ljava/lang/String;)I
+#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Lorg/quartz/JobKey;Ljava/lang/String;Ljava/lang/String;)I
+#deleteBlobTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#deleteTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#selectNumTriggersForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
+#selectJobForTrigger(Ljava/sql/Connection;Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/TriggerKey;)Lorg/quartz/JobDetail;
+#selectTriggersForJob(Ljava/sql/Connection;Lorg/quartz/JobKey;)Ljava/util/List;
+#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
+#selectTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#selectTriggerState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Ljava/lang/String;
+#selectTriggerStatus(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerStatus;
+#selectTriggerGroups(Ljava/sql/Connection;)Ljava/util/List;
+#selectTriggerGroups(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/List;
+#selectTriggersInGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#deletePausedTriggerGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)I
+#selectCalendars(Ljava/sql/Connection;)Ljava/util/List;
+#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateFiredTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#selectJobExecutionCount(Ljava/sql/Connection;Lorg/quartz/JobKey;)I
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#selectMisfiredTriggers(Ljava/sql/Connection;J)[Lorg/quartz/utils/Key;
-#selectTriggersInState(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/utils/Key;
-#selectMisfiredTriggersInState(Ljava/sql/Connection;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
-#selectMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;JILjava/util/List;)Z
-#countMisfiredTriggersInStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)I
-#selectMisfiredTriggersInGroupInState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;J)[Lorg/quartz/utils/Key;
-#selectTriggersForRecoveringJobs(Ljava/sql/Connection;)[Lorg/quartz/Trigger;
-#selectTriggerNamesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/utils/Key;
-#deleteJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#isJobStateful(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#jobExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#insertJobListener(Ljava/sql/Connection;Lorg/quartz/JobDetail;Ljava/lang/String;)I
-#selectJobListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#selectJobDetail(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
-#selectJobGroups(Ljava/sql/Connection;)[Ljava/lang/String;
-#selectJobsInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
-#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#insertSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
-#insertCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
-#insertBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
-#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#updateSimpleTrigger(Ljava/sql/Connection;Lorg/quartz/SimpleTrigger;)I
-#updateCronTrigger(Ljava/sql/Connection;Lorg/quartz/CronTrigger;)I
-#updateBlobTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;)I
-#triggerExists(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Z
-#updateTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherStatesBeforeTime(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)I
-#updateTriggerGroupStateFromOtherStates(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerGroupStateFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStatesForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#updateTriggerStatesForJobFromOtherState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
-#deleteTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#insertTriggerListener(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;)I
-#selectTriggerListeners(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
-#deleteSimpleTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteCronTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteBlobTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#selectNumTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#selectJobForTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)Lorg/quartz/JobDetail;
-#selectTriggersForJob(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#selectTriggersForCalendar(Ljava/sql/Connection;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#selectStatefulJobsOfTriggerGroup(Ljava/sql/Connection;Ljava/lang/String;)Ljava/util/List;
-#selectTrigger(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#selectTriggerState(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
-#selectTriggerStatus(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/utils/TriggerStatus;
-#selectTriggerGroups(Ljava/sql/Connection;)[Ljava/lang/String;
-#selectTriggersInGroup(Ljava/sql/Connection;Ljava/lang/String;)[Ljava/lang/String;
-#selectCalendars(Ljava/sql/Connection;)[Ljava/lang/String;
-#insertFiredTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#selectJobExecutionCount(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)I
-#deleteVolatileFiredTriggers(Ljava/sql/Connection;)I
-#selectVolatileTriggers(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
-#selectVolatileJobs(Ljava/sql/Connection;)[Lorg/quartz/utils/Key;
@2.1.0
+#selectTriggerForFireTime(Ljava/sql/Connection;J)Lorg/quartz/TriggerKey;
+#selectTriggerToAcquire(Ljava/sql/Connection;JJI)Ljava/util/List;
@2.2.0
+#<init>()V
+#initialize(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;ZLjava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#initialize(Ljava/lang/String;)V
@2.2.1
+#selectJobForTrigger(Ljava/sql/Connection;Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/TriggerKey;Z)Lorg/quartz/JobDetail;

+###org/quartz/impl/jdbcjobstore/FiredTriggerRecord
@1.7.2
+#<init>()V
+#getFireInstanceId()Ljava/lang/String;
+#getFireTimestamp()J
+#isJobIsStateful()Z
+#getJobKey()Lorg/quartz/utils/Key;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getTriggerKey()Lorg/quartz/utils/Key;
+#getFireInstanceState()Ljava/lang/String;
+#setFireInstanceId(Ljava/lang/String;)V
+#setFireTimestamp(J)V
+#setJobIsStateful(Z)V
+#setJobKey(Lorg/quartz/utils/Key;)V
+#setSchedulerInstanceId(Ljava/lang/String;)V
+#setTriggerKey(Lorg/quartz/utils/Key;)V
+#setFireInstanceState(Ljava/lang/String;)V
+#isJobRequestsRecovery()Z
+#isTriggerIsVolatile()Z
+#setJobRequestsRecovery(Z)V
+#setTriggerIsVolatile(Z)V
+#getPriority()I
+#setPriority(I)V
@2.0.0
+#isJobDisallowsConcurrentExecution()Z
+#getJobKey()Lorg/quartz/JobKey;
+#getTriggerKey()Lorg/quartz/TriggerKey;
+#setJobDisallowsConcurrentExecution(Z)V
+#setJobKey(Lorg/quartz/JobKey;)V
+#setTriggerKey(Lorg/quartz/TriggerKey;)V
-#isJobIsStateful()Z
-#getJobKey()Lorg/quartz/utils/Key;
-#getTriggerKey()Lorg/quartz/utils/Key;
-#setJobIsStateful(Z)V
-#setJobKey(Lorg/quartz/utils/Key;)V
-#setTriggerKey(Lorg/quartz/utils/Key;)V
-#isTriggerIsVolatile()Z
-#setTriggerIsVolatile(Z)V
@2.2.0
+#getScheduleTimestamp()J
+#setScheduleTimestamp(J)V

+###org/quartz/impl/jdbcjobstore/JobStoreTX
@1.7.2
+#<init>()V
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V

+###org/quartz/impl/jdbcjobstore/SimpleTriggerPersistenceDelegate
@2.0.0
+#<init>()V
+#initialize(Ljava/lang/String;Ljava/lang/String;)V
+#getHandledTriggerTypeDiscriminator()Ljava/lang/String;
+#canHandleTriggerType(Lorg/quartz/spi/OperableTrigger;)Z
+#deleteExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#insertExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#loadExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate$TriggerPropertyBundle;
+#updateExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I

+###org/quartz/impl/jdbcjobstore/JobStoreSupport
@1.7.2
+#<init>()V
+#setDataSource(Ljava/lang/String;)V
+#getDataSource()Ljava/lang/String;
+#setTablePrefix(Ljava/lang/String;)V
+#getTablePrefix()Ljava/lang/String;
+#setUseProperties(Ljava/lang/String;)V
+#canUseProperties()Z
+#setInstanceId(Ljava/lang/String;)V
+#getInstanceId()Ljava/lang/String;
+#setInstanceName(Ljava/lang/String;)V
+#getInstanceName()Ljava/lang/String;
+#setIsClustered(Z)V
+#isClustered()Z
+#getClusterCheckinInterval()J
+#setClusterCheckinInterval(J)V
+#getMaxMisfiresToHandleAtATime()I
+#setMaxMisfiresToHandleAtATime(I)V
+#getDbRetryInterval()J
+#setDbRetryInterval(J)V
+#setUseDBLocks(Z)V
+#getUseDBLocks()Z
+#isLockOnInsert()Z
+#setLockOnInsert(Z)V
+#getMisfireThreshold()J
+#setMisfireThreshold(J)V
+#isDontSetAutoCommitFalse()Z
+#setDontSetAutoCommitFalse(Z)V
+#isTxIsolationLevelSerializable()Z
+#setTxIsolationLevelSerializable(Z)V
+#isAcquireTriggersWithinLock()Z
+#setAcquireTriggersWithinLock(Z)V
+#setDriverDelegateClass(Ljava/lang/String;)V
+#getDriverDelegateClass()Ljava/lang/String;
+#getSelectWithLockSQL()Ljava/lang/String;
+#setSelectWithLockSQL(Ljava/lang/String;)V
+#getMakeThreadsDaemons()Z
+#setMakeThreadsDaemons(Z)V
+#isThreadsInheritInitializersClassLoadContext()Z
+#setThreadsInheritInitializersClassLoadContext(Z)V
+#getDoubleCheckLockMisfireHandler()Z
+#setDoubleCheckLockMisfireHandler(Z)V
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#schedulerStarted()V
+#shutdown()V
+#supportsPersistence()Z
+#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
+#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
+#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
+#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#getTriggerState(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTrigger(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTrigger(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#getPausedTriggerGroups(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#pauseAll(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)V
+#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
+#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
+#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
+#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
+#setLockHandler(Lorg/quartz/impl/jdbcjobstore/Semaphore;)V
+#executeWithoutLock(Lorg/quartz/impl/jdbcjobstore/JobStoreSupport$TransactionCallback;)Ljava/lang/Object;
@1.8.0
+#getEstimatedTimeToReleaseAndAcquireTrigger()J
@1.8.6
+#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
+#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
@2.0.0
+#setThreadPoolSize(I)V
+#setDriverDelegateInitString(Ljava/lang/String;)V
+#getDriverDelegateInitString()Ljava/lang/String;
+#storeJobAndTrigger(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;)V
+#storeJob(Lorg/quartz/JobDetail;Z)V
+#storeTrigger(Lorg/quartz/spi/OperableTrigger;Z)V
+#removeJob(Lorg/quartz/JobKey;)Z
+#removeJobs(Ljava/util/List;)Z
+#removeTriggers(Ljava/util/List;)Z
+#storeJobsAndTriggers(Ljava/util/Map;Z)V
+#retrieveJob(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#removeTrigger(Lorg/quartz/TriggerKey;)Z
+#replaceTrigger(Lorg/quartz/TriggerKey;Lorg/quartz/spi/OperableTrigger;)Z
+#retrieveTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getTriggerState(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#storeCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Ljava/lang/String;)Z
+#retrieveCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs()I
+#getNumberOfTriggers()I
+#getNumberOfCalendars()I
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clearAllSchedulingData()V
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobGroupNames()Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getCalendarNames()Ljava/util/List;
+#getTriggersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTrigger(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#pauseTriggerGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getPausedTriggerGroups()Ljava/util/Set;
+#getPausedTriggerGroups(Ljava/sql/Connection;)Ljava/util/Set;
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#resumeTriggerGroup(Ljava/sql/Connection;Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#pauseAll()V
+#pauseAll(Ljava/sql/Connection;)V
+#resumeAll()V
+#resumeAll(Ljava/sql/Connection;)V
+#acquireNextTriggers(JIJ)Ljava/util/List;
+#releaseAcquiredTrigger(Lorg/quartz/spi/OperableTrigger;)V
+#triggersFired(Ljava/util/List;)Ljava/util/List;
+#triggeredJobComplete(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
-#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
-#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
-#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
-#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
-#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
-#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#getTriggerState(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTrigger(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTrigger(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#getPausedTriggerGroups(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#pauseAll(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Ljava/sql/Connection;Lorg/quartz/core/SchedulingContext;)V
-#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
-#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
-#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
-#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
@2.1.0
+#setThreadExecutor(Lorg/quartz/spi/ThreadExecutor;)V
+#getThreadExecutor()Lorg/quartz/spi/ThreadExecutor;
+#schedulerPaused()V
+#schedulerResumed()V
@2.3.0
+#getAcquireRetryDelay(I)J
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/impl/jdbcjobstore/MSSQLDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/JobStoreCMT
@1.7.2
+#<init>()V
+#setNonManagedTXDataSource(Ljava/lang/String;)V
+#getNonManagedTXDataSource()Ljava/lang/String;
+#isDontSetNonManagedTXConnectionAutoCommitFalse()Z
+#setDontSetNonManagedTXConnectionAutoCommitFalse(Z)V
+#isTxIsolationLevelReadCommitted()Z
+#setTxIsolationLevelReadCommitted(Z)V
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#shutdown()V

+###org/quartz/impl/jdbcjobstore/AttributeRestoringConnectionInvocationHandler
@1.7.2
+#<init>(Ljava/sql/Connection;)V
+#invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
+#setAutoCommit(Z)V
+#setTransactionIsolation(I)V
+#getWrappedConnection()Ljava/sql/Connection;
+#restoreOriginalAtributes()V
+#close()V

+###org/quartz/impl/jdbcjobstore/JobStoreSupport$TransactionCallback
@1.7.2
+#execute(Ljava/sql/Connection;)Ljava/lang/Object;

+###org/quartz/impl/jdbcjobstore/CronTriggerPersistenceDelegate
@2.0.0
+#<init>()V
+#initialize(Ljava/lang/String;Ljava/lang/String;)V
+#getHandledTriggerTypeDiscriminator()Ljava/lang/String;
+#canHandleTriggerType(Lorg/quartz/spi/OperableTrigger;)Z
+#deleteExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#insertExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#loadExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate$TriggerPropertyBundle;
+#updateExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I

+###org/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate
@2.0.0
+#initialize(Ljava/lang/String;Ljava/lang/String;)V
+#canHandleTriggerType(Lorg/quartz/spi/OperableTrigger;)Z
+#getHandledTriggerTypeDiscriminator()Ljava/lang/String;
+#insertExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#deleteExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)I
+#loadExtendedTriggerProperties(Ljava/sql/Connection;Lorg/quartz/TriggerKey;)Lorg/quartz/impl/jdbcjobstore/TriggerPersistenceDelegate$TriggerPropertyBundle;

+###org/quartz/impl/jdbcjobstore/PostgreSQLDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/DB2v8Delegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Lorg/quartz/spi/ClassLoadHelper;)V

+###org/quartz/impl/jdbcjobstore/SimplePropertiesTriggerProperties
@2.0.0
+#<init>()V
+#getString1()Ljava/lang/String;
+#setString1(Ljava/lang/String;)V
+#getString2()Ljava/lang/String;
+#setString2(Ljava/lang/String;)V
+#getString3()Ljava/lang/String;
+#setString3(Ljava/lang/String;)V
+#getInt1()I
+#setInt1(I)V
+#getInt2()I
+#setInt2(I)V
+#getLong1()J
+#setLong1(J)V
+#getLong2()J
+#setLong2(J)V
+#getDecimal1()Ljava/math/BigDecimal;
+#setDecimal1(Ljava/math/BigDecimal;)V
+#getDecimal2()Ljava/math/BigDecimal;
+#setDecimal2(Ljava/math/BigDecimal;)V
+#isBoolean1()Z
+#setBoolean1(Z)V
+#isBoolean2()Z
+#setBoolean2(Z)V

+###org/quartz/impl/jdbcjobstore/DB2v7Delegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/UpdateLockRowSemaphore
@1.7.2
+#<init>()V
+#setUpdateLockRowSQL(Ljava/lang/String;)V

+###org/quartz/impl/jdbcjobstore/JobStoreSupport$RecoverMisfiredJobsResult
@1.7.2
+#<init>(ZIJ)V
+#hasMoreMisfiredTriggers()Z
+#getProcessedMisfiredTriggerCount()I
+#getEarliestNewTime()J

+###org/quartz/impl/jdbcjobstore/TriggerStatus
@2.0.0
+#<init>(Ljava/lang/String;Ljava/util/Date;)V
+#getJobKey()Lorg/quartz/JobKey;
+#setJobKey(Lorg/quartz/JobKey;)V
+#getKey()Lorg/quartz/TriggerKey;
+#setKey(Lorg/quartz/TriggerKey;)V
+#getStatus()Ljava/lang/String;
+#getNextFireTime()Ljava/util/Date;
+#toString()Ljava/lang/String;

+###org/quartz/impl/jdbcjobstore/PointbaseDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
+#insertJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#updateJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateJobData(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#insertCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#updateCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#insertTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
-#updateTrigger(Ljava/sql/Connection;Lorg/quartz/Trigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/DBSemaphore
@1.7.2
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#obtainLock(Ljava/sql/Connection;Ljava/lang/String;)Z
+#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
+#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z
+#requiresConnection()Z
+#setTablePrefix(Ljava/lang/String;)V
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getSchedName()Ljava/lang/String;
+#setSchedName(Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
@2.2.0
+#releaseLock(Ljava/lang/String;)V
+#isLockOwner(Ljava/lang/String;)Z
-#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
-#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z

+###org/quartz/impl/jdbcjobstore/LockException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/quartz/impl/jdbcjobstore/CloudscapeDelegate
@1.7.2
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@1.8.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/apache/commons/logging/Log;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.0.0
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;)V
@2.2.0
-###org/quartz/impl/jdbcjobstore/CloudscapeDelegate

+###org/quartz/impl/jdbcjobstore/SimpleSemaphore
@1.7.2
+#<init>()V
+#obtainLock(Ljava/sql/Connection;Ljava/lang/String;)Z
+#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
+#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z
+#requiresConnection()Z
@2.2.0
+#releaseLock(Ljava/lang/String;)V
+#isLockOwner(Ljava/lang/String;)Z
-#releaseLock(Ljava/sql/Connection;Ljava/lang/String;)V
-#isLockOwner(Ljava/sql/Connection;Ljava/lang/String;)Z

+###org/quartz/impl/jdbcjobstore/StdRowLockSemaphore
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#setSelectWithLockSQL(Ljava/lang/String;)V
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#<init>()V
-#<init>(Ljava/lang/String;Ljava/lang/String;)V
@2.1.7
+#<init>()V
@2.3.1
+#setMaxRetry(I)V
+#setRetryPeriod(J)V
+#getMaxRetry()I
+#getRetryPeriod()J

+###org/quartz/impl/jdbcjobstore/Constants
@1.7.2

+###org/quartz/impl/RemoteMBeanScheduler
@1.7.2
+#<init>()V
+#setSchedulerObjectName(Ljava/lang/String;)V
+#setSchedulerObjectName(Ljavax/management/ObjectName;)V
+#setSchedulingContext(Lorg/quartz/core/SchedulingContext;)V
+#initialize()V
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getMetaData()Lorg/quartz/SchedulerMetaData;
+#getContext()Lorg/quartz/SchedulerContext;
+#start()V
+#startDelayed(I)V
+#standby()V
+#isStarted()Z
+#isInStandbyMode()Z
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()[Ljava/lang/String;
+#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerGroupNames()[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()[Ljava/lang/String;
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
+#getPausedTriggerGroups()Ljava/util/Set;
+#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
+#setJobFactory(Lorg/quartz/spi/JobFactory;)V
@2.0.0
+#deleteJob(Lorg/quartz/JobKey;)Z
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#deleteJobs(Ljava/util/List;)Z
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJobs(Ljava/util/List;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#triggerJob(Lorg/quartz/JobKey;)V
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clear()V
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getCalendarNames()Ljava/util/List;
+#getListenerManager()Lorg/quartz/ListenerManager;
+#interrupt(Lorg/quartz/JobKey;)Z
-#setSchedulingContext(Lorg/quartz/core/SchedulingContext;)V
-#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;)V
-#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;)V
-#getJobGroupNames()[Ljava/lang/String;
-#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerGroupNames()[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
-#getCalendarNames()[Ljava/lang/String;
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
-#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#addJob(Lorg/quartz/JobDetail;ZZ)V
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/utils/ClassUtils
@2.0.0
+#<init>()V
+#isAnnotationPresent(Ljava/lang/Class;Ljava/lang/Class;)Z
@2.2.0
+#getAnnotation(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;

+###org/quartz/utils/PoolingConnectionProvider
@1.7.2
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
+#<init>(Ljava/util/Properties;)V
+#getConnection()Ljava/sql/Connection;
+#shutdown()V
@2.2.0
+#initialize()V
@2.2.2
+#getDataSource()Lcom/mchange/v2/c3p0/ComboPooledDataSource;
@2.3.0
+#getDataSource()Ljavax/sql/DataSource;
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
-#<init>(Ljava/util/Properties;)V
-#getDataSource()Lcom/mchange/v2/c3p0/ComboPooledDataSource;
-#getConnection()Ljava/sql/Connection;
-#shutdown()V
-#initialize()V

+###org/quartz/utils/CircularLossyQueue
@1.8.0
+#<init>(I)V
+#push(Ljava/lang/Object;)V
+#toArray([Ljava/lang/Object;)[Ljava/lang/Object;
+#peek()Ljava/lang/Object;
+#isEmtpy()Z
+#depth()I

+###org/quartz/utils/ConnectionProvider
@1.7.2
+#getConnection()Ljava/sql/Connection;
+#shutdown()V
@2.2.0
+#initialize()V

+###org/quartz/utils/DBConnectionManager
@1.7.2
+#addConnectionProvider(Ljava/lang/String;Lorg/quartz/utils/ConnectionProvider;)V
+#getConnection(Ljava/lang/String;)Ljava/sql/Connection;
+#getInstance()Lorg/quartz/utils/DBConnectionManager;
+#shutdown(Ljava/lang/String;)V

+###org/quartz/utils/PropertiesParser
@1.7.2
+#<init>(Ljava/util/Properties;)V
+#getUnderlyingProperties()Ljava/util/Properties;
+#getStringProperty(Ljava/lang/String;)Ljava/lang/String;
+#getStringProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
+#getStringArrayProperty(Ljava/lang/String;)[Ljava/lang/String;
+#getStringArrayProperty(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
+#getBooleanProperty(Ljava/lang/String;)Z
+#getBooleanProperty(Ljava/lang/String;Z)Z
+#getByteProperty(Ljava/lang/String;)B
+#getByteProperty(Ljava/lang/String;B)B
+#getCharProperty(Ljava/lang/String;)C
+#getCharProperty(Ljava/lang/String;C)C
+#getDoubleProperty(Ljava/lang/String;)D
+#getDoubleProperty(Ljava/lang/String;D)D
+#getFloatProperty(Ljava/lang/String;)F
+#getFloatProperty(Ljava/lang/String;F)F
+#getIntProperty(Ljava/lang/String;)I
+#getIntProperty(Ljava/lang/String;I)I
+#getIntArrayProperty(Ljava/lang/String;)[I
+#getIntArrayProperty(Ljava/lang/String;[I)[I
+#getLongProperty(Ljava/lang/String;)J
+#getLongProperty(Ljava/lang/String;J)J
+#getShortProperty(Ljava/lang/String;)S
+#getShortProperty(Ljava/lang/String;S)S
+#getPropertyGroups(Ljava/lang/String;)[Ljava/lang/String;
+#getPropertyGroup(Ljava/lang/String;)Ljava/util/Properties;
+#getPropertyGroup(Ljava/lang/String;Z)Ljava/util/Properties;
+#getPropertyGroup(Ljava/lang/String;Z[Ljava/lang/String;)Ljava/util/Properties;

+###org/quartz/utils/UpdateChecker
@1.7.2
+#<init>()V
+#run()V
+#checkForUpdate()V
+#main([Ljava/lang/String;)V
@2.3.0
-###org/quartz/utils/UpdateChecker

+###org/quartz/utils/StringKeyDirtyFlagMap
@1.7.2
+#<init>()V
+#<init>(I)V
+#<init>(IF)V
+#getKeys()[Ljava/lang/String;
+#setAllowsTransientData(Z)V
+#getAllowsTransientData()Z
+#containsTransientData()Z
+#removeTransientData()V
+#putAll(Ljava/util/Map;)V
+#put(Ljava/lang/String;I)V
+#put(Ljava/lang/String;J)V
+#put(Ljava/lang/String;F)V
+#put(Ljava/lang/String;D)V
+#put(Ljava/lang/String;Z)V
+#put(Ljava/lang/String;C)V
+#put(Ljava/lang/String;Ljava/lang/String;)V
+#put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#getInt(Ljava/lang/String;)I
+#getLong(Ljava/lang/String;)J
+#getFloat(Ljava/lang/String;)F
+#getDouble(Ljava/lang/String;)D
+#getBoolean(Ljava/lang/String;)Z
+#getChar(Ljava/lang/String;)C
+#getString(Ljava/lang/String;)Ljava/lang/String;
@2.0.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@2.1.0
+#put(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
-#putAll(Ljava/util/Map;)V

+###org/quartz/utils/counter/sampled/SampledRateCounterConfig
@1.8.0
+#<init>(IIZ)V
+#<init>(IIZJJ)V
+#createCounter()Lorg/quartz/utils/counter/Counter;

+###org/quartz/utils/counter/sampled/SampledRateCounter
@1.8.0
+#increment(JJ)V
+#decrement(JJ)V
+#setValue(JJ)V
+#setNumeratorValue(J)V
+#setDenominatorValue(J)V

+###org/quartz/utils/counter/sampled/TimeStampedCounterValue
@1.8.0
+#<init>(JJ)V
+#getCounterValue()J
+#getTimestamp()J
+#toString()Ljava/lang/String;

+###org/quartz/utils/counter/sampled/SampledCounter
@1.8.0
+#shutdown()V
+#getMostRecentSample()Lorg/quartz/utils/counter/sampled/TimeStampedCounterValue;
+#getAllSampleValues()[Lorg/quartz/utils/counter/sampled/TimeStampedCounterValue;
+#getAndReset()J

+###org/quartz/utils/counter/sampled/SampledCounterImpl
@1.8.0
+#<init>(Lorg/quartz/utils/counter/sampled/SampledCounterConfig;)V
+#getMostRecentSample()Lorg/quartz/utils/counter/sampled/TimeStampedCounterValue;
+#getAllSampleValues()[Lorg/quartz/utils/counter/sampled/TimeStampedCounterValue;
+#shutdown()V
+#getTimerTask()Ljava/util/TimerTask;
+#getIntervalMillis()J
+#getAndReset()J

+###org/quartz/utils/counter/sampled/SampledCounterConfig
@1.8.0
+#<init>(IIZJ)V
+#getHistorySize()I
+#getIntervalSecs()I
+#isResetOnSample()Z
+#createCounter()Lorg/quartz/utils/counter/Counter;

+###org/quartz/utils/counter/sampled/SampledRateCounterImpl
@1.8.0
+#<init>(Lorg/quartz/utils/counter/sampled/SampledRateCounterConfig;)V
+#setValue(JJ)V
+#increment(JJ)V
+#decrement(JJ)V
+#setDenominatorValue(J)V
+#setNumeratorValue(J)V
+#getValue()J
+#getAndReset()J
+#getAndSet(J)J
+#setValue(J)V
+#decrement()J
+#decrement(J)J
+#getMaxValue()J
+#getMinValue()J
+#increment()J
+#increment(J)J

+###org/quartz/utils/counter/CounterManager
@1.8.0
+#createCounter(Lorg/quartz/utils/counter/CounterConfig;)Lorg/quartz/utils/counter/Counter;
+#shutdown(Z)V
+#shutdownCounter(Lorg/quartz/utils/counter/Counter;)V

+###org/quartz/utils/counter/Counter
@1.8.0
+#increment()J
+#decrement()J
+#getAndSet(J)J
+#getValue()J
+#increment(J)J
+#decrement(J)J
+#setValue(J)V

+###org/quartz/utils/counter/CounterImpl
@1.8.0
+#<init>()V
+#<init>(J)V
+#increment()J
+#decrement()J
+#getAndSet(J)J
+#getValue()J
+#increment(J)J
+#decrement(J)J
+#setValue(J)V

+###org/quartz/utils/counter/CounterManagerImpl
@1.8.0
+#<init>(Ljava/util/Timer;)V
+#shutdown(Z)V
+#createCounter(Lorg/quartz/utils/counter/CounterConfig;)Lorg/quartz/utils/counter/Counter;
+#shutdownCounter(Lorg/quartz/utils/counter/Counter;)V

+###org/quartz/utils/counter/CounterConfig
@1.8.0
+#<init>(J)V
+#getInitialValue()J
+#createCounter()Lorg/quartz/utils/counter/Counter;

+###org/quartz/utils/DirtyFlagMap
@1.7.2
+#<init>()V
+#<init>(I)V
+#<init>(IF)V
+#clearDirtyFlag()V
+#isDirty()Z
+#getWrappedMap()Ljava/util/Map;
+#clear()V
+#containsKey(Ljava/lang/Object;)Z
+#containsValue(Ljava/lang/Object;)Z
+#entrySet()Ljava/util/Set;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#get(Ljava/lang/Object;)Ljava/lang/Object;
+#isEmpty()Z
+#keySet()Ljava/util/Set;
+#put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#putAll(Ljava/util/Map;)V
+#remove(Ljava/lang/Object;)Ljava/lang/Object;
+#size()I
+#values()Ljava/util/Collection;
+#clone()Ljava/lang/Object;

+###org/quartz/utils/Key
@1.7.2
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#getGroup()Ljava/lang/String;
+#toString()Ljava/lang/String;
@2.0.0
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#compareTo(Lorg/quartz/utils/Key;)I
+#createUniqueName(Ljava/lang/String;)Ljava/lang/String;
+#compareTo(Ljava/lang/Object;)I

+###org/quartz/utils/JNDIConnectionProvider
@1.7.2
+#<init>(Ljava/lang/String;Z)V
+#<init>(Ljava/lang/String;Ljava/util/Properties;Z)V
+#getConnection()Ljava/sql/Connection;
+#isAlwaysLookup()Z
+#setAlwaysLookup(Z)V
+#shutdown()V
@2.2.0
+#initialize()V

+###org/quartz/CronExpression
@1.7.2
+#<init>(Ljava/lang/String;)V
+#isSatisfiedBy(Ljava/util/Date;)Z
+#getNextValidTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getNextInvalidTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#toString()Ljava/lang/String;
+#isValidExpression(Ljava/lang/String;)Z
+#getCronExpression()Ljava/lang/String;
+#getExpressionSummary()Ljava/lang/String;
+#getFinalFireTime()Ljava/util/Date;
+#clone()Ljava/lang/Object;
@2.0.0
+#validateExpression(Ljava/lang/String;)V
+#getTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getTimeBefore(Ljava/util/Date;)Ljava/util/Date;
@2.2.0
+#<init>(Lorg/quartz/CronExpression;)V
*#clone()Ljava/lang/Object;[deprecated]

+###org/quartz/DateBuilder
@2.0.0
+#newDate()Lorg/quartz/DateBuilder;
+#newDateInTimezone(Ljava/util/TimeZone;)Lorg/quartz/DateBuilder;
+#newDateInLocale(Ljava/util/Locale;)Lorg/quartz/DateBuilder;
+#newDateInTimeZoneAndLocale(Ljava/util/TimeZone;Ljava/util/Locale;)Lorg/quartz/DateBuilder;
+#build()Ljava/util/Date;
+#atHourOfDay(I)Lorg/quartz/DateBuilder;
+#atMinute(I)Lorg/quartz/DateBuilder;
+#atSecond(I)Lorg/quartz/DateBuilder;
+#atHourMinuteAndSecond(III)Lorg/quartz/DateBuilder;
+#onDay(I)Lorg/quartz/DateBuilder;
+#inMonth(I)Lorg/quartz/DateBuilder;
+#inMonthOnDay(II)Lorg/quartz/DateBuilder;
+#inYear(I)Lorg/quartz/DateBuilder;
+#inTimeZone(Ljava/util/TimeZone;)Lorg/quartz/DateBuilder;
+#inLocale(Ljava/util/Locale;)Lorg/quartz/DateBuilder;
+#futureDate(ILorg/quartz/DateBuilder$IntervalUnit;)Ljava/util/Date;
+#tomorrowAt(III)Ljava/util/Date;
+#todayAt(III)Ljava/util/Date;
+#dateOf(III)Ljava/util/Date;
+#dateOf(IIIII)Ljava/util/Date;
+#dateOf(IIIIII)Ljava/util/Date;
+#evenHourDateAfterNow()Ljava/util/Date;
+#evenHourDate(Ljava/util/Date;)Ljava/util/Date;
+#evenHourDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#evenMinuteDateAfterNow()Ljava/util/Date;
+#evenMinuteDate(Ljava/util/Date;)Ljava/util/Date;
+#evenMinuteDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#evenSecondDateAfterNow()Ljava/util/Date;
+#evenSecondDate(Ljava/util/Date;)Ljava/util/Date;
+#evenSecondDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#nextGivenMinuteDate(Ljava/util/Date;I)Ljava/util/Date;
+#nextGivenSecondDate(Ljava/util/Date;I)Ljava/util/Date;
+#translateTime(Ljava/util/Date;Ljava/util/TimeZone;Ljava/util/TimeZone;)Ljava/util/Date;
+#validateDayOfWeek(I)V
+#validateHour(I)V
+#validateMinute(I)V
+#validateSecond(I)V
+#validateDayOfMonth(I)V
+#validateMonth(I)V
+#validateYear(I)V

+###org/quartz/TriggerUtils
@1.7.2
+#setTriggerIdentity(Lorg/quartz/Trigger;Ljava/lang/String;)V
+#setTriggerIdentity(Lorg/quartz/Trigger;Ljava/lang/String;Ljava/lang/String;)V
+#makeDailyTrigger(II)Lorg/quartz/Trigger;
+#makeDailyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
+#makeWeeklyTrigger(III)Lorg/quartz/Trigger;
+#makeWeeklyTrigger(Ljava/lang/String;III)Lorg/quartz/Trigger;
+#makeMonthlyTrigger(III)Lorg/quartz/Trigger;
+#makeMonthlyTrigger(Ljava/lang/String;III)Lorg/quartz/Trigger;
+#makeImmediateTrigger(IJ)Lorg/quartz/Trigger;
+#makeImmediateTrigger(Ljava/lang/String;IJ)Lorg/quartz/Trigger;
+#makeSecondlyTrigger()Lorg/quartz/Trigger;
+#makeSecondlyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
+#makeSecondlyTrigger(I)Lorg/quartz/Trigger;
+#makeSecondlyTrigger(II)Lorg/quartz/Trigger;
+#makeSecondlyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
+#makeMinutelyTrigger()Lorg/quartz/Trigger;
+#makeMinutelyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
+#makeMinutelyTrigger(I)Lorg/quartz/Trigger;
+#makeMinutelyTrigger(II)Lorg/quartz/Trigger;
+#makeMinutelyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
+#makeHourlyTrigger()Lorg/quartz/Trigger;
+#makeHourlyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
+#makeHourlyTrigger(I)Lorg/quartz/Trigger;
+#makeHourlyTrigger(II)Lorg/quartz/Trigger;
+#makeHourlyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
+#getEvenHourDate(Ljava/util/Date;)Ljava/util/Date;
+#getEvenHourDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#getEvenMinuteDate(Ljava/util/Date;)Ljava/util/Date;
+#getEvenMinuteDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#getEvenSecondDate(Ljava/util/Date;)Ljava/util/Date;
+#getEvenSecondDateBefore(Ljava/util/Date;)Ljava/util/Date;
+#getNextGivenMinuteDate(Ljava/util/Date;I)Ljava/util/Date;
+#getNextGivenSecondDate(Ljava/util/Date;I)Ljava/util/Date;
+#getDateOf(III)Ljava/util/Date;
+#getDateOf(IIIII)Ljava/util/Date;
+#getDateOf(IIIIII)Ljava/util/Date;
+#computeFireTimes(Lorg/quartz/Trigger;Lorg/quartz/Calendar;I)Ljava/util/List;
+#computeFireTimesBetween(Lorg/quartz/Trigger;Lorg/quartz/Calendar;Ljava/util/Date;Ljava/util/Date;)Ljava/util/List;
+#translateTime(Ljava/util/Date;Ljava/util/TimeZone;Ljava/util/TimeZone;)Ljava/util/Date;
+#getOffset(JLjava/util/TimeZone;)I
+#getDSTSavings(Ljava/util/TimeZone;)I
@1.8.0
+#computeEndTimeToAllowParticularNumberOfFirings(Lorg/quartz/Trigger;Lorg/quartz/Calendar;I)Ljava/util/Date;
@2.0.0
+#computeFireTimes(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/Calendar;I)Ljava/util/List;
+#computeEndTimeToAllowParticularNumberOfFirings(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/Calendar;I)Ljava/util/Date;
+#computeFireTimesBetween(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/Calendar;Ljava/util/Date;Ljava/util/Date;)Ljava/util/List;
-#setTriggerIdentity(Lorg/quartz/Trigger;Ljava/lang/String;)V
-#setTriggerIdentity(Lorg/quartz/Trigger;Ljava/lang/String;Ljava/lang/String;)V
-#makeDailyTrigger(II)Lorg/quartz/Trigger;
-#makeDailyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
-#makeWeeklyTrigger(III)Lorg/quartz/Trigger;
-#makeWeeklyTrigger(Ljava/lang/String;III)Lorg/quartz/Trigger;
-#makeMonthlyTrigger(III)Lorg/quartz/Trigger;
-#makeMonthlyTrigger(Ljava/lang/String;III)Lorg/quartz/Trigger;
-#makeImmediateTrigger(IJ)Lorg/quartz/Trigger;
-#makeImmediateTrigger(Ljava/lang/String;IJ)Lorg/quartz/Trigger;
-#makeSecondlyTrigger()Lorg/quartz/Trigger;
-#makeSecondlyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
-#makeSecondlyTrigger(I)Lorg/quartz/Trigger;
-#makeSecondlyTrigger(II)Lorg/quartz/Trigger;
-#makeSecondlyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
-#makeMinutelyTrigger()Lorg/quartz/Trigger;
-#makeMinutelyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
-#makeMinutelyTrigger(I)Lorg/quartz/Trigger;
-#makeMinutelyTrigger(II)Lorg/quartz/Trigger;
-#makeMinutelyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
-#makeHourlyTrigger()Lorg/quartz/Trigger;
-#makeHourlyTrigger(Ljava/lang/String;)Lorg/quartz/Trigger;
-#makeHourlyTrigger(I)Lorg/quartz/Trigger;
-#makeHourlyTrigger(II)Lorg/quartz/Trigger;
-#makeHourlyTrigger(Ljava/lang/String;II)Lorg/quartz/Trigger;
-#getEvenHourDate(Ljava/util/Date;)Ljava/util/Date;
-#getEvenHourDateBefore(Ljava/util/Date;)Ljava/util/Date;
-#getEvenMinuteDate(Ljava/util/Date;)Ljava/util/Date;
-#getEvenMinuteDateBefore(Ljava/util/Date;)Ljava/util/Date;
-#getEvenSecondDate(Ljava/util/Date;)Ljava/util/Date;
-#getEvenSecondDateBefore(Ljava/util/Date;)Ljava/util/Date;
-#getNextGivenMinuteDate(Ljava/util/Date;I)Ljava/util/Date;
-#getNextGivenSecondDate(Ljava/util/Date;I)Ljava/util/Date;
-#getDateOf(III)Ljava/util/Date;
-#getDateOf(IIIII)Ljava/util/Date;
-#getDateOf(IIIIII)Ljava/util/Date;
-#computeFireTimes(Lorg/quartz/Trigger;Lorg/quartz/Calendar;I)Ljava/util/List;
-#computeEndTimeToAllowParticularNumberOfFirings(Lorg/quartz/Trigger;Lorg/quartz/Calendar;I)Ljava/util/Date;
-#computeFireTimesBetween(Lorg/quartz/Trigger;Lorg/quartz/Calendar;Ljava/util/Date;Ljava/util/Date;)Ljava/util/List;
-#translateTime(Ljava/util/Date;Ljava/util/TimeZone;Ljava/util/TimeZone;)Ljava/util/Date;
-#getOffset(JLjava/util/TimeZone;)I
-#getDSTSavings(Ljava/util/TimeZone;)I

+###org/quartz/CronTrigger
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;Ljava/util/TimeZone;)V
+#clone()Ljava/lang/Object;
+#setCronExpression(Ljava/lang/String;)V
+#getCronExpression()Ljava/lang/String;
+#setCronExpression(Lorg/quartz/CronExpression;)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getTimeZone()Ljava/util/TimeZone;
+#setTimeZone(Ljava/util/TimeZone;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#willFireOn(Ljava/util/Calendar;)Z
+#willFireOn(Ljava/util/Calendar;Z)Z
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#getExpressionSummary()Ljava/lang/String;
+#hasAdditionalProperties()Z
+#main([Ljava/lang/String;)V
@1.8.0
-#main([Ljava/lang/String;)V
@2.0.0
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;
-#<init>()V
-#<init>(Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/TimeZone;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Ljava/lang/String;Ljava/util/TimeZone;)V
-#clone()Ljava/lang/Object;
-#setCronExpression(Ljava/lang/String;)V
-#setCronExpression(Lorg/quartz/CronExpression;)V
-#getStartTime()Ljava/util/Date;
-#setStartTime(Ljava/util/Date;)V
-#getEndTime()Ljava/util/Date;
-#setEndTime(Ljava/util/Date;)V
-#getNextFireTime()Ljava/util/Date;
-#getPreviousFireTime()Ljava/util/Date;
-#setNextFireTime(Ljava/util/Date;)V
-#setPreviousFireTime(Ljava/util/Date;)V
-#setTimeZone(Ljava/util/TimeZone;)V
-#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
-#getFinalFireTime()Ljava/util/Date;
-#mayFireAgain()Z
-#updateAfterMisfire(Lorg/quartz/Calendar;)V
-#willFireOn(Ljava/util/Calendar;)Z
-#willFireOn(Ljava/util/Calendar;Z)Z
-#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
-#triggered(Lorg/quartz/Calendar;)V
-#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
-#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
-#hasAdditionalProperties()Z

+###org/quartz/spi/JobFactory
@1.7.2
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;
@2.0.0
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Scheduler;)Lorg/quartz/Job;
-#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;

+###org/quartz/spi/SchedulerSignaler
@1.7.2
+#notifyTriggerListenersMisfired(Lorg/quartz/Trigger;)V
+#notifySchedulerListenersFinalized(Lorg/quartz/Trigger;)V
+#signalSchedulingChange(J)V
@2.0.0
+#notifySchedulerListenersJobDeleted(Lorg/quartz/JobKey;)V
@2.2.1
+#notifySchedulerListenersError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V

+###org/quartz/spi/MutableTrigger
@2.0.0
+#setKey(Lorg/quartz/TriggerKey;)V
+#setJobKey(Lorg/quartz/JobKey;)V
+#setDescription(Ljava/lang/String;)V
+#setCalendarName(Ljava/lang/String;)V
+#setJobDataMap(Lorg/quartz/JobDataMap;)V
+#setPriority(I)V
+#setStartTime(Ljava/util/Date;)V
+#setEndTime(Ljava/util/Date;)V
+#setMisfireInstruction(I)V
+#clone()Ljava/lang/Object;

+###org/quartz/spi/ThreadPool
@1.7.2
+#runInThread(Ljava/lang/Runnable;)Z
+#blockForAvailableThreads()I
+#initialize()V
+#shutdown(Z)V
+#getPoolSize()I
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V

+###org/quartz/spi/ClassLoadHelper
@1.7.2
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/spi/SchedulerPlugin
@1.7.2
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start()V
+#shutdown()V
@2.2.0
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V
-#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V

+###org/quartz/spi/TriggerFiredResult
@2.0.0
+#<init>(Lorg/quartz/spi/TriggerFiredBundle;)V
+#<init>(Ljava/lang/Exception;)V
+#getTriggerFiredBundle()Lorg/quartz/spi/TriggerFiredBundle;
+#getException()Ljava/lang/Exception;

+###org/quartz/spi/TimeBroker
@1.7.2
+#getCurrentTime()Ljava/util/Date;
+#initialize()V
+#shutdown()V

+###org/quartz/spi/TriggerFiredBundle
@1.7.2
+#<init>(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;Lorg/quartz/Calendar;ZLjava/util/Date;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
+#getJobDetail()Lorg/quartz/JobDetail;
+#getTrigger()Lorg/quartz/Trigger;
+#getCalendar()Lorg/quartz/Calendar;
+#isRecovering()Z
+#getFireTime()Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPrevFireTime()Ljava/util/Date;
+#getScheduledFireTime()Ljava/util/Date;
@2.0.0
+#<init>(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;Lorg/quartz/Calendar;ZLjava/util/Date;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
+#getTrigger()Lorg/quartz/spi/OperableTrigger;
-#<init>(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;Lorg/quartz/Calendar;ZLjava/util/Date;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)V
-#getTrigger()Lorg/quartz/Trigger;

+###org/quartz/spi/InstanceIdGenerator
@1.7.2
+#generateInstanceId()Ljava/lang/String;

+###org/quartz/spi/OperableTrigger
@2.0.0
+#triggered(Lorg/quartz/Calendar;)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)Lorg/quartz/Trigger$CompletedExecutionInstruction;
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#validate()V
+#setFireInstanceId(Ljava/lang/String;)V
+#getFireInstanceId()Ljava/lang/String;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V

+###org/quartz/spi/JobStore
@1.7.2
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#schedulerStarted()V
+#shutdown()V
+#supportsPersistence()Z
+#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
+#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
+#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
+#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
+#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
+#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
+#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
@1.8.0
+#getEstimatedTimeToReleaseAndAcquireTrigger()J
+#isClustered()Z
@2.0.0
+#storeJobAndTrigger(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;)V
+#storeJob(Lorg/quartz/JobDetail;Z)V
+#storeJobsAndTriggers(Ljava/util/Map;Z)V
+#removeJob(Lorg/quartz/JobKey;)Z
+#removeJobs(Ljava/util/List;)Z
+#retrieveJob(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#storeTrigger(Lorg/quartz/spi/OperableTrigger;Z)V
+#removeTrigger(Lorg/quartz/TriggerKey;)Z
+#removeTriggers(Ljava/util/List;)Z
+#replaceTrigger(Lorg/quartz/TriggerKey;Lorg/quartz/spi/OperableTrigger;)Z
+#retrieveTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clearAllSchedulingData()V
+#storeCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Ljava/lang/String;)Z
+#retrieveCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs()I
+#getNumberOfTriggers()I
+#getNumberOfCalendars()I
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobGroupNames()Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getCalendarNames()Ljava/util/List;
+#getTriggersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#getPausedTriggerGroups()Ljava/util/Set;
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseAll()V
+#resumeAll()V
+#acquireNextTriggers(JIJ)Ljava/util/List;
+#releaseAcquiredTrigger(Lorg/quartz/spi/OperableTrigger;)V
+#triggersFired(Ljava/util/List;)Ljava/util/List;
+#triggeredJobComplete(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#setThreadPoolSize(I)V
-#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
-#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
-#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
-#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
-#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
-#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
-#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
@2.1.0
+#schedulerPaused()V
+#schedulerResumed()V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V
+#getAcquireRetryDelay(I)J

+###org/quartz/Matcher
@2.0.0
+#isMatch(Lorg/quartz/utils/Key;)Z
+#hashCode()I
+#equals(Ljava/lang/Object;)Z

+###org/quartz/ListenerManager
@2.0.0
+#addJobListener(Lorg/quartz/JobListener;[Lorg/quartz/Matcher;)V
+#addJobListener(Lorg/quartz/JobListener;Ljava/util/List;)V
+#addJobListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#removeJobListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#setJobListenerMatchers(Ljava/lang/String;Ljava/util/List;)Z
+#getJobListenerMatchers(Ljava/lang/String;)Ljava/util/List;
+#removeJobListener(Ljava/lang/String;)Z
+#getJobListeners()Ljava/util/List;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addTriggerListener(Lorg/quartz/TriggerListener;[Lorg/quartz/Matcher;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;Ljava/util/List;)V
+#addTriggerListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#removeTriggerListenerMatcher(Ljava/lang/String;Lorg/quartz/Matcher;)Z
+#setTriggerListenerMatchers(Ljava/lang/String;Ljava/util/List;)Z
+#getTriggerListenerMatchers(Ljava/lang/String;)Ljava/util/List;
+#removeTriggerListener(Ljava/lang/String;)Z
+#getTriggerListeners()Ljava/util/List;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
@2.1.0
+#addJobListener(Lorg/quartz/JobListener;Lorg/quartz/Matcher;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;Lorg/quartz/Matcher;)V
@2.1.4
+#addJobListener(Lorg/quartz/JobListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V

+###org/quartz/SchedulerMetaData
@1.7.2
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZZZLjava/util/Date;ILjava/lang/Class;ZLjava/lang/Class;ILjava/lang/String;)V
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getSchedulerClass()Ljava/lang/Class;
+#getRunningSince()Ljava/util/Date;
+#getNumberOfJobsExecuted()I
+#isSchedulerRemote()Z
+#isStarted()Z
+#isInStandbyMode()Z
+#isShutdown()Z
+#getJobStoreClass()Ljava/lang/Class;
+#jobStoreSupportsPersistence()Z
+#getThreadPoolClass()Ljava/lang/Class;
+#getThreadPoolSize()I
+#getVersion()Ljava/lang/String;
+#toString()Ljava/lang/String;
+#getSummary()Ljava/lang/String;
@1.8.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZZZLjava/util/Date;ILjava/lang/Class;ZZLjava/lang/Class;ILjava/lang/String;)V
+#isJobStoreSupportsPersistence()Z
+#isJobStoreClustered()Z
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;ZZZZLjava/util/Date;ILjava/lang/Class;ZLjava/lang/Class;ILjava/lang/String;)V
@2.2.0
-#jobStoreSupportsPersistence()Z

+###org/quartz/TriggerListener
@1.7.2
+#getName()Ljava/lang/String;
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#vetoJobExecution(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)Z
+#triggerMisfired(Lorg/quartz/Trigger;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V
@2.0.0
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
-#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V

+###org/quartz/SchedulerFactory
@1.7.2
+#getScheduler()Lorg/quartz/Scheduler;
+#getScheduler(Ljava/lang/String;)Lorg/quartz/Scheduler;
+#getAllSchedulers()Ljava/util/Collection;

+###org/quartz/jobs/DirectoryScanJob
@2.0.0
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/DirectoryScanJob

+###org/quartz/jobs/NativeJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/NativeJob

+###org/quartz/jobs/DirectoryScanListener
@2.0.0
+#filesUpdatedOrAdded([Ljava/io/File;)V
@2.2.0
-###org/quartz/jobs/DirectoryScanListener

+###org/quartz/jobs/FileScanJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/FileScanJob

+###org/quartz/jobs/NoOpJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/NoOpJob

+###org/quartz/jobs/FileScanListener
@1.7.2
+#fileUpdated(Ljava/lang/String;)V
@2.2.0
-###org/quartz/jobs/FileScanListener

+###org/quartz/jobs/ee/mail/SendMailJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/mail/SendMailJob

+###org/quartz/jobs/ee/mail/SendMailJob$MailInfo
@1.7.2
+#toString()Ljava/lang/String;
+#getCc()Ljava/lang/String;
+#setCc(Ljava/lang/String;)V
+#getContentType()Ljava/lang/String;
+#setContentType(Ljava/lang/String;)V
+#getFrom()Ljava/lang/String;
+#setFrom(Ljava/lang/String;)V
+#getMessage()Ljava/lang/String;
+#setMessage(Ljava/lang/String;)V
+#getReplyTo()Ljava/lang/String;
+#setReplyTo(Ljava/lang/String;)V
+#getSmtpHost()Ljava/lang/String;
+#setSmtpHost(Ljava/lang/String;)V
+#getSubject()Ljava/lang/String;
+#setSubject(Ljava/lang/String;)V
+#getTo()Ljava/lang/String;
+#setTo(Ljava/lang/String;)V
@2.2.0
-###org/quartz/jobs/ee/mail/SendMailJob$MailInfo

+###org/quartz/jobs/ee/ejb/EJBInvokerJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/ejb/EJBInvokerJob

+###org/quartz/jobs/ee/jms/JmsJobException
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@2.1.0
-#<init>()V
@2.2.0
-###org/quartz/jobs/ee/jms/JmsJobException

+###org/quartz/jobs/ee/jms/JmsHelper
@1.7.2
+#getInitialContext(Lorg/quartz/JobDataMap;)Ljavax/naming/InitialContext;
+#isDestinationSecure(Lorg/quartz/JobDataMap;)Z
+#closeResource(Ljava/lang/Object;)V
+#useTransaction(Lorg/quartz/JobDataMap;)Z
+#getMessageFactory(Ljava/lang/String;)Lorg/quartz/jobs/ee/jms/JmsMessageFactory;
@2.2.0
-###org/quartz/jobs/ee/jms/JmsHelper

+###org/quartz/jobs/ee/jms/SendQueueMessageJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/jms/SendQueueMessageJob

+###org/quartz/jobs/ee/jms/SendTopicMessageJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/jms/SendTopicMessageJob

+###org/quartz/jobs/ee/jms/JmsMessageFactory
@1.7.2
+#createMessage(Lorg/quartz/JobDataMap;Ljavax/jms/Session;)Ljavax/jms/Message;
@2.2.0
-###org/quartz/jobs/ee/jms/JmsMessageFactory

+###org/quartz/jobs/ee/jms/SendDestinationMessageJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/jms/SendDestinationMessageJob

+###org/quartz/jobs/ee/jmx/JMXInvokerJob
@1.7.2
+#<init>()V
+#execute(Lorg/quartz/JobExecutionContext;)V
@2.2.0
-###org/quartz/jobs/ee/jmx/JMXInvokerJob

+###org/quartz/DateBuilder$IntervalUnit
@2.0.0
+#values()[Lorg/quartz/DateBuilder$IntervalUnit;
+#valueOf(Ljava/lang/String;)Lorg/quartz/DateBuilder$IntervalUnit;

+###org/quartz/Trigger
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#setName(Ljava/lang/String;)V
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
+#getJobName()Ljava/lang/String;
+#setJobName(Ljava/lang/String;)V
+#getJobGroup()Ljava/lang/String;
+#setJobGroup(Ljava/lang/String;)V
+#getFullName()Ljava/lang/String;
+#getKey()Lorg/quartz/utils/Key;
+#getFullJobName()Ljava/lang/String;
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#setVolatility(Z)V
+#setCalendarName(Ljava/lang/String;)V
+#getCalendarName()Ljava/lang/String;
+#getJobDataMap()Lorg/quartz/JobDataMap;
+#setJobDataMap(Lorg/quartz/JobDataMap;)V
+#isVolatile()Z
+#getPriority()I
+#setPriority(I)V
+#addTriggerListener(Ljava/lang/String;)V
+#removeTriggerListener(Ljava/lang/String;)Z
+#getTriggerListenerNames()[Ljava/lang/String;
+#clearAllTriggerListeners()V
+#triggered(Lorg/quartz/Calendar;)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
+#mayFireAgain()Z
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#setEndTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#setMisfireInstruction(I)V
+#getMisfireInstruction()I
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#validate()V
+#setFireInstanceId(Ljava/lang/String;)V
+#getFireInstanceId()Ljava/lang/String;
+#toString()Ljava/lang/String;
+#compareTo(Ljava/lang/Object;)I
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#clone()Ljava/lang/Object;
@2.0.0
+#getKey()Lorg/quartz/TriggerKey;
+#getJobKey()Lorg/quartz/JobKey;
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;
+#compareTo(Lorg/quartz/Trigger;)I
-#<init>()V
-#<init>(Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
-#getName()Ljava/lang/String;
-#setName(Ljava/lang/String;)V
-#getGroup()Ljava/lang/String;
-#setGroup(Ljava/lang/String;)V
-#getJobName()Ljava/lang/String;
-#setJobName(Ljava/lang/String;)V
-#getJobGroup()Ljava/lang/String;
-#setJobGroup(Ljava/lang/String;)V
-#getFullName()Ljava/lang/String;
-#getKey()Lorg/quartz/utils/Key;
-#getFullJobName()Ljava/lang/String;
-#setDescription(Ljava/lang/String;)V
-#setVolatility(Z)V
-#setCalendarName(Ljava/lang/String;)V
-#setJobDataMap(Lorg/quartz/JobDataMap;)V
-#isVolatile()Z
-#setPriority(I)V
-#addTriggerListener(Ljava/lang/String;)V
-#removeTriggerListener(Ljava/lang/String;)Z
-#getTriggerListenerNames()[Ljava/lang/String;
-#clearAllTriggerListeners()V
-#triggered(Lorg/quartz/Calendar;)V
-#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
-#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
-#setStartTime(Ljava/util/Date;)V
-#setEndTime(Ljava/util/Date;)V
-#setMisfireInstruction(I)V
-#updateAfterMisfire(Lorg/quartz/Calendar;)V
-#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
-#validate()V
-#setFireInstanceId(Ljava/lang/String;)V
-#getFireInstanceId()Ljava/lang/String;
-#toString()Ljava/lang/String;
-#compareTo(Ljava/lang/Object;)I
-#hashCode()I
-#clone()Ljava/lang/Object;

+###org/quartz/ObjectAlreadyExistsException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Lorg/quartz/JobDetail;)V
+#<init>(Lorg/quartz/Trigger;)V

+###org/quartz/SchedulerContext
@1.7.2
+#<init>()V
+#<init>(Ljava/util/Map;)V

+###org/quartz/JobExecutionContext
@1.7.2
+#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Job;)V
+#getScheduler()Lorg/quartz/Scheduler;
+#getTrigger()Lorg/quartz/Trigger;
+#getCalendar()Lorg/quartz/Calendar;
+#isRecovering()Z
+#incrementRefireCount()V
+#getRefireCount()I
+#getMergedJobDataMap()Lorg/quartz/JobDataMap;
+#getJobDetail()Lorg/quartz/JobDetail;
+#getJobInstance()Lorg/quartz/Job;
+#getFireTime()Ljava/util/Date;
+#getScheduledFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#toString()Ljava/lang/String;
+#getResult()Ljava/lang/Object;
+#setResult(Ljava/lang/Object;)V
+#getJobRunTime()J
+#setJobRunTime(J)V
+#put(Ljava/lang/Object;Ljava/lang/Object;)V
+#get(Ljava/lang/Object;)Ljava/lang/Object;
@2.0.0
-#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Job;)V
-#incrementRefireCount()V
-#toString()Ljava/lang/String;
-#setJobRunTime(J)V
@2.1.0
+#getFireInstanceId()Ljava/lang/String;
@2.2.0
+#getRecoveringTriggerKey()Lorg/quartz/TriggerKey;

+###org/quartz/UnableToInterruptJobException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/quartz/helpers/VersionPrinter
@1.7.2
+#main([Ljava/lang/String;)V

+###org/quartz/CronScheduleBuilder
@2.0.0
+#build()Lorg/quartz/spi/MutableTrigger;
+#cronSchedule(Ljava/lang/String;)Lorg/quartz/CronScheduleBuilder;
+#dailyAtHourAndMinute(II)Lorg/quartz/CronScheduleBuilder;
+#weeklyOnDayAndHourAndMinute(III)Lorg/quartz/CronScheduleBuilder;
+#monthlyOnDayAndHourAndMinute(III)Lorg/quartz/CronScheduleBuilder;
+#inTimeZone(Ljava/util/TimeZone;)Lorg/quartz/CronScheduleBuilder;
+#withMisfireHandlingInstructionIgnoreMisfires()Lorg/quartz/CronScheduleBuilder;
+#withMisfireHandlingInstructionDoNothing()Lorg/quartz/CronScheduleBuilder;
+#withMisfireHandlingInstructionFireAndProceed()Lorg/quartz/CronScheduleBuilder;
@2.1.1
+#cronScheduleNonvalidatedExpression(Ljava/lang/String;)Lorg/quartz/CronScheduleBuilder;
+#cronSchedule(Lorg/quartz/CronExpression;)Lorg/quartz/CronScheduleBuilder;
@2.1.2
+#atHourAndMinuteOnGivenDaysOfWeek(II[Ljava/lang/Integer;)Lorg/quartz/CronScheduleBuilder;

+###org/quartz/SimpleScheduleBuilder
@2.0.0
+#simpleSchedule()Lorg/quartz/SimpleScheduleBuilder;
+#repeatMinutelyForever()Lorg/quartz/SimpleScheduleBuilder;
+#repeatMinutelyForever(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatSecondlyForever()Lorg/quartz/SimpleScheduleBuilder;
+#repeatSecondlyForever(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatHourlyForever()Lorg/quartz/SimpleScheduleBuilder;
+#repeatHourlyForever(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatMinutelyForTotalCount(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatMinutelyForTotalCount(II)Lorg/quartz/SimpleScheduleBuilder;
+#repeatSecondlyForTotalCount(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatSecondlyForTotalCount(II)Lorg/quartz/SimpleScheduleBuilder;
+#repeatHourlyForTotalCount(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatHourlyForTotalCount(II)Lorg/quartz/SimpleScheduleBuilder;
+#build()Lorg/quartz/spi/MutableTrigger;
+#withIntervalInMilliseconds(J)Lorg/quartz/SimpleScheduleBuilder;
+#withIntervalInSeconds(I)Lorg/quartz/SimpleScheduleBuilder;
+#withIntervalInMinutes(I)Lorg/quartz/SimpleScheduleBuilder;
+#withIntervalInHours(I)Lorg/quartz/SimpleScheduleBuilder;
+#withRepeatCount(I)Lorg/quartz/SimpleScheduleBuilder;
+#repeatForever()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionIgnoreMisfires()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionFireNow()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionNextWithExistingCount()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionNextWithRemainingCount()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionNowWithExistingCount()Lorg/quartz/SimpleScheduleBuilder;
+#withMisfireHandlingInstructionNowWithRemainingCount()Lorg/quartz/SimpleScheduleBuilder;

+###org/quartz/CalendarIntervalTrigger
@2.0.0
+#getRepeatIntervalUnit()Lorg/quartz/DateBuilder$IntervalUnit;
+#getRepeatInterval()I
+#getTimesTriggered()I
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;
@2.1.3
+#getTimeZone()Ljava/util/TimeZone;
+#isPreserveHourOfDayAcrossDaylightSavings()Z
+#isSkipDayIfHourDoesNotExist()Z

+###org/quartz/SchedulerListener
@1.7.2
+#jobScheduled(Lorg/quartz/Trigger;)V
+#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
+#triggerFinalized(Lorg/quartz/Trigger;)V
+#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
+#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
+#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#schedulerShutdown()V
@1.8.0
+#jobAdded(Lorg/quartz/JobDetail;)V
+#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerInStandbyMode()V
+#schedulerStarted()V
@1.8.1
+#schedulerShuttingdown()V
@2.0.0
+#jobUnscheduled(Lorg/quartz/TriggerKey;)V
+#triggerPaused(Lorg/quartz/TriggerKey;)V
+#triggersPaused(Ljava/lang/String;)V
+#triggerResumed(Lorg/quartz/TriggerKey;)V
+#triggersResumed(Ljava/lang/String;)V
+#jobDeleted(Lorg/quartz/JobKey;)V
+#jobPaused(Lorg/quartz/JobKey;)V
+#jobsPaused(Ljava/lang/String;)V
+#jobResumed(Lorg/quartz/JobKey;)V
+#jobsResumed(Ljava/lang/String;)V
+#schedulingDataCleared()V
-#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
-#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
-#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
-#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
-#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
@2.2.0
+#schedulerStarting()V

+###org/quartz/CalendarIntervalScheduleBuilder
@2.0.0
+#calendarIntervalSchedule()Lorg/quartz/CalendarIntervalScheduleBuilder;
+#build()Lorg/quartz/spi/MutableTrigger;
+#withInterval(ILorg/quartz/DateBuilder$IntervalUnit;)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInSeconds(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInMinutes(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInHours(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInDays(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInWeeks(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInMonths(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withIntervalInYears(I)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withMisfireHandlingInstructionIgnoreMisfires()Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withMisfireHandlingInstructionDoNothing()Lorg/quartz/CalendarIntervalScheduleBuilder;
+#withMisfireHandlingInstructionFireAndProceed()Lorg/quartz/CalendarIntervalScheduleBuilder;
@2.1.3
+#inTimeZone(Ljava/util/TimeZone;)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#preserveHourOfDayAcrossDaylightSavings(Z)Lorg/quartz/CalendarIntervalScheduleBuilder;
+#skipDayIfHourDoesNotExist(Z)Lorg/quartz/CalendarIntervalScheduleBuilder;

+###org/quartz/JobKey
@2.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#jobKey(Ljava/lang/String;)Lorg/quartz/JobKey;
+#jobKey(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobKey;

+###org/quartz/Job
@1.7.2
+#execute(Lorg/quartz/JobExecutionContext;)V

+###org/quartz/Trigger$TriggerTimeComparator
@2.0.0
+#<init>()V
+#compare(Lorg/quartz/Trigger;Lorg/quartz/Trigger;)I
+#compare(Ljava/lang/Object;Ljava/lang/Object;)I
@2.2.0
+#compare(Ljava/util/Date;ILorg/quartz/TriggerKey;Ljava/util/Date;ILorg/quartz/TriggerKey;)I

+###org/quartz/Scheduler
@1.7.2
+#getSchedulerName()Ljava/lang/String;
+#getSchedulerInstanceId()Ljava/lang/String;
+#getContext()Lorg/quartz/SchedulerContext;
+#start()V
+#startDelayed(I)V
+#isStarted()Z
+#standby()V
+#isInStandbyMode()Z
+#shutdown()V
+#shutdown(Z)V
+#isShutdown()Z
+#getMetaData()Lorg/quartz/SchedulerMetaData;
+#getCurrentlyExecutingJobs()Ljava/util/List;
+#setJobFactory(Lorg/quartz/spi/JobFactory;)V
+#scheduleJob(Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)Ljava/util/Date;
+#scheduleJob(Lorg/quartz/Trigger;)Ljava/util/Date;
+#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
+#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
+#addJob(Lorg/quartz/JobDetail;Z)V
+#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
+#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
+#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Ljava/lang/String;)V
+#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Ljava/lang/String;)V
+#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Ljava/lang/String;)V
+#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Ljava/lang/String;)V
+#pauseAll()V
+#resumeAll()V
+#getJobGroupNames()[Ljava/lang/String;
+#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
+#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#getTriggerGroupNames()[Ljava/lang/String;
+#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
+#getPausedTriggerGroups()Ljava/util/Set;
+#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
+#addCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#deleteCalendar(Ljava/lang/String;)Z
+#getCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getCalendarNames()[Ljava/lang/String;
+#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
+#addGlobalJobListener(Lorg/quartz/JobListener;)V
+#addJobListener(Lorg/quartz/JobListener;)V
+#removeGlobalJobListener(Ljava/lang/String;)Z
+#removeJobListener(Ljava/lang/String;)Z
+#getGlobalJobListeners()Ljava/util/List;
+#getJobListenerNames()Ljava/util/Set;
+#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
+#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
+#addTriggerListener(Lorg/quartz/TriggerListener;)V
+#removeGlobalTriggerListener(Ljava/lang/String;)Z
+#removeTriggerListener(Ljava/lang/String;)Z
+#getGlobalTriggerListeners()Ljava/util/List;
+#getTriggerListenerNames()Ljava/util/Set;
+#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
+#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
+#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
+#getSchedulerListeners()Ljava/util/List;
@2.0.0
+#getListenerManager()Lorg/quartz/ListenerManager;
+#scheduleJobs(Ljava/util/Map;Z)V
+#unscheduleJob(Lorg/quartz/TriggerKey;)Z
+#unscheduleJobs(Ljava/util/List;)Z
+#rescheduleJob(Lorg/quartz/TriggerKey;Lorg/quartz/Trigger;)Ljava/util/Date;
+#deleteJob(Lorg/quartz/JobKey;)Z
+#deleteJobs(Ljava/util/List;)Z
+#triggerJob(Lorg/quartz/JobKey;)V
+#triggerJob(Lorg/quartz/JobKey;Lorg/quartz/JobDataMap;)V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)V
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersOfJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobDetail(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#getTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#getCalendarNames()Ljava/util/List;
+#interrupt(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clear()V
-#unscheduleJob(Ljava/lang/String;Ljava/lang/String;)Z
-#rescheduleJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Ljava/util/Date;
-#deleteJob(Ljava/lang/String;Ljava/lang/String;)Z
-#triggerJob(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#triggerJob(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#triggerJobWithVolatileTrigger(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/JobDataMap;)V
-#pauseJob(Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Ljava/lang/String;)V
-#pauseTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Ljava/lang/String;)V
-#resumeJob(Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Ljava/lang/String;)V
-#resumeTrigger(Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Ljava/lang/String;)V
-#getJobGroupNames()[Ljava/lang/String;
-#getJobNames(Ljava/lang/String;)[Ljava/lang/String;
-#getTriggersOfJob(Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#getTriggerGroupNames()[Ljava/lang/String;
-#getTriggerNames(Ljava/lang/String;)[Ljava/lang/String;
-#getJobDetail(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#getTrigger(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Ljava/lang/String;Ljava/lang/String;)I
-#getCalendarNames()[Ljava/lang/String;
-#interrupt(Ljava/lang/String;Ljava/lang/String;)Z
-#addGlobalJobListener(Lorg/quartz/JobListener;)V
-#addJobListener(Lorg/quartz/JobListener;)V
-#removeGlobalJobListener(Ljava/lang/String;)Z
-#removeJobListener(Ljava/lang/String;)Z
-#getGlobalJobListeners()Ljava/util/List;
-#getJobListenerNames()Ljava/util/Set;
-#getGlobalJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#getJobListener(Ljava/lang/String;)Lorg/quartz/JobListener;
-#addGlobalTriggerListener(Lorg/quartz/TriggerListener;)V
-#addTriggerListener(Lorg/quartz/TriggerListener;)V
-#removeGlobalTriggerListener(Ljava/lang/String;)Z
-#removeTriggerListener(Ljava/lang/String;)Z
-#getGlobalTriggerListeners()Ljava/util/List;
-#getTriggerListenerNames()Ljava/util/Set;
-#getGlobalTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#getTriggerListener(Ljava/lang/String;)Lorg/quartz/TriggerListener;
-#addSchedulerListener(Lorg/quartz/SchedulerListener;)V
-#removeSchedulerListener(Lorg/quartz/SchedulerListener;)Z
-#getSchedulerListeners()Ljava/util/List;
@2.1.0
+#interrupt(Ljava/lang/String;)Z
@2.2.0
+#scheduleJob(Lorg/quartz/JobDetail;Ljava/util/Set;Z)V
+#addJob(Lorg/quartz/JobDetail;ZZ)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V

+###org/quartz/SchedulerConfigException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/quartz/JobPersistenceException
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;I)V
@2.0.0
-#<init>(Ljava/lang/String;I)V
-#<init>(Ljava/lang/String;Ljava/lang/Throwable;I)V

+###org/quartz/TriggerBuilder
@2.0.0
+#newTrigger()Lorg/quartz/TriggerBuilder;
+#build()Lorg/quartz/Trigger;
+#withIdentity(Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#withIdentity(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#withIdentity(Lorg/quartz/TriggerKey;)Lorg/quartz/TriggerBuilder;
+#withDescription(Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#withPriority(I)Lorg/quartz/TriggerBuilder;
+#modifiedByCalendar(Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#startAt(Ljava/util/Date;)Lorg/quartz/TriggerBuilder;
+#startNow()Lorg/quartz/TriggerBuilder;
+#endAt(Ljava/util/Date;)Lorg/quartz/TriggerBuilder;
+#withSchedule(Lorg/quartz/ScheduleBuilder;)Lorg/quartz/TriggerBuilder;
+#forJob(Lorg/quartz/JobKey;)Lorg/quartz/TriggerBuilder;
+#forJob(Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#forJob(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#forJob(Lorg/quartz/JobDetail;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Integer;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Long;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Float;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Double;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Ljava/lang/String;Ljava/lang/Boolean;)Lorg/quartz/TriggerBuilder;
+#usingJobData(Lorg/quartz/JobDataMap;)Lorg/quartz/TriggerBuilder;

+###org/quartz/ScheduleBuilder
@2.0.0
+#<init>()V

+###org/quartz/JobListener
@1.7.2
+#getName()Ljava/lang/String;
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V

+###org/quartz/JobExecutionException
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V
+#<init>(Z)V
+#<init>(Ljava/lang/Throwable;Z)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;Z)V
+#<init>(Ljava/lang/String;Z)V
+#setRefireImmediately(Z)V
+#refireImmediately()Z
+#setUnscheduleFiringTrigger(Z)V
+#unscheduleFiringTrigger()Z
+#setUnscheduleAllTriggers(Z)V
+#unscheduleAllTriggers()Z

+###org/quartz/Trigger$TriggerState
@2.0.0
+#values()[Lorg/quartz/Trigger$TriggerState;
+#valueOf(Ljava/lang/String;)Lorg/quartz/Trigger$TriggerState;

+###org/quartz/SimpleTrigger
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;IJ)V
+#<init>(Ljava/lang/String;Ljava/lang/String;IJ)V
+#<init>(Ljava/lang/String;Ljava/util/Date;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;)V
+#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getRepeatCount()I
+#setRepeatCount(I)V
+#getRepeatInterval()J
+#setRepeatInterval(J)V
+#getTimesTriggered()I
+#setTimesTriggered(I)V
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFireTimeBefore(Ljava/util/Date;)Ljava/util/Date;
+#computeNumTimesFiredBetween(Ljava/util/Date;Ljava/util/Date;)I
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#validate()V
+#hasAdditionalProperties()Z
@2.0.0
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;
-#<init>()V
-#<init>(Ljava/lang/String;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;)V
-#<init>(Ljava/lang/String;IJ)V
-#<init>(Ljava/lang/String;Ljava/lang/String;IJ)V
-#<init>(Ljava/lang/String;Ljava/util/Date;)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;)V
-#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
-#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;IJ)V
-#getStartTime()Ljava/util/Date;
-#setStartTime(Ljava/util/Date;)V
-#getEndTime()Ljava/util/Date;
-#setEndTime(Ljava/util/Date;)V
-#setRepeatCount(I)V
-#setRepeatInterval(J)V
-#setTimesTriggered(I)V
-#updateAfterMisfire(Lorg/quartz/Calendar;)V
-#triggered(Lorg/quartz/Calendar;)V
-#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
-#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
-#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
-#getNextFireTime()Ljava/util/Date;
-#getPreviousFireTime()Ljava/util/Date;
-#setNextFireTime(Ljava/util/Date;)V
-#setPreviousFireTime(Ljava/util/Date;)V
-#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
-#getFireTimeBefore(Ljava/util/Date;)Ljava/util/Date;
-#computeNumTimesFiredBetween(Ljava/util/Date;Ljava/util/Date;)I
-#getFinalFireTime()Ljava/util/Date;
-#mayFireAgain()Z
-#validate()V
-#hasAdditionalProperties()Z

+###org/quartz/ee/jta/JTAJobRunShell
@1.7.2
+#<init>(Lorg/quartz/core/JobRunShellFactory;Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
+#passivate()V
@2.0.0
+#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;)V
-#<init>(Lorg/quartz/core/JobRunShellFactory;Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
@2.2.0
+#<init>(Lorg/quartz/Scheduler;Lorg/quartz/spi/TriggerFiredBundle;I)V

+###org/quartz/ee/jta/JTAAnnotationAwareJobRunShellFactory
@2.0.0
+#<init>()V
+#initialize(Lorg/quartz/Scheduler;)V
+#createJobRunShell(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/core/JobRunShell;

+###org/quartz/ee/jta/JTAJobRunShellFactory
@1.7.2
+#<init>()V
+#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
+#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
+#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V
@2.0.0
+#initialize(Lorg/quartz/Scheduler;)V
+#createJobRunShell(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/core/JobRunShell;
-#initialize(Lorg/quartz/Scheduler;Lorg/quartz/core/SchedulingContext;)V
-#borrowJobRunShell()Lorg/quartz/core/JobRunShell;
-#returnJobRunShell(Lorg/quartz/core/JobRunShell;)V

+###org/quartz/ee/jta/UserTransactionHelper
@1.7.2
+#getUserTxLocation()Ljava/lang/String;
+#setUserTxLocation(Ljava/lang/String;)V
+#lookupUserTransaction()Ljavax/transaction/UserTransaction;
+#returnUserTransaction(Ljavax/transaction/UserTransaction;)V

+###org/quartz/ee/servlet/QuartzInitializerListener
@1.7.2
+#<init>()V
+#contextInitialized(Ljavax/servlet/ServletContextEvent;)V
+#contextDestroyed(Ljavax/servlet/ServletContextEvent;)V

+###org/quartz/ee/servlet/QuartzInitializerServlet
@1.7.2
+#<init>()V
+#init(Ljavax/servlet/ServletConfig;)V
+#destroy()V
+#doPost(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V
+#doGet(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V

+###org/quartz/ExecuteInJTATransaction
@2.0.0
@2.2.0
+#timeout()I

+###org/quartz/Calendar
@1.7.2
+#setBaseCalendar(Lorg/quartz/Calendar;)V
+#getBaseCalendar()Lorg/quartz/Calendar;
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#clone()Ljava/lang/Object;

+###org/quartz/simpl/ZeroSizeThreadPool
@1.7.2
+#<init>()V
+#getLog()Lorg/apache/commons/logging/Log;
+#getPoolSize()I
+#initialize()V
+#shutdown()V
+#shutdown(Z)V
+#runInThread(Ljava/lang/Runnable;)Z
+#blockForAvailableThreads()I
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
@1.8.0
+#getLog()Lorg/slf4j/Logger;
-#getLog()Lorg/apache/commons/logging/Log;

+###org/quartz/simpl/ThreadContextClassLoadHelper
@1.7.2
+#<init>()V
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/simpl/LoadingLoaderClassLoadHelper
@1.7.2
+#<init>()V
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/simpl/SimpleJobFactory
@1.7.2
+#<init>()V
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;
@2.0.0
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Scheduler;)Lorg/quartz/Job;
-#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;

+###org/quartz/simpl/CascadingClassLoadHelper
@1.7.2
+#<init>()V
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/simpl/SimpleClassLoadHelper
@1.7.2
+#<init>()V
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/simpl/RAMJobStore
@1.7.2
+#<init>()V
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#schedulerStarted()V
+#getMisfireThreshold()J
+#setMisfireThreshold(J)V
+#shutdown()V
+#supportsPersistence()Z
+#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
+#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
+#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
+#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
+#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
+#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
+#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
+#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
+#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
+#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
+#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
+#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
+#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
+#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
+#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
+#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
+#pauseAll(Lorg/quartz/core/SchedulingContext;)V
+#resumeAll(Lorg/quartz/core/SchedulingContext;)V
+#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
+#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
+#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
+#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
+#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
@1.8.0
+#getEstimatedTimeToReleaseAndAcquireTrigger()J
+#isClustered()Z
@2.0.0
+#clearAllSchedulingData()V
+#storeJobAndTrigger(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;)V
+#storeJob(Lorg/quartz/JobDetail;Z)V
+#removeJob(Lorg/quartz/JobKey;)Z
+#removeJobs(Ljava/util/List;)Z
+#removeTriggers(Ljava/util/List;)Z
+#storeJobsAndTriggers(Ljava/util/Map;Z)V
+#storeTrigger(Lorg/quartz/spi/OperableTrigger;Z)V
+#removeTrigger(Lorg/quartz/TriggerKey;)Z
+#replaceTrigger(Lorg/quartz/TriggerKey;Lorg/quartz/spi/OperableTrigger;)Z
+#retrieveJob(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#retrieveTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#storeCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#removeCalendar(Ljava/lang/String;)Z
+#retrieveCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#getNumberOfJobs()I
+#getNumberOfTriggers()I
+#getNumberOfCalendars()I
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getCalendarNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getJobGroupNames()Ljava/util/List;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/List;
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/List;
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/List;
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseAll()V
+#resumeAll()V
+#acquireNextTriggers(JIJ)Ljava/util/List;
+#releaseAcquiredTrigger(Lorg/quartz/spi/OperableTrigger;)V
+#triggersFired(Ljava/util/List;)Ljava/util/List;
+#triggeredJobComplete(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#getPausedTriggerGroups()Ljava/util/Set;
+#setThreadPoolSize(I)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
-#storeJobAndTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Lorg/quartz/Trigger;)V
-#storeJob(Lorg/quartz/core/SchedulingContext;Lorg/quartz/JobDetail;Z)V
-#removeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#storeTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Z)V
-#removeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Z
-#replaceTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Trigger;)Z
-#retrieveJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/JobDetail;
-#retrieveTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)Lorg/quartz/Trigger;
-#getTriggerState(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)I
-#storeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
-#removeCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Z
-#retrieveCalendar(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)Lorg/quartz/Calendar;
-#getNumberOfJobs(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfTriggers(Lorg/quartz/core/SchedulingContext;)I
-#getNumberOfCalendars(Lorg/quartz/core/SchedulingContext;)I
-#getJobNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getCalendarNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerNames(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)[Ljava/lang/String;
-#getJobGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggerGroupNames(Lorg/quartz/core/SchedulingContext;)[Ljava/lang/String;
-#getTriggersForJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)[Lorg/quartz/Trigger;
-#pauseTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#pauseJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeTrigger(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeTriggerGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#resumeJob(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;Ljava/lang/String;)V
-#resumeJobGroup(Lorg/quartz/core/SchedulingContext;Ljava/lang/String;)V
-#pauseAll(Lorg/quartz/core/SchedulingContext;)V
-#resumeAll(Lorg/quartz/core/SchedulingContext;)V
-#acquireNextTrigger(Lorg/quartz/core/SchedulingContext;J)Lorg/quartz/Trigger;
-#releaseAcquiredTrigger(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)V
-#triggerFired(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;)Lorg/quartz/spi/TriggerFiredBundle;
-#triggeredJobComplete(Lorg/quartz/core/SchedulingContext;Lorg/quartz/Trigger;Lorg/quartz/JobDetail;I)V
-#getPausedTriggerGroups(Lorg/quartz/core/SchedulingContext;)Ljava/util/Set;
@2.1.0
+#schedulerPaused()V
+#schedulerResumed()V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V
+#getAcquireRetryDelay(I)J

+###org/quartz/simpl/SimpleTimeBroker
@1.7.2
+#<init>()V
+#getCurrentTime()Ljava/util/Date;
+#initialize()V
+#shutdown()V

+###org/quartz/simpl/HostnameInstanceIdGenerator
@1.7.2
+#<init>()V
+#generateInstanceId()Ljava/lang/String;

+###org/quartz/simpl/InitThreadContextClassLoadHelper
@1.7.2
+#<init>()V
+#initialize()V
+#loadClass(Ljava/lang/String;)Ljava/lang/Class;
+#getResource(Ljava/lang/String;)Ljava/net/URL;
+#getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;
+#getClassLoader()Ljava/lang/ClassLoader;
@2.1.0
+#loadClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;

+###org/quartz/simpl/SimpleInstanceIdGenerator
@1.7.2
+#<init>()V
+#generateInstanceId()Ljava/lang/String;

+###org/quartz/simpl/SystemPropertyInstanceIdGenerator
@1.8.5
+#<init>()V
+#generateInstanceId()Ljava/lang/String;
@2.1.4
+#getPrepend()Ljava/lang/String;
+#setPrepend(Ljava/lang/String;)V
+#getPostpend()Ljava/lang/String;
+#setPostpend(Ljava/lang/String;)V
+#getSystemPropertyName()Ljava/lang/String;
+#setSystemPropertyName(Ljava/lang/String;)V

+###org/quartz/simpl/SimpleThreadPool
@1.7.2
+#<init>()V
+#<init>(II)V
+#getLog()Lorg/apache/commons/logging/Log;
+#getPoolSize()I
+#setThreadCount(I)V
+#getThreadCount()I
+#setThreadPriority(I)V
+#getThreadPriority()I
+#setThreadNamePrefix(Ljava/lang/String;)V
+#getThreadNamePrefix()Ljava/lang/String;
+#isThreadsInheritContextClassLoaderOfInitializingThread()Z
+#setThreadsInheritContextClassLoaderOfInitializingThread(Z)V
+#isThreadsInheritGroupOfInitializingThread()Z
+#setThreadsInheritGroupOfInitializingThread(Z)V
+#isMakeThreadsDaemons()Z
+#setMakeThreadsDaemons(Z)V
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
+#initialize()V
+#shutdown()V
+#shutdown(Z)V
+#runInThread(Ljava/lang/Runnable;)Z
+#blockForAvailableThreads()I
@1.8.0
+#getLog()Lorg/slf4j/Logger;
-#getLog()Lorg/apache/commons/logging/Log;

+###org/quartz/simpl/PropertySettingJobFactory
@1.7.2
+#<init>()V
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;
+#isThrowIfPropertyNotFound()Z
+#setThrowIfPropertyNotFound(Z)V
+#isWarnIfPropertyNotFound()Z
+#setWarnIfPropertyNotFound(Z)V
@2.0.0
+#newJob(Lorg/quartz/spi/TriggerFiredBundle;Lorg/quartz/Scheduler;)Lorg/quartz/Job;
-#newJob(Lorg/quartz/spi/TriggerFiredBundle;)Lorg/quartz/Job;

+###org/quartz/JobDataMap
@1.7.2
+#<init>()V
+#<init>(Ljava/util/Map;)V
+#putAsString(Ljava/lang/String;Z)V
+#putAsString(Ljava/lang/String;Ljava/lang/Boolean;)V
+#putAsString(Ljava/lang/String;C)V
+#putAsString(Ljava/lang/String;Ljava/lang/Character;)V
+#putAsString(Ljava/lang/String;D)V
+#putAsString(Ljava/lang/String;Ljava/lang/Double;)V
+#putAsString(Ljava/lang/String;F)V
+#putAsString(Ljava/lang/String;Ljava/lang/Float;)V
+#putAsString(Ljava/lang/String;I)V
+#putAsString(Ljava/lang/String;Ljava/lang/Integer;)V
+#putAsString(Ljava/lang/String;J)V
+#putAsString(Ljava/lang/String;Ljava/lang/Long;)V
+#getIntFromString(Ljava/lang/String;)I
+#getIntValue(Ljava/lang/String;)I
+#getIntegerFromString(Ljava/lang/String;)Ljava/lang/Integer;
+#getBooleanValueFromString(Ljava/lang/String;)Z
+#getBooleanValue(Ljava/lang/String;)Z
+#getBooleanFromString(Ljava/lang/String;)Ljava/lang/Boolean;
+#getCharFromString(Ljava/lang/String;)C
+#getCharacterFromString(Ljava/lang/String;)Ljava/lang/Character;
+#getDoubleValueFromString(Ljava/lang/String;)D
+#getDoubleValue(Ljava/lang/String;)D
+#getDoubleFromString(Ljava/lang/String;)Ljava/lang/Double;
+#getFloatValueFromString(Ljava/lang/String;)F
+#getFloatValue(Ljava/lang/String;)F
+#getFloatFromString(Ljava/lang/String;)Ljava/lang/Float;
+#getLongValueFromString(Ljava/lang/String;)J
+#getLongValue(Ljava/lang/String;)J
+#getLongFromString(Ljava/lang/String;)Ljava/lang/Long;

+###org/quartz/SchedulerException
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;I)V
+#getUnderlyingException()Ljava/lang/Throwable;
+#getErrorCode()I
+#setErrorCode(I)V
+#isPersistenceError()Z
+#isThreadPoolError()Z
+#isJobListenerError()Z
+#isTriggerListenerError()Z
+#isClientError()Z
+#isConfigurationError()Z
+#toString()Ljava/lang/String;
+#printStackTrace()V
+#printStackTrace(Ljava/io/PrintStream;)V
+#printStackTrace(Ljava/io/PrintWriter;)V
@1.8.0
-#printStackTrace()V
-#printStackTrace(Ljava/io/PrintStream;)V
-#printStackTrace(Ljava/io/PrintWriter;)V
@2.0.0
-#<init>(Ljava/lang/String;I)V
-#<init>(Ljava/lang/String;Ljava/lang/Throwable;I)V
-#getErrorCode()I
-#setErrorCode(I)V
-#isPersistenceError()Z
-#isThreadPoolError()Z
-#isJobListenerError()Z
-#isTriggerListenerError()Z
-#isClientError()Z
-#isConfigurationError()Z

+###org/quartz/PersistJobDataAfterExecution
@2.0.0

+###org/quartz/listeners/TriggerListenerSupport
@1.7.2
+#<init>()V
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#vetoJobExecution(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)Z
+#triggerMisfired(Lorg/quartz/Trigger;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V
@2.0.0
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
-#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V

+###org/quartz/listeners/BroadcastSchedulerListener
@1.7.2
+#<init>()V
+#<init>(Ljava/util/List;)V
+#addListener(Lorg/quartz/SchedulerListener;)V
+#removeListener(Lorg/quartz/SchedulerListener;)Z
+#getListeners()Ljava/util/List;
+#jobScheduled(Lorg/quartz/Trigger;)V
+#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
+#triggerFinalized(Lorg/quartz/Trigger;)V
+#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
+#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
+#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#schedulerShutdown()V
@1.8.0
+#jobAdded(Lorg/quartz/JobDetail;)V
+#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerStarted()V
+#schedulerInStandbyMode()V
@1.8.1
+#schedulerShuttingdown()V
@2.0.0
+#jobDeleted(Lorg/quartz/JobKey;)V
+#jobUnscheduled(Lorg/quartz/TriggerKey;)V
+#triggerPaused(Lorg/quartz/TriggerKey;)V
+#triggersPaused(Ljava/lang/String;)V
+#triggerResumed(Lorg/quartz/TriggerKey;)V
+#triggersResumed(Ljava/lang/String;)V
+#schedulingDataCleared()V
+#jobPaused(Lorg/quartz/JobKey;)V
+#jobsPaused(Ljava/lang/String;)V
+#jobResumed(Lorg/quartz/JobKey;)V
+#jobsResumed(Ljava/lang/String;)V
-#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
-#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
-#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
-#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
-#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
@2.2.0
+#schedulerStarting()V

+###org/quartz/listeners/BroadcastJobListener
@2.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/List;)V
+#getName()Ljava/lang/String;
+#addListener(Lorg/quartz/JobListener;)V
+#removeListener(Lorg/quartz/JobListener;)Z
+#removeListener(Ljava/lang/String;)Z
+#getListeners()Ljava/util/List;
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V

+###org/quartz/listeners/JobListenerSupport
@1.7.2
+#<init>()V
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V

+###org/quartz/listeners/BroadcastTriggerListener
@2.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/List;)V
+#getName()Ljava/lang/String;
+#addListener(Lorg/quartz/TriggerListener;)V
+#removeListener(Lorg/quartz/TriggerListener;)Z
+#removeListener(Ljava/lang/String;)Z
+#getListeners()Ljava/util/List;
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#vetoJobExecution(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)Z
+#triggerMisfired(Lorg/quartz/Trigger;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V

+###org/quartz/listeners/JobChainingJobListener
@1.7.2
+#<init>(Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#addJobChainLink(Lorg/quartz/utils/Key;Lorg/quartz/utils/Key;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
@2.0.0
+#addJobChainLink(Lorg/quartz/JobKey;Lorg/quartz/JobKey;)V
-#addJobChainLink(Lorg/quartz/utils/Key;Lorg/quartz/utils/Key;)V

+###org/quartz/listeners/SchedulerListenerSupport
@1.7.2
+#<init>()V
+#jobScheduled(Lorg/quartz/Trigger;)V
+#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
+#triggerFinalized(Lorg/quartz/Trigger;)V
+#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
+#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
+#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerError(Ljava/lang/String;Lorg/quartz/SchedulerException;)V
+#schedulerShutdown()V
@1.8.0
+#jobAdded(Lorg/quartz/JobDetail;)V
+#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
+#schedulerStarted()V
+#schedulerInStandbyMode()V
@1.8.1
+#schedulerShuttingdown()V
@2.0.0
+#jobDeleted(Lorg/quartz/JobKey;)V
+#jobPaused(Lorg/quartz/JobKey;)V
+#jobResumed(Lorg/quartz/JobKey;)V
+#jobsPaused(Ljava/lang/String;)V
+#jobsResumed(Ljava/lang/String;)V
+#jobUnscheduled(Lorg/quartz/TriggerKey;)V
+#triggerPaused(Lorg/quartz/TriggerKey;)V
+#triggerResumed(Lorg/quartz/TriggerKey;)V
+#triggersPaused(Ljava/lang/String;)V
+#triggersResumed(Ljava/lang/String;)V
+#schedulingDataCleared()V
-#jobDeleted(Ljava/lang/String;Ljava/lang/String;)V
-#jobUnscheduled(Ljava/lang/String;Ljava/lang/String;)V
-#triggersPaused(Ljava/lang/String;Ljava/lang/String;)V
-#triggersResumed(Ljava/lang/String;Ljava/lang/String;)V
-#jobsPaused(Ljava/lang/String;Ljava/lang/String;)V
-#jobsResumed(Ljava/lang/String;Ljava/lang/String;)V
@2.2.0
+#schedulerStarting()V

+###org/quartz/Trigger$CompletedExecutionInstruction
@2.0.0
+#values()[Lorg/quartz/Trigger$CompletedExecutionInstruction;
+#valueOf(Ljava/lang/String;)Lorg/quartz/Trigger$CompletedExecutionInstruction;

+###org/quartz/impl/DefaultThreadExecutor
@1.8.6
+#<init>()V
+#initialize()V
+#execute(Ljava/lang/Thread;)V
@2.0.0
-###org/quartz/impl/DefaultThreadExecutor

+###org/quartz/spi/ThreadExecutor
@1.8.6
+#execute(Ljava/lang/Thread;)V
+#initialize()V
@2.0.0
-###org/quartz/spi/ThreadExecutor

+###org/quartz/core/SchedulingContext
@1.7.2
+#<init>()V
+#getInstanceId()Ljava/lang/String;
+#setInstanceId(Ljava/lang/String;)V
@1.8.0
+#<init>(Ljava/lang/String;)V
@2.0.0
-###org/quartz/core/SchedulingContext

+###org/quartz/DateIntervalTrigger
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;Lorg/quartz/DateIntervalTrigger$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/DateIntervalTrigger$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateIntervalTrigger$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateIntervalTrigger$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/DateIntervalTrigger$IntervalUnit;I)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getRepeatIntervalUnit()Lorg/quartz/DateIntervalTrigger$IntervalUnit;
+#setRepeatIntervalUnit(Lorg/quartz/DateIntervalTrigger$IntervalUnit;)V
+#getRepeatInterval()I
+#setRepeatInterval(I)V
+#getTimesTriggered()I
+#setTimesTriggered(I)V
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#validate()V
+#main([Ljava/lang/String;)V
@1.7.3
-#main([Ljava/lang/String;)V
@2.0.0
-###org/quartz/DateIntervalTrigger

+###org/quartz/utils/TriggerStatus
@1.7.2
+#<init>(Ljava/lang/String;Ljava/util/Date;)V
+#getJobKey()Lorg/quartz/utils/Key;
+#setJobKey(Lorg/quartz/utils/Key;)V
+#getKey()Lorg/quartz/utils/Key;
+#setKey(Lorg/quartz/utils/Key;)V
+#getStatus()Ljava/lang/String;
+#getNextFireTime()Ljava/util/Date;
+#toString()Ljava/lang/String;
@2.0.0
-###org/quartz/utils/TriggerStatus

+###org/quartz/utils/Pair
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#getFirst()Ljava/lang/Object;
+#setFirst(Ljava/lang/Object;)V
+#getSecond()Ljava/lang/Object;
+#setSecond(Ljava/lang/Object;)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@2.0.0
-###org/quartz/utils/Pair

+###org/quartz/NthIncludedDayTrigger
@1.7.2
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#clone()Ljava/lang/Object;
+#setN(I)V
+#getN()I
+#setIntervalType(I)V
+#getIntervalType()I
+#setFireAtTime(Ljava/lang/String;)V
+#getFireAtTime()Ljava/lang/String;
+#setNextFireCutoffInterval(I)V
+#getNextFireCutoffInterval()I
+#setStartTime(Ljava/util/Date;)V
+#getStartTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setTimeZone(Ljava/util/TimeZone;)V
+#getTimeZone()Ljava/util/TimeZone;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#triggered(Lorg/quartz/Calendar;)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#executionComplete(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)I
+#mayFireAgain()Z
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
@2.0.0
-###org/quartz/NthIncludedDayTrigger

+###org/quartz/DateIntervalTrigger$IntervalUnit
@1.7.2
+#values()[Lorg/quartz/DateIntervalTrigger$IntervalUnit;
+#valueOf(Ljava/lang/String;)Lorg/quartz/DateIntervalTrigger$IntervalUnit;
@2.0.0
-###org/quartz/DateIntervalTrigger$IntervalUnit

+###org/quartz/listeners/FilterAndBroadcastTriggerListener
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/List;)V
+#getName()Ljava/lang/String;
+#addListener(Lorg/quartz/TriggerListener;)V
+#removeListener(Lorg/quartz/TriggerListener;)Z
+#removeListener(Ljava/lang/String;)Z
+#getListeners()Ljava/util/List;
+#addTriggerNamePattern(Ljava/lang/String;)V
+#getTriggerNamePatterns()Ljava/util/List;
+#addTriggerGroupPattern(Ljava/lang/String;)V
+#getTriggerGroupPatterns()Ljava/util/List;
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#vetoJobExecution(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)Z
+#triggerMisfired(Lorg/quartz/Trigger;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;I)V
@2.0.0
-###org/quartz/listeners/FilterAndBroadcastTriggerListener

+###org/quartz/listeners/FilterAndBroadcastJobListener
@1.7.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/List;)V
+#getName()Ljava/lang/String;
+#addListener(Lorg/quartz/JobListener;)V
+#removeListener(Lorg/quartz/JobListener;)Z
+#removeListener(Ljava/lang/String;)Z
+#getListeners()Ljava/util/List;
+#addJobNamePattern(Ljava/lang/String;)V
+#getJobNamePatterns()Ljava/util/List;
+#addJobGroupPattern(Ljava/lang/String;)V
+#getJobGroupPatterns()Ljava/util/List;
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
@2.0.0
-###org/quartz/listeners/FilterAndBroadcastJobListener

+###org/quartz/CriticalSchedulerException
@1.7.2
+#<init>(Ljava/lang/String;I)V
@2.0.0
-###org/quartz/CriticalSchedulerException

+###org/quartz/DailyTimeIntervalScheduleBuilder
@2.1.0
+#dailyTimeIntervalSchedule()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#build()Lorg/quartz/spi/MutableTrigger;
+#withInterval(ILorg/quartz/DateBuilder$IntervalUnit;)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withIntervalInSeconds(I)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withIntervalInMinutes(I)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withIntervalInHours(I)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#onDaysOfTheWeek(Ljava/util/Set;)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#onMondayThroughFriday()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#onSaturdayAndSunday()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#onEveryDay()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#startingDailyAt(Lorg/quartz/TimeOfDay;)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#endingDailyAt(Lorg/quartz/TimeOfDay;)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#endingDailyAfterCount(I)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withMisfireHandlingInstructionIgnoreMisfires()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withMisfireHandlingInstructionDoNothing()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withMisfireHandlingInstructionFireAndProceed()Lorg/quartz/DailyTimeIntervalScheduleBuilder;
+#withRepeatCount(I)Lorg/quartz/DailyTimeIntervalScheduleBuilder;
@2.1.2
+#onDaysOfTheWeek([Ljava/lang/Integer;)Lorg/quartz/DailyTimeIntervalScheduleBuilder;

+###org/quartz/DailyTimeIntervalTrigger
@2.1.0
+#getRepeatIntervalUnit()Lorg/quartz/DateBuilder$IntervalUnit;
+#getRepeatCount()I
+#getRepeatInterval()I
+#getStartTimeOfDay()Lorg/quartz/TimeOfDay;
+#getEndTimeOfDay()Lorg/quartz/TimeOfDay;
+#getDaysOfWeek()Ljava/util/Set;
+#getTimesTriggered()I
+#getTriggerBuilder()Lorg/quartz/TriggerBuilder;

+###org/quartz/TimeOfDay
@2.1.0
+#<init>(III)V
+#<init>(II)V
+#hourMinuteAndSecondOfDay(III)Lorg/quartz/TimeOfDay;
+#hourAndMinuteOfDay(II)Lorg/quartz/TimeOfDay;
+#getHour()I
+#getMinute()I
+#getSecond()I
+#before(Lorg/quartz/TimeOfDay;)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#getTimeOfDayForDate(Ljava/util/Date;)Ljava/util/Date;
+#toString()Ljava/lang/String;
@2.1.2
+#hourAndMinuteAndSecondFromDate(Ljava/util/Date;)Lorg/quartz/TimeOfDay;
+#hourAndMinuteAndSecondFromDate(Ljava/util/Date;Ljava/util/TimeZone;)Lorg/quartz/TimeOfDay;
+#hourAndMinuteFromDate(Ljava/util/Date;)Lorg/quartz/TimeOfDay;
+#hourAndMinuteFromDate(Ljava/util/Date;Ljava/util/TimeZone;)Lorg/quartz/TimeOfDay;

+###org/quartz/commonj/WorkManagerThreadExecutor
@2.2.0
+#<init>()V
+#execute(Ljava/lang/Thread;)V
+#initialize()V
+#setWorkManagerName(Ljava/lang/String;)V

+###org/quartz/ee/jmx/jboss/JBoss4RMIRemoteMBeanScheduler
@2.2.0
+#<init>()V
+#setProviderURL(Ljava/lang/String;)V
+#initialize()V

+###org/quartz/ee/jmx/jboss/QuartzService
@2.2.0
+#<init>()V
+#setJndiName(Ljava/lang/String;)V
+#getJndiName()Ljava/lang/String;
+#getName()Ljava/lang/String;
+#setProperties(Ljava/lang/String;)V
+#getProperties()Ljava/lang/String;
+#setPropertiesFile(Ljava/lang/String;)V
+#getPropertiesFile()Ljava/lang/String;
+#setStartScheduler(Z)V
+#getStartScheduler()Z
+#createService()V
+#destroyService()V
+#startService()V
+#stopService()V

+###org/quartz/ee/jmx/jboss/QuartzServiceMBean
@2.2.0
+#setJndiName(Ljava/lang/String;)V
+#getJndiName()Ljava/lang/String;
+#setProperties(Ljava/lang/String;)V
+#setPropertiesFile(Ljava/lang/String;)V
+#setStartScheduler(Z)V

+###org/quartz/impl/jdbcjobstore/CUBRIDDelegate
@2.1.6
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/CacheDelegate
@2.1.4
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
+#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V
@2.2.0
+#<init>()V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;)V
-#<init>(Lorg/slf4j/Logger;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/quartz/spi/ClassLoadHelper;Ljava/lang/Boolean;)V

+###org/quartz/impl/jdbcjobstore/DailyTimeIntervalTriggerPersistenceDelegate
@2.1.0
+#<init>()V
+#canHandleTriggerType(Lorg/quartz/spi/OperableTrigger;)Z
+#getHandledTriggerTypeDiscriminator()Ljava/lang/String;

+###org/quartz/impl/jdbcjobstore/WebLogicDelegate
@2.2.0
+#<init>()V

+###org/quartz/impl/jdbcjobstore/oracle/OracleDelegate
@2.2.0
+#<init>()V
+#insertJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#updateJobDetail(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I
+#insertTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#updateTrigger(Ljava/sql/Connection;Lorg/quartz/spi/OperableTrigger;Ljava/lang/String;Lorg/quartz/JobDetail;)I
+#insertCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#updateCalendar(Ljava/sql/Connection;Ljava/lang/String;Lorg/quartz/Calendar;)I
+#updateJobData(Ljava/sql/Connection;Lorg/quartz/JobDetail;)I

+###org/quartz/impl/jdbcjobstore/oracle/weblogic/WebLogicOracleDelegate
@2.2.0
+#<init>()V

+###org/quartz/impl/triggers/DailyTimeIntervalTriggerImpl
@2.1.0
+#<init>()V
+#<init>(Ljava/lang/String;Lorg/quartz/TimeOfDay;Lorg/quartz/TimeOfDay;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/TimeOfDay;Lorg/quartz/TimeOfDay;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/TimeOfDay;Lorg/quartz/TimeOfDay;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/TimeOfDay;Lorg/quartz/TimeOfDay;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Date;Ljava/util/Date;Lorg/quartz/TimeOfDay;Lorg/quartz/TimeOfDay;Lorg/quartz/DateBuilder$IntervalUnit;I)V
+#getStartTime()Ljava/util/Date;
+#setStartTime(Ljava/util/Date;)V
+#getEndTime()Ljava/util/Date;
+#setEndTime(Ljava/util/Date;)V
+#getRepeatIntervalUnit()Lorg/quartz/DateBuilder$IntervalUnit;
+#setRepeatIntervalUnit(Lorg/quartz/DateBuilder$IntervalUnit;)V
+#getRepeatInterval()I
+#setRepeatInterval(I)V
+#getTimesTriggered()I
+#setTimesTriggered(I)V
+#updateAfterMisfire(Lorg/quartz/Calendar;)V
+#triggered(Lorg/quartz/Calendar;)V
+#updateWithNewCalendar(Lorg/quartz/Calendar;J)V
+#computeFirstFireTime(Lorg/quartz/Calendar;)Ljava/util/Date;
+#getNextFireTime()Ljava/util/Date;
+#getPreviousFireTime()Ljava/util/Date;
+#setNextFireTime(Ljava/util/Date;)V
+#setPreviousFireTime(Ljava/util/Date;)V
+#getFireTimeAfter(Ljava/util/Date;)Ljava/util/Date;
+#getFinalFireTime()Ljava/util/Date;
+#mayFireAgain()Z
+#validate()V
+#getDaysOfWeek()Ljava/util/Set;
+#setDaysOfWeek(Ljava/util/Set;)V
+#getStartTimeOfDay()Lorg/quartz/TimeOfDay;
+#setStartTimeOfDay(Lorg/quartz/TimeOfDay;)V
+#getEndTimeOfDay()Lorg/quartz/TimeOfDay;
+#setEndTimeOfDay(Lorg/quartz/TimeOfDay;)V
+#getScheduleBuilder()Lorg/quartz/ScheduleBuilder;
+#hasAdditionalProperties()Z
+#getRepeatCount()I
+#setRepeatCount(I)V

+###org/quartz/management/ManagementRESTServiceConfiguration
@2.2.0
+#<init>()V
+#isEnabled()Z
+#setEnabled(Z)V
+#getSecurityServiceLocation()Ljava/lang/String;
+#setSecurityServiceLocation(Ljava/lang/String;)V
+#getSecurityServiceTimeout()I
+#setSecurityServiceTimeout(I)V
+#getBind()Ljava/lang/String;
+#getHost()Ljava/lang/String;
+#getPort()I
+#setBind(Ljava/lang/String;)V

+###org/quartz/management/ManagementServer
@2.2.0
+#start()V
+#stop()V
+#register(Lorg/quartz/core/QuartzScheduler;)V
+#unregister(Lorg/quartz/core/QuartzScheduler;)V
+#hasRegistered()Z

+###org/quartz/utils/FindbugsSuppressWarnings
@2.2.0
+#value()[Ljava/lang/String;

+###org/quartz/utils/weblogic/WeblogicConnectionProvider
@2.2.0
+#<init>(Ljava/lang/String;)V
+#getConnection()Ljava/sql/Connection;
+#initialize()V
+#shutdown()V

+###org/terracotta/quartz/AbstractTerracottaJobStore
@2.2.0
+#<init>()V
+#getUUID()Ljava/lang/String;
+#setMisfireThreshold(J)V
+#acquireNextTriggers(JIJ)Ljava/util/List;
+#getCalendarNames()Ljava/util/List;
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getNumberOfCalendars()I
+#getNumberOfJobs()I
+#getNumberOfTriggers()I
+#getPausedTriggerGroups()Ljava/util/Set;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#pauseAll()V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#releaseAcquiredTrigger(Lorg/quartz/spi/OperableTrigger;)V
+#removeCalendar(Ljava/lang/String;)Z
+#removeJob(Lorg/quartz/JobKey;)Z
+#removeTrigger(Lorg/quartz/TriggerKey;)Z
+#replaceTrigger(Lorg/quartz/TriggerKey;Lorg/quartz/spi/OperableTrigger;)Z
+#resumeAll()V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#retrieveCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#retrieveJob(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#retrieveTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#schedulerStarted()V
+#schedulerPaused()V
+#schedulerResumed()V
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
+#setThreadPoolSize(I)V
+#shutdown()V
+#storeCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#storeJob(Lorg/quartz/JobDetail;Z)V
+#storeJobAndTrigger(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;)V
+#storeTrigger(Lorg/quartz/spi/OperableTrigger;Z)V
+#supportsPersistence()Z
+#triggeredJobComplete(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#triggersFired(Ljava/util/List;)Ljava/util/List;
+#setTcConfig(Ljava/lang/String;)V
+#setTcConfigUrl(Ljava/lang/String;)V
+#setSynchronousWrite(Ljava/lang/String;)V
+#getEstimatedTimeToReleaseAndAcquireTrigger()J
+#setEstimatedTimeToReleaseAndAcquireTrigger(J)V
+#isClustered()Z
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clearAllSchedulingData()V
+#removeTriggers(Ljava/util/List;)Z
+#removeJobs(Ljava/util/List;)Z
+#storeJobsAndTriggers(Ljava/util/Map;Z)V
@2.2.1
+#setTcRetryInterval(J)V
+#setRejoin(Ljava/lang/String;)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V
+#getAcquireRetryDelay(I)J

+###org/terracotta/quartz/ClusteredJobStore
@2.2.0
+#setMisfireThreshold(J)V
+#setEstimatedTimeToReleaseAndAcquireTrigger(J)V
@2.2.1
+#setTcRetryInterval(J)V

+###org/terracotta/quartz/PlainTerracottaJobStore
@2.2.0
+#<init>(Lorg/terracotta/toolkit/internal/ToolkitInternal;)V
+#setSynchronousWrite(Ljava/lang/String;)V
+#setThreadPoolSize(I)V
+#acquireNextTriggers(JIJ)Ljava/util/List;
+#getCalendarNames()Ljava/util/List;
+#getJobGroupNames()Ljava/util/List;
+#getJobKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getNumberOfCalendars()I
+#getNumberOfJobs()I
+#getNumberOfTriggers()I
+#getPausedTriggerGroups()Ljava/util/Set;
+#getTriggerGroupNames()Ljava/util/List;
+#getTriggerKeys(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Set;
+#getTriggersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerState(Lorg/quartz/TriggerKey;)Lorg/quartz/Trigger$TriggerState;
+#initialize(Lorg/quartz/spi/ClassLoadHelper;Lorg/quartz/spi/SchedulerSignaler;)V
+#pauseAll()V
+#pauseJob(Lorg/quartz/JobKey;)V
+#pauseJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#pauseTrigger(Lorg/quartz/TriggerKey;)V
+#pauseTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#releaseAcquiredTrigger(Lorg/quartz/spi/OperableTrigger;)V
+#triggersFired(Ljava/util/List;)Ljava/util/List;
+#removeCalendar(Ljava/lang/String;)Z
+#removeJob(Lorg/quartz/JobKey;)Z
+#removeTrigger(Lorg/quartz/TriggerKey;)Z
+#removeJobs(Ljava/util/List;)Z
+#removeTriggers(Ljava/util/List;)Z
+#storeJobsAndTriggers(Ljava/util/Map;Z)V
+#replaceTrigger(Lorg/quartz/TriggerKey;Lorg/quartz/spi/OperableTrigger;)Z
+#resumeAll()V
+#resumeJob(Lorg/quartz/JobKey;)V
+#resumeJobs(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#resumeTrigger(Lorg/quartz/TriggerKey;)V
+#resumeTriggers(Lorg/quartz/impl/matchers/GroupMatcher;)Ljava/util/Collection;
+#retrieveCalendar(Ljava/lang/String;)Lorg/quartz/Calendar;
+#retrieveJob(Lorg/quartz/JobKey;)Lorg/quartz/JobDetail;
+#retrieveTrigger(Lorg/quartz/TriggerKey;)Lorg/quartz/spi/OperableTrigger;
+#checkExists(Lorg/quartz/JobKey;)Z
+#checkExists(Lorg/quartz/TriggerKey;)Z
+#clearAllSchedulingData()V
+#schedulerStarted()V
+#schedulerPaused()V
+#schedulerResumed()V
+#shutdown()V
+#storeCalendar(Ljava/lang/String;Lorg/quartz/Calendar;ZZ)V
+#storeJob(Lorg/quartz/JobDetail;Z)V
+#storeJobAndTrigger(Lorg/quartz/JobDetail;Lorg/quartz/spi/OperableTrigger;)V
+#storeTrigger(Lorg/quartz/spi/OperableTrigger;Z)V
+#supportsPersistence()Z
+#toString()Ljava/lang/String;
+#triggeredJobComplete(Lorg/quartz/spi/OperableTrigger;Lorg/quartz/JobDetail;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#setMisfireThreshold(J)V
+#setEstimatedTimeToReleaseAndAcquireTrigger(J)V
+#setInstanceId(Ljava/lang/String;)V
+#setInstanceName(Ljava/lang/String;)V
+#getUUID()Ljava/lang/String;
+#getEstimatedTimeToReleaseAndAcquireTrigger()J
+#isClustered()Z
+#getName()Ljava/lang/String;
+#jobToBeExecuted(Lorg/quartz/JobExecutionContext;)V
+#jobExecutionVetoed(Lorg/quartz/JobExecutionContext;)V
+#jobWasExecuted(Lorg/quartz/JobExecutionContext;Lorg/quartz/JobExecutionException;)V
@2.2.1
+#setTcRetryInterval(J)V
@2.3.0
+#resetTriggerFromErrorState(Lorg/quartz/TriggerKey;)V
+#getAcquireRetryDelay(I)J

+###org/terracotta/quartz/TerracottaJobStore
@2.2.0
+#<init>()V

+###org/terracotta/quartz/TerracottaJobStoreExtensions
@2.2.0
+#setMisfireThreshold(J)V
+#setEstimatedTimeToReleaseAndAcquireTrigger(J)V
+#setSynchronousWrite(Ljava/lang/String;)V
+#setThreadPoolSize(I)V
+#getUUID()Ljava/lang/String;
@2.2.1
+#setTcRetryInterval(J)V

+###org/terracotta/quartz/TerracottaToolkitBuilder
@2.2.0
+#<init>()V
+#buildToolkit()Lorg/terracotta/toolkit/Toolkit;
+#addTunnelledMBeanDomain(Ljava/lang/String;)Lorg/terracotta/quartz/TerracottaToolkitBuilder;
+#getTunnelledMBeanDomains()Ljava/util/Set;
+#removeTunnelledMBeanDomain(Ljava/lang/String;)Lorg/terracotta/quartz/TerracottaToolkitBuilder;
+#setTCConfigSnippet(Ljava/lang/String;)Lorg/terracotta/quartz/TerracottaToolkitBuilder;
+#getTCConfigSnippet()Ljava/lang/String;
+#setTCConfigUrl(Ljava/lang/String;)Lorg/terracotta/quartz/TerracottaToolkitBuilder;
+#getTCConfigUrl()Ljava/lang/String;
+#isConfigUrl()Z
@2.2.1
+#setRejoin(Ljava/lang/String;)Lorg/terracotta/quartz/TerracottaToolkitBuilder;
+#isRejoin()Z

+###org/terracotta/quartz/UpdateChecker
@2.2.0
+#<init>()V
+#run()V
+#checkForUpdate()V
+#main([Ljava/lang/String;)V
@2.3.0
-###org/terracotta/quartz/UpdateChecker

+###org/terracotta/quartz/collections/SerializationHelper
@2.2.0
+#<init>()V
+#serialize(Ljava/lang/Object;)[B
+#deserialize([B)Ljava/lang/Object;
+#deserializeFromString(Ljava/lang/String;)Ljava/lang/Object;
+#serializeToString(Ljava/lang/Object;)Ljava/lang/String;

+###org/terracotta/quartz/collections/SerializedToolkitStore
@2.2.0
+#<init>(Lorg/terracotta/toolkit/store/ToolkitStore;)V
+#size()I
+#isEmpty()Z
+#containsKey(Ljava/lang/Object;)Z
+#get(Ljava/lang/Object;)Ljava/io/Serializable;
+#put(Ljava/lang/Object;Ljava/io/Serializable;)Ljava/io/Serializable;
+#remove(Ljava/lang/Object;)Ljava/io/Serializable;
+#putAll(Ljava/util/Map;)V
+#clear()V
+#keySet()Ljava/util/Set;
+#isDestroyed()Z
+#destroy()V
+#getName()Ljava/lang/String;
+#createLockForKey(Ljava/lang/Object;)Lorg/terracotta/toolkit/concurrent/locks/ToolkitReadWriteLock;
+#removeNoReturn(Ljava/lang/Object;)V
+#putNoReturn(Ljava/lang/Object;Ljava/io/Serializable;)V
+#getAll(Ljava/util/Collection;)Ljava/util/Map;
+#getConfiguration()Lorg/terracotta/toolkit/config/Configuration;
+#setConfigField(Ljava/lang/String;Ljava/io/Serializable;)V
+#containsValue(Ljava/lang/Object;)Z
+#putIfAbsent(Ljava/lang/Object;Ljava/io/Serializable;)Ljava/io/Serializable;
+#entrySet()Ljava/util/Set;
+#values()Ljava/util/Collection;
+#remove(Ljava/lang/Object;Ljava/lang/Object;)Z
+#replace(Ljava/lang/Object;Ljava/io/Serializable;Ljava/io/Serializable;)Z
+#replace(Ljava/lang/Object;Ljava/io/Serializable;)Ljava/io/Serializable;
+#setAttributeExtractor(Lorg/terracotta/toolkit/search/attribute/ToolkitAttributeExtractor;)V
+#createQueryBuilder()Lorg/terracotta/toolkit/search/QueryBuilder;
+#putNoReturn(Ljava/lang/Object;Ljava/lang/Object;)V
+#replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
+#putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#remove(Ljava/lang/Object;)Ljava/lang/Object;
+#put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#get(Ljava/lang/Object;)Ljava/lang/Object;
@2.2.2
+#isBulkLoadEnabled()Z
+#isNodeBulkLoadEnabled()Z
+#setNodeBulkLoadEnabled(Z)V
+#waitUntilBulkLoadComplete()V

+###org/terracotta/quartz/collections/TimeTrigger
@2.2.0
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#compareTo(Lorg/terracotta/quartz/collections/TimeTrigger;)I
+#compareTo(Ljava/lang/Object;)I

+###org/terracotta/quartz/collections/TimeTriggerSet
@2.2.0
+#<init>(Lorg/terracotta/toolkit/collections/ToolkitSortedSet;)V
+#add(Lorg/terracotta/quartz/wrappers/TriggerWrapper;)Z
+#remove(Lorg/terracotta/quartz/wrappers/TriggerWrapper;)Z
+#removeFirst()Lorg/quartz/TriggerKey;
+#isDestroyed()Z
+#destroy()V
+#size()I

+###org/terracotta/quartz/collections/ToolkitDSHolder
@2.2.0
+#<init>(Ljava/lang/String;Lorg/terracotta/toolkit/Toolkit;)V
+#getOrCreateJobsMap()Lorg/terracotta/quartz/collections/SerializedToolkitStore;
+#getOrCreateTriggersMap()Lorg/terracotta/quartz/collections/SerializedToolkitStore;
+#getOrCreateFiredTriggersMap()Lorg/terracotta/toolkit/store/ToolkitStore;
+#getOrCreateCalendarWrapperMap()Lorg/terracotta/toolkit/store/ToolkitStore;
+#getOrCreateAllGroupsSet()Ljava/util/Set;
+#getOrCreateBlockedJobsSet()Ljava/util/Set;
+#getOrCreatePausedGroupsSet()Ljava/util/Set;
+#getOrCreatePausedTriggerGroupsSet()Ljava/util/Set;
+#getOrCreateJobsGroupMap(Ljava/lang/String;)Ljava/util/Set;
+#removeJobsGroupMap(Ljava/lang/String;)V
+#getOrCreateTriggersGroupMap(Ljava/lang/String;)Ljava/util/Set;
+#removeTriggersGroupMap(Ljava/lang/String;)V
+#getOrCreateAllTriggersGroupsSet()Ljava/util/Set;
+#getOrCreateTimeTriggerSet()Lorg/terracotta/quartz/collections/TimeTriggerSet;
+#getLock(Lorg/terracotta/toolkit/internal/concurrent/locks/ToolkitLockTypeInternal;)Lorg/terracotta/toolkit/concurrent/locks/ToolkitLock;

+###org/terracotta/quartz/wrappers/DefaultWrapperFactory
@2.2.0
+#<init>()V
+#createJobWrapper(Lorg/quartz/JobDetail;)Lorg/terracotta/quartz/wrappers/JobWrapper;
+#createTriggerWrapper(Lorg/quartz/spi/OperableTrigger;Z)Lorg/terracotta/quartz/wrappers/TriggerWrapper;

+###org/terracotta/quartz/wrappers/FiredTrigger
@2.2.0
+#<init>(Ljava/lang/String;Lorg/quartz/TriggerKey;J)V
+#getClientId()Ljava/lang/String;
+#getTriggerKey()Lorg/quartz/TriggerKey;
+#getScheduledFireTime()J
+#getFireTime()J
+#toString()Ljava/lang/String;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
@2.2.2
+#<init>(Ljava/lang/String;Lorg/quartz/TriggerKey;JJ)V

+###org/terracotta/quartz/wrappers/JobFacade
@2.2.0
+#<init>(Lorg/terracotta/quartz/collections/ToolkitDSHolder;)V
+#get(Lorg/quartz/JobKey;)Lorg/terracotta/quartz/wrappers/JobWrapper;
+#put(Lorg/quartz/JobKey;Lorg/terracotta/quartz/wrappers/JobWrapper;)V
+#containsKey(Lorg/quartz/JobKey;)Z
+#hasGroup(Ljava/lang/String;)Z
+#addGroup(Ljava/lang/String;)Z
+#addPausedGroup(Ljava/lang/String;)Z
+#remove(Lorg/quartz/JobKey;)Lorg/terracotta/quartz/wrappers/JobWrapper;
+#removeGroup(Ljava/lang/String;)Z
+#pausedGroupsContain(Ljava/lang/String;)Z
+#blockedJobsContain(Lorg/quartz/JobKey;)Z
+#numberOfJobs()I
+#getAllGroupNames()Ljava/util/Set;
+#removePausedJobGroup(Ljava/lang/String;)Z
+#clearPausedJobGroups()V
+#addBlockedJob(Lorg/quartz/JobKey;)V
+#removeBlockedJob(Lorg/quartz/JobKey;)Z

+###org/terracotta/quartz/wrappers/JobWrapper
@2.2.0
+#getKey()Lorg/quartz/JobKey;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#requestsRecovery()Z
+#isPersistJobDataAfterExecution()Z
+#isConcurrentExectionDisallowed()Z
+#isDurable()Z
+#getJobDetailClone()Lorg/quartz/JobDetail;
+#setJobDataMap(Lorg/quartz/JobDataMap;Lorg/terracotta/quartz/wrappers/JobFacade;)V
+#getJobDataMapClone()Lorg/quartz/JobDataMap;
+#isInstanceof(Ljava/lang/Class;)Z

+###org/terracotta/quartz/wrappers/TriggerFacade
@2.2.0
+#<init>(Lorg/terracotta/quartz/collections/ToolkitDSHolder;)V
+#get(Lorg/quartz/TriggerKey;)Lorg/terracotta/quartz/wrappers/TriggerWrapper;
+#containsKey(Lorg/quartz/TriggerKey;)Z
+#put(Lorg/quartz/TriggerKey;Lorg/terracotta/quartz/wrappers/TriggerWrapper;)V
+#remove(Lorg/quartz/TriggerKey;)Lorg/terracotta/quartz/wrappers/TriggerWrapper;
+#getFiredTrigger(Ljava/lang/String;)Lorg/terracotta/quartz/wrappers/FiredTrigger;
+#containsFiredTrigger(Ljava/lang/String;)Z
+#putFiredTrigger(Ljava/lang/String;Lorg/terracotta/quartz/wrappers/FiredTrigger;)V
+#removeFiredTrigger(Ljava/lang/String;)Lorg/terracotta/quartz/wrappers/FiredTrigger;
+#addGroup(Ljava/lang/String;)Z
+#hasGroup(Ljava/lang/String;)Z
+#removeGroup(Ljava/lang/String;)Z
+#addPausedGroup(Ljava/lang/String;)Z
+#pausedGroupsContain(Ljava/lang/String;)Z
+#removePausedGroup(Ljava/lang/String;)Z
+#allTriggersGroupNames()Ljava/util/Set;
+#allPausedTriggersGroupNames()Ljava/util/Set;
+#allTriggerKeys()Ljava/util/Set;
+#allFiredTriggers()Ljava/util/Collection;
+#numberOfTriggers()I
+#getTriggerWrappersForJob(Lorg/quartz/JobKey;)Ljava/util/List;
+#getTriggerWrappersForCalendar(Ljava/lang/String;)Ljava/util/List;
+#removeAllPausedGroups(Ljava/util/Collection;)V

+###org/terracotta/quartz/wrappers/TriggerWrapper$TriggerState
@2.2.0
+#values()[Lorg/terracotta/quartz/wrappers/TriggerWrapper$TriggerState;
+#valueOf(Ljava/lang/String;)Lorg/terracotta/quartz/wrappers/TriggerWrapper$TriggerState;

+###org/terracotta/quartz/wrappers/TriggerWrapper
@2.2.0
+#jobDisallowsConcurrence()Z
+#getLastTerracotaClientId()Ljava/lang/String;
+#hashCode()I
+#toString()Ljava/lang/String;
+#getKey()Lorg/quartz/TriggerKey;
+#getJobKey()Lorg/quartz/JobKey;
+#setState(Lorg/terracotta/quartz/wrappers/TriggerWrapper$TriggerState;Ljava/lang/String;Lorg/terracotta/quartz/wrappers/TriggerFacade;)V
+#getState()Lorg/terracotta/quartz/wrappers/TriggerWrapper$TriggerState;
+#getNextFireTime()Ljava/util/Date;
+#getPriority()I
+#mayFireAgain()Z
+#getTriggerClone()Lorg/quartz/spi/OperableTrigger;
+#updateWithNewCalendar(Lorg/quartz/Calendar;JLorg/terracotta/quartz/wrappers/TriggerFacade;)V
+#getCalendarName()Ljava/lang/String;
+#getMisfireInstruction()I
+#updateAfterMisfire(Lorg/quartz/Calendar;Lorg/terracotta/quartz/wrappers/TriggerFacade;)V
+#setFireInstanceId(Ljava/lang/String;Lorg/terracotta/quartz/wrappers/TriggerFacade;)V
+#triggered(Lorg/quartz/Calendar;Lorg/terracotta/quartz/wrappers/TriggerFacade;)V
+#isInstanceof(Ljava/lang/Class;)Z

+###org/terracotta/quartz/wrappers/WrapperFactory
@2.2.0
+#createJobWrapper(Lorg/quartz/JobDetail;)Lorg/terracotta/quartz/wrappers/JobWrapper;
+#createTriggerWrapper(Lorg/quartz/spi/OperableTrigger;Z)Lorg/terracotta/quartz/wrappers/TriggerWrapper;

+###org/quartz/impl/jdbcjobstore/JobStoreSupport$TransactionValidator
@2.2.1
+#validate(Ljava/sql/Connection;Ljava/lang/Object;)Ljava/lang/Boolean;

+###org/quartz/xml/JobSchedulingDataProcessor$TriggerRuleSet
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;Ljava/lang/String;Ljava/lang/Class;)V
+#addRuleInstances(Lorg/apache/commons/digester/Digester;)V
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$TriggerRuleSet

+###org/quartz/xml/CalendarBundle
@1.7.2
+#<init>()V
+#clone()Ljava/lang/Object;
+#getCalendarName()Ljava/lang/String;
+#setCalendarName(Ljava/lang/String;)V
+#getClassName()Ljava/lang/String;
+#setClassName(Ljava/lang/String;)V
+#getCalendar()Lorg/quartz/Calendar;
+#setCalendar(Lorg/quartz/Calendar;)V
+#getReplace()Z
+#setReplace(Z)V
+#getBaseCalendar()Lorg/quartz/Calendar;
+#setBaseCalendar(Lorg/quartz/Calendar;)V
+#getDescription()Ljava/lang/String;
+#setDescription(Ljava/lang/String;)V
+#isTimeIncluded(J)Z
+#getNextIncludedTime(J)J
@1.8.0
-###org/quartz/xml/CalendarBundle

+###org/quartz/xml/JobSchedulingDataProcessor$DateConverter
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;)V
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;Ljava/lang/Object;)V
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;[Ljava/lang/String;)V
+#convert(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$DateConverter

+###org/quartz/xml/JobSchedulingBundle
@1.7.2
+#<init>()V
+#getJobDetail()Lorg/quartz/JobDetail;
+#setJobDetail(Lorg/quartz/JobDetail;)V
+#getTriggers()Ljava/util/List;
+#setTriggers(Ljava/util/List;)V
+#addTrigger(Lorg/quartz/Trigger;)V
+#removeTrigger(Lorg/quartz/Trigger;)V
+#getName()Ljava/lang/String;
+#getFullName()Ljava/lang/String;
+#isValid()Z
@1.8.0
-###org/quartz/xml/JobSchedulingBundle

+###org/quartz/xml/JobSchedulingDataProcessor$MisfireInstructionRule
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;Ljava/lang/String;)V
+#body(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$MisfireInstructionRule

+###org/quartz/xml/JobSchedulingDataProcessor$CalendarRuleSet
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;Ljava/lang/String;Ljava/lang/String;)V
+#addRuleInstances(Lorg/apache/commons/digester/Digester;)V
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$CalendarRuleSet

+###org/quartz/xml/JobSchedulingDataProcessor$TimeZoneConverter
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;)V
+#convert(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$TimeZoneConverter

+###org/quartz/xml/JobSchedulingDataProcessor$SimpleConverterRule
@1.7.2
+#<init>(Lorg/quartz/xml/JobSchedulingDataProcessor;Ljava/lang/String;Lorg/apache/commons/beanutils/Converter;Ljava/lang/Class;)V
+#end(Ljava/lang/String;Ljava/lang/String;)V
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor$SimpleConverterRule

+###org/quartz/xml/JobSchedulingDataProcessor
@1.7.2
+#<init>(Lorg/quartz/spi/ClassLoadHelper;ZZ)V
+#getUseContextClassLoader()Z
+#setUseContextClassLoader(Z)V
+#getOverWriteExistingJobs()Z
+#setOverWriteExistingJobs(Z)V
+#processFile()V
+#processFile(Ljava/lang/String;)V
+#processFile(Ljava/lang/String;Ljava/lang/String;)V
+#processStream(Ljava/io/InputStream;Ljava/lang/String;)V
+#processFileAndScheduleJobs(Lorg/quartz/Scheduler;Z)V
+#processFileAndScheduleJobs(Ljava/lang/String;Lorg/quartz/Scheduler;Z)V
+#processFileAndScheduleJobs(Ljava/lang/String;Ljava/lang/String;Lorg/quartz/Scheduler;Z)V
+#scheduleJobs(Ljava/util/Map;Lorg/quartz/Scheduler;Z)V
+#getScheduledJobs()Ljava/util/Map;
+#getScheduledJob(Ljava/lang/String;)Lorg/quartz/xml/JobSchedulingBundle;
+#scheduleJob(Lorg/quartz/xml/JobSchedulingBundle;)V
+#addJobToSchedule(Lorg/quartz/xml/JobSchedulingBundle;)V
+#addCalendarToSchedule(Lorg/quartz/xml/CalendarBundle;)V
+#addListenerToSchedule(Lorg/quartz/JobListener;)V
+#scheduleJob(Lorg/quartz/xml/JobSchedulingBundle;Lorg/quartz/Scheduler;Z)V
+#addCalendar(Lorg/quartz/Scheduler;Lorg/quartz/xml/CalendarBundle;)V
+#resolveEntity(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;
+#warning(Lorg/xml/sax/SAXParseException;)V
+#error(Lorg/xml/sax/SAXParseException;)V
+#fatalError(Lorg/xml/sax/SAXParseException;)V
@1.8.0
-###org/quartz/xml/JobSchedulingDataProcessor

+###org/quartz/plugins/xml/JobInitializationPlugin
@1.7.2
+#<init>()V
+#getFileNames()Ljava/lang/String;
+#setFileNames(Ljava/lang/String;)V
+#isOverWriteExistingJobs()Z
+#setOverWriteExistingJobs(Z)V
+#getScanInterval()J
+#setScanInterval(J)V
+#isFailOnFileNotFound()Z
+#setFailOnFileNotFound(Z)V
+#isValidating()Z
+#setValidating(Z)V
+#isValidatingSchema()Z
+#setValidatingSchema(Z)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;)V
+#start(Ljavax/transaction/UserTransaction;)V
+#shutdown()V
+#processFile(Ljava/lang/String;)V
+#fileUpdated(Ljava/lang/String;)V
@1.8.0
-###org/quartz/plugins/xml/JobInitializationPlugin

+###org/quartz/utils/ExceptionHelper
@1.7.2
+#setCause(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
+#getCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;
+#supportsNestedThrowable()Z
@1.8.0
-###org/quartz/utils/ExceptionHelper

+###org/quartz/plugins/interrupt/JobInterruptMonitorPlugin
@2.3.0
+#<init>()V
+#start()V
+#shutdown()V
+#scheduleJobInterruptMonitor(Lorg/quartz/JobKey;J)Ljava/util/concurrent/ScheduledFuture;
+#getDefaultMaxRunTime()J
+#setDefaultMaxRunTime(J)V
+#getName()Ljava/lang/String;
+#triggerFired(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;)V
+#triggerComplete(Lorg/quartz/Trigger;Lorg/quartz/JobExecutionContext;Lorg/quartz/Trigger$CompletedExecutionInstruction;)V
+#initialize(Ljava/lang/String;Lorg/quartz/Scheduler;Lorg/quartz/spi/ClassLoadHelper;)V

+###org/quartz/utils/C3p0PoolingConnectionProvider
@2.3.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
+#<init>(Ljava/util/Properties;)V
+#getDataSource()Lcom/mchange/v2/c3p0/ComboPooledDataSource;
+#getConnection()Ljava/sql/Connection;
+#shutdown()V
+#initialize()V
+#getDataSource()Ljavax/sql/DataSource;

+###org/quartz/utils/HikariCpPoolingConnectionProvider
@2.3.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
+#<init>(Ljava/util/Properties;)V
+#getDataSource()Lcom/zaxxer/hikari/HikariDataSource;
+#getConnection()Ljava/sql/Connection;
+#shutdown()V
+#initialize()V
+#getDataSource()Ljavax/sql/DataSource;
