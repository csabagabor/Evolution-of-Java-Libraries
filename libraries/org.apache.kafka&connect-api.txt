
+###org/apache/kafka/connect/connector/Connector
@0.9.0.0
+#<init>()V
+#version()Ljava/lang/String;
+#initialize(Lorg/apache/kafka/connect/connector/ConnectorContext;)V
+#initialize(Lorg/apache/kafka/connect/connector/ConnectorContext;Ljava/util/List;)V
+#start(Ljava/util/Map;)V
+#reconfigure(Ljava/util/Map;)V
+#taskClass()Ljava/lang/Class;
+#taskConfigs(I)Ljava/util/List;
+#stop()V
@0.10.0.0
+#validate(Ljava/util/Map;)Lorg/apache/kafka/common/config/Config;
+#config()Lorg/apache/kafka/common/config/ConfigDef;
@2.0.0
-#version()Ljava/lang/String;

+###org/apache/kafka/connect/connector/ConnectorContext
@0.9.0.0
+#requestTaskReconfiguration()V
@0.10.0.0
+#raiseError(Ljava/lang/Exception;)V

+###org/apache/kafka/connect/connector/ConnectRecord
@0.9.0.0
+#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#topic()Ljava/lang/String;
+#kafkaPartition()Ljava/lang/Integer;
+#key()Ljava/lang/Object;
+#keySchema()Lorg/apache/kafka/connect/data/Schema;
+#value()Ljava/lang/Object;
+#valueSchema()Lorg/apache/kafka/connect/data/Schema;
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@0.10.1.0
+#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)V
+#timestamp()Ljava/lang/Long;
-#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
-#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
@0.10.2.0
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)Lorg/apache/kafka/connect/connector/ConnectRecord;
@1.1.0
+#<init>(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)V
+#headers()Lorg/apache/kafka/connect/header/Headers;
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)Lorg/apache/kafka/connect/connector/ConnectRecord;

+###org/apache/kafka/connect/connector/Task
@0.9.0.0
+#version()Ljava/lang/String;
+#start(Ljava/util/Map;)V
+#stop()V

+###org/apache/kafka/connect/data/ConnectSchema
@0.9.0.0
+#<init>(Lorg/apache/kafka/connect/data/Schema$Type;ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/Map;Ljava/util/List;Lorg/apache/kafka/connect/data/Schema;Lorg/apache/kafka/connect/data/Schema;)V
+#<init>(Lorg/apache/kafka/connect/data/Schema$Type;ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;)V
+#<init>(Lorg/apache/kafka/connect/data/Schema$Type;)V
+#type()Lorg/apache/kafka/connect/data/Schema$Type;
+#isOptional()Z
+#defaultValue()Ljava/lang/Object;
+#name()Ljava/lang/String;
+#version()Ljava/lang/Integer;
+#doc()Ljava/lang/String;
+#parameters()Ljava/util/Map;
+#fields()Ljava/util/List;
+#field(Ljava/lang/String;)Lorg/apache/kafka/connect/data/Field;
+#keySchema()Lorg/apache/kafka/connect/data/Schema;
+#valueSchema()Lorg/apache/kafka/connect/data/Schema;
+#validateValue(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#validateValue(Ljava/lang/Object;)V
+#schema()Lorg/apache/kafka/connect/data/ConnectSchema;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#schemaType(Ljava/lang/Class;)Lorg/apache/kafka/connect/data/Schema$Type;
+#schema()Lorg/apache/kafka/connect/data/Schema;
@0.11.0.0
+#validateValue(Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V

+###org/apache/kafka/connect/data/Date
@0.9.0.0
+#<init>()V
+#builder()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#fromLogical(Lorg/apache/kafka/connect/data/Schema;Ljava/util/Date;)I
+#toLogical(Lorg/apache/kafka/connect/data/Schema;I)Ljava/util/Date;

+###org/apache/kafka/connect/data/Decimal
@0.9.0.0
+#<init>()V
+#builder(I)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#schema(I)Lorg/apache/kafka/connect/data/Schema;
+#fromLogical(Lorg/apache/kafka/connect/data/Schema;Ljava/math/BigDecimal;)[B
+#toLogical(Lorg/apache/kafka/connect/data/Schema;[B)Ljava/math/BigDecimal;

+###org/apache/kafka/connect/data/Field
@0.9.0.0
+#<init>(Ljava/lang/String;ILorg/apache/kafka/connect/data/Schema;)V
+#name()Ljava/lang/String;
+#index()I
+#schema()Lorg/apache/kafka/connect/data/Schema;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@2.0.0
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/data/Schema$Type
@0.9.0.0
+#values()[Lorg/apache/kafka/connect/data/Schema$Type;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/data/Schema$Type;
+#getName()Ljava/lang/String;
+#isPrimitive()Z

+###org/apache/kafka/connect/data/Schema
@0.9.0.0
+#type()Lorg/apache/kafka/connect/data/Schema$Type;
+#isOptional()Z
+#defaultValue()Ljava/lang/Object;
+#name()Ljava/lang/String;
+#version()Ljava/lang/Integer;
+#doc()Ljava/lang/String;
+#parameters()Ljava/util/Map;
+#keySchema()Lorg/apache/kafka/connect/data/Schema;
+#valueSchema()Lorg/apache/kafka/connect/data/Schema;
+#fields()Ljava/util/List;
+#field(Ljava/lang/String;)Lorg/apache/kafka/connect/data/Field;
+#schema()Lorg/apache/kafka/connect/data/Schema;

+###org/apache/kafka/connect/data/SchemaAndValue
@0.9.0.0
+#<init>(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#schema()Lorg/apache/kafka/connect/data/Schema;
+#value()Ljava/lang/Object;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/data/SchemaBuilder
@0.9.0.0
+#isOptional()Z
+#optional()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#required()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#defaultValue()Ljava/lang/Object;
+#defaultValue(Ljava/lang/Object;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#name()Ljava/lang/String;
+#name(Ljava/lang/String;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#version()Ljava/lang/Integer;
+#version(Ljava/lang/Integer;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#doc()Ljava/lang/String;
+#doc(Ljava/lang/String;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#parameters()Ljava/util/Map;
+#parameter(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#parameters(Ljava/util/Map;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#type()Lorg/apache/kafka/connect/data/Schema$Type;
+#type(Lorg/apache/kafka/connect/data/Schema$Type;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#int8()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#int16()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#int32()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#int64()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#float32()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#float64()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#bool()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#string()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#bytes()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#struct()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#field(Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#fields()Ljava/util/List;
+#field(Ljava/lang/String;)Lorg/apache/kafka/connect/data/Field;
+#array(Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#map(Lorg/apache/kafka/connect/data/Schema;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/data/SchemaBuilder;
+#keySchema()Lorg/apache/kafka/connect/data/Schema;
+#valueSchema()Lorg/apache/kafka/connect/data/Schema;
+#build()Lorg/apache/kafka/connect/data/Schema;
+#schema()Lorg/apache/kafka/connect/data/Schema;
@0.11.0.0
+#<init>(Lorg/apache/kafka/connect/data/Schema$Type;)V

+###org/apache/kafka/connect/data/SchemaProjector
@0.9.0.0
+#<init>()V
+#project(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;)Ljava/lang/Object;

+###org/apache/kafka/connect/data/Struct
@0.9.0.0
+#<init>(Lorg/apache/kafka/connect/data/Schema;)V
+#schema()Lorg/apache/kafka/connect/data/Schema;
+#get(Ljava/lang/String;)Ljava/lang/Object;
+#get(Lorg/apache/kafka/connect/data/Field;)Ljava/lang/Object;
+#getWithoutDefault(Ljava/lang/String;)Ljava/lang/Object;
+#getInt8(Ljava/lang/String;)Ljava/lang/Byte;
+#getInt16(Ljava/lang/String;)Ljava/lang/Short;
+#getInt32(Ljava/lang/String;)Ljava/lang/Integer;
+#getInt64(Ljava/lang/String;)Ljava/lang/Long;
+#getFloat32(Ljava/lang/String;)Ljava/lang/Float;
+#getFloat64(Ljava/lang/String;)Ljava/lang/Double;
+#getBoolean(Ljava/lang/String;)Ljava/lang/Boolean;
+#getString(Ljava/lang/String;)Ljava/lang/String;
+#getBytes(Ljava/lang/String;)[B
+#getArray(Ljava/lang/String;)Ljava/util/List;
+#getMap(Ljava/lang/String;)Ljava/util/Map;
+#getStruct(Ljava/lang/String;)Lorg/apache/kafka/connect/data/Struct;
+#put(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/kafka/connect/data/Struct;
+#put(Lorg/apache/kafka/connect/data/Field;Ljava/lang/Object;)Lorg/apache/kafka/connect/data/Struct;
+#validate()V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@0.10.1.0
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/data/Time
@0.9.0.0
+#<init>()V
+#builder()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#fromLogical(Lorg/apache/kafka/connect/data/Schema;Ljava/util/Date;)I
+#toLogical(Lorg/apache/kafka/connect/data/Schema;I)Ljava/util/Date;

+###org/apache/kafka/connect/data/Timestamp
@0.9.0.0
+#<init>()V
+#builder()Lorg/apache/kafka/connect/data/SchemaBuilder;
+#fromLogical(Lorg/apache/kafka/connect/data/Schema;Ljava/util/Date;)J
+#toLogical(Lorg/apache/kafka/connect/data/Schema;J)Ljava/util/Date;

+###org/apache/kafka/connect/errors/AlreadyExistsException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/ConnectException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/DataException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/IllegalWorkerStateException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/NotFoundException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/RetriableException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/SchemaBuilderException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/errors/SchemaProjectorException
@0.9.0.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/Throwable;)V

+###org/apache/kafka/connect/sink/SinkConnector
@0.9.0.0
+#<init>()V

+###org/apache/kafka/connect/sink/SinkRecord
@0.9.0.0
+#<init>(Ljava/lang/String;ILorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;J)V
+#kafkaOffset()J
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@0.10.1.0
+#<init>(Ljava/lang/String;ILorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;JLjava/lang/Long;Lorg/apache/kafka/common/record/TimestampType;)V
+#timestampType()Lorg/apache/kafka/common/record/TimestampType;
@0.10.2.0
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)Lorg/apache/kafka/connect/sink/SinkRecord;
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)Lorg/apache/kafka/connect/connector/ConnectRecord;
@1.1.0
+#<init>(Ljava/lang/String;ILorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;JLjava/lang/Long;Lorg/apache/kafka/common/record/TimestampType;Ljava/lang/Iterable;)V
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)Lorg/apache/kafka/connect/sink/SinkRecord;
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)Lorg/apache/kafka/connect/connector/ConnectRecord;

+###org/apache/kafka/connect/sink/SinkTask
@0.9.0.0
+#<init>()V
+#initialize(Lorg/apache/kafka/connect/sink/SinkTaskContext;)V
+#start(Ljava/util/Map;)V
+#put(Ljava/util/Collection;)V
+#flush(Ljava/util/Map;)V
+#onPartitionsAssigned(Ljava/util/Collection;)V
+#onPartitionsRevoked(Ljava/util/Collection;)V
+#stop()V
@0.10.0.0
+#open(Ljava/util/Collection;)V
*#onPartitionsAssigned(Ljava/util/Collection;)V[deprecated]
+#close(Ljava/util/Collection;)V
*#onPartitionsRevoked(Ljava/util/Collection;)V[deprecated]
@0.10.2.0
+#preCommit(Ljava/util/Map;)Ljava/util/Map;

+###org/apache/kafka/connect/sink/SinkTaskContext
@0.9.0.0
+#offset(Ljava/util/Map;)V
+#offset(Lorg/apache/kafka/common/TopicPartition;J)V
+#timeout(J)V
+#assignment()Ljava/util/Set;
+#pause([Lorg/apache/kafka/common/TopicPartition;)V
+#resume([Lorg/apache/kafka/common/TopicPartition;)V
@0.10.2.0
+#requestCommit()V
@2.0.0
+#configs()Ljava/util/Map;
@2.6.0
+#errantRecordReporter()Lorg/apache/kafka/connect/sink/ErrantRecordReporter;

+###org/apache/kafka/connect/source/SourceConnector
@0.9.0.0
+#<init>()V
@3.3.0
+#exactlyOnceSupport(Ljava/util/Map;)Lorg/apache/kafka/connect/source/ExactlyOnceSupport;
+#canDefineTransactionBoundaries(Ljava/util/Map;)Lorg/apache/kafka/connect/source/ConnectorTransactionBoundaries;

+###org/apache/kafka/connect/source/SourceRecord
@0.9.0.0
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
+#sourcePartition()Ljava/util/Map;
+#sourceOffset()Ljava/util/Map;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@0.10.0.0
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)V
@0.10.1.0
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)V
@0.10.2.0
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)Lorg/apache/kafka/connect/source/SourceRecord;
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;)Lorg/apache/kafka/connect/connector/ConnectRecord;
@1.1.0
+#<init>(Ljava/util/Map;Ljava/util/Map;Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)V
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)Lorg/apache/kafka/connect/source/SourceRecord;
+#newRecord(Ljava/lang/String;Ljava/lang/Integer;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;Ljava/lang/Long;Ljava/lang/Iterable;)Lorg/apache/kafka/connect/connector/ConnectRecord;

+###org/apache/kafka/connect/source/SourceTask
@0.9.0.0
+#<init>()V
+#initialize(Lorg/apache/kafka/connect/source/SourceTaskContext;)V
+#start(Ljava/util/Map;)V
+#poll()Ljava/util/List;
+#commit()V
+#stop()V
@0.10.0.0
+#commitRecord(Lorg/apache/kafka/connect/source/SourceRecord;)V
@2.4.0
+#commitRecord(Lorg/apache/kafka/connect/source/SourceRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
@2.6.0
*#commitRecord(Lorg/apache/kafka/connect/source/SourceRecord;)V[deprecated]

+###org/apache/kafka/connect/source/SourceTaskContext
@0.9.0.0
+#offsetStorageReader()Lorg/apache/kafka/connect/storage/OffsetStorageReader;
@2.0.0
+#configs()Ljava/util/Map;
@3.3.0
+#transactionContext()Lorg/apache/kafka/connect/source/TransactionContext;

+###org/apache/kafka/connect/storage/Converter
@0.9.0.0
+#configure(Ljava/util/Map;Z)V
+#fromConnectData(Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#toConnectData(Ljava/lang/String;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
@2.4.0
+#fromConnectData(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#toConnectData(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
@3.2.0
+#config()Lorg/apache/kafka/common/config/ConfigDef;

+###org/apache/kafka/connect/storage/OffsetStorageReader
@0.9.0.0
+#offset(Ljava/util/Map;)Ljava/util/Map;
+#offsets(Ljava/util/Collection;)Ljava/util/Map;

+###org/apache/kafka/connect/storage/StringConverter
@0.9.0.0
+#<init>()V
+#configure(Ljava/util/Map;Z)V
+#fromConnectData(Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#toConnectData(Ljava/lang/String;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
@1.1.0
+#config()Lorg/apache/kafka/common/config/ConfigDef;
+#configure(Ljava/util/Map;)V
+#fromConnectHeader(Ljava/lang/String;Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#toConnectHeader(Ljava/lang/String;Ljava/lang/String;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
+#close()V

+###org/apache/kafka/connect/transforms/Transformation
@0.10.2.0
+#apply(Lorg/apache/kafka/connect/connector/ConnectRecord;)Lorg/apache/kafka/connect/connector/ConnectRecord;
+#config()Lorg/apache/kafka/common/config/ConfigDef;
+#close()V

+###org/apache/kafka/connect/util/ConnectorUtils
@0.9.0.0
+#<init>()V
+#groupPartitions(Ljava/util/List;I)Ljava/util/List;

+###org/apache/kafka/connect/rest/ConnectRestExtensionContext
@2.0.0
+#configurable()Ljavax/ws/rs/core/Configurable;
+#clusterState()Lorg/apache/kafka/connect/health/ConnectClusterState;

+###org/apache/kafka/connect/rest/ConnectRestExtension
@2.0.0
+#register(Lorg/apache/kafka/connect/rest/ConnectRestExtensionContext;)V

+###org/apache/kafka/connect/sink/SinkConnectorContext
@2.6.0

+###org/apache/kafka/connect/sink/ErrantRecordReporter
@2.6.0
+#report(Lorg/apache/kafka/connect/sink/SinkRecord;Ljava/lang/Throwable;)Ljava/util/concurrent/Future;

+###org/apache/kafka/connect/source/SourceConnectorContext
@2.6.0
+#offsetStorageReader()Lorg/apache/kafka/connect/storage/OffsetStorageReader;

+###org/apache/kafka/connect/transforms/predicates/Predicate
@2.6.0
+#config()Lorg/apache/kafka/common/config/ConfigDef;
+#test(Lorg/apache/kafka/connect/connector/ConnectRecord;)Z
+#close()V

+###org/apache/kafka/connect/components/Versioned
@2.0.0
+#version()Ljava/lang/String;

+###org/apache/kafka/connect/storage/ConverterType
@1.1.0
+#values()[Lorg/apache/kafka/connect/storage/ConverterType;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/storage/ConverterType;
+#withName(Ljava/lang/String;)Lorg/apache/kafka/connect/storage/ConverterType;
+#getName()Ljava/lang/String;

+###org/apache/kafka/connect/storage/HeaderConverter
@1.1.0
+#toConnectHeader(Ljava/lang/String;Ljava/lang/String;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
+#fromConnectHeader(Ljava/lang/String;Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#config()Lorg/apache/kafka/common/config/ConfigDef;

+###org/apache/kafka/connect/storage/ConverterConfig
@1.1.0
+#newConfigDef()Lorg/apache/kafka/common/config/ConfigDef;
+#type()Lorg/apache/kafka/connect/storage/ConverterType;

+###org/apache/kafka/connect/storage/SimpleHeaderConverter
@1.1.0
+#<init>()V
+#config()Lorg/apache/kafka/common/config/ConfigDef;
+#configure(Ljava/util/Map;)V
+#toConnectHeader(Ljava/lang/String;Ljava/lang/String;[B)Lorg/apache/kafka/connect/data/SchemaAndValue;
+#fromConnectHeader(Ljava/lang/String;Ljava/lang/String;Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)[B
+#close()V

+###org/apache/kafka/connect/storage/StringConverterConfig
@1.1.0
+#configDef()Lorg/apache/kafka/common/config/ConfigDef;
+#<init>(Ljava/util/Map;)V
+#encoding()Ljava/lang/String;

+###org/apache/kafka/connect/header/Headers
@1.1.0
+#size()I
+#isEmpty()Z
+#allWithName(Ljava/lang/String;)Ljava/util/Iterator;
+#lastWithName(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Header;
+#add(Lorg/apache/kafka/connect/header/Header;)Lorg/apache/kafka/connect/header/Headers;
+#add(Ljava/lang/String;Lorg/apache/kafka/connect/data/SchemaAndValue;)Lorg/apache/kafka/connect/header/Headers;
+#add(Ljava/lang/String;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addString(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#addBoolean(Ljava/lang/String;Z)Lorg/apache/kafka/connect/header/Headers;
+#addByte(Ljava/lang/String;B)Lorg/apache/kafka/connect/header/Headers;
+#addShort(Ljava/lang/String;S)Lorg/apache/kafka/connect/header/Headers;
+#addInt(Ljava/lang/String;I)Lorg/apache/kafka/connect/header/Headers;
+#addLong(Ljava/lang/String;J)Lorg/apache/kafka/connect/header/Headers;
+#addFloat(Ljava/lang/String;F)Lorg/apache/kafka/connect/header/Headers;
+#addDouble(Ljava/lang/String;D)Lorg/apache/kafka/connect/header/Headers;
+#addBytes(Ljava/lang/String;[B)Lorg/apache/kafka/connect/header/Headers;
+#addList(Ljava/lang/String;Ljava/util/List;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addMap(Ljava/lang/String;Ljava/util/Map;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addStruct(Ljava/lang/String;Lorg/apache/kafka/connect/data/Struct;)Lorg/apache/kafka/connect/header/Headers;
+#addDecimal(Ljava/lang/String;Ljava/math/BigDecimal;)Lorg/apache/kafka/connect/header/Headers;
+#addDate(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#addTime(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#addTimestamp(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#remove(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#retainLatest(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#retainLatest()Lorg/apache/kafka/connect/header/Headers;
+#clear()Lorg/apache/kafka/connect/header/Headers;
+#duplicate()Lorg/apache/kafka/connect/header/Headers;
+#apply(Lorg/apache/kafka/connect/header/Headers$HeaderTransform;)Lorg/apache/kafka/connect/header/Headers;
+#apply(Ljava/lang/String;Lorg/apache/kafka/connect/header/Headers$HeaderTransform;)Lorg/apache/kafka/connect/header/Headers;

+###org/apache/kafka/connect/header/Headers$HeaderTransform
@1.1.0
+#apply(Lorg/apache/kafka/connect/header/Header;)Lorg/apache/kafka/connect/header/Header;

+###org/apache/kafka/connect/header/Header
@1.1.0
+#key()Ljava/lang/String;
+#schema()Lorg/apache/kafka/connect/data/Schema;
+#value()Ljava/lang/Object;
+#with(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Lorg/apache/kafka/connect/header/Header;
+#rename(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Header;

+###org/apache/kafka/connect/header/ConnectHeaders
@1.1.0
+#<init>()V
+#<init>(Ljava/lang/Iterable;)V
+#size()I
+#isEmpty()Z
+#clear()Lorg/apache/kafka/connect/header/Headers;
+#add(Lorg/apache/kafka/connect/header/Header;)Lorg/apache/kafka/connect/header/Headers;
+#add(Ljava/lang/String;Lorg/apache/kafka/connect/data/SchemaAndValue;)Lorg/apache/kafka/connect/header/Headers;
+#add(Ljava/lang/String;Ljava/lang/Object;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addString(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#addBytes(Ljava/lang/String;[B)Lorg/apache/kafka/connect/header/Headers;
+#addBoolean(Ljava/lang/String;Z)Lorg/apache/kafka/connect/header/Headers;
+#addByte(Ljava/lang/String;B)Lorg/apache/kafka/connect/header/Headers;
+#addShort(Ljava/lang/String;S)Lorg/apache/kafka/connect/header/Headers;
+#addInt(Ljava/lang/String;I)Lorg/apache/kafka/connect/header/Headers;
+#addLong(Ljava/lang/String;J)Lorg/apache/kafka/connect/header/Headers;
+#addFloat(Ljava/lang/String;F)Lorg/apache/kafka/connect/header/Headers;
+#addDouble(Ljava/lang/String;D)Lorg/apache/kafka/connect/header/Headers;
+#addList(Ljava/lang/String;Ljava/util/List;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addMap(Ljava/lang/String;Ljava/util/Map;Lorg/apache/kafka/connect/data/Schema;)Lorg/apache/kafka/connect/header/Headers;
+#addStruct(Ljava/lang/String;Lorg/apache/kafka/connect/data/Struct;)Lorg/apache/kafka/connect/header/Headers;
+#addDecimal(Ljava/lang/String;Ljava/math/BigDecimal;)Lorg/apache/kafka/connect/header/Headers;
+#addDate(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#addTime(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#addTimestamp(Ljava/lang/String;Ljava/util/Date;)Lorg/apache/kafka/connect/header/Headers;
+#lastWithName(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Header;
+#allWithName(Ljava/lang/String;)Ljava/util/Iterator;
+#iterator()Ljava/util/Iterator;
+#remove(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#retainLatest()Lorg/apache/kafka/connect/header/Headers;
+#retainLatest(Ljava/lang/String;)Lorg/apache/kafka/connect/header/Headers;
+#apply(Ljava/lang/String;Lorg/apache/kafka/connect/header/Headers$HeaderTransform;)Lorg/apache/kafka/connect/header/Headers;
+#apply(Lorg/apache/kafka/connect/header/Headers$HeaderTransform;)Lorg/apache/kafka/connect/header/Headers;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
+#duplicate()Lorg/apache/kafka/connect/header/ConnectHeaders;
+#duplicate()Lorg/apache/kafka/connect/header/Headers;

+###org/apache/kafka/connect/data/Values
@1.1.0
+#<init>()V
+#convertToBoolean(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Boolean;
+#convertToByte(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Byte;
+#convertToShort(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Short;
+#convertToInteger(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Integer;
+#convertToLong(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Long;
+#convertToFloat(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Float;
+#convertToDouble(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/Double;
+#convertToString(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/lang/String;
+#convertToList(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/util/List;
+#convertToMap(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/util/Map;
+#convertToStruct(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Lorg/apache/kafka/connect/data/Struct;
+#convertToTime(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/util/Date;
+#convertToDate(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/util/Date;
+#convertToTimestamp(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;)Ljava/util/Date;
+#convertToDecimal(Lorg/apache/kafka/connect/data/Schema;Ljava/lang/Object;I)Ljava/math/BigDecimal;
+#inferSchema(Ljava/lang/Object;)Lorg/apache/kafka/connect/data/Schema;
+#parseString(Ljava/lang/String;)Lorg/apache/kafka/connect/data/SchemaAndValue;
@2.1.0
+#dateFormatFor(Ljava/util/Date;)Ljava/text/DateFormat;

+###org/apache/kafka/connect/data/Values$Parser
@1.1.0
+#<init>(Ljava/lang/String;)V
+#position()I
+#mark()I
+#rewindTo(I)V
+#original()Ljava/lang/String;
+#hasNext()Z
+#next()Ljava/lang/String;
+#previous()Ljava/lang/String;
+#canConsume(Ljava/lang/String;)Z
+#canConsume(Ljava/lang/String;Z)Z
@2.4.1
+#next(I)Ljava/lang/String;

+###org/apache/kafka/connect/data/Values$SchemaDetector
@1.1.0
+#<init>()V
+#canDetect(Ljava/lang/Object;)Z
+#schema()Lorg/apache/kafka/connect/data/Schema;

+###org/apache/kafka/connect/health/ConnectClusterState
@2.0.0
+#connectors()Ljava/util/Collection;
+#connectorHealth(Ljava/lang/String;)Lorg/apache/kafka/connect/health/ConnectorHealth;
@2.3.0
+#connectorConfig(Ljava/lang/String;)Ljava/util/Map;
+#clusterDetails()Lorg/apache/kafka/connect/health/ConnectClusterDetails;

+###org/apache/kafka/connect/health/AbstractState
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#state()Ljava/lang/String;
+#workerId()Ljava/lang/String;
+#traceMessage()Ljava/lang/String;
@2.2.2
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@2.3.0
-#equals(Ljava/lang/Object;)Z
-#hashCode()I
@2.3.1
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/apache/kafka/connect/health/ConnectorState
@2.0.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
@2.2.2
+#toString()Ljava/lang/String;
@2.3.0
-#toString()Ljava/lang/String;
@2.3.1
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/health/ConnectorType
@2.0.0
+#values()[Lorg/apache/kafka/connect/health/ConnectorType;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/health/ConnectorType;
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/health/TaskState
@2.0.0
+#<init>(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#taskId()I
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@2.2.2
+#toString()Ljava/lang/String;
@2.3.0
-#toString()Ljava/lang/String;
@2.3.1
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/health/ConnectorHealth
@2.0.0
+#<init>(Ljava/lang/String;Lorg/apache/kafka/connect/health/ConnectorState;Ljava/util/Map;Lorg/apache/kafka/connect/health/ConnectorType;)V
+#name()Ljava/lang/String;
+#connectorState()Lorg/apache/kafka/connect/health/ConnectorState;
+#tasksState()Ljava/util/Map;
+#type()Lorg/apache/kafka/connect/health/ConnectorType;
@2.2.2
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@2.3.0
-#equals(Ljava/lang/Object;)Z
-#hashCode()I
-#toString()Ljava/lang/String;
@2.3.1
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/health/ConnectClusterDetails
@2.3.0
+#kafkaClusterId()Ljava/lang/String;

+###org/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest
@2.3.0
+#<init>(Ljava/lang/String;Lorg/apache/kafka/connect/health/ConnectorType;Ljava/lang/Class;Ljava/util/Map;Lorg/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest$ClientType;)V
+#clientProps()Ljava/util/Map;
+#clientType()Lorg/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest$ClientType;
+#connectorName()Ljava/lang/String;
+#connectorType()Lorg/apache/kafka/connect/health/ConnectorType;
+#connectorClass()Ljava/lang/Class;

+###org/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest$ClientType
@2.3.0
+#values()[Lorg/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest$ClientType;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest$ClientType;

+###org/apache/kafka/connect/connector/policy/ConnectorClientConfigOverridePolicy
@2.3.0
+#validate(Lorg/apache/kafka/connect/connector/policy/ConnectorClientConfigRequest;)Ljava/util/List;

+###org/apache/kafka/connect/source/TransactionContext
@3.3.0
+#commitTransaction()V
+#commitTransaction(Lorg/apache/kafka/connect/source/SourceRecord;)V
+#abortTransaction()V
+#abortTransaction(Lorg/apache/kafka/connect/source/SourceRecord;)V

+###org/apache/kafka/connect/source/SourceTask$TransactionBoundary
@3.3.0
+#values()[Lorg/apache/kafka/connect/source/SourceTask$TransactionBoundary;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/source/SourceTask$TransactionBoundary;
+#fromProperty(Ljava/lang/String;)Lorg/apache/kafka/connect/source/SourceTask$TransactionBoundary;
+#toString()Ljava/lang/String;

+###org/apache/kafka/connect/source/ConnectorTransactionBoundaries
@3.3.0
+#values()[Lorg/apache/kafka/connect/source/ConnectorTransactionBoundaries;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/source/ConnectorTransactionBoundaries;

+###org/apache/kafka/connect/source/ExactlyOnceSupport
@3.3.0
+#values()[Lorg/apache/kafka/connect/source/ExactlyOnceSupport;
+#valueOf(Ljava/lang/String;)Lorg/apache/kafka/connect/source/ExactlyOnceSupport;
