
+###org/rocksdb/AbstractCompactionFilter
@3.13.1
+#<init>()V
@4.8.0
-#<init>()V

+###org/rocksdb/AbstractComparator
@3.6.2
+#<init>()V
+#name()Ljava/lang/String;
+#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
+#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
@4.8.0
-#<init>()V
@6.8.1
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#findShortestSeparator(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#findShortSuccessor(Ljava/nio/ByteBuffer;)V
+#usingDirectBuffers()Z
-#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
-#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
-#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;

+###org/rocksdb/AbstractImmutableNativeReference
@4.8.0
+#isOwningHandle()Z
+#close()V

+###org/rocksdb/AbstractNativeReference
@4.8.0
+#<init>()V
+#close()V
+#dispose()V[deprecated]
@7.0.3
-#dispose()V[deprecated]

+###org/rocksdb/AbstractRocksIterator
@3.10.0
+#isValid()Z
+#seekToFirst()V
+#seekToLast()V
+#seek([B)V
+#next()V
+#prev()V
+#status()V
@5.9.2
+#seekForPrev([B)V
@6.8.1
+#seek(Ljava/nio/ByteBuffer;)V
+#seekForPrev(Ljava/nio/ByteBuffer;)V
@6.10.2
+#refresh()V

+###org/rocksdb/AbstractSlice
@4.8.0
+#data()Ljava/lang/Object;
+#size()I
+#empty()Z
+#toString(Z)Ljava/lang/String;
+#toString()Ljava/lang/String;
+#compare(Lorg/rocksdb/AbstractSlice;)I
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#startsWith(Lorg/rocksdb/AbstractSlice;)Z
@5.3.4
+#removePrefix(I)V
+#clear()V

+###org/rocksdb/AbstractWriteBatch
@3.10.0
+#<init>()V
+#count()I
+#put([B[B)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#merge([B[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#remove([B)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#putLogData([B)V
+#clear()V
@4.8.0
-#<init>()V
@4.11.2
+#setSavePoint()V
+#rollbackToSavePoint()V
@5.3.4
+#deleteRange([B[B)V
+#deleteRange(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
@5.11.3
*#remove([B)V[deprecated]
*#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
+#delete([B)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#singleDelete([B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#popSavePoint()V
+#setMaxBytes(J)V
+#getWriteBatch()Lorg/rocksdb/WriteBatch;
@6.8.1
+#put(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#remove(Ljava/nio/ByteBuffer;)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V
@6.28.2
*#remove(Ljava/nio/ByteBuffer;)V[deprecated]
*#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V[deprecated]
+#delete(Ljava/nio/ByteBuffer;)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V
@7.0.3
-#remove([B)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
-#remove(Ljava/nio/ByteBuffer;)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V[deprecated]

+###org/rocksdb/BackupEngine
@3.13.1
+#open(Lorg/rocksdb/Env;Lorg/rocksdb/BackupableDBOptions;)Lorg/rocksdb/BackupEngine;
+#createNewBackup(Lorg/rocksdb/RocksDB;)V
+#createNewBackup(Lorg/rocksdb/RocksDB;Z)V
+#getBackupInfo()Ljava/util/List;
+#getCorruptedBackups()[I
+#garbageCollect()V
+#purgeOldBackups(I)V
+#deleteBackup(I)V
+#restoreDbFromBackup(ILjava/lang/String;Ljava/lang/String;Lorg/rocksdb/RestoreOptions;)V
+#restoreDbFromLatestBackup(Ljava/lang/String;Ljava/lang/String;Lorg/rocksdb/RestoreOptions;)V
+#close()V
@4.8.0
-#close()V
@5.15.10
+#createNewBackupWithMetadata(Lorg/rocksdb/RocksDB;Ljava/lang/String;Z)V
@7.0.3
+#open(Lorg/rocksdb/Env;Lorg/rocksdb/BackupEngineOptions;)Lorg/rocksdb/BackupEngine;
-#open(Lorg/rocksdb/Env;Lorg/rocksdb/BackupableDBOptions;)Lorg/rocksdb/BackupEngine;

+###org/rocksdb/BackupInfo
@3.6.2
+#backupId()I
+#timestamp()J
+#size()J
+#numberFiles()I
@5.15.10
+#appMetadata()Ljava/lang/String;

+###org/rocksdb/BackupableDB
@3.5.0
+#open(Lorg/rocksdb/Options;Lorg/rocksdb/BackupableDBOptions;Ljava/lang/String;)Lorg/rocksdb/BackupableDB;
+#createNewBackup(Z)V
+#purgeOldBackups(I)V
+#close()V
@3.6.2
+#deleteBackup(I)V
+#getBackupInfos()Ljava/util/List;
@3.9.0
+#getCorruptedBackups()[I
+#garbageCollect()V
@5.5.1
-###org/rocksdb/BackupableDB

+###org/rocksdb/BackupableDBOptions
@3.5.0
+#<init>(Ljava/lang/String;ZZZZJJ)V
+#backupDir()Ljava/lang/String;
@3.9.0
+#<init>(Ljava/lang/String;)V
+#setShareTableFiles(Z)Lorg/rocksdb/BackupableDBOptions;
+#shareTableFiles()Z
+#setSync(Z)Lorg/rocksdb/BackupableDBOptions;
+#sync()Z
+#setDestroyOldData(Z)Lorg/rocksdb/BackupableDBOptions;
+#destroyOldData()Z
+#setBackupLogFiles(Z)Lorg/rocksdb/BackupableDBOptions;
+#backupLogFiles()Z
+#setBackupRateLimit(J)Lorg/rocksdb/BackupableDBOptions;
+#backupRateLimit()J
+#setRestoreRateLimit(J)Lorg/rocksdb/BackupableDBOptions;
+#restoreRateLimit()J
+#setShareFilesWithChecksum(Z)Lorg/rocksdb/BackupableDBOptions;
+#shareFilesWithChecksum()Z
-#<init>(Ljava/lang/String;ZZZZJJ)V
@5.4.5
+#setBackupEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/BackupableDBOptions;
+#backupEnv()Lorg/rocksdb/Env;
+#setInfoLog(Lorg/rocksdb/Logger;)Lorg/rocksdb/BackupableDBOptions;
+#infoLog()Lorg/rocksdb/Logger;
+#setBackupRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/BackupableDBOptions;
+#backupRateLimiter()Lorg/rocksdb/RateLimiter;
+#setRestoreRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/BackupableDBOptions;
+#restoreRateLimiter()Lorg/rocksdb/RateLimiter;
+#setMaxBackgroundOperations(I)Lorg/rocksdb/BackupableDBOptions;
+#maxBackgroundOperations()I
+#setCallbackTriggerIntervalSize(J)Lorg/rocksdb/BackupableDBOptions;
+#callbackTriggerIntervalSize()J
@7.0.3
-###org/rocksdb/BackupableDBOptions

+###org/rocksdb/BlockBasedTableConfig
@3.5.0
+#<init>()V
+#setNoBlockCache(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#noBlockCache()Z
+#setBlockCacheSize(J)Lorg/rocksdb/BlockBasedTableConfig;
+#blockCacheSize()J
+#setCacheNumShardBits(I)Lorg/rocksdb/BlockBasedTableConfig;
+#cacheNumShardBits()I
+#setBlockSize(J)Lorg/rocksdb/BlockBasedTableConfig;
+#blockSize()J
+#setBlockSizeDeviation(I)Lorg/rocksdb/BlockBasedTableConfig;
+#blockSizeDeviation()I
+#setBlockRestartInterval(I)Lorg/rocksdb/BlockBasedTableConfig;
+#blockRestartInterval()I
+#setWholeKeyFiltering(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#wholeKeyFiltering()Z
+#setFilterBitsPerKey(I)Lorg/rocksdb/BlockBasedTableConfig;
@3.6.1
+#setFilter(Lorg/rocksdb/Filter;)Lorg/rocksdb/BlockBasedTableConfig;
+#cacheIndexAndFilterBlocks()Z
+#setCacheIndexAndFilterBlocks(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#hashIndexAllowCollision()Z
+#setHashIndexAllowCollision(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#blockCacheCompressedSize()J
+#setBlockCacheCompressedSize(J)Lorg/rocksdb/BlockBasedTableConfig;
+#blockCacheCompressedNumShardBits()I
+#setBlockCacheCompressedNumShardBits(I)Lorg/rocksdb/BlockBasedTableConfig;
-#setFilterBitsPerKey(I)Lorg/rocksdb/BlockBasedTableConfig;
@3.6.2
+#setChecksumType(Lorg/rocksdb/ChecksumType;)Lorg/rocksdb/BlockBasedTableConfig;
+#checksumType()Lorg/rocksdb/ChecksumType;
+#setIndexType(Lorg/rocksdb/IndexType;)Lorg/rocksdb/BlockBasedTableConfig;
+#indexType()Lorg/rocksdb/IndexType;
@3.10.0
+#setFormatVersion(I)Lorg/rocksdb/BlockBasedTableConfig;
+#formatVersion()I
@4.8.0
+#pinL0FilterAndIndexBlocksInCache()Z
+#setPinL0FilterAndIndexBlocksInCache(Z)Lorg/rocksdb/BlockBasedTableConfig;
@5.12.4
+#setBlockCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/BlockBasedTableConfig;
@5.18.3
+#cacheIndexAndFilterBlocksWithHighPriority()Z
+#setCacheIndexAndFilterBlocksWithHighPriority(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#partitionFilters()Z
+#setPartitionFilters(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#metadataBlockSize()J
+#setMetadataBlockSize(J)Lorg/rocksdb/BlockBasedTableConfig;
+#pinTopLevelIndexAndFilter()Z
+#setPinTopLevelIndexAndFilter(Z)Lorg/rocksdb/BlockBasedTableConfig;
@6.0.1
+#dataBlockIndexType()Lorg/rocksdb/DataBlockIndexType;
+#setDataBlockIndexType(Lorg/rocksdb/DataBlockIndexType;)Lorg/rocksdb/BlockBasedTableConfig;
+#dataBlockHashTableUtilRatio()D
+#setDataBlockHashTableUtilRatio(D)Lorg/rocksdb/BlockBasedTableConfig;
+#setPersistentCache(Lorg/rocksdb/PersistentCache;)Lorg/rocksdb/BlockBasedTableConfig;
+#setBlockCacheCompressed(Lorg/rocksdb/Cache;)Lorg/rocksdb/BlockBasedTableConfig;
+#indexBlockRestartInterval()I
+#setIndexBlockRestartInterval(I)Lorg/rocksdb/BlockBasedTableConfig;
+#useDeltaEncoding()Z
+#setUseDeltaEncoding(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#setFilterPolicy(Lorg/rocksdb/Filter;)Lorg/rocksdb/BlockBasedTableConfig;
*#setFilter(Lorg/rocksdb/Filter;)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
+#verifyCompression()Z
+#setVerifyCompression(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#readAmpBytesPerBit()I
+#setReadAmpBytesPerBit(I)Lorg/rocksdb/BlockBasedTableConfig;
+#enableIndexCompression()Z
+#setEnableIndexCompression(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#blockAlign()Z
+#setBlockAlign(Z)Lorg/rocksdb/BlockBasedTableConfig;
*#blockCacheSize()J[deprecated]
*#setBlockCacheSize(J)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
*#cacheNumShardBits()I[deprecated]
*#setCacheNumShardBits(I)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
*#blockCacheCompressedSize()J[deprecated]
*#setBlockCacheCompressedSize(J)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
*#blockCacheCompressedNumShardBits()I[deprecated]
*#setBlockCacheCompressedNumShardBits(I)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
*#hashIndexAllowCollision()Z[deprecated]
*#setHashIndexAllowCollision(Z)Lorg/rocksdb/BlockBasedTableConfig;[deprecated]
@6.2.2
+#filterPolicy()Lorg/rocksdb/Filter;
@6.12.7
+#optimizeFiltersForMemory()Z
+#setOptimizeFiltersForMemory(Z)Lorg/rocksdb/BlockBasedTableConfig;
+#indexShortening()Lorg/rocksdb/IndexShorteningMode;
+#setIndexShortening(Lorg/rocksdb/IndexShorteningMode;)Lorg/rocksdb/BlockBasedTableConfig;

+###org/rocksdb/BloomFilter
@3.5.0
+#<init>()V
+#<init>(I)V
@3.6.2
+#<init>(IZ)V
@6.6.4
+#<init>(D)V
+#<init>(DZ)V
-#<init>(I)V
-#<init>(IZ)V

+###org/rocksdb/BuiltinComparator
@3.6.2
+#values()[Lorg/rocksdb/BuiltinComparator;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/BuiltinComparator;

+###org/rocksdb/Checkpoint
@3.9.0
+#create(Lorg/rocksdb/RocksDB;)Lorg/rocksdb/Checkpoint;
+#createCheckpoint(Ljava/lang/String;)V

+###org/rocksdb/ChecksumType
@3.6.2
+#values()[Lorg/rocksdb/ChecksumType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/ChecksumType;
+#getValue()B

+###org/rocksdb/ColumnFamilyDescriptor
@3.8.0
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Lorg/rocksdb/ColumnFamilyOptions;)V
+#columnFamilyName()Ljava/lang/String;
+#columnFamilyOptions()Lorg/rocksdb/ColumnFamilyOptions;
@3.10.0
*#<init>(Ljava/lang/String;)V[deprecated]
+#<init>([B)V
*#<init>(Ljava/lang/String;Lorg/rocksdb/ColumnFamilyOptions;)V[deprecated]
+#<init>([BLorg/rocksdb/ColumnFamilyOptions;)V
+#columnFamilyName()[B
-#columnFamilyName()Ljava/lang/String;
@3.13.1
-#<init>(Ljava/lang/String;)V[deprecated]
-#<init>(Ljava/lang/String;Lorg/rocksdb/ColumnFamilyOptions;)V[deprecated]
@5.11.3
+#getName()[B
*#columnFamilyName()[B[deprecated]
+#getOptions()Lorg/rocksdb/ColumnFamilyOptions;
*#columnFamilyOptions()Lorg/rocksdb/ColumnFamilyOptions;[deprecated]
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@7.0.3
-#columnFamilyName()[B[deprecated]
-#columnFamilyOptions()Lorg/rocksdb/ColumnFamilyOptions;[deprecated]

+###org/rocksdb/ColumnFamilyHandle
@3.6.2
@5.11.3
+#getName()[B
+#getID()I
+#getDescriptor()Lorg/rocksdb/ColumnFamilyDescriptor;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/rocksdb/ColumnFamilyOptions
@3.8.0
+#<init>()V
+#optimizeForPointLookup(J)Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeLevelStyleCompaction()Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeLevelStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeUniversalStyleCompaction()Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeUniversalStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptions;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptions;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptions;
+#setMergeOperatorName(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptions;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptions;
+#setWriteBufferSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#writeBufferSize()J
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxWriteBufferNumber()I
+#setMinWriteBufferNumberToMerge(I)Lorg/rocksdb/ColumnFamilyOptions;
+#minWriteBufferNumberToMerge()I
+#useFixedLengthPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptions;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
+#compressionType()Lorg/rocksdb/CompressionType;
+#setNumLevels(I)Lorg/rocksdb/ColumnFamilyOptions;
+#numLevels()I
+#setLevelZeroFileNumCompactionTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#levelZeroFileNumCompactionTrigger()I
+#setLevelZeroSlowdownWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#levelZeroSlowdownWritesTrigger()I
+#setLevelZeroStopWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#levelZeroStopWritesTrigger()I
+#setMaxMemCompactionLevel(I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxMemCompactionLevel()I
+#setTargetFileSizeBase(J)Lorg/rocksdb/ColumnFamilyOptions;
+#targetFileSizeBase()J
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/ColumnFamilyOptions;
+#targetFileSizeMultiplier()I
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/ColumnFamilyOptions;
+#maxBytesForLevelBase()J
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxBytesForLevelMultiplier()I
+#setExpandedCompactionFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
+#expandedCompactionFactor()I
+#setSourceCompactionFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
+#sourceCompactionFactor()I
+#setMaxGrandparentOverlapFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxGrandparentOverlapFactor()I
+#setSoftRateLimit(D)Lorg/rocksdb/ColumnFamilyOptions;
+#softRateLimit()D
+#setHardRateLimit(D)Lorg/rocksdb/ColumnFamilyOptions;
+#hardRateLimit()D
+#setRateLimitDelayMaxMilliseconds(I)Lorg/rocksdb/ColumnFamilyOptions;
+#rateLimitDelayMaxMilliseconds()I
+#setArenaBlockSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#arenaBlockSize()J
+#setDisableAutoCompactions(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#disableAutoCompactions()Z
+#setPurgeRedundantKvsWhileFlush(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#purgeRedundantKvsWhileFlush()Z
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptions;
+#compactionStyle()Lorg/rocksdb/CompactionStyle;
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#verifyChecksumsInCompaction()Z
+#setFilterDeletes(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#filterDeletes()Z
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/ColumnFamilyOptions;
+#maxSequentialSkipInIterations()J
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptions;
+#memTableFactoryName()Ljava/lang/String;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptions;
+#tableFactoryName()Ljava/lang/String;
+#setInplaceUpdateSupport(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#inplaceUpdateSupport()Z
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/ColumnFamilyOptions;
+#inplaceUpdateNumLocks()J
+#setMemtablePrefixBloomBits(I)Lorg/rocksdb/ColumnFamilyOptions;
+#memtablePrefixBloomBits()I
+#setMemtablePrefixBloomProbes(I)Lorg/rocksdb/ColumnFamilyOptions;
+#memtablePrefixBloomProbes()I
+#setBloomLocality(I)Lorg/rocksdb/ColumnFamilyOptions;
+#bloomLocality()I
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/ColumnFamilyOptions;
+#maxSuccessiveMerges()J
+#setMinPartialMergeOperands(I)Lorg/rocksdb/ColumnFamilyOptions;
+#minPartialMergeOperands()I
+#setMinPartialMergeOperands(I)Ljava/lang/Object;
+#setMaxSuccessiveMerges(J)Ljava/lang/Object;
+#setBloomLocality(I)Ljava/lang/Object;
+#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
+#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
+#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
+#setInplaceUpdateSupport(Z)Ljava/lang/Object;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
+#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
+#setFilterDeletes(Z)Ljava/lang/Object;
+#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
+#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
+#setDisableAutoCompactions(Z)Ljava/lang/Object;
+#setArenaBlockSize(J)Ljava/lang/Object;
+#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
+#setHardRateLimit(D)Ljava/lang/Object;
+#setSoftRateLimit(D)Ljava/lang/Object;
+#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
+#setSourceCompactionFactor(I)Ljava/lang/Object;
+#setExpandedCompactionFactor(I)Ljava/lang/Object;
+#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
+#setMaxBytesForLevelBase(J)Ljava/lang/Object;
+#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
+#setTargetFileSizeBase(J)Ljava/lang/Object;
+#setMaxMemCompactionLevel(I)Ljava/lang/Object;
+#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
+#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
+#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
+#setNumLevels(I)Ljava/lang/Object;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
+#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
+#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
+#setMaxWriteBufferNumber(I)Ljava/lang/Object;
+#setWriteBufferSize(J)Ljava/lang/Object;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
+#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
+#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
+#optimizeUniversalStyleCompaction()Ljava/lang/Object;
+#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
+#optimizeLevelStyleCompaction()Ljava/lang/Object;
+#optimizeForPointLookup(J)Ljava/lang/Object;
@3.9.0
+#getColumnFamilyOptionsFromProps(Ljava/util/Properties;)Lorg/rocksdb/ColumnFamilyOptions;
@3.10.0
+#setCompressionPerLevel(Ljava/util/List;)Lorg/rocksdb/ColumnFamilyOptions;
+#compressionPerLevel()Ljava/util/List;
+#setLevelCompactionDynamicLevelBytes(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#levelCompactionDynamicLevelBytes()Z
+#setOptimizeFiltersForHits(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeFiltersForHits()Z
+#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
+#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
+#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
@3.13.1
+#setCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/ColumnFamilyOptions;
+#useCappedPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptions;
+#setMaxTableFilesSizeFIFO(J)Lorg/rocksdb/ColumnFamilyOptions;
+#maxTableFilesSizeFIFO()J
+#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
+#useCappedPrefixExtractor(I)Ljava/lang/Object;
@4.11.2
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/ColumnFamilyOptions;
+#memtablePrefixBloomSizeRatio()D
+#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
-#setFilterDeletes(Z)Lorg/rocksdb/ColumnFamilyOptions;
-#filterDeletes()Z
-#setMemtablePrefixBloomBits(I)Lorg/rocksdb/ColumnFamilyOptions;
-#memtablePrefixBloomBits()I
-#setMemtablePrefixBloomProbes(I)Lorg/rocksdb/ColumnFamilyOptions;
-#memtablePrefixBloomProbes()I
-#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
-#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
-#setFilterDeletes(Z)Ljava/lang/Object;
@4.13.4
+#setMaxCompactionBytes(J)Lorg/rocksdb/ColumnFamilyOptions;
+#maxCompactionBytes()J
+#setMemtableHugePageSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#memtableHugePageSize()J
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/ColumnFamilyOptions;
+#softPendingCompactionBytesLimit()J
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/ColumnFamilyOptions;
+#hardPendingCompactionBytesLimit()J
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#level0FileNumCompactionTrigger()I
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#level0SlowdownWritesTrigger()I
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptions;
+#level0StopWritesTrigger()I
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxBytesForLevelMultiplierAdditional()[I
+#setParanoidFileChecks(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#paranoidFileChecks()Z
+#setMaxCompactionBytes(J)Ljava/lang/Object;
+#optimizeLevelStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForPointLookup(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setDisableAutoCompactions(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setWriteBufferSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setExpandedCompactionFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
-#expandedCompactionFactor()I
-#setSourceCompactionFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
-#sourceCompactionFactor()I
-#setMaxGrandparentOverlapFactor(I)Lorg/rocksdb/ColumnFamilyOptions;
-#maxGrandparentOverlapFactor()I
-#setMaxSuccessiveMerges(J)Ljava/lang/Object;
-#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
-#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
-#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
-#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
-#setDisableAutoCompactions(Z)Ljava/lang/Object;
-#setArenaBlockSize(J)Ljava/lang/Object;
-#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
-#setSourceCompactionFactor(I)Ljava/lang/Object;
-#setExpandedCompactionFactor(I)Ljava/lang/Object;
-#setMaxBytesForLevelBase(J)Ljava/lang/Object;
-#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
-#setTargetFileSizeBase(J)Ljava/lang/Object;
-#setMaxWriteBufferNumber(I)Ljava/lang/Object;
-#setWriteBufferSize(J)Ljava/lang/Object;
-#optimizeLevelStyleCompaction()Ljava/lang/Object;
-#optimizeForPointLookup(J)Ljava/lang/Object;
@5.0.1
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/ColumnFamilyOptions;
+#maxBytesForLevelMultiplier()D
+#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/ColumnFamilyOptions;
-#maxBytesForLevelMultiplier()I
-#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.3.4
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/ColumnFamilyOptions;
-#verifyChecksumsInCompaction()Z
-#setMinPartialMergeOperands(I)Lorg/rocksdb/ColumnFamilyOptions;
-#minPartialMergeOperands()I
-#setMinPartialMergeOperands(I)Ljava/lang/Object;
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.4.5
+#optimizeForSmallDb()Lorg/rocksdb/ColumnFamilyOptions;
+#setBottommostCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
+#bottommostCompressionType()Lorg/rocksdb/CompressionType;
+#setCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptions;
+#compressionOptions()Lorg/rocksdb/CompressionOptions;
+#memTableConfig()Lorg/rocksdb/MemTableConfig;
+#tableFormatConfig()Lorg/rocksdb/TableFormatConfig;
+#setMaxWriteBufferNumberToMaintain(I)Lorg/rocksdb/ColumnFamilyOptions;
+#maxWriteBufferNumberToMaintain()I
+#setCompactionPriority(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/ColumnFamilyOptions;
+#compactionPriority()Lorg/rocksdb/CompactionPriority;
+#setReportBgIoStats(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#reportBgIoStats()Z
+#setCompactionOptionsUniversal(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/ColumnFamilyOptions;
+#compactionOptionsUniversal()Lorg/rocksdb/CompactionOptionsUniversal;
+#setCompactionOptionsFIFO(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/ColumnFamilyOptions;
+#compactionOptionsFIFO()Lorg/rocksdb/CompactionOptionsFIFO;
+#setForceConsistencyChecks(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#forceConsistencyChecks()Z
+#setCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setBottommostCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxTableFilesSizeFIFO(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroStopWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroSlowdownWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroFileNumCompactionTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useCappedPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useFixedLengthPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperatorName(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeLevelStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForSmallDb()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setForceConsistencyChecks(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setOptimizeFiltersForHits(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionOptionsFIFO(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionOptionsUniversal(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionPriority(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setLevelCompactionDynamicLevelBytes(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setNumLevels(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompressionPerLevel(Ljava/util/List;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setBloomLocality(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setInplaceUpdateSupport(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumberToMaintain(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setMinWriteBufferNumberToMerge(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setReportBgIoStats(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setParanoidFileChecks(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#setMaxMemCompactionLevel(I)Lorg/rocksdb/ColumnFamilyOptions;
-#maxMemCompactionLevel()I
-#setSoftRateLimit(D)Lorg/rocksdb/ColumnFamilyOptions;
-#softRateLimit()D
-#setHardRateLimit(D)Lorg/rocksdb/ColumnFamilyOptions;
-#hardRateLimit()D
-#setRateLimitDelayMaxMilliseconds(I)Lorg/rocksdb/ColumnFamilyOptions;
-#rateLimitDelayMaxMilliseconds()I
-#setPurgeRedundantKvsWhileFlush(Z)Lorg/rocksdb/ColumnFamilyOptions;
-#purgeRedundantKvsWhileFlush()Z
-#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
-#setBloomLocality(I)Ljava/lang/Object;
-#setInplaceUpdateSupport(Z)Ljava/lang/Object;
-#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
-#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
-#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
-#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
-#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
-#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
-#setHardRateLimit(D)Ljava/lang/Object;
-#setSoftRateLimit(D)Ljava/lang/Object;
-#setMaxCompactionBytes(J)Ljava/lang/Object;
-#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
-#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
-#setMaxMemCompactionLevel(I)Ljava/lang/Object;
-#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
-#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
-#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
-#setNumLevels(I)Ljava/lang/Object;
-#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
-#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
-#useCappedPrefixExtractor(I)Ljava/lang/Object;
-#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
-#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
-#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
-#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
-#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
-#optimizeUniversalStyleCompaction()Ljava/lang/Object;
-#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
-#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.9.2
+#setCompactionFilterFactory(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/ColumnFamilyOptions;
+#<init>(J)V
@5.11.3
-#<init>(J)V
@5.12.4
+#<init>(Lorg/rocksdb/ColumnFamilyOptions;)V
@6.0.1
+#<init>(Lorg/rocksdb/Options;)V
+#compactionFilter()Lorg/rocksdb/AbstractCompactionFilter;
+#compactionFilterFactory()Lorg/rocksdb/AbstractCompactionFilterFactory;
+#setBottommostCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptions;
+#bottommostCompressionOptions()Lorg/rocksdb/CompressionOptions;
+#setTtl(J)Lorg/rocksdb/ColumnFamilyOptions;
+#ttl()J
+#setBottommostCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setCompactionFilterFactory(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setTtl(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.10.2
+#getColumnFamilyOptionsFromProps(Lorg/rocksdb/ConfigOptions;Ljava/util/Properties;)Lorg/rocksdb/ColumnFamilyOptions;
@6.12.7
+#setSstPartitionerFactory(Lorg/rocksdb/SstPartitionerFactory;)Lorg/rocksdb/ColumnFamilyOptions;
+#sstPartitionerFactory()Lorg/rocksdb/SstPartitionerFactory;
+#setSstPartitionerFactory(Lorg/rocksdb/SstPartitionerFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.13.3
+#setCompactionThreadLimiter(Lorg/rocksdb/ConcurrentTaskLimiter;)Lorg/rocksdb/ColumnFamilyOptions;
+#compactionThreadLimiter()Lorg/rocksdb/ConcurrentTaskLimiter;
+#setCompactionThreadLimiter(Lorg/rocksdb/ConcurrentTaskLimiter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.14.5
+#oldDefaults(II)Lorg/rocksdb/ColumnFamilyOptions;
+#optimizeForSmallDb(Lorg/rocksdb/Cache;)Lorg/rocksdb/ColumnFamilyOptions;
+#setCfPaths(Ljava/util/Collection;)Lorg/rocksdb/ColumnFamilyOptions;
+#cfPaths()Ljava/util/List;
+#setCfPaths(Ljava/util/Collection;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForSmallDb(Lorg/rocksdb/Cache;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#oldDefaults(II)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.24.2
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/ColumnFamilyOptions;
+#periodicCompactionSeconds()J
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.26.1
+#setEnableBlobFiles(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#enableBlobFiles()Z
+#setMinBlobSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#minBlobSize()J
+#setBlobFileSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#blobFileSize()J
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptions;
+#blobCompressionType()Lorg/rocksdb/CompressionType;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#enableBlobGarbageCollection()Z
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/ColumnFamilyOptions;
+#blobGarbageCollectionAgeCutoff()D
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobFileSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMinBlobSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobFiles(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.27.3
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/ColumnFamilyOptions;
+#blobGarbageCollectionForceThreshold()D
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.0.3
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/ColumnFamilyOptions;
+#memtableWholeKeyFiltering()Z
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/ColumnFamilyOptions;
+#blobCompactionReadaheadSize()J
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.4.3
+#setBlobFileStartingLevel(I)Lorg/rocksdb/ColumnFamilyOptions;
+#blobFileStartingLevel()I
+#setBlobFileStartingLevel(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.5.3
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/ColumnFamilyOptions;
+#experimentalMempurgeThreshold()D
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.6.0
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/ColumnFamilyOptions;
+#prepopulateBlobCache()Lorg/rocksdb/PrepopulateBlobCache;
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;

+###org/rocksdb/ColumnFamilyOptionsInterface
@3.6.2
+#optimizeForPointLookup(J)Ljava/lang/Object;
+#optimizeLevelStyleCompaction()Ljava/lang/Object;
+#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
+#optimizeUniversalStyleCompaction()Ljava/lang/Object;
+#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
+#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
+#setWriteBufferSize(J)Ljava/lang/Object;
+#writeBufferSize()J
+#setMaxWriteBufferNumber(I)Ljava/lang/Object;
+#maxWriteBufferNumber()I
+#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
+#minWriteBufferNumberToMerge()I
+#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
+#compressionType()Lorg/rocksdb/CompressionType;
+#setNumLevels(I)Ljava/lang/Object;
+#numLevels()I
+#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
+#levelZeroFileNumCompactionTrigger()I
+#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
+#levelZeroSlowdownWritesTrigger()I
+#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
+#levelZeroStopWritesTrigger()I
+#setMaxMemCompactionLevel(I)Ljava/lang/Object;
+#maxMemCompactionLevel()I
+#setTargetFileSizeBase(J)Ljava/lang/Object;
+#targetFileSizeBase()J
+#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
+#targetFileSizeMultiplier()I
+#setMaxBytesForLevelBase(J)Ljava/lang/Object;
+#maxBytesForLevelBase()J
+#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
+#maxBytesForLevelMultiplier()I
+#setExpandedCompactionFactor(I)Ljava/lang/Object;
+#expandedCompactionFactor()I
+#setSourceCompactionFactor(I)Ljava/lang/Object;
+#sourceCompactionFactor()I
+#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
+#maxGrandparentOverlapFactor()I
+#setSoftRateLimit(D)Ljava/lang/Object;
+#softRateLimit()D
+#setHardRateLimit(D)Ljava/lang/Object;
+#hardRateLimit()D
+#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
+#rateLimitDelayMaxMilliseconds()I
+#setArenaBlockSize(J)Ljava/lang/Object;
+#arenaBlockSize()J
+#setDisableAutoCompactions(Z)Ljava/lang/Object;
+#disableAutoCompactions()Z
+#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
+#purgeRedundantKvsWhileFlush()Z
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
+#compactionStyle()Lorg/rocksdb/CompactionStyle;
+#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
+#verifyChecksumsInCompaction()Z
+#setFilterDeletes(Z)Ljava/lang/Object;
+#filterDeletes()Z
+#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
+#maxSequentialSkipInIterations()J
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
+#memTableFactoryName()Ljava/lang/String;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
+#tableFactoryName()Ljava/lang/String;
+#setInplaceUpdateSupport(Z)Ljava/lang/Object;
+#inplaceUpdateSupport()Z
+#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
+#inplaceUpdateNumLocks()J
+#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
+#memtablePrefixBloomBits()I
+#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
+#memtablePrefixBloomProbes()I
+#setBloomLocality(I)Ljava/lang/Object;
+#bloomLocality()I
+#setMaxSuccessiveMerges(J)Ljava/lang/Object;
+#maxSuccessiveMerges()J
+#setMinPartialMergeOperands(I)Ljava/lang/Object;
+#minPartialMergeOperands()I
@3.10.0
+#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
+#compressionPerLevel()Ljava/util/List;
+#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
+#levelCompactionDynamicLevelBytes()Z
+#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
+#optimizeFiltersForHits()Z
@3.13.1
+#useCappedPrefixExtractor(I)Ljava/lang/Object;
*#setMaxMemCompactionLevel(I)Ljava/lang/Object;[deprecated]
*#maxMemCompactionLevel()I[deprecated]
+#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
+#maxTableFilesSizeFIFO()J
@4.11.2
+#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
+#memtablePrefixBloomSizeRatio()D
-#setFilterDeletes(Z)Ljava/lang/Object;
-#filterDeletes()Z
-#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
-#memtablePrefixBloomBits()I
-#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
-#memtablePrefixBloomProbes()I
@4.13.4
+#optimizeForPointLookup(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeLevelStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Ljava/lang/Object;
+#maxCompactionBytes()J
-#optimizeForPointLookup(J)Ljava/lang/Object;
-#optimizeLevelStyleCompaction()Ljava/lang/Object;
-#setWriteBufferSize(J)Ljava/lang/Object;
-#writeBufferSize()J
-#setMaxWriteBufferNumber(I)Ljava/lang/Object;
-#maxWriteBufferNumber()I
-#setTargetFileSizeBase(J)Ljava/lang/Object;
-#targetFileSizeBase()J
-#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
-#targetFileSizeMultiplier()I
-#setMaxBytesForLevelBase(J)Ljava/lang/Object;
-#maxBytesForLevelBase()J
-#setExpandedCompactionFactor(I)Ljava/lang/Object;
-#expandedCompactionFactor()I
-#setSourceCompactionFactor(I)Ljava/lang/Object;
-#sourceCompactionFactor()I
-#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
-#maxGrandparentOverlapFactor()I
-#setArenaBlockSize(J)Ljava/lang/Object;
-#arenaBlockSize()J
-#setDisableAutoCompactions(Z)Ljava/lang/Object;
-#disableAutoCompactions()Z
-#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
-#verifyChecksumsInCompaction()Z
-#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
-#maxSequentialSkipInIterations()J
-#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
-#inplaceUpdateNumLocks()J
-#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
-#memtablePrefixBloomSizeRatio()D
-#setMaxSuccessiveMerges(J)Ljava/lang/Object;
-#maxSuccessiveMerges()J
@5.0.1
+#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
+#maxBytesForLevelMultiplier()D
-#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
-#maxBytesForLevelMultiplier()I
@5.3.4
-#setMinPartialMergeOperands(I)Ljava/lang/Object;
-#minPartialMergeOperands()I
@5.4.5
+#optimizeForSmallDb()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeLevelStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperatorName(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useFixedLengthPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useCappedPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroFileNumCompactionTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroSlowdownWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroStopWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxTableFilesSizeFIFO(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#memTableConfig()Lorg/rocksdb/MemTableConfig;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#tableFormatConfig()Lorg/rocksdb/TableFormatConfig;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setBottommostCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#bottommostCompressionType()Lorg/rocksdb/CompressionType;
+#setCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#compressionOptions()Lorg/rocksdb/CompressionOptions;
-#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
-#optimizeUniversalStyleCompaction()Ljava/lang/Object;
-#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
-#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
-#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
-#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
-#minWriteBufferNumberToMerge()I
-#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
-#useCappedPrefixExtractor(I)Ljava/lang/Object;
-#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
-#compressionType()Lorg/rocksdb/CompressionType;
-#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
-#compressionPerLevel()Ljava/util/List;
-#setNumLevels(I)Ljava/lang/Object;
-#numLevels()I
-#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
-#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
-#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
-#setMaxMemCompactionLevel(I)Ljava/lang/Object;[deprecated]
-#maxMemCompactionLevel()I[deprecated]
-#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
-#levelCompactionDynamicLevelBytes()Z
-#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
-#setMaxCompactionBytes(J)Ljava/lang/Object;
-#maxCompactionBytes()J
-#setSoftRateLimit(D)Ljava/lang/Object;
-#softRateLimit()D
-#setHardRateLimit(D)Ljava/lang/Object;
-#hardRateLimit()D
-#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
-#rateLimitDelayMaxMilliseconds()I
-#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
-#purgeRedundantKvsWhileFlush()Z
-#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
-#compactionStyle()Lorg/rocksdb/CompactionStyle;
-#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
-#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
-#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
-#setInplaceUpdateSupport(Z)Ljava/lang/Object;
-#inplaceUpdateSupport()Z
-#setBloomLocality(I)Ljava/lang/Object;
-#bloomLocality()I
-#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
-#optimizeFiltersForHits()Z
@6.0.1
+#setCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#compactionFilter()Lorg/rocksdb/AbstractCompactionFilter;
+#setCompactionFilterFactory(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#compactionFilterFactory()Lorg/rocksdb/AbstractCompactionFilterFactory;
+#setBottommostCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#bottommostCompressionOptions()Lorg/rocksdb/CompressionOptions;
@6.12.7
+#setSstPartitionerFactory(Lorg/rocksdb/SstPartitionerFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#sstPartitionerFactory()Lorg/rocksdb/SstPartitionerFactory;
@6.13.3
+#setCompactionThreadLimiter(Lorg/rocksdb/ConcurrentTaskLimiter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#compactionThreadLimiter()Lorg/rocksdb/ConcurrentTaskLimiter;
@6.14.5
+#oldDefaults(II)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForSmallDb(Lorg/rocksdb/Cache;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setCfPaths(Ljava/util/Collection;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#cfPaths()Ljava/util/List;

+###org/rocksdb/CompactionStyle
@3.5.0
+#values()[Lorg/rocksdb/CompactionStyle;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompactionStyle;
+#getValue()B

+###org/rocksdb/Comparator
@3.6.2
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
@6.8.1
-###org/rocksdb/Comparator

+###org/rocksdb/ComparatorOptions
@3.6.2
+#<init>()V
+#useAdaptiveMutex()Z
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/ComparatorOptions;
@6.8.1
+#reusedSynchronisationType()Lorg/rocksdb/ReusedSynchronisationType;
+#setReusedSynchronisationType(Lorg/rocksdb/ReusedSynchronisationType;)Lorg/rocksdb/ComparatorOptions;
+#useDirectBuffer()Z
+#setUseDirectBuffer(Z)Lorg/rocksdb/ComparatorOptions;
+#maxReusedBufferSize()I
+#setMaxReusedBufferSize(I)Lorg/rocksdb/ComparatorOptions;
-#useAdaptiveMutex()Z
-#setUseAdaptiveMutex(Z)Lorg/rocksdb/ComparatorOptions;

+###org/rocksdb/CompressionType
@3.5.0
+#values()[Lorg/rocksdb/CompressionType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompressionType;
+#getValue()B
@3.9.0
+#getCompressionType(Ljava/lang/String;)Lorg/rocksdb/CompressionType;
+#getLibraryName()Ljava/lang/String;
@3.10.0
+#getCompressionType(B)Lorg/rocksdb/CompressionType;

+###org/rocksdb/DBOptions
@3.7.0
+#<init>()V
+#setCreateIfMissing(Z)Lorg/rocksdb/DBOptions;
+#createIfMissing()Z
+#setCreateMissingColumnFamilies(Z)Lorg/rocksdb/DBOptions;
+#createMissingColumnFamilies()Z
+#setErrorIfExists(Z)Lorg/rocksdb/DBOptions;
+#errorIfExists()Z
+#setParanoidChecks(Z)Lorg/rocksdb/DBOptions;
+#paranoidChecks()Z
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/DBOptions;
+#setMaxOpenFiles(I)Lorg/rocksdb/DBOptions;
+#maxOpenFiles()I
+#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptions;
+#maxTotalWalSize()J
+#createStatistics()Lorg/rocksdb/DBOptions;
+#statisticsPtr()Lorg/rocksdb/Statistics;
+#setDisableDataSync(Z)Lorg/rocksdb/DBOptions;
+#disableDataSync()Z
+#setUseFsync(Z)Lorg/rocksdb/DBOptions;
+#useFsync()Z
+#setDbLogDir(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
+#dbLogDir()Ljava/lang/String;
+#setWalDir(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
+#walDir()Ljava/lang/String;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/DBOptions;
+#deleteObsoleteFilesPeriodMicros()J
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptions;
+#maxBackgroundCompactions()I
+#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptions;
+#maxBackgroundFlushes()I
+#setMaxLogFileSize(J)Lorg/rocksdb/DBOptions;
+#maxLogFileSize()J
+#setLogFileTimeToRoll(J)Lorg/rocksdb/DBOptions;
+#logFileTimeToRoll()J
+#setKeepLogFileNum(J)Lorg/rocksdb/DBOptions;
+#keepLogFileNum()J
+#setMaxManifestFileSize(J)Lorg/rocksdb/DBOptions;
+#maxManifestFileSize()J
+#setTableCacheNumshardbits(I)Lorg/rocksdb/DBOptions;
+#tableCacheNumshardbits()I
+#setTableCacheRemoveScanCountLimit(I)Lorg/rocksdb/DBOptions;
+#tableCacheRemoveScanCountLimit()I
+#setWalTtlSeconds(J)Lorg/rocksdb/DBOptions;
+#walTtlSeconds()J
+#setWalSizeLimitMB(J)Lorg/rocksdb/DBOptions;
+#walSizeLimitMB()J
+#setManifestPreallocationSize(J)Lorg/rocksdb/DBOptions;
+#manifestPreallocationSize()J
+#setAllowOsBuffer(Z)Lorg/rocksdb/DBOptions;
+#allowOsBuffer()Z
+#setAllowMmapReads(Z)Lorg/rocksdb/DBOptions;
+#allowMmapReads()Z
+#setAllowMmapWrites(Z)Lorg/rocksdb/DBOptions;
+#allowMmapWrites()Z
+#setIsFdCloseOnExec(Z)Lorg/rocksdb/DBOptions;
+#isFdCloseOnExec()Z
+#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/DBOptions;
+#skipLogErrorOnRecovery()Z
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptions;
+#statsDumpPeriodSec()I
+#setAdviseRandomOnOpen(Z)Lorg/rocksdb/DBOptions;
+#adviseRandomOnOpen()Z
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/DBOptions;
+#useAdaptiveMutex()Z
+#setBytesPerSync(J)Lorg/rocksdb/DBOptions;
+#bytesPerSync()J
+#setBytesPerSync(J)Ljava/lang/Object;
+#setUseAdaptiveMutex(Z)Ljava/lang/Object;
+#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
+#setStatsDumpPeriodSec(I)Ljava/lang/Object;
+#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;
+#setIsFdCloseOnExec(Z)Ljava/lang/Object;
+#setAllowMmapWrites(Z)Ljava/lang/Object;
+#setAllowMmapReads(Z)Ljava/lang/Object;
+#setAllowOsBuffer(Z)Ljava/lang/Object;
+#setManifestPreallocationSize(J)Ljava/lang/Object;
+#setWalSizeLimitMB(J)Ljava/lang/Object;
+#setWalTtlSeconds(J)Ljava/lang/Object;
+#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;
+#setTableCacheNumshardbits(I)Ljava/lang/Object;
+#setMaxManifestFileSize(J)Ljava/lang/Object;
+#setKeepLogFileNum(J)Ljava/lang/Object;
+#setLogFileTimeToRoll(J)Ljava/lang/Object;
+#setMaxLogFileSize(J)Ljava/lang/Object;
+#setMaxBackgroundFlushes(I)Ljava/lang/Object;
+#setMaxBackgroundCompactions(I)Ljava/lang/Object;
+#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
+#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
+#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
+#setUseFsync(Z)Ljava/lang/Object;
+#setDisableDataSync(Z)Ljava/lang/Object;
+#createStatistics()Ljava/lang/Object;
+#setMaxTotalWalSize(J)Ljava/lang/Object;
+#setMaxOpenFiles(I)Ljava/lang/Object;
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;
+#setParanoidChecks(Z)Ljava/lang/Object;
+#setErrorIfExists(Z)Ljava/lang/Object;
+#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
+#setCreateIfMissing(Z)Ljava/lang/Object;
@3.9.0
+#getDBOptionsFromProps(Ljava/util/Properties;)Lorg/rocksdb/DBOptions;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptions;
+#infoLogLevel()Lorg/rocksdb/InfoLogLevel;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
@3.10.0
+#setIncreaseParallelism(I)Lorg/rocksdb/DBOptions;
+#setLogger(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptions;
*#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/DBOptions;[deprecated]
*#skipLogErrorOnRecovery()Z[deprecated]
+#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
+#setIncreaseParallelism(I)Ljava/lang/Object;
@3.13.1
-#setTableCacheRemoveScanCountLimit(I)Lorg/rocksdb/DBOptions;
-#tableCacheRemoveScanCountLimit()I
-#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/DBOptions;[deprecated]
-#skipLogErrorOnRecovery()Z[deprecated]
-#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;
-#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;
@4.13.4
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptions;
+#setBaseBackgroundCompactions(I)V
+#baseBackgroundCompactions()I
+#setMaxSubcompactions(I)V
+#maxSubcompactions()I
+#setAllowConcurrentMemtableWrite(Z)V
+#allowConcurrentMemtableWrite()Z
+#setEnableWriteThreadAdaptiveYield(Z)V
+#enableWriteThreadAdaptiveYield()Z
+#setWriteThreadMaxYieldUsec(J)V
+#writeThreadMaxYieldUsec()J
+#setWriteThreadSlowYieldUsec(J)V
+#writeThreadSlowYieldUsec()J
+#setDelayedWriteRate(J)Lorg/rocksdb/DBOptions;
+#delayedWriteRate()J
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
@5.1.2
+#setUseDirectReads(Z)Lorg/rocksdb/DBOptions;
+#useDirectReads()Z
+#setUseDirectWrites(Z)Lorg/rocksdb/DBOptions;
+#useDirectWrites()Z
+#setUseDirectWrites(Z)Ljava/lang/Object;
+#setUseDirectReads(Z)Ljava/lang/Object;
-#setAllowOsBuffer(Z)Lorg/rocksdb/DBOptions;
-#allowOsBuffer()Z
-#setAllowOsBuffer(Z)Ljava/lang/Object;
@5.3.4
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/DBOptions;
-#setDisableDataSync(Z)Lorg/rocksdb/DBOptions;
-#disableDataSync()Z
-#setDisableDataSync(Z)Ljava/lang/Object;
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;
@5.4.5
+#optimizeForSmallDb()Lorg/rocksdb/DBOptions;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptions;
+#getEnv()Lorg/rocksdb/Env;
+#setMaxFileOpeningThreads(I)Lorg/rocksdb/DBOptions;
+#maxFileOpeningThreads()I
+#setDbPaths(Ljava/util/Collection;)Lorg/rocksdb/DBOptions;
+#dbPaths()Ljava/util/List;
+#setRecycleLogFileNum(J)Lorg/rocksdb/DBOptions;
+#recycleLogFileNum()J
+#setUseDirectIoForFlushAndCompaction(Z)Lorg/rocksdb/DBOptions;
+#useDirectIoForFlushAndCompaction()Z
+#setAllowFAllocate(Z)Lorg/rocksdb/DBOptions;
+#allowFAllocate()Z
+#setDbWriteBufferSize(J)Lorg/rocksdb/DBOptions;
+#dbWriteBufferSize()J
+#setAccessHintOnCompactionStart(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptions;
+#accessHintOnCompactionStart()Lorg/rocksdb/AccessHint;
+#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptions;
+#newTableReaderForCompactionInputs()Z
+#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptions;
+#compactionReadaheadSize()J
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/DBOptions;
+#randomAccessMaxBufferSize()J
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptions;
+#writableFileMaxBufferSize()J
+#setWalBytesPerSync(J)Lorg/rocksdb/DBOptions;
+#walBytesPerSync()J
+#setEnableThreadTracking(Z)Lorg/rocksdb/DBOptions;
+#enableThreadTracking()Z
+#setAllowConcurrentMemtableWrite(Z)Lorg/rocksdb/DBOptions;
+#setEnableWriteThreadAdaptiveYield(Z)Lorg/rocksdb/DBOptions;
+#setWriteThreadMaxYieldUsec(J)Lorg/rocksdb/DBOptions;
+#setWriteThreadSlowYieldUsec(J)Lorg/rocksdb/DBOptions;
+#setSkipStatsUpdateOnDbOpen(Z)Lorg/rocksdb/DBOptions;
+#skipStatsUpdateOnDbOpen()Z
+#setWalRecoveryMode(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptions;
+#walRecoveryMode()Lorg/rocksdb/WALRecoveryMode;
+#setAllow2pc(Z)Lorg/rocksdb/DBOptions;
+#allow2pc()Z
+#setRowCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptions;
+#rowCache()Lorg/rocksdb/Cache;
+#setFailIfOptionsFileError(Z)Lorg/rocksdb/DBOptions;
+#failIfOptionsFileError()Z
+#setDumpMallocStats(Z)Lorg/rocksdb/DBOptions;
+#dumpMallocStats()Z
+#setAvoidFlushDuringRecovery(Z)Lorg/rocksdb/DBOptions;
+#avoidFlushDuringRecovery()Z
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptions;
+#avoidFlushDuringShutdown()Z
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAvoidFlushDuringRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDumpMallocStats(Z)Lorg/rocksdb/DBOptionsInterface;
+#setFailIfOptionsFileError(Z)Lorg/rocksdb/DBOptionsInterface;
+#setRowCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptionsInterface;
+#setAllow2pc(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalRecoveryMode(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptionsInterface;
+#setSkipStatsUpdateOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadSlowYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadMaxYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setEnableWriteThreadAdaptiveYield(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowConcurrentMemtableWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
+#setEnableThreadTracking(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAccessHintOnCompactionStart(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptionsInterface;
+#setDbWriteBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setAdviseRandomOnOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
+#setIsFdCloseOnExec(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowMmapWrites(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowMmapReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowFAllocate(Z)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectIoForFlushAndCompaction(Z)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setManifestPreallocationSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalSizeLimitMB(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalTtlSeconds(J)Lorg/rocksdb/DBOptionsInterface;
+#setTableCacheNumshardbits(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxManifestFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setRecycleLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#setKeepLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#setLogFileTimeToRoll(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxLogFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setDbLogDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setDbPaths(Ljava/util/Collection;)Lorg/rocksdb/DBOptionsInterface;
+#setUseFsync(Z)Lorg/rocksdb/DBOptionsInterface;
+#createStatistics()Lorg/rocksdb/DBOptionsInterface;
+#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxFileOpeningThreads(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptionsInterface;
+#setLogger(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptionsInterface;
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptionsInterface;
+#setParanoidChecks(Z)Lorg/rocksdb/DBOptionsInterface;
+#setErrorIfExists(Z)Lorg/rocksdb/DBOptionsInterface;
+#setCreateMissingColumnFamilies(Z)Lorg/rocksdb/DBOptionsInterface;
+#setCreateIfMissing(Z)Lorg/rocksdb/DBOptionsInterface;
+#setIncreaseParallelism(I)Lorg/rocksdb/DBOptionsInterface;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptionsInterface;
+#optimizeForSmallDb()Lorg/rocksdb/DBOptionsInterface;
-#setUseDirectWrites(Z)Lorg/rocksdb/DBOptions;
-#useDirectWrites()Z
-#setAllowConcurrentMemtableWrite(Z)V
-#setEnableWriteThreadAdaptiveYield(Z)V
-#setWriteThreadMaxYieldUsec(J)V
-#setWriteThreadSlowYieldUsec(J)V
-#setBytesPerSync(J)Ljava/lang/Object;
-#setUseAdaptiveMutex(Z)Ljava/lang/Object;
-#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
-#setStatsDumpPeriodSec(I)Ljava/lang/Object;
-#setIsFdCloseOnExec(Z)Ljava/lang/Object;
-#setAllowMmapWrites(Z)Ljava/lang/Object;
-#setAllowMmapReads(Z)Ljava/lang/Object;
-#setUseDirectWrites(Z)Ljava/lang/Object;
-#setUseDirectReads(Z)Ljava/lang/Object;
-#setManifestPreallocationSize(J)Ljava/lang/Object;
-#setWalSizeLimitMB(J)Ljava/lang/Object;
-#setWalTtlSeconds(J)Ljava/lang/Object;
-#setTableCacheNumshardbits(I)Ljava/lang/Object;
-#setMaxManifestFileSize(J)Ljava/lang/Object;
-#setKeepLogFileNum(J)Ljava/lang/Object;
-#setLogFileTimeToRoll(J)Ljava/lang/Object;
-#setMaxLogFileSize(J)Ljava/lang/Object;
-#setMaxBackgroundFlushes(I)Ljava/lang/Object;
-#setMaxBackgroundCompactions(I)Ljava/lang/Object;
-#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
-#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
-#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
-#setUseFsync(Z)Ljava/lang/Object;
-#createStatistics()Ljava/lang/Object;
-#setMaxTotalWalSize(J)Ljava/lang/Object;
-#setMaxOpenFiles(I)Ljava/lang/Object;
-#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
-#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
-#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
-#setParanoidChecks(Z)Ljava/lang/Object;
-#setErrorIfExists(Z)Ljava/lang/Object;
-#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
-#setCreateIfMissing(Z)Ljava/lang/Object;
-#setIncreaseParallelism(I)Ljava/lang/Object;
@5.7.2
+#setStatistics(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptions;
+#statistics()Lorg/rocksdb/Statistics;
+#setStatistics(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptionsInterface;
-#createStatistics()Lorg/rocksdb/DBOptions;
-#statisticsPtr()Lorg/rocksdb/Statistics;
-#createStatistics()Lorg/rocksdb/DBOptionsInterface;
@5.9.2
+#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptions;
+#maxBackgroundJobs()I
+#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
@5.12.4
+#<init>(Lorg/rocksdb/DBOptions;)V
@5.14.2
+#setSstFileManager(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptions;
+#setSstFileManager(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptionsInterface;
@5.18.3
+#setWriteBufferManager(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptions;
+#writeBufferManager()Lorg/rocksdb/WriteBufferManager;
+#setWriteBufferManager(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptionsInterface;
@6.0.1
+#<init>(Lorg/rocksdb/Options;)V
+#setMaxSubcompactions(I)Lorg/rocksdb/DBOptions;
+#setEnablePipelinedWrite(Z)Lorg/rocksdb/DBOptions;
+#enablePipelinedWrite()Z
+#setWalFilter(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/DBOptions;
+#walFilter()Lorg/rocksdb/WalFilter;
+#setAllowIngestBehind(Z)Lorg/rocksdb/DBOptions;
+#allowIngestBehind()Z
+#setPreserveDeletes(Z)Lorg/rocksdb/DBOptions;
+#preserveDeletes()Z
+#setTwoWriteQueues(Z)Lorg/rocksdb/DBOptions;
+#twoWriteQueues()Z
+#setManualWalFlush(Z)Lorg/rocksdb/DBOptions;
+#manualWalFlush()Z
+#setAtomicFlush(Z)Lorg/rocksdb/DBOptions;
+#atomicFlush()Z
+#setAtomicFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#setManualWalFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#setTwoWriteQueues(Z)Lorg/rocksdb/DBOptionsInterface;
+#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowIngestBehind(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalFilter(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/DBOptionsInterface;
+#setEnablePipelinedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setMaxSubcompactions(I)Lorg/rocksdb/DBOptionsInterface;
+#setCompactionReadaheadSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxTotalWalSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDelayedWriteRate(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundJobs(I)Lorg/rocksdb/MutableDBOptionsInterface;
-#setMaxSubcompactions(I)V
-#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
-#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
-#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
@6.6.4
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/DBOptions;
+#statsPersistPeriodSec()I
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/DBOptions;
+#statsHistoryBufferSize()J
+#setStrictBytesPerSync(Z)Lorg/rocksdb/DBOptions;
+#strictBytesPerSync()Z
+#setUnorderedWrite(Z)Lorg/rocksdb/DBOptions;
+#unorderedWrite()Z
+#setUnorderedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setStrictBytesPerSync(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
@6.7.3
*#setBaseBackgroundCompactions(I)V[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptions;[deprecated]
*#maxBackgroundCompactions()I[deprecated]
*#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptions;[deprecated]
*#maxBackgroundFlushes()I[deprecated]
*#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;[deprecated]
@6.10.2
+#getDBOptionsFromProps(Lorg/rocksdb/ConfigOptions;Ljava/util/Properties;)Lorg/rocksdb/DBOptions;
@6.14.5
+#setMaxWriteBatchGroupSizeBytes(J)Lorg/rocksdb/DBOptions;
+#maxWriteBatchGroupSizeBytes()J
+#setSkipCheckingSstFileSizesOnDbOpen(Z)Lorg/rocksdb/DBOptions;
+#skipCheckingSstFileSizesOnDbOpen()Z
+#setAvoidUnnecessaryBlockingIO(Z)Lorg/rocksdb/DBOptions;
+#avoidUnnecessaryBlockingIO()Z
+#setPersistStatsToDisk(Z)Lorg/rocksdb/DBOptions;
+#persistStatsToDisk()Z
+#setWriteDbidToManifest(Z)Lorg/rocksdb/DBOptions;
+#writeDbidToManifest()Z
+#setLogReadaheadSize(J)Lorg/rocksdb/DBOptions;
+#logReadaheadSize()J
+#setBestEffortsRecovery(Z)Lorg/rocksdb/DBOptions;
+#bestEffortsRecovery()Z
+#setMaxBgErrorResumeCount(I)Lorg/rocksdb/DBOptions;
+#maxBgerrorResumeCount()I
+#setBgerrorResumeRetryInterval(J)Lorg/rocksdb/DBOptions;
+#bgerrorResumeRetryInterval()J
+#setBgerrorResumeRetryInterval(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBgErrorResumeCount(I)Lorg/rocksdb/DBOptionsInterface;
+#setBestEffortsRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#setLogReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setWriteDbidToManifest(Z)Lorg/rocksdb/DBOptionsInterface;
+#setPersistStatsToDisk(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAvoidUnnecessaryBlockingIO(Z)Lorg/rocksdb/DBOptionsInterface;
+#setSkipCheckingSstFileSizesOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setMaxWriteBatchGroupSizeBytes(J)Lorg/rocksdb/DBOptionsInterface;
@6.15.2
+#setListeners(Ljava/util/List;)Lorg/rocksdb/DBOptions;
+#listeners()Ljava/util/List;
+#setListeners(Ljava/util/List;)Lorg/rocksdb/DBOptionsInterface;
@7.0.3
-#setBaseBackgroundCompactions(I)V[deprecated]
-#baseBackgroundCompactions()I
-#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptions;
-#newTableReaderForCompactionInputs()Z
-#setPreserveDeletes(Z)Lorg/rocksdb/DBOptions;
-#preserveDeletes()Z
-#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
-#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;

+###org/rocksdb/DBOptionsInterface
@3.6.2
+#setCreateIfMissing(Z)Ljava/lang/Object;
+#createIfMissing()Z
+#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
+#createMissingColumnFamilies()Z
+#setErrorIfExists(Z)Ljava/lang/Object;
+#errorIfExists()Z
+#setParanoidChecks(Z)Ljava/lang/Object;
+#paranoidChecks()Z
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;
+#setMaxOpenFiles(I)Ljava/lang/Object;
+#maxOpenFiles()I
+#setMaxTotalWalSize(J)Ljava/lang/Object;
+#maxTotalWalSize()J
+#createStatistics()Ljava/lang/Object;
+#statisticsPtr()Lorg/rocksdb/Statistics;
+#setDisableDataSync(Z)Ljava/lang/Object;
+#disableDataSync()Z
+#setUseFsync(Z)Ljava/lang/Object;
+#useFsync()Z
+#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
+#dbLogDir()Ljava/lang/String;
+#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
+#walDir()Ljava/lang/String;
+#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
+#deleteObsoleteFilesPeriodMicros()J
+#setMaxBackgroundCompactions(I)Ljava/lang/Object;
+#maxBackgroundCompactions()I
+#setMaxBackgroundFlushes(I)Ljava/lang/Object;
+#maxBackgroundFlushes()I
+#setMaxLogFileSize(J)Ljava/lang/Object;
+#maxLogFileSize()J
+#setLogFileTimeToRoll(J)Ljava/lang/Object;
+#logFileTimeToRoll()J
+#setKeepLogFileNum(J)Ljava/lang/Object;
+#keepLogFileNum()J
+#setMaxManifestFileSize(J)Ljava/lang/Object;
+#maxManifestFileSize()J
+#setTableCacheNumshardbits(I)Ljava/lang/Object;
+#tableCacheNumshardbits()I
+#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;
+#tableCacheRemoveScanCountLimit()I
+#setWalTtlSeconds(J)Ljava/lang/Object;
+#walTtlSeconds()J
+#setWalSizeLimitMB(J)Ljava/lang/Object;
+#walSizeLimitMB()J
+#setManifestPreallocationSize(J)Ljava/lang/Object;
+#manifestPreallocationSize()J
+#setAllowOsBuffer(Z)Ljava/lang/Object;
+#allowOsBuffer()Z
+#setAllowMmapReads(Z)Ljava/lang/Object;
+#allowMmapReads()Z
+#setAllowMmapWrites(Z)Ljava/lang/Object;
+#allowMmapWrites()Z
+#setIsFdCloseOnExec(Z)Ljava/lang/Object;
+#isFdCloseOnExec()Z
+#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;
+#skipLogErrorOnRecovery()Z
+#setStatsDumpPeriodSec(I)Ljava/lang/Object;
+#statsDumpPeriodSec()I
+#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
+#adviseRandomOnOpen()Z
+#setUseAdaptiveMutex(Z)Ljava/lang/Object;
+#useAdaptiveMutex()Z
+#setBytesPerSync(J)Ljava/lang/Object;
+#bytesPerSync()J
@3.9.0
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
+#infoLogLevel()Lorg/rocksdb/InfoLogLevel;
@3.10.0
+#setIncreaseParallelism(I)Ljava/lang/Object;
+#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
*#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;[deprecated]
*#tableCacheRemoveScanCountLimit()I[deprecated]
*#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;[deprecated]
*#skipLogErrorOnRecovery()Z[deprecated]
@3.13.1
-#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;[deprecated]
-#tableCacheRemoveScanCountLimit()I[deprecated]
-#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;[deprecated]
-#skipLogErrorOnRecovery()Z[deprecated]
@4.13.4
*#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;[deprecated]
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
+#setBaseBackgroundCompactions(I)V
+#baseBackgroundCompactions()I
+#setMaxSubcompactions(I)V
+#maxSubcompactions()I
+#setAllowConcurrentMemtableWrite(Z)V
+#allowConcurrentMemtableWrite()Z
+#setEnableWriteThreadAdaptiveYield(Z)V
+#enableWriteThreadAdaptiveYield()Z
+#setWriteThreadMaxYieldUsec(J)V
+#writeThreadMaxYieldUsec()J
+#setWriteThreadSlowYieldUsec(J)V
+#writeThreadSlowYieldUsec()J
@5.1.2
+#setUseDirectReads(Z)Ljava/lang/Object;
+#useDirectReads()Z
+#setUseDirectWrites(Z)Ljava/lang/Object;
+#useDirectWrites()Z
-#setAllowOsBuffer(Z)Ljava/lang/Object;
-#allowOsBuffer()Z
@5.3.4
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;[deprecated]
-#setDisableDataSync(Z)Ljava/lang/Object;
-#disableDataSync()Z
@5.4.5
+#optimizeForSmallDb()Lorg/rocksdb/DBOptionsInterface;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptionsInterface;
+#getEnv()Lorg/rocksdb/Env;
+#setIncreaseParallelism(I)Lorg/rocksdb/DBOptionsInterface;
+#setCreateIfMissing(Z)Lorg/rocksdb/DBOptionsInterface;
+#setCreateMissingColumnFamilies(Z)Lorg/rocksdb/DBOptionsInterface;
+#setErrorIfExists(Z)Lorg/rocksdb/DBOptionsInterface;
+#setParanoidChecks(Z)Lorg/rocksdb/DBOptionsInterface;
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptionsInterface;
+#setLogger(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptionsInterface;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxFileOpeningThreads(I)Lorg/rocksdb/DBOptionsInterface;
+#maxFileOpeningThreads()I
+#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
+#createStatistics()Lorg/rocksdb/DBOptionsInterface;
+#setUseFsync(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDbPaths(Ljava/util/Collection;)Lorg/rocksdb/DBOptionsInterface;
+#dbPaths()Ljava/util/List;
+#setDbLogDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setWalDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxLogFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setLogFileTimeToRoll(J)Lorg/rocksdb/DBOptionsInterface;
+#setKeepLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#setRecycleLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#recycleLogFileNum()J
+#setMaxManifestFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setTableCacheNumshardbits(I)Lorg/rocksdb/DBOptionsInterface;
+#setWalTtlSeconds(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalSizeLimitMB(J)Lorg/rocksdb/DBOptionsInterface;
+#setManifestPreallocationSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectIoForFlushAndCompaction(Z)Lorg/rocksdb/DBOptionsInterface;
+#useDirectIoForFlushAndCompaction()Z
+#setAllowFAllocate(Z)Lorg/rocksdb/DBOptionsInterface;
+#allowFAllocate()Z
+#setAllowMmapReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowMmapWrites(Z)Lorg/rocksdb/DBOptionsInterface;
+#setIsFdCloseOnExec(Z)Lorg/rocksdb/DBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
+#setAdviseRandomOnOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDbWriteBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#dbWriteBufferSize()J
+#setAccessHintOnCompactionStart(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptionsInterface;
+#accessHintOnCompactionStart()Lorg/rocksdb/AccessHint;
+#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;
+#newTableReaderForCompactionInputs()Z
+#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#compactionReadaheadSize()J
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#randomAccessMaxBufferSize()J
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#writableFileMaxBufferSize()J
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/DBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#walBytesPerSync()J
+#setEnableThreadTracking(Z)Lorg/rocksdb/DBOptionsInterface;
+#enableThreadTracking()Z
+#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
+#delayedWriteRate()J
+#setAllowConcurrentMemtableWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setEnableWriteThreadAdaptiveYield(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadMaxYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadSlowYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setSkipStatsUpdateOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#skipStatsUpdateOnDbOpen()Z
+#setWalRecoveryMode(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptionsInterface;
+#walRecoveryMode()Lorg/rocksdb/WALRecoveryMode;
+#setAllow2pc(Z)Lorg/rocksdb/DBOptionsInterface;
+#allow2pc()Z
+#setRowCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptionsInterface;
+#rowCache()Lorg/rocksdb/Cache;
+#setFailIfOptionsFileError(Z)Lorg/rocksdb/DBOptionsInterface;
+#failIfOptionsFileError()Z
+#setDumpMallocStats(Z)Lorg/rocksdb/DBOptionsInterface;
+#dumpMallocStats()Z
+#setAvoidFlushDuringRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#avoidFlushDuringRecovery()Z
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
+#avoidFlushDuringShutdown()Z
-#setIncreaseParallelism(I)Ljava/lang/Object;
-#setCreateIfMissing(Z)Ljava/lang/Object;
-#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
-#setErrorIfExists(Z)Ljava/lang/Object;
-#setParanoidChecks(Z)Ljava/lang/Object;
-#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
-#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
-#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
-#setMaxOpenFiles(I)Ljava/lang/Object;
-#setMaxTotalWalSize(J)Ljava/lang/Object;
-#createStatistics()Ljava/lang/Object;
-#setUseFsync(Z)Ljava/lang/Object;
-#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
-#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
-#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
-#setMaxBackgroundCompactions(I)Ljava/lang/Object;
-#setMaxBackgroundFlushes(I)Ljava/lang/Object;
-#setMaxLogFileSize(J)Ljava/lang/Object;
-#setLogFileTimeToRoll(J)Ljava/lang/Object;
-#setKeepLogFileNum(J)Ljava/lang/Object;
-#setMaxManifestFileSize(J)Ljava/lang/Object;
-#setTableCacheNumshardbits(I)Ljava/lang/Object;
-#setWalTtlSeconds(J)Ljava/lang/Object;
-#setWalSizeLimitMB(J)Ljava/lang/Object;
-#setManifestPreallocationSize(J)Ljava/lang/Object;
-#setUseDirectReads(Z)Ljava/lang/Object;
-#setUseDirectWrites(Z)Ljava/lang/Object;
-#useDirectWrites()Z
-#setAllowMmapReads(Z)Ljava/lang/Object;
-#setAllowMmapWrites(Z)Ljava/lang/Object;
-#setIsFdCloseOnExec(Z)Ljava/lang/Object;
-#setStatsDumpPeriodSec(I)Ljava/lang/Object;
-#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
-#setUseAdaptiveMutex(Z)Ljava/lang/Object;
-#setBytesPerSync(J)Ljava/lang/Object;
-#setAllowConcurrentMemtableWrite(Z)V
-#setEnableWriteThreadAdaptiveYield(Z)V
-#setWriteThreadMaxYieldUsec(J)V
-#setWriteThreadSlowYieldUsec(J)V
@5.7.2
+#setStatistics(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptionsInterface;
+#statistics()Lorg/rocksdb/Statistics;
-#createStatistics()Lorg/rocksdb/DBOptionsInterface;
-#statisticsPtr()Lorg/rocksdb/Statistics;
@5.9.2
+#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
+#maxBackgroundJobs()I
@5.14.2
+#setSstFileManager(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptionsInterface;
@5.18.3
+#setWriteBufferManager(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptionsInterface;
+#writeBufferManager()Lorg/rocksdb/WriteBufferManager;
@6.0.1
+#setMaxSubcompactions(I)Lorg/rocksdb/DBOptionsInterface;
*#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;[deprecated]
*#maxBackgroundFlushes()I[deprecated]
+#setEnablePipelinedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#enablePipelinedWrite()Z
+#setWalFilter(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/DBOptionsInterface;
+#walFilter()Lorg/rocksdb/WalFilter;
+#setAllowIngestBehind(Z)Lorg/rocksdb/DBOptionsInterface;
+#allowIngestBehind()Z
+#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
+#preserveDeletes()Z
+#setTwoWriteQueues(Z)Lorg/rocksdb/DBOptionsInterface;
+#twoWriteQueues()Z
+#setManualWalFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#manualWalFlush()Z
+#setAtomicFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#atomicFlush()Z
-#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
-#maxOpenFiles()I
-#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
-#maxTotalWalSize()J
-#setBaseBackgroundCompactions(I)V
-#baseBackgroundCompactions()I
-#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
-#maxBackgroundCompactions()I
-#setMaxSubcompactions(I)V
-#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
-#maxBackgroundJobs()I
-#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
-#statsDumpPeriodSec()I
-#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
-#compactionReadaheadSize()J
-#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
-#writableFileMaxBufferSize()J
-#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#bytesPerSync()J
-#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#walBytesPerSync()J
-#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
-#delayedWriteRate()J
-#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
-#avoidFlushDuringShutdown()Z
@6.6.4
+#setUnorderedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#unorderedWrite()Z
@6.14.5
+#setMaxWriteBatchGroupSizeBytes(J)Lorg/rocksdb/DBOptionsInterface;
+#maxWriteBatchGroupSizeBytes()J
+#setSkipCheckingSstFileSizesOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#skipCheckingSstFileSizesOnDbOpen()Z
+#setAvoidUnnecessaryBlockingIO(Z)Lorg/rocksdb/DBOptionsInterface;
+#avoidUnnecessaryBlockingIO()Z
+#setPersistStatsToDisk(Z)Lorg/rocksdb/DBOptionsInterface;
+#persistStatsToDisk()Z
+#setWriteDbidToManifest(Z)Lorg/rocksdb/DBOptionsInterface;
+#writeDbidToManifest()Z
+#setLogReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#logReadaheadSize()J
+#setBestEffortsRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#bestEffortsRecovery()Z
+#setMaxBgErrorResumeCount(I)Lorg/rocksdb/DBOptionsInterface;
+#maxBgerrorResumeCount()I
+#setBgerrorResumeRetryInterval(J)Lorg/rocksdb/DBOptionsInterface;
+#bgerrorResumeRetryInterval()J
@6.15.2
+#setListeners(Ljava/util/List;)Lorg/rocksdb/DBOptionsInterface;
+#listeners()Ljava/util/List;
@7.0.3
-#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;
-#newTableReaderForCompactionInputs()Z
-#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
-#preserveDeletes()Z

+###org/rocksdb/DirectComparator
@3.6.2
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
@6.8.1
-###org/rocksdb/DirectComparator

+###org/rocksdb/DirectSlice
@3.6.2
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/nio/ByteBuffer;I)V
+#<init>(Ljava/nio/ByteBuffer;)V
+#get(I)B
+#clear()V
+#removePrefix(I)V
+#startsWith(Lorg/rocksdb/AbstractSlice;)Z
+#equals(Ljava/lang/Object;)Z
+#compare(Lorg/rocksdb/AbstractSlice;)I
+#toString()Ljava/lang/String;
+#toString(Z)Ljava/lang/String;
+#empty()Z
+#size()I
@3.13.1
+#hashCode()I
@4.8.0
-#startsWith(Lorg/rocksdb/AbstractSlice;)Z
-#equals(Ljava/lang/Object;)Z
-#hashCode()I
-#compare(Lorg/rocksdb/AbstractSlice;)I
-#toString()Ljava/lang/String;
-#toString(Z)Ljava/lang/String;
-#empty()Z
-#size()I
@6.19.3
+#setLength(I)V

+###org/rocksdb/EncodingType
@3.6.2
+#values()[Lorg/rocksdb/EncodingType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/EncodingType;
+#getValue()B

+###org/rocksdb/Env
@3.10.0
+#getDefault()Lorg/rocksdb/Env;
+#setBackgroundThreads(I)Lorg/rocksdb/Env;
+#setBackgroundThreads(II)Lorg/rocksdb/Env;
+#getThreadPoolQueueLen(I)I
@6.0.1
+#getBackgroundThreads(Lorg/rocksdb/Priority;)I
+#setBackgroundThreads(ILorg/rocksdb/Priority;)Lorg/rocksdb/Env;
+#getThreadPoolQueueLen(Lorg/rocksdb/Priority;)I
+#incBackgroundThreadsIfNeeded(ILorg/rocksdb/Priority;)Lorg/rocksdb/Env;
+#lowerThreadPoolIOPriority(Lorg/rocksdb/Priority;)Lorg/rocksdb/Env;
+#lowerThreadPoolCPUPriority(Lorg/rocksdb/Priority;)Lorg/rocksdb/Env;
+#getThreadList()Ljava/util/List;
-#setBackgroundThreads(II)Lorg/rocksdb/Env;
-#getThreadPoolQueueLen(I)I

+###org/rocksdb/EnvOptions
@4.13.4
+#<init>()V
+#setUseOsBuffer(Z)Lorg/rocksdb/EnvOptions;
+#useOsBuffer()Z
+#setUseMmapReads(Z)Lorg/rocksdb/EnvOptions;
+#useMmapReads()Z
+#setUseMmapWrites(Z)Lorg/rocksdb/EnvOptions;
+#useMmapWrites()Z
+#setUseDirectReads(Z)Lorg/rocksdb/EnvOptions;
+#useDirectReads()Z
+#setUseDirectWrites(Z)Lorg/rocksdb/EnvOptions;
+#useDirectWrites()Z
+#setAllowFallocate(Z)Lorg/rocksdb/EnvOptions;
+#allowFallocate()Z
+#setSetFdCloexec(Z)Lorg/rocksdb/EnvOptions;
+#setFdCloexec()Z
+#setBytesPerSync(J)Lorg/rocksdb/EnvOptions;
+#bytesPerSync()J
+#setFallocateWithKeepSize(Z)Lorg/rocksdb/EnvOptions;
+#fallocateWithKeepSize()Z
+#setCompactionReadaheadSize(J)Lorg/rocksdb/EnvOptions;
+#compactionReadaheadSize()J
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/EnvOptions;
+#randomAccessMaxBufferSize()J
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/EnvOptions;
+#writableFileMaxBufferSize()J
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/EnvOptions;
+#rateLimiterConfig()Lorg/rocksdb/RateLimiterConfig;
@5.3.4
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/EnvOptions;
+#rateLimiter()Lorg/rocksdb/RateLimiter;
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/EnvOptions;
-#rateLimiterConfig()Lorg/rocksdb/RateLimiterConfig;
@6.0.1
+#<init>(Lorg/rocksdb/DBOptions;)V
-#setUseOsBuffer(Z)Lorg/rocksdb/EnvOptions;
-#useOsBuffer()Z

+###org/rocksdb/Experimental
@4.13.4
+#value()Ljava/lang/String;

+###org/rocksdb/ExternalSstFileInfo
@4.13.4
+#<init>()V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJII)V
+#setFilePath(Ljava/lang/String;)V
+#filePath()Ljava/lang/String;
+#setSmallestKey(Ljava/lang/String;)V
+#smallestKey()Ljava/lang/String;
+#setLargestKey(Ljava/lang/String;)V
+#largestKey()Ljava/lang/String;
+#setSequenceNumber(J)V
+#sequenceNumber()J
+#setFileSize(J)V
+#fileSize()J
+#setNumEntries(I)V
+#numEntries()I
+#setVersion(I)V
+#version()I
@5.5.1
-###org/rocksdb/ExternalSstFileInfo

+###org/rocksdb/Filter
@3.5.0
+#<init>()V
@4.8.0
-#<init>()V

+###org/rocksdb/FlushOptions
@3.8.0
+#<init>()V
+#setWaitForFlush(Z)Lorg/rocksdb/FlushOptions;
+#waitForFlush()Z
@6.0.1
+#setAllowWriteStall(Z)Lorg/rocksdb/FlushOptions;
+#allowWriteStall()Z

+###org/rocksdb/GenericRateLimiterConfig
@3.6.1
+#<init>(JJI)V
+#<init>(J)V
@5.3.4
-###org/rocksdb/GenericRateLimiterConfig

+###org/rocksdb/HashLinkedListMemTableConfig
@3.5.0
+#<init>()V
+#setBucketCount(J)Lorg/rocksdb/HashLinkedListMemTableConfig;
+#bucketCount()J
@3.6.2
+#setHugePageTlbSize(J)Lorg/rocksdb/HashLinkedListMemTableConfig;
+#hugePageTlbSize()J
+#setBucketEntriesLoggingThreshold(I)Lorg/rocksdb/HashLinkedListMemTableConfig;
+#bucketEntriesLoggingThreshold()I
+#setIfLogBucketDistWhenFlush(Z)Lorg/rocksdb/HashLinkedListMemTableConfig;
+#ifLogBucketDistWhenFlush()Z
+#setThresholdUseSkiplist(I)Lorg/rocksdb/HashLinkedListMemTableConfig;
+#thresholdUseSkiplist()I

+###org/rocksdb/HashSkipListMemTableConfig
@3.5.0
+#<init>()V
+#setBucketCount(J)Lorg/rocksdb/HashSkipListMemTableConfig;
+#bucketCount()J
+#setHeight(I)Lorg/rocksdb/HashSkipListMemTableConfig;
+#height()I
+#setBranchingFactor(I)Lorg/rocksdb/HashSkipListMemTableConfig;
+#branchingFactor()I

+###org/rocksdb/HistogramData
@3.5.0
+#<init>(DDDDD)V
+#getMedian()D
+#getPercentile95()D
+#getPercentile99()D
+#getAverage()D
+#getStandardDeviation()D
@6.0.1
+#<init>(DDDDDDJJD)V
+#getMax()D
+#getCount()J
+#getSum()J
+#getMin()D

+###org/rocksdb/HistogramType
@3.5.0
+#values()[Lorg/rocksdb/HistogramType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/HistogramType;
+#getValue()I
@5.7.2
+#getValue()B
-#getValue()I
@6.0.1
*#getValue()B[deprecated]
@6.7.3
+#getHistogramType(B)Lorg/rocksdb/HistogramType;

+###org/rocksdb/IndexType
@3.6.2
+#values()[Lorg/rocksdb/IndexType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/IndexType;
+#getValue()B

+###org/rocksdb/InfoLogLevel
@3.9.0
+#values()[Lorg/rocksdb/InfoLogLevel;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/InfoLogLevel;
+#getValue()B
+#getInfoLogLevel(B)Lorg/rocksdb/InfoLogLevel;

+###org/rocksdb/Logger
@3.10.0
+#<init>(Lorg/rocksdb/Options;)V
+#<init>(Lorg/rocksdb/DBOptions;)V
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)V
+#infoLogLevel()Lorg/rocksdb/InfoLogLevel;

+###org/rocksdb/MemTableConfig
@3.5.0
+#<init>()V

+###org/rocksdb/MergeOperator
@3.6.2
+#newMergeOperatorHandle()J
@5.3.4
-#newMergeOperatorHandle()J

+###org/rocksdb/MutableColumnFamilyOptions$CompactionOption
@4.13.4
+#values()[Lorg/rocksdb/MutableColumnFamilyOptions$CompactionOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$CompactionOption;
+#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;
@6.0.1
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;
-#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;

+###org/rocksdb/MutableColumnFamilyOptions$MemtableOption
@4.13.4
+#values()[Lorg/rocksdb/MutableColumnFamilyOptions$MemtableOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$MemtableOption;
+#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;
@6.0.1
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;
-#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;

+###org/rocksdb/MutableColumnFamilyOptions$MiscOption
@4.13.4
+#values()[Lorg/rocksdb/MutableColumnFamilyOptions$MiscOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$MiscOption;
+#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;
@6.0.1
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;
-#getValueType()Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;

+###org/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder
@4.13.4
+#<init>()V
+#build()Lorg/rocksdb/MutableColumnFamilyOptions;
+#fromString(Ljava/lang/String;Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#setWriteBufferSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#writeBufferSize()J
+#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#arenaBlockSize()J
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#memtablePrefixBloomSizeRatio()D
+#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#memtableHugePageSize()J
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxSuccessiveMerges()J
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxWriteBufferNumber()I
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#inplaceUpdateNumLocks()J
+#setDisableAutoCompactions(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#disableAutoCompactions()Z
+#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#softRateLimit()D
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#softPendingCompactionBytesLimit()J
+#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#hardRateLimit()D
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#hardPendingCompactionBytesLimit()J
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#level0FileNumCompactionTrigger()I
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#level0SlowdownWritesTrigger()I
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#level0StopWritesTrigger()I
+#setMaxCompactionBytes(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxCompactionBytes()J
+#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#targetFileSizeBase()J
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#targetFileSizeMultiplier()I
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxBytesForLevelBase()J
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxBytesForLevelMultiplier()I
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxBytesForLevelMultiplierAdditional()[I
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#verifyChecksumsInCompaction()Z
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxSequentialSkipInIterations()J
+#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#paranoidFileChecks()Z
+#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setDisableAutoCompactions(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setWriteBufferSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.0.1
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#maxBytesForLevelMultiplier()D
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
-#maxBytesForLevelMultiplier()I
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.3.4
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
-#verifyChecksumsInCompaction()Z
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.4.5
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#compressionType()Lorg/rocksdb/CompressionType;
+#setReportBgIoStats(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#reportBgIoStats()Z
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setReportBgIoStats(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setParanoidFileChecks(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
-#softRateLimit()D
-#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
-#hardRateLimit()D
-#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@6.0.1
+#setTtl(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#ttl()J
+#setTtl(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#<init>()V
-#build()Lorg/rocksdb/MutableColumnFamilyOptions;
-#fromString(Ljava/lang/String;Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
@6.24.2
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#periodicCompactionSeconds()J
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.26.1
+#setEnableBlobFiles(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#enableBlobFiles()Z
+#setMinBlobSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#minBlobSize()J
+#setBlobFileSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobFileSize()J
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobCompressionType()Lorg/rocksdb/CompressionType;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#enableBlobGarbageCollection()Z
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobGarbageCollectionAgeCutoff()D
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobFileSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMinBlobSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobFiles(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.27.3
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobGarbageCollectionForceThreshold()D
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.0.3
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#memtableWholeKeyFiltering()Z
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobCompactionReadaheadSize()J
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.4.3
+#setBlobFileStartingLevel(I)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#blobFileStartingLevel()I
+#setBlobFileStartingLevel(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.5.3
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#experimentalMempurgeThreshold()D
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.6.0
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#prepopulateBlobCache()Lorg/rocksdb/PrepopulateBlobCache;
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;

+###org/rocksdb/MutableColumnFamilyOptions$ValueType
@4.13.4
+#values()[Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$ValueType;
@6.0.1
-###org/rocksdb/MutableColumnFamilyOptions$ValueType

+###org/rocksdb/MutableColumnFamilyOptions
@4.13.4
+#builder()Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#parse(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#toString()Ljava/lang/String;
@6.0.1
-#toString()Ljava/lang/String;
@6.26.1
+#parse(Ljava/lang/String;Z)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;

+###org/rocksdb/MutableColumnFamilyOptionsInterface
@4.13.4
+#setWriteBufferSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#writeBufferSize()J
+#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#arenaBlockSize()J
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#memtablePrefixBloomSizeRatio()D
+#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#memtableHugePageSize()J
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxSuccessiveMerges()J
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxWriteBufferNumber()I
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#inplaceUpdateNumLocks()J
+#setDisableAutoCompactions(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#disableAutoCompactions()Z
+#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;[deprecated]
+#softRateLimit()D[deprecated]
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#softPendingCompactionBytesLimit()J
+#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;[deprecated]
+#hardRateLimit()D[deprecated]
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#hardPendingCompactionBytesLimit()J
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#level0FileNumCompactionTrigger()I
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#level0SlowdownWritesTrigger()I
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#level0StopWritesTrigger()I
+#setMaxCompactionBytes(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxCompactionBytes()J
+#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#targetFileSizeBase()J
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#targetFileSizeMultiplier()I
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxBytesForLevelBase()J
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxBytesForLevelMultiplier()I
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxBytesForLevelMultiplierAdditional()[I
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#verifyChecksumsInCompaction()Z
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxSequentialSkipInIterations()J
+#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#paranoidFileChecks()Z
@5.0.1
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#maxBytesForLevelMultiplier()D
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxBytesForLevelMultiplier()I
@5.3.4
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#verifyChecksumsInCompaction()Z
@5.4.5
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#compressionType()Lorg/rocksdb/CompressionType;
-#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#arenaBlockSize()J
-#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#memtablePrefixBloomSizeRatio()D
-#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#memtableHugePageSize()J
-#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxSuccessiveMerges()J
-#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxWriteBufferNumber()I
-#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#inplaceUpdateNumLocks()J
-#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;[deprecated]
-#softRateLimit()D[deprecated]
-#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#softPendingCompactionBytesLimit()J
-#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;[deprecated]
-#hardRateLimit()D[deprecated]
-#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#hardPendingCompactionBytesLimit()J
-#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#level0SlowdownWritesTrigger()I
-#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#level0StopWritesTrigger()I
-#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#targetFileSizeBase()J
-#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#targetFileSizeMultiplier()I
-#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxBytesForLevelMultiplier()D
-#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxBytesForLevelMultiplierAdditional()[I
-#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxSequentialSkipInIterations()J
-#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#paranoidFileChecks()Z

+###org/rocksdb/NativeLibraryLoader
@3.5.0
+#loadLibraryFromJar(Ljava/lang/String;)V
@3.9.0
+#getInstance()Lorg/rocksdb/NativeLibraryLoader;
@3.10.0
+#loadLibrary(Ljava/lang/String;)V
-#loadLibraryFromJar(Ljava/lang/String;)V

+###org/rocksdb/Options
@3.5.0
+#<init>()V
+#setCreateIfMissing(Z)Lorg/rocksdb/Options;
+#setEnv(Lorg/rocksdb/RocksEnv;)Lorg/rocksdb/Options;
+#getEnv()Lorg/rocksdb/RocksEnv;
+#createIfMissing()Z
+#setWriteBufferSize(J)Lorg/rocksdb/Options;
+#writeBufferSize()J
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/Options;
+#maxWriteBufferNumber()I
+#errorIfExists()Z
+#setErrorIfExists(Z)Lorg/rocksdb/Options;
+#paranoidChecks()Z
+#setParanoidChecks(Z)Lorg/rocksdb/Options;
+#maxOpenFiles()I
+#setMaxOpenFiles(I)Lorg/rocksdb/Options;
+#disableDataSync()Z
+#setDisableDataSync(Z)Lorg/rocksdb/Options;
+#useFsync()Z
+#setUseFsync(Z)Lorg/rocksdb/Options;
+#dbStatsLogInterval()I
+#setDbStatsLogInterval(I)Lorg/rocksdb/Options;
+#dbLogDir()Ljava/lang/String;
+#setDbLogDir(Ljava/lang/String;)Lorg/rocksdb/Options;
+#walDir()Ljava/lang/String;
+#setWalDir(Ljava/lang/String;)Lorg/rocksdb/Options;
+#deleteObsoleteFilesPeriodMicros()J
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/Options;
+#maxBackgroundCompactions()I
+#createStatistics()Lorg/rocksdb/Options;
+#statisticsPtr()Lorg/rocksdb/Statistics;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/Options;
+#maxBackgroundFlushes()I
+#setMaxBackgroundFlushes(I)Lorg/rocksdb/Options;
+#maxLogFileSize()J
+#setMaxLogFileSize(J)Lorg/rocksdb/Options;
+#logFileTimeToRoll()J
+#setLogFileTimeToRoll(J)Lorg/rocksdb/Options;
+#keepLogFileNum()J
+#setKeepLogFileNum(J)Lorg/rocksdb/Options;
+#maxManifestFileSize()J
+#setMaxManifestFileSize(J)Lorg/rocksdb/Options;
+#tableCacheNumshardbits()I
+#setTableCacheNumshardbits(I)Lorg/rocksdb/Options;
+#tableCacheRemoveScanCountLimit()I
+#setTableCacheRemoveScanCountLimit(I)Lorg/rocksdb/Options;
+#walTtlSeconds()J
+#setWalTtlSeconds(J)Lorg/rocksdb/Options;
+#walSizeLimitMB()J
+#setWalSizeLimitMB(J)Lorg/rocksdb/Options;
+#manifestPreallocationSize()J
+#setManifestPreallocationSize(J)Lorg/rocksdb/Options;
+#allowOsBuffer()Z
+#setAllowOsBuffer(Z)Lorg/rocksdb/Options;
+#allowMmapReads()Z
+#setAllowMmapReads(Z)Lorg/rocksdb/Options;
+#allowMmapWrites()Z
+#setAllowMmapWrites(Z)Lorg/rocksdb/Options;
+#isFdCloseOnExec()Z
+#setIsFdCloseOnExec(Z)Lorg/rocksdb/Options;
+#skipLogErrorOnRecovery()Z
+#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/Options;
+#statsDumpPeriodSec()I
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/Options;
+#adviseRandomOnOpen()Z
+#setAdviseRandomOnOpen(Z)Lorg/rocksdb/Options;
+#useAdaptiveMutex()Z
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/Options;
+#bytesPerSync()J
+#setBytesPerSync(J)Lorg/rocksdb/Options;
+#allowThreadLocal()Z
+#setAllowThreadLocal(Z)Lorg/rocksdb/Options;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/Options;
+#memTableFactoryName()Ljava/lang/String;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/Options;
+#tableFactoryName()Ljava/lang/String;
+#useFixedLengthPrefixExtractor(I)Lorg/rocksdb/Options;
+#blockRestartInterval()I
+#setBlockRestartInterval(I)Lorg/rocksdb/Options;
+#compressionType()Lorg/rocksdb/CompressionType;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
+#compactionStyle()Lorg/rocksdb/CompactionStyle;
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/Options;
+#numLevels()I
+#setNumLevels(I)Lorg/rocksdb/Options;
+#levelZeroFileNumCompactionTrigger()I
+#setLevelZeroFileNumCompactionTrigger(I)Lorg/rocksdb/Options;
+#levelZeroSlowdownWritesTrigger()I
+#setLevelZeroSlowdownWritesTrigger(I)Lorg/rocksdb/Options;
+#levelZeroStopWritesTrigger()I
+#setLevelZeroStopWritesTrigger(I)Lorg/rocksdb/Options;
+#maxMemCompactionLevel()I
+#setMaxMemCompactionLevel(I)Lorg/rocksdb/Options;
+#targetFileSizeBase()I
+#setTargetFileSizeBase(I)Lorg/rocksdb/Options;
+#targetFileSizeMultiplier()I
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/Options;
+#maxBytesForLevelBase()J
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/Options;
+#maxBytesForLevelMultiplier()I
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/Options;
+#expandedCompactionFactor()I
+#setExpandedCompactionFactor(I)Lorg/rocksdb/Options;
+#sourceCompactionFactor()I
+#setSourceCompactionFactor(I)Lorg/rocksdb/Options;
+#maxGrandparentOverlapFactor()I
+#setMaxGrandparentOverlapFactor(I)Lorg/rocksdb/Options;
+#softRateLimit()D
+#setSoftRateLimit(D)Lorg/rocksdb/Options;
+#hardRateLimit()D
+#setHardRateLimit(D)Lorg/rocksdb/Options;
+#rateLimitDelayMaxMilliseconds()I
+#setRateLimitDelayMaxMilliseconds(I)Lorg/rocksdb/Options;
+#arenaBlockSize()J
+#setArenaBlockSize(J)Lorg/rocksdb/Options;
+#disableAutoCompactions()Z
+#setDisableAutoCompactions(Z)Lorg/rocksdb/Options;
+#purgeRedundantKvsWhileFlush()Z
+#setPurgeRedundantKvsWhileFlush(Z)Lorg/rocksdb/Options;
+#verifyChecksumsInCompaction()Z
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/Options;
+#filterDeletes()Z
+#setFilterDeletes(Z)Lorg/rocksdb/Options;
+#maxSequentialSkipInIterations()J
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/Options;
+#inplaceUpdateSupport()Z
+#setInplaceUpdateSupport(Z)Lorg/rocksdb/Options;
+#inplaceUpdateNumLocks()J
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/Options;
+#memtablePrefixBloomBits()I
+#setMemtablePrefixBloomBits(I)Lorg/rocksdb/Options;
+#memtablePrefixBloomProbes()I
+#setMemtablePrefixBloomProbes(I)Lorg/rocksdb/Options;
+#bloomLocality()I
+#setBloomLocality(I)Lorg/rocksdb/Options;
+#maxSuccessiveMerges()J
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/Options;
+#minWriteBufferNumberToMerge()I
+#setMinWriteBufferNumberToMerge(I)Lorg/rocksdb/Options;
+#minPartialMergeOperands()I
+#setMinPartialMergeOperands(I)Lorg/rocksdb/Options;
@3.6.1
+#setBuiltinComparator(Lorg/rocksdb/Options$BuiltinComparator;)V
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/Options;
-#dbStatsLogInterval()I
-#setDbStatsLogInterval(I)Lorg/rocksdb/Options;
-#allowThreadLocal()Z
-#setAllowThreadLocal(Z)Lorg/rocksdb/Options;
@3.6.2
+#setCreateMissingColumnFamilies(Z)Lorg/rocksdb/Options;
+#prepareForBulkLoad()Lorg/rocksdb/Options;
+#createMissingColumnFamilies()Z
+#optimizeForPointLookup(J)Lorg/rocksdb/Options;
+#optimizeLevelStyleCompaction()Lorg/rocksdb/Options;
+#optimizeLevelStyleCompaction(J)Lorg/rocksdb/Options;
+#optimizeUniversalStyleCompaction()Lorg/rocksdb/Options;
+#optimizeUniversalStyleCompaction(J)Lorg/rocksdb/Options;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/Options;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/Options;
+#setMergeOperatorName(Ljava/lang/String;)Lorg/rocksdb/Options;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/Options;
+#setMaxTotalWalSize(J)Lorg/rocksdb/Options;
+#maxTotalWalSize()J
+#targetFileSizeBase()J
+#setTargetFileSizeBase(J)Lorg/rocksdb/Options;
+#setBytesPerSync(J)Ljava/lang/Object;
+#setUseAdaptiveMutex(Z)Ljava/lang/Object;
+#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
+#setStatsDumpPeriodSec(I)Ljava/lang/Object;
+#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;
+#setIsFdCloseOnExec(Z)Ljava/lang/Object;
+#setAllowMmapWrites(Z)Ljava/lang/Object;
+#setAllowMmapReads(Z)Ljava/lang/Object;
+#setAllowOsBuffer(Z)Ljava/lang/Object;
+#setManifestPreallocationSize(J)Ljava/lang/Object;
+#setWalSizeLimitMB(J)Ljava/lang/Object;
+#setWalTtlSeconds(J)Ljava/lang/Object;
+#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;
+#setTableCacheNumshardbits(I)Ljava/lang/Object;
+#setMaxManifestFileSize(J)Ljava/lang/Object;
+#setKeepLogFileNum(J)Ljava/lang/Object;
+#setLogFileTimeToRoll(J)Ljava/lang/Object;
+#setMaxLogFileSize(J)Ljava/lang/Object;
+#setMaxBackgroundFlushes(I)Ljava/lang/Object;
+#setMaxBackgroundCompactions(I)Ljava/lang/Object;
+#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
+#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
+#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
+#setUseFsync(Z)Ljava/lang/Object;
+#setDisableDataSync(Z)Ljava/lang/Object;
+#createStatistics()Ljava/lang/Object;
+#setMaxTotalWalSize(J)Ljava/lang/Object;
+#setMaxOpenFiles(I)Ljava/lang/Object;
+#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;
+#setParanoidChecks(Z)Ljava/lang/Object;
+#setErrorIfExists(Z)Ljava/lang/Object;
+#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
+#setCreateIfMissing(Z)Ljava/lang/Object;
+#setMinPartialMergeOperands(I)Ljava/lang/Object;
+#setMaxSuccessiveMerges(J)Ljava/lang/Object;
+#setBloomLocality(I)Ljava/lang/Object;
+#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
+#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
+#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
+#setInplaceUpdateSupport(Z)Ljava/lang/Object;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
+#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
+#setFilterDeletes(Z)Ljava/lang/Object;
+#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
+#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
+#setDisableAutoCompactions(Z)Ljava/lang/Object;
+#setArenaBlockSize(J)Ljava/lang/Object;
+#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
+#setHardRateLimit(D)Ljava/lang/Object;
+#setSoftRateLimit(D)Ljava/lang/Object;
+#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
+#setSourceCompactionFactor(I)Ljava/lang/Object;
+#setExpandedCompactionFactor(I)Ljava/lang/Object;
+#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
+#setMaxBytesForLevelBase(J)Ljava/lang/Object;
+#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
+#setTargetFileSizeBase(J)Ljava/lang/Object;
+#setMaxMemCompactionLevel(I)Ljava/lang/Object;
+#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
+#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
+#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
+#setNumLevels(I)Ljava/lang/Object;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
+#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
+#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
+#setMaxWriteBufferNumber(I)Ljava/lang/Object;
+#setWriteBufferSize(J)Ljava/lang/Object;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
+#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
+#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
+#optimizeUniversalStyleCompaction()Ljava/lang/Object;
+#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
+#optimizeLevelStyleCompaction()Ljava/lang/Object;
+#optimizeForPointLookup(J)Ljava/lang/Object;
-#setBuiltinComparator(Lorg/rocksdb/Options$BuiltinComparator;)V
-#blockRestartInterval()I
-#setBlockRestartInterval(I)Lorg/rocksdb/Options;
-#targetFileSizeBase()I
-#setTargetFileSizeBase(I)Lorg/rocksdb/Options;
@3.8.0
+#<init>(Lorg/rocksdb/DBOptions;Lorg/rocksdb/ColumnFamilyOptions;)V
@3.9.0
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/Options;
+#infoLogLevel()Lorg/rocksdb/InfoLogLevel;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
@3.10.0
+#setIncreaseParallelism(I)Lorg/rocksdb/Options;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/Options;
+#getEnv()Lorg/rocksdb/Env;
*#skipLogErrorOnRecovery()Z[deprecated]
*#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/Options;[deprecated]
+#setLogger(Lorg/rocksdb/Logger;)Lorg/rocksdb/Options;
+#setCompressionPerLevel(Ljava/util/List;)Lorg/rocksdb/Options;
+#compressionPerLevel()Ljava/util/List;
+#setLevelCompactionDynamicLevelBytes(Z)Lorg/rocksdb/Options;
+#levelCompactionDynamicLevelBytes()Z
+#setOptimizeFiltersForHits(Z)Lorg/rocksdb/Options;
+#optimizeFiltersForHits()Z
+#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
+#setIncreaseParallelism(I)Ljava/lang/Object;
+#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
+#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
+#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
-#setEnv(Lorg/rocksdb/RocksEnv;)Lorg/rocksdb/Options;
-#getEnv()Lorg/rocksdb/RocksEnv;
@3.13.1
+#setMaxTableFilesSizeFIFO(J)Lorg/rocksdb/Options;
+#maxTableFilesSizeFIFO()J
+#useCappedPrefixExtractor(I)Lorg/rocksdb/Options;
+#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
+#useCappedPrefixExtractor(I)Ljava/lang/Object;
-#tableCacheRemoveScanCountLimit()I
-#setTableCacheRemoveScanCountLimit(I)Lorg/rocksdb/Options;
-#skipLogErrorOnRecovery()Z[deprecated]
-#setSkipLogErrorOnRecovery(Z)Lorg/rocksdb/Options;[deprecated]
-#setSkipLogErrorOnRecovery(Z)Ljava/lang/Object;
-#setTableCacheRemoveScanCountLimit(I)Ljava/lang/Object;
@4.11.2
+#memtablePrefixBloomSizeRatio()D
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/Options;
+#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
-#filterDeletes()Z
-#setFilterDeletes(Z)Lorg/rocksdb/Options;
-#memtablePrefixBloomBits()I
-#setMemtablePrefixBloomBits(I)Lorg/rocksdb/Options;
-#memtablePrefixBloomProbes()I
-#setMemtablePrefixBloomProbes(I)Lorg/rocksdb/Options;
-#setMemtablePrefixBloomProbes(I)Ljava/lang/Object;
-#setMemtablePrefixBloomBits(I)Ljava/lang/Object;
-#setFilterDeletes(Z)Ljava/lang/Object;
@4.13.4
+#setBaseBackgroundCompactions(I)V
+#baseBackgroundCompactions()I
+#setMaxSubcompactions(I)V
+#maxSubcompactions()I
+#setAllowConcurrentMemtableWrite(Z)V
+#allowConcurrentMemtableWrite()Z
+#setEnableWriteThreadAdaptiveYield(Z)V
+#enableWriteThreadAdaptiveYield()Z
+#setWriteThreadMaxYieldUsec(J)V
+#writeThreadMaxYieldUsec()J
+#setWriteThreadSlowYieldUsec(J)V
+#writeThreadSlowYieldUsec()J
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/Options;
+#maxCompactionBytes()J
+#setMaxCompactionBytes(J)Lorg/rocksdb/Options;
+#setMemtableHugePageSize(J)Lorg/rocksdb/Options;
+#memtableHugePageSize()J
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/Options;
+#softPendingCompactionBytesLimit()J
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/Options;
+#hardPendingCompactionBytesLimit()J
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/Options;
+#level0FileNumCompactionTrigger()I
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/Options;
+#level0SlowdownWritesTrigger()I
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#level0StopWritesTrigger()I
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/Options;
+#maxBytesForLevelMultiplierAdditional()[I
+#setParanoidFileChecks(Z)Lorg/rocksdb/Options;
+#paranoidFileChecks()Z
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
+#setMaxCompactionBytes(J)Ljava/lang/Object;
+#optimizeLevelStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForPointLookup(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setLevel0FileNumCompactionTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setDisableAutoCompactions(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setWriteBufferSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#expandedCompactionFactor()I
-#setExpandedCompactionFactor(I)Lorg/rocksdb/Options;
-#sourceCompactionFactor()I
-#setSourceCompactionFactor(I)Lorg/rocksdb/Options;
-#maxGrandparentOverlapFactor()I
-#setMaxGrandparentOverlapFactor(I)Lorg/rocksdb/Options;
-#setMaxSuccessiveMerges(J)Ljava/lang/Object;
-#setMemtablePrefixBloomSizeRatio(D)Ljava/lang/Object;
-#setInplaceUpdateNumLocks(J)Ljava/lang/Object;
-#setMaxSequentialSkipInIterations(J)Ljava/lang/Object;
-#setVerifyChecksumsInCompaction(Z)Ljava/lang/Object;
-#setDisableAutoCompactions(Z)Ljava/lang/Object;
-#setArenaBlockSize(J)Ljava/lang/Object;
-#setMaxGrandparentOverlapFactor(I)Ljava/lang/Object;
-#setSourceCompactionFactor(I)Ljava/lang/Object;
-#setExpandedCompactionFactor(I)Ljava/lang/Object;
-#setMaxBytesForLevelBase(J)Ljava/lang/Object;
-#setTargetFileSizeMultiplier(I)Ljava/lang/Object;
-#setTargetFileSizeBase(J)Ljava/lang/Object;
-#setMaxWriteBufferNumber(I)Ljava/lang/Object;
-#setWriteBufferSize(J)Ljava/lang/Object;
-#optimizeLevelStyleCompaction()Ljava/lang/Object;
-#optimizeForPointLookup(J)Ljava/lang/Object;
@5.0.1
+#maxBytesForLevelMultiplier()D
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/Options;
+#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#maxBytesForLevelMultiplier()I
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/Options;
-#setMaxBytesForLevelMultiplier(I)Ljava/lang/Object;
-#setMaxBytesForLevelMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.1.2
+#setUseDirectReads(Z)Lorg/rocksdb/Options;
+#useDirectReads()Z
+#setUseDirectWrites(Z)Lorg/rocksdb/Options;
+#useDirectWrites()Z
+#setUseDirectWrites(Z)Ljava/lang/Object;
+#setUseDirectReads(Z)Ljava/lang/Object;
-#allowOsBuffer()Z
-#setAllowOsBuffer(Z)Lorg/rocksdb/Options;
-#setAllowOsBuffer(Z)Ljava/lang/Object;
@5.3.4
-#disableDataSync()Z
-#setDisableDataSync(Z)Lorg/rocksdb/Options;
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/Options;
-#verifyChecksumsInCompaction()Z
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/Options;
-#minPartialMergeOperands()I
-#setMinPartialMergeOperands(I)Lorg/rocksdb/Options;
-#setDisableDataSync(Z)Ljava/lang/Object;
-#setRateLimiterConfig(Lorg/rocksdb/RateLimiterConfig;)Ljava/lang/Object;
-#setMinPartialMergeOperands(I)Ljava/lang/Object;
-#setVerifyChecksumsInCompaction(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.4.5
+#optimizeForSmallDb()Lorg/rocksdb/Options;
+#setMaxFileOpeningThreads(I)Lorg/rocksdb/Options;
+#maxFileOpeningThreads()I
+#setDbPaths(Ljava/util/Collection;)Lorg/rocksdb/Options;
+#dbPaths()Ljava/util/List;
+#setRecycleLogFileNum(J)Lorg/rocksdb/Options;
+#recycleLogFileNum()J
+#setUseDirectIoForFlushAndCompaction(Z)Lorg/rocksdb/Options;
+#useDirectIoForFlushAndCompaction()Z
+#setAllowFAllocate(Z)Lorg/rocksdb/Options;
+#allowFAllocate()Z
+#setDbWriteBufferSize(J)Lorg/rocksdb/Options;
+#dbWriteBufferSize()J
+#setAccessHintOnCompactionStart(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/Options;
+#accessHintOnCompactionStart()Lorg/rocksdb/AccessHint;
+#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/Options;
+#newTableReaderForCompactionInputs()Z
+#setCompactionReadaheadSize(J)Lorg/rocksdb/Options;
+#compactionReadaheadSize()J
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/Options;
+#randomAccessMaxBufferSize()J
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/Options;
+#writableFileMaxBufferSize()J
+#setWalBytesPerSync(J)Lorg/rocksdb/Options;
+#walBytesPerSync()J
+#setEnableThreadTracking(Z)Lorg/rocksdb/Options;
+#enableThreadTracking()Z
+#setDelayedWriteRate(J)Lorg/rocksdb/Options;
+#delayedWriteRate()J
+#setAllowConcurrentMemtableWrite(Z)Lorg/rocksdb/Options;
+#setEnableWriteThreadAdaptiveYield(Z)Lorg/rocksdb/Options;
+#setWriteThreadMaxYieldUsec(J)Lorg/rocksdb/Options;
+#setWriteThreadSlowYieldUsec(J)Lorg/rocksdb/Options;
+#setSkipStatsUpdateOnDbOpen(Z)Lorg/rocksdb/Options;
+#skipStatsUpdateOnDbOpen()Z
+#setWalRecoveryMode(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/Options;
+#walRecoveryMode()Lorg/rocksdb/WALRecoveryMode;
+#setAllow2pc(Z)Lorg/rocksdb/Options;
+#allow2pc()Z
+#setRowCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/Options;
+#rowCache()Lorg/rocksdb/Cache;
+#setFailIfOptionsFileError(Z)Lorg/rocksdb/Options;
+#failIfOptionsFileError()Z
+#setDumpMallocStats(Z)Lorg/rocksdb/Options;
+#dumpMallocStats()Z
+#setAvoidFlushDuringRecovery(Z)Lorg/rocksdb/Options;
+#avoidFlushDuringRecovery()Z
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/Options;
+#avoidFlushDuringShutdown()Z
+#memTableConfig()Lorg/rocksdb/MemTableConfig;
+#tableFormatConfig()Lorg/rocksdb/TableFormatConfig;
+#setBottommostCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
+#bottommostCompressionType()Lorg/rocksdb/CompressionType;
+#setCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/Options;
+#compressionOptions()Lorg/rocksdb/CompressionOptions;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/Options;
+#setMaxWriteBufferNumberToMaintain(I)Lorg/rocksdb/Options;
+#maxWriteBufferNumberToMaintain()I
+#setCompactionPriority(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/Options;
+#compactionPriority()Lorg/rocksdb/CompactionPriority;
+#setReportBgIoStats(Z)Lorg/rocksdb/Options;
+#reportBgIoStats()Z
+#setCompactionOptionsUniversal(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/Options;
+#compactionOptionsUniversal()Lorg/rocksdb/CompactionOptionsUniversal;
+#setCompactionOptionsFIFO(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/Options;
+#compactionOptionsFIFO()Lorg/rocksdb/CompactionOptionsFIFO;
+#setForceConsistencyChecks(Z)Lorg/rocksdb/Options;
+#forceConsistencyChecks()Z
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAvoidFlushDuringRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDumpMallocStats(Z)Lorg/rocksdb/DBOptionsInterface;
+#setFailIfOptionsFileError(Z)Lorg/rocksdb/DBOptionsInterface;
+#setRowCache(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptionsInterface;
+#setAllow2pc(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalRecoveryMode(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptionsInterface;
+#setSkipStatsUpdateOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadSlowYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setWriteThreadMaxYieldUsec(J)Lorg/rocksdb/DBOptionsInterface;
+#setEnableWriteThreadAdaptiveYield(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowConcurrentMemtableWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
+#setEnableThreadTracking(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
+#setUseAdaptiveMutex(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setRandomAccessMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAccessHintOnCompactionStart(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptionsInterface;
+#setDbWriteBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setAdviseRandomOnOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
+#setIsFdCloseOnExec(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowMmapWrites(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowMmapReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowFAllocate(Z)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectIoForFlushAndCompaction(Z)Lorg/rocksdb/DBOptionsInterface;
+#setUseDirectReads(Z)Lorg/rocksdb/DBOptionsInterface;
+#setManifestPreallocationSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalSizeLimitMB(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalTtlSeconds(J)Lorg/rocksdb/DBOptionsInterface;
+#setTableCacheNumshardbits(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxManifestFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setRecycleLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#setKeepLogFileNum(J)Lorg/rocksdb/DBOptionsInterface;
+#setLogFileTimeToRoll(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxLogFileSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/DBOptionsInterface;
+#setWalDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setDbLogDir(Ljava/lang/String;)Lorg/rocksdb/DBOptionsInterface;
+#setDbPaths(Ljava/util/Collection;)Lorg/rocksdb/DBOptionsInterface;
+#setUseFsync(Z)Lorg/rocksdb/DBOptionsInterface;
+#createStatistics()Lorg/rocksdb/DBOptionsInterface;
+#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxFileOpeningThreads(I)Lorg/rocksdb/DBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
+#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptionsInterface;
+#setLogger(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptionsInterface;
+#setRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptionsInterface;
+#setParanoidChecks(Z)Lorg/rocksdb/DBOptionsInterface;
+#setErrorIfExists(Z)Lorg/rocksdb/DBOptionsInterface;
+#setCreateMissingColumnFamilies(Z)Lorg/rocksdb/DBOptionsInterface;
+#setCreateIfMissing(Z)Lorg/rocksdb/DBOptionsInterface;
+#setIncreaseParallelism(I)Lorg/rocksdb/DBOptionsInterface;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptionsInterface;
+#optimizeForSmallDb()Lorg/rocksdb/DBOptionsInterface;
+#setCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setBottommostCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxTableFilesSizeFIFO(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroStopWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroSlowdownWritesTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setLevelZeroFileNumCompactionTrigger(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useCappedPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#useFixedLengthPrefixExtractor(I)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperator(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMergeOperatorName(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setComparator(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeUniversalStyleCompaction()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeLevelStyleCompaction(J)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForSmallDb()Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setForceConsistencyChecks(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setOptimizeFiltersForHits(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionOptionsFIFO(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionOptionsUniversal(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionPriority(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setMaxCompactionBytes(J)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setLevelCompactionDynamicLevelBytes(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setNumLevels(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompressionPerLevel(Ljava/util/List;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setBloomLocality(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setInplaceUpdateSupport(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumberToMaintain(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setMinWriteBufferNumberToMerge(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#setCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
+#setReportBgIoStats(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setParanoidFileChecks(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setTargetFileSizeBase(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setArenaBlockSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableHugePageSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#setUseDirectWrites(Z)Lorg/rocksdb/Options;
-#useDirectWrites()Z
-#setAllowConcurrentMemtableWrite(Z)V
-#setEnableWriteThreadAdaptiveYield(Z)V
-#setWriteThreadMaxYieldUsec(J)V
-#setWriteThreadSlowYieldUsec(J)V
-#maxMemCompactionLevel()I
-#setMaxMemCompactionLevel(I)Lorg/rocksdb/Options;
-#softRateLimit()D
-#setSoftRateLimit(D)Lorg/rocksdb/Options;
-#hardRateLimit()D
-#setHardRateLimit(D)Lorg/rocksdb/Options;
-#rateLimitDelayMaxMilliseconds()I
-#setRateLimitDelayMaxMilliseconds(I)Lorg/rocksdb/Options;
-#purgeRedundantKvsWhileFlush()Z
-#setPurgeRedundantKvsWhileFlush(Z)Lorg/rocksdb/Options;
-#setLevel0StopWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setBytesPerSync(J)Ljava/lang/Object;
-#setUseAdaptiveMutex(Z)Ljava/lang/Object;
-#setAdviseRandomOnOpen(Z)Ljava/lang/Object;
-#setStatsDumpPeriodSec(I)Ljava/lang/Object;
-#setIsFdCloseOnExec(Z)Ljava/lang/Object;
-#setAllowMmapWrites(Z)Ljava/lang/Object;
-#setAllowMmapReads(Z)Ljava/lang/Object;
-#setUseDirectWrites(Z)Ljava/lang/Object;
-#setUseDirectReads(Z)Ljava/lang/Object;
-#setManifestPreallocationSize(J)Ljava/lang/Object;
-#setWalSizeLimitMB(J)Ljava/lang/Object;
-#setWalTtlSeconds(J)Ljava/lang/Object;
-#setTableCacheNumshardbits(I)Ljava/lang/Object;
-#setMaxManifestFileSize(J)Ljava/lang/Object;
-#setKeepLogFileNum(J)Ljava/lang/Object;
-#setLogFileTimeToRoll(J)Ljava/lang/Object;
-#setMaxLogFileSize(J)Ljava/lang/Object;
-#setMaxBackgroundFlushes(I)Ljava/lang/Object;
-#setMaxBackgroundCompactions(I)Ljava/lang/Object;
-#setDeleteObsoleteFilesPeriodMicros(J)Ljava/lang/Object;
-#setWalDir(Ljava/lang/String;)Ljava/lang/Object;
-#setDbLogDir(Ljava/lang/String;)Ljava/lang/Object;
-#setUseFsync(Z)Ljava/lang/Object;
-#createStatistics()Ljava/lang/Object;
-#setMaxTotalWalSize(J)Ljava/lang/Object;
-#setMaxOpenFiles(I)Ljava/lang/Object;
-#setInfoLogLevel(Lorg/rocksdb/InfoLogLevel;)Ljava/lang/Object;
-#setLogger(Lorg/rocksdb/Logger;)Ljava/lang/Object;
-#setRateLimiter(Lorg/rocksdb/RateLimiter;)Ljava/lang/Object;
-#setParanoidChecks(Z)Ljava/lang/Object;
-#setErrorIfExists(Z)Ljava/lang/Object;
-#setCreateMissingColumnFamilies(Z)Ljava/lang/Object;
-#setCreateIfMissing(Z)Ljava/lang/Object;
-#setIncreaseParallelism(I)Ljava/lang/Object;
-#setOptimizeFiltersForHits(Z)Ljava/lang/Object;
-#setBloomLocality(I)Ljava/lang/Object;
-#setInplaceUpdateSupport(Z)Ljava/lang/Object;
-#setTableFormatConfig(Lorg/rocksdb/TableFormatConfig;)Ljava/lang/Object;
-#setMemTableConfig(Lorg/rocksdb/MemTableConfig;)Ljava/lang/Object;
-#setMaxTableFilesSizeFIFO(J)Ljava/lang/Object;
-#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Ljava/lang/Object;
-#setPurgeRedundantKvsWhileFlush(Z)Ljava/lang/Object;
-#setRateLimitDelayMaxMilliseconds(I)Ljava/lang/Object;
-#setHardRateLimit(D)Ljava/lang/Object;
-#setSoftRateLimit(D)Ljava/lang/Object;
-#setMaxCompactionBytes(J)Ljava/lang/Object;
-#setMaxBytesForLevelMultiplier(D)Ljava/lang/Object;
-#setLevelCompactionDynamicLevelBytes(Z)Ljava/lang/Object;
-#setMaxMemCompactionLevel(I)Ljava/lang/Object;
-#setLevelZeroStopWritesTrigger(I)Ljava/lang/Object;
-#setLevelZeroSlowdownWritesTrigger(I)Ljava/lang/Object;
-#setLevelZeroFileNumCompactionTrigger(I)Ljava/lang/Object;
-#setNumLevels(I)Ljava/lang/Object;
-#setCompressionPerLevel(Ljava/util/List;)Ljava/lang/Object;
-#setCompressionType(Lorg/rocksdb/CompressionType;)Ljava/lang/Object;
-#useCappedPrefixExtractor(I)Ljava/lang/Object;
-#useFixedLengthPrefixExtractor(I)Ljava/lang/Object;
-#setMinWriteBufferNumberToMerge(I)Ljava/lang/Object;
-#setMergeOperator(Lorg/rocksdb/MergeOperator;)Ljava/lang/Object;
-#setMergeOperatorName(Ljava/lang/String;)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/AbstractComparator;)Ljava/lang/Object;
-#setComparator(Lorg/rocksdb/BuiltinComparator;)Ljava/lang/Object;
-#optimizeUniversalStyleCompaction(J)Ljava/lang/Object;
-#optimizeUniversalStyleCompaction()Ljava/lang/Object;
-#optimizeLevelStyleCompaction(J)Ljava/lang/Object;
-#setParanoidFileChecks(Z)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeMultiplier(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setTargetFileSizeBase(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setHardRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setSoftRateLimit(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setInplaceUpdateNumLocks(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxWriteBufferNumber(I)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMaxSuccessiveMerges(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtableHugePageSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
-#setArenaBlockSize(J)Lorg/rocksdb/MutableColumnFamilyOptionsInterface;
@5.7.2
+#setStatistics(Lorg/rocksdb/Statistics;)Lorg/rocksdb/Options;
+#statistics()Lorg/rocksdb/Statistics;
+#setStatistics(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptionsInterface;
-#createStatistics()Lorg/rocksdb/Options;
-#statisticsPtr()Lorg/rocksdb/Statistics;
-#createStatistics()Lorg/rocksdb/DBOptionsInterface;
@5.9.2
+#maxBackgroundJobs()I
+#setMaxBackgroundJobs(I)Lorg/rocksdb/Options;
+#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
@5.12.4
+#<init>(Lorg/rocksdb/Options;)V
@5.14.2
+#setSstFileManager(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/Options;
+#setSstFileManager(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptionsInterface;
@5.18.3
+#setWriteBufferManager(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/Options;
+#writeBufferManager()Lorg/rocksdb/WriteBufferManager;
+#setWriteBufferManager(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptionsInterface;
@6.0.1
+#setCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/Options;
+#compactionFilter()Lorg/rocksdb/AbstractCompactionFilter;
+#setCompactionFilterFactory(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/Options;
+#compactionFilterFactory()Lorg/rocksdb/AbstractCompactionFilterFactory;
+#setMaxSubcompactions(I)Lorg/rocksdb/Options;
+#setEnablePipelinedWrite(Z)Lorg/rocksdb/Options;
+#enablePipelinedWrite()Z
+#setWalFilter(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/Options;
+#walFilter()Lorg/rocksdb/WalFilter;
+#setAllowIngestBehind(Z)Lorg/rocksdb/Options;
+#allowIngestBehind()Z
+#setPreserveDeletes(Z)Lorg/rocksdb/Options;
+#preserveDeletes()Z
+#setTwoWriteQueues(Z)Lorg/rocksdb/Options;
+#twoWriteQueues()Z
+#setManualWalFlush(Z)Lorg/rocksdb/Options;
+#manualWalFlush()Z
+#setBottommostCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/Options;
+#bottommostCompressionOptions()Lorg/rocksdb/CompressionOptions;
+#setTtl(J)Lorg/rocksdb/Options;
+#ttl()J
+#setAtomicFlush(Z)Lorg/rocksdb/Options;
+#atomicFlush()Z
+#setAtomicFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#setManualWalFlush(Z)Lorg/rocksdb/DBOptionsInterface;
+#setTwoWriteQueues(Z)Lorg/rocksdb/DBOptionsInterface;
+#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAllowIngestBehind(Z)Lorg/rocksdb/DBOptionsInterface;
+#setWalFilter(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/DBOptionsInterface;
+#setEnablePipelinedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setMaxSubcompactions(I)Lorg/rocksdb/DBOptionsInterface;
+#setCompactionReadaheadSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxTotalWalSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDelayedWriteRate(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundJobs(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setBottommostCompressionOptions(Lorg/rocksdb/CompressionOptions;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setCompactionFilterFactory(Lorg/rocksdb/AbstractCompactionFilterFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#setTtl(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#setMaxSubcompactions(I)V
-#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/DBOptionsInterface;
-#setDelayedWriteRate(J)Lorg/rocksdb/DBOptionsInterface;
-#setWalBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#setBytesPerSync(J)Lorg/rocksdb/DBOptionsInterface;
-#setWritableFileMaxBufferSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setCompactionReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setStatsDumpPeriodSec(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxBackgroundJobs(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxBackgroundCompactions(I)Lorg/rocksdb/DBOptionsInterface;
-#setMaxTotalWalSize(J)Lorg/rocksdb/DBOptionsInterface;
-#setMaxOpenFiles(I)Lorg/rocksdb/DBOptionsInterface;
@6.6.4
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/Options;
+#statsPersistPeriodSec()I
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/Options;
+#statsHistoryBufferSize()J
+#setStrictBytesPerSync(Z)Lorg/rocksdb/Options;
+#strictBytesPerSync()Z
+#setUnorderedWrite(Z)Lorg/rocksdb/Options;
+#unorderedWrite()Z
+#setUnorderedWrite(Z)Lorg/rocksdb/DBOptionsInterface;
+#setStrictBytesPerSync(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
@6.7.3
*#maxBackgroundCompactions()I[deprecated]
*#setBaseBackgroundCompactions(I)V[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/Options;[deprecated]
*#maxBackgroundFlushes()I[deprecated]
*#setMaxBackgroundFlushes(I)Lorg/rocksdb/Options;[deprecated]
*#setMaxBackgroundFlushes(I)Lorg/rocksdb/DBOptionsInterface;[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;[deprecated]
@6.10.2
+#getOptionStringFromProps(Ljava/util/Properties;)Ljava/lang/String;
@6.12.7
+#setSstPartitionerFactory(Lorg/rocksdb/SstPartitionerFactory;)Lorg/rocksdb/Options;
+#sstPartitionerFactory()Lorg/rocksdb/SstPartitionerFactory;
+#setSstPartitionerFactory(Lorg/rocksdb/SstPartitionerFactory;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.13.3
+#setCompactionThreadLimiter(Lorg/rocksdb/ConcurrentTaskLimiter;)Lorg/rocksdb/Options;
+#compactionThreadLimiter()Lorg/rocksdb/ConcurrentTaskLimiter;
+#setCompactionThreadLimiter(Lorg/rocksdb/ConcurrentTaskLimiter;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.14.5
+#oldDefaults(II)Lorg/rocksdb/Options;
+#optimizeForSmallDb(Lorg/rocksdb/Cache;)Lorg/rocksdb/Options;
+#setMaxWriteBatchGroupSizeBytes(J)Lorg/rocksdb/Options;
+#maxWriteBatchGroupSizeBytes()J
+#setSkipCheckingSstFileSizesOnDbOpen(Z)Lorg/rocksdb/Options;
+#skipCheckingSstFileSizesOnDbOpen()Z
+#setCfPaths(Ljava/util/Collection;)Lorg/rocksdb/Options;
+#cfPaths()Ljava/util/List;
+#setAvoidUnnecessaryBlockingIO(Z)Lorg/rocksdb/Options;
+#avoidUnnecessaryBlockingIO()Z
+#setPersistStatsToDisk(Z)Lorg/rocksdb/Options;
+#persistStatsToDisk()Z
+#setWriteDbidToManifest(Z)Lorg/rocksdb/Options;
+#writeDbidToManifest()Z
+#setLogReadaheadSize(J)Lorg/rocksdb/Options;
+#logReadaheadSize()J
+#setBestEffortsRecovery(Z)Lorg/rocksdb/Options;
+#bestEffortsRecovery()Z
+#setMaxBgErrorResumeCount(I)Lorg/rocksdb/Options;
+#maxBgerrorResumeCount()I
+#setBgerrorResumeRetryInterval(J)Lorg/rocksdb/Options;
+#bgerrorResumeRetryInterval()J
+#setBgerrorResumeRetryInterval(J)Lorg/rocksdb/DBOptionsInterface;
+#setMaxBgErrorResumeCount(I)Lorg/rocksdb/DBOptionsInterface;
+#setBestEffortsRecovery(Z)Lorg/rocksdb/DBOptionsInterface;
+#setLogReadaheadSize(J)Lorg/rocksdb/DBOptionsInterface;
+#setWriteDbidToManifest(Z)Lorg/rocksdb/DBOptionsInterface;
+#setPersistStatsToDisk(Z)Lorg/rocksdb/DBOptionsInterface;
+#setAvoidUnnecessaryBlockingIO(Z)Lorg/rocksdb/DBOptionsInterface;
+#setSkipCheckingSstFileSizesOnDbOpen(Z)Lorg/rocksdb/DBOptionsInterface;
+#setMaxWriteBatchGroupSizeBytes(J)Lorg/rocksdb/DBOptionsInterface;
+#setCfPaths(Ljava/util/Collection;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#optimizeForSmallDb(Lorg/rocksdb/Cache;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#oldDefaults(II)Lorg/rocksdb/ColumnFamilyOptionsInterface;
@6.15.2
+#setListeners(Ljava/util/List;)Lorg/rocksdb/Options;
+#listeners()Ljava/util/List;
+#setListeners(Ljava/util/List;)Lorg/rocksdb/DBOptionsInterface;
@6.24.2
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/Options;
+#periodicCompactionSeconds()J
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.26.1
+#setEnableBlobFiles(Z)Lorg/rocksdb/Options;
+#enableBlobFiles()Z
+#setMinBlobSize(J)Lorg/rocksdb/Options;
+#minBlobSize()J
+#setBlobFileSize(J)Lorg/rocksdb/Options;
+#blobFileSize()J
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
+#blobCompressionType()Lorg/rocksdb/CompressionType;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/Options;
+#enableBlobGarbageCollection()Z
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/Options;
+#blobGarbageCollectionAgeCutoff()D
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setBlobFileSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMinBlobSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setEnableBlobFiles(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@6.27.3
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/Options;
+#blobGarbageCollectionForceThreshold()D
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.0.3
+#memtableWholeKeyFiltering()Z
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/Options;
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/Options;
+#blobCompactionReadaheadSize()J
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
-#setBaseBackgroundCompactions(I)V[deprecated]
-#baseBackgroundCompactions()I
-#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/Options;
-#newTableReaderForCompactionInputs()Z
-#setPreserveDeletes(Z)Lorg/rocksdb/Options;
-#preserveDeletes()Z
-#setPreserveDeletes(Z)Lorg/rocksdb/DBOptionsInterface;
-#setNewTableReaderForCompactionInputs(Z)Lorg/rocksdb/DBOptionsInterface;
@7.4.3
+#setBlobFileStartingLevel(I)Lorg/rocksdb/Options;
+#blobFileStartingLevel()I
+#setBlobFileStartingLevel(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.5.3
+#experimentalMempurgeThreshold()D
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/Options;
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
@7.6.0
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/Options;
+#prepopulateBlobCache()Lorg/rocksdb/PrepopulateBlobCache;
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;

+###org/rocksdb/PlainTableConfig
@3.5.0
+#<init>()V
+#setKeySize(I)Lorg/rocksdb/PlainTableConfig;
+#keySize()I
+#setBloomBitsPerKey(I)Lorg/rocksdb/PlainTableConfig;
+#bloomBitsPerKey()I
+#setHashTableRatio(D)Lorg/rocksdb/PlainTableConfig;
+#hashTableRatio()D
+#setIndexSparseness(I)Lorg/rocksdb/PlainTableConfig;
+#indexSparseness()I
@3.6.2
+#indexSparseness()J
+#setHugePageTlbSize(I)Lorg/rocksdb/PlainTableConfig;
+#hugePageTlbSize()I
+#setEncodingType(Lorg/rocksdb/EncodingType;)Lorg/rocksdb/PlainTableConfig;
+#encodingType()Lorg/rocksdb/EncodingType;
+#setFullScanMode(Z)Lorg/rocksdb/PlainTableConfig;
+#fullScanMode()Z
+#setStoreIndexInFile(Z)Lorg/rocksdb/PlainTableConfig;
+#storeIndexInFile()Z
-#indexSparseness()I

+###org/rocksdb/RateLimiter
@4.13.4
+#<init>(JJI)V
+#<init>(J)V
+#setBytesPerSecond(J)V
+#request(J)V
+#getSingleBurstBytes()J
+#getTotalBytesThrough()J
+#getTotalRequests()J
@5.11.3
+#<init>(JJ)V
+#<init>(JJILorg/rocksdb/RateLimiterMode;)V
+#<init>(JJILorg/rocksdb/RateLimiterMode;Z)V
+#getBytesPerSecond()J

+###org/rocksdb/RateLimiterConfig
@3.6.1
+#<init>()V
@5.3.4
-###org/rocksdb/RateLimiterConfig

+###org/rocksdb/ReadOptions
@3.5.0
+#<init>()V
+#verifyChecksums()Z
+#setVerifyChecksums(Z)Lorg/rocksdb/ReadOptions;
+#fillCache()Z
+#setFillCache(Z)Lorg/rocksdb/ReadOptions;
+#tailing()Z
+#setTailing(Z)Lorg/rocksdb/ReadOptions;
@3.6.2
+#setSnapshot(Lorg/rocksdb/Snapshot;)Lorg/rocksdb/ReadOptions;
+#snapshot()Lorg/rocksdb/Snapshot;
@4.11.2
+#readTier()Lorg/rocksdb/ReadTier;
+#setReadTier(Lorg/rocksdb/ReadTier;)Lorg/rocksdb/ReadOptions;
+#managed()Z
+#setManaged(Z)Lorg/rocksdb/ReadOptions;
+#totalOrderSeek()Z
+#setTotalOrderSeek(Z)Lorg/rocksdb/ReadOptions;
+#prefixSameAsStart()Z
+#setPrefixSameAsStart(Z)Lorg/rocksdb/ReadOptions;
+#pinData()Z
+#setPinData(Z)Lorg/rocksdb/ReadOptions;
@5.4.5
+#backgroundPurgeOnIteratorCleanup()Z
+#setBackgroundPurgeOnIteratorCleanup(Z)Lorg/rocksdb/ReadOptions;
+#readaheadSize()J
+#setReadaheadSize(J)Lorg/rocksdb/ReadOptions;
+#ignoreRangeDeletions()Z
+#setIgnoreRangeDeletions(Z)Lorg/rocksdb/ReadOptions;
@5.9.2
+#<init>(Lorg/rocksdb/ReadOptions;)V
+#setIterateUpperBound(Lorg/rocksdb/Slice;)Lorg/rocksdb/ReadOptions;
+#iterateUpperBound()Lorg/rocksdb/Slice;
@5.18.3
+#setIterateLowerBound(Lorg/rocksdb/Slice;)Lorg/rocksdb/ReadOptions;
+#iterateLowerBound()Lorg/rocksdb/Slice;
@6.0.1
+#<init>(ZZ)V
*#managed()Z[deprecated]
*#setManaged(Z)Lorg/rocksdb/ReadOptions;[deprecated]
+#maxSkippableInternalKeys()J
+#setMaxSkippableInternalKeys(J)Lorg/rocksdb/ReadOptions;
+#setTableFilter(Lorg/rocksdb/AbstractTableFilter;)Lorg/rocksdb/ReadOptions;
+#setIterStartSeqnum(J)Lorg/rocksdb/ReadOptions;
+#iterStartSeqnum()J
@6.19.3
+#setIterateLowerBound(Lorg/rocksdb/AbstractSlice;)Lorg/rocksdb/ReadOptions;
+#setIterateUpperBound(Lorg/rocksdb/AbstractSlice;)Lorg/rocksdb/ReadOptions;
-#setIterateLowerBound(Lorg/rocksdb/Slice;)Lorg/rocksdb/ReadOptions;
-#setIterateUpperBound(Lorg/rocksdb/Slice;)Lorg/rocksdb/ReadOptions;
@6.28.2
+#autoPrefixMode()Z
+#setAutoPrefixMode(Z)Lorg/rocksdb/ReadOptions;
+#timestamp()Lorg/rocksdb/Slice;
+#setTimestamp(Lorg/rocksdb/AbstractSlice;)Lorg/rocksdb/ReadOptions;
+#iterStartTs()Lorg/rocksdb/Slice;
+#setIterStartTs(Lorg/rocksdb/AbstractSlice;)Lorg/rocksdb/ReadOptions;
+#deadline()J
+#setDeadline(J)Lorg/rocksdb/ReadOptions;
+#ioTimeout()J
+#setIoTimeout(J)Lorg/rocksdb/ReadOptions;
+#valueSizeSoftLimit()J
+#setValueSizeSoftLimit(J)Lorg/rocksdb/ReadOptions;
@7.0.3
-#setIterStartSeqnum(J)Lorg/rocksdb/ReadOptions;
-#iterStartSeqnum()J

+###org/rocksdb/ReadTier
@4.11.2
+#values()[Lorg/rocksdb/ReadTier;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/ReadTier;
+#getValue()B
+#getReadTier(B)Lorg/rocksdb/ReadTier;

+###org/rocksdb/RemoveEmptyValueCompactionFilter
@3.13.1
+#<init>()V

+###org/rocksdb/RestoreBackupableDB
@3.5.0
+#<init>(Lorg/rocksdb/BackupableDBOptions;)V
+#restoreDBFromBackup(JLjava/lang/String;Ljava/lang/String;Lorg/rocksdb/RestoreOptions;)V
+#restoreDBFromLatestBackup(Ljava/lang/String;Ljava/lang/String;Lorg/rocksdb/RestoreOptions;)V
+#purgeOldBackups(I)V
+#deleteBackup(J)V
+#disposeInternal()V
@3.6.2
+#deleteBackup(I)V
+#getBackupInfos()Ljava/util/List;
-#deleteBackup(J)V
@3.9.0
+#getCorruptedBackups()[I
+#garbageCollect()V
@4.8.0
-#disposeInternal()V
@5.5.1
-###org/rocksdb/RestoreBackupableDB

+###org/rocksdb/RestoreOptions
@3.5.0
+#<init>(Z)V
+#disposeInternal()V
@4.8.0
-#disposeInternal()V

+###org/rocksdb/RocksDB
@3.5.0
+#loadLibrary()V
+#loadLibrary(Ljava/util/List;)V
+#open(Ljava/lang/String;)Lorg/rocksdb/RocksDB;
+#open(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
+#close()V
+#put([B[B)V
+#put(Lorg/rocksdb/WriteOptions;[B[B)V
+#write(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/WriteBatch;)V
+#get([B[B)I
+#get(Lorg/rocksdb/ReadOptions;[B[B)I
+#get([B)[B
+#get(Lorg/rocksdb/ReadOptions;[B)[B
+#multiGet(Ljava/util/List;)Ljava/util/Map;
+#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/Map;
+#remove([B)V
+#remove(Lorg/rocksdb/WriteOptions;[B)V
+#newIterator()Lorg/rocksdb/RocksIterator;
@3.6.1
+#getProperty(Ljava/lang/String;)Ljava/lang/String;
@3.6.2
+#open(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#open(Lorg/rocksdb/Options;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#openReadOnly(Ljava/lang/String;)Lorg/rocksdb/RocksDB;
+#openReadOnly(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#openReadOnly(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
+#openReadOnly(Lorg/rocksdb/Options;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#listColumnFamilies(Lorg/rocksdb/Options;Ljava/lang/String;)Ljava/util/List;
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B[B)V
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuffer;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuffer;)Z
+#merge([B[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#merge(Lorg/rocksdb/WriteOptions;[B[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B[B)V
+#get(Lorg/rocksdb/ColumnFamilyHandle;[B[B)I
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[B[B)I
+#get(Lorg/rocksdb/ColumnFamilyHandle;[B)[B
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[B)[B
+#multiGet(Ljava/util/List;Ljava/util/List;)Ljava/util/Map;
+#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/Map;
+#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V
+#getProperty(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)Ljava/lang/String;
+#getSnapshot()Lorg/rocksdb/Snapshot;
+#releaseSnapshot(Lorg/rocksdb/Snapshot;)V
+#newIterator(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/RocksIterator;
+#newIterators(Ljava/util/List;)Ljava/util/List;
+#createColumnFamily(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyHandle;
+#dropColumnFamily(Lorg/rocksdb/ColumnFamilyHandle;)V
@3.7.0
+#keyMayExist([BLjava/lang/StringBuffer;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;[BLjava/lang/StringBuffer;)Z
@3.8.0
+#open(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#openReadOnly(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#createColumnFamily(Lorg/rocksdb/ColumnFamilyDescriptor;)Lorg/rocksdb/ColumnFamilyHandle;
+#flush(Lorg/rocksdb/FlushOptions;)V
+#flush(Lorg/rocksdb/FlushOptions;Lorg/rocksdb/ColumnFamilyHandle;)V
-#open(Lorg/rocksdb/Options;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
-#openReadOnly(Lorg/rocksdb/Options;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
-#createColumnFamily(Ljava/lang/String;)Lorg/rocksdb/ColumnFamilyHandle;
@3.9.0
+#getLongProperty(Ljava/lang/String;)J
+#getLongProperty(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)J
@3.10.0
+#write(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/WriteBatchWithIndex;)V
+#newIterator(Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/RocksIterator;
+#newIterator(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/RocksIterator;
+#newIterators(Ljava/util/List;Lorg/rocksdb/ReadOptions;)Ljava/util/List;
+#getDefaultColumnFamily()Lorg/rocksdb/ColumnFamilyHandle;
+#compactRange()V
+#compactRange([B[B)V
+#compactRange(ZII)V
+#compactRange([B[BZII)V
+#compactRange(Lorg/rocksdb/ColumnFamilyHandle;)V
+#compactRange(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#compactRange(Lorg/rocksdb/ColumnFamilyHandle;ZII)V
+#compactRange(Lorg/rocksdb/ColumnFamilyHandle;[B[BZII)V
+#getLatestSequenceNumber()J
+#disableFileDeletions()V
+#enableFileDeletions(Z)V
+#getUpdatesSince(J)Lorg/rocksdb/TransactionLogIterator;
@4.8.0
-#close()V
@4.9.0
+#pauseBackgroundWork()V
+#continueBackgroundWork()V
@4.13.4
*#remove([B)V[deprecated]
+#delete([B)V
*#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
*#remove(Lorg/rocksdb/WriteOptions;[B)V[deprecated]
+#delete(Lorg/rocksdb/WriteOptions;[B)V
*#remove(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V[deprecated]
+#delete(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V
+#singleDelete([B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#singleDelete(Lorg/rocksdb/WriteOptions;[B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V
+#setOptions(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/MutableColumnFamilyOptions;)V
+#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)V
+#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Z)V
+#addFileWithFilePath(Ljava/util/List;)V
+#addFileWithFilePath(Ljava/util/List;Z)V
+#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)V
+#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;Z)V
+#addFileWithFilePath(Ljava/lang/String;)V
+#addFileWithFilePath(Ljava/lang/String;Z)V
+#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)V
+#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Z)V
+#addFileWithFileInfo(Ljava/util/List;)V
+#addFileWithFileInfo(Ljava/util/List;Z)V
+#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ExternalSstFileInfo;)V
+#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ExternalSstFileInfo;Z)V
+#addFileWithFileInfo(Lorg/rocksdb/ExternalSstFileInfo;)V
+#addFileWithFileInfo(Lorg/rocksdb/ExternalSstFileInfo;Z)V
@5.3.4
+#keyMayExist([BLjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;[BLjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuilder;)Z
+#deleteRange([B[B)V
+#deleteRange(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#deleteRange(Lorg/rocksdb/WriteOptions;[B[B)V
+#deleteRange(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B[B)V
-#keyMayExist([BLjava/lang/StringBuffer;)Z
-#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuffer;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;[BLjava/lang/StringBuffer;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuffer;)Z
@5.5.1
+#ingestExternalFile(Ljava/util/List;Lorg/rocksdb/IngestExternalFileOptions;)V
+#ingestExternalFile(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Lorg/rocksdb/IngestExternalFileOptions;)V
-#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)V
-#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Z)V
-#addFileWithFilePath(Ljava/util/List;)V
-#addFileWithFilePath(Ljava/util/List;Z)V
-#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)V
-#addFileWithFilePath(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;Z)V
-#addFileWithFilePath(Ljava/lang/String;)V
-#addFileWithFilePath(Ljava/lang/String;Z)V
-#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)V
-#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Z)V
-#addFileWithFileInfo(Ljava/util/List;)V
-#addFileWithFileInfo(Ljava/util/List;Z)V
-#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ExternalSstFileInfo;)V
-#addFileWithFileInfo(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ExternalSstFileInfo;Z)V
-#addFileWithFileInfo(Lorg/rocksdb/ExternalSstFileInfo;)V
-#addFileWithFileInfo(Lorg/rocksdb/ExternalSstFileInfo;Z)V
@5.9.2
+#destroyDB(Ljava/lang/String;Lorg/rocksdb/Options;)V
@5.17.2
+#getAggregatedLongProperty(Ljava/lang/String;)J
*#compactRange(ZII)V[deprecated]
*#compactRange([B[BZII)V[deprecated]
+#compactRange(Lorg/rocksdb/ColumnFamilyHandle;[B[BLorg/rocksdb/CompactRangeOptions;)V
*#compactRange(Lorg/rocksdb/ColumnFamilyHandle;ZII)V[deprecated]
*#compactRange(Lorg/rocksdb/ColumnFamilyHandle;[B[BZII)V[deprecated]
@5.18.3
+#put([BII[BII)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;[BII[BII)V
+#put(Lorg/rocksdb/WriteOptions;[BII[BII)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[BII[BII)V
+#keyMayExist([BIILjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BIILjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;[BIILjava/lang/StringBuilder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BIILjava/lang/StringBuilder;)Z
+#merge([BII[BII)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[BII[BII)V
+#merge(Lorg/rocksdb/WriteOptions;[BII[BII)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[BII[BII)V
+#get([BII[BII)I
+#get(Lorg/rocksdb/ColumnFamilyHandle;[BII[BII)I
+#get(Lorg/rocksdb/ReadOptions;[BII[BII)I
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BII[BII)I
+#get([BII)[B
+#get(Lorg/rocksdb/ColumnFamilyHandle;[BII)[B
+#get(Lorg/rocksdb/ReadOptions;[BII)[B
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BII)[B
+#delete([BII)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[BII)V
+#delete(Lorg/rocksdb/WriteOptions;[BII)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[BII)V
@6.0.1
+#closeE()V
+#close()V
+#createColumnFamilies(Lorg/rocksdb/ColumnFamilyOptions;Ljava/util/List;)Ljava/util/List;
+#createColumnFamilies(Ljava/util/List;)Ljava/util/List;
+#dropColumnFamilies(Ljava/util/List;)V
*#multiGet(Ljava/util/List;)Ljava/util/Map;[deprecated]
*#multiGet(Ljava/util/List;Ljava/util/List;)Ljava/util/Map;[deprecated]
*#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/Map;[deprecated]
*#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/Map;[deprecated]
+#multiGetAsList(Ljava/util/List;)Ljava/util/List;
+#multiGetAsList(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
+#multiGetAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/List;
+#multiGetAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
+#getMapProperty(Ljava/lang/String;)Ljava/util/Map;
+#getMapProperty(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)Ljava/util/Map;
+#resetStats()V
+#getApproximateSizes(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;[Lorg/rocksdb/SizeApproximationFlag;)[J
+#getApproximateSizes(Ljava/util/List;[Lorg/rocksdb/SizeApproximationFlag;)[J
+#getApproximateMemTableStats(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/Range;)Lorg/rocksdb/RocksDB$CountAndSize;
+#getApproximateMemTableStats(Lorg/rocksdb/Range;)Lorg/rocksdb/RocksDB$CountAndSize;
+#setOptions(Lorg/rocksdb/MutableColumnFamilyOptions;)V
+#setDBOptions(Lorg/rocksdb/MutableDBOptions;)V
+#compactFiles(Lorg/rocksdb/CompactionOptions;Ljava/util/List;IILorg/rocksdb/CompactionJobInfo;)Ljava/util/List;
+#compactFiles(Lorg/rocksdb/CompactionOptions;Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;IILorg/rocksdb/CompactionJobInfo;)Ljava/util/List;
+#enableAutoCompaction(Ljava/util/List;)V
+#numberLevels()I
+#numberLevels(Lorg/rocksdb/ColumnFamilyHandle;)I
+#maxMemCompactionLevel()I
+#maxMemCompactionLevel(Lorg/rocksdb/ColumnFamilyHandle;)I
+#level0StopWriteTrigger()I
+#level0StopWriteTrigger(Lorg/rocksdb/ColumnFamilyHandle;)I
+#getName()Ljava/lang/String;
+#getEnv()Lorg/rocksdb/Env;
+#flush(Lorg/rocksdb/FlushOptions;Ljava/util/List;)V
+#flushWal(Z)V
+#syncWal()V
+#setPreserveDeletesSequenceNumber(J)Z
+#getLiveFiles()Lorg/rocksdb/RocksDB$LiveFiles;
+#getLiveFiles(Z)Lorg/rocksdb/RocksDB$LiveFiles;
+#getSortedWalFiles()Ljava/util/List;
+#deleteFile(Ljava/lang/String;)V
+#getLiveFilesMetaData()Ljava/util/List;
+#getColumnFamilyMetaData(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/ColumnFamilyMetaData;
+#GetColumnFamilyMetaData()Lorg/rocksdb/ColumnFamilyMetaData;
+#verifyChecksum()V
+#getPropertiesOfAllTables(Lorg/rocksdb/ColumnFamilyHandle;)Ljava/util/Map;
+#getPropertiesOfAllTables()Ljava/util/Map;
+#getPropertiesOfTablesInRange(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)Ljava/util/Map;
+#getPropertiesOfTablesInRange(Ljava/util/List;)Ljava/util/Map;
+#suggestCompactRange(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/Range;
+#suggestCompactRange()Lorg/rocksdb/Range;
+#promoteL0(Lorg/rocksdb/ColumnFamilyHandle;I)V
+#promoteL0(I)V
+#startTrace(Lorg/rocksdb/TraceOptions;Lorg/rocksdb/AbstractTraceWriter;)V
+#endTrace()V
@6.6.4
+#deleteFilesInRanges(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;Z)V
@6.7.3
+#keyMayExist([BLorg/rocksdb/Holder;)Z
+#keyMayExist([BIILorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BLorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BIILorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;[BLorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BLorg/rocksdb/Holder;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
-#keyMayExist([BLjava/lang/StringBuilder;)Z
-#keyMayExist([BIILjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;[BIILjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;[BLjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;[BIILjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BLjava/lang/StringBuilder;)Z
-#keyMayExist(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BIILjava/lang/StringBuilder;)Z
@6.8.1
+#put(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#put(Lorg/rocksdb/WriteOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#get(Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#delete(Lorg/rocksdb/WriteOptions;Ljava/nio/ByteBuffer;)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;Ljava/nio/ByteBuffer;)V
@6.10.2
+#cancelAllBackgroundWork(Z)V
@6.12.7
+#rocksdbVersion()Lorg/rocksdb/RocksDB$Version;
+#openAsSecondary(Lorg/rocksdb/Options;Ljava/lang/String;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
+#openAsSecondary(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
+#tryCatchUpWithPrimary()V
@6.14.5
+#openReadOnly(Lorg/rocksdb/Options;Ljava/lang/String;Z)Lorg/rocksdb/RocksDB;
+#openReadOnly(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Z)Lorg/rocksdb/RocksDB;
@6.15.2
+#destroyColumnFamilyHandle(Lorg/rocksdb/ColumnFamilyHandle;)V
+#getColumnFamilyMetaData()Lorg/rocksdb/ColumnFamilyMetaData;
-#GetColumnFamilyMetaData()Lorg/rocksdb/ColumnFamilyMetaData;
@6.26.1
+#keyMayExist(Ljava/nio/ByteBuffer;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)Z
+#keyMayExist(Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;)Z
+#keyMayExist(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Lorg/rocksdb/KeyMayExist;
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Lorg/rocksdb/KeyMayExist;
+#keyMayExist(Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Lorg/rocksdb/KeyMayExist;
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;)Z
+#keyMayExist(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Lorg/rocksdb/KeyMayExist;
+#getOptions(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#getOptions()Lorg/rocksdb/MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder;
+#getDBOptions()Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
@6.28.2
+#multiGetByteBuffers(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
+#multiGetByteBuffers(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
+#multiGetByteBuffers(Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
+#multiGetByteBuffers(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
@7.0.3
-#remove([B)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
-#remove(Lorg/rocksdb/WriteOptions;[B)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V[deprecated]
-#multiGet(Ljava/util/List;)Ljava/util/Map;[deprecated]
-#multiGet(Ljava/util/List;Ljava/util/List;)Ljava/util/Map;[deprecated]
-#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/Map;[deprecated]
-#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/Map;[deprecated]
-#compactRange(ZII)V[deprecated]
-#compactRange(Lorg/rocksdb/ColumnFamilyHandle;ZII)V[deprecated]
-#compactRange([B[BZII)V[deprecated]
-#compactRange(Lorg/rocksdb/ColumnFamilyHandle;[B[BZII)V[deprecated]
-#setPreserveDeletesSequenceNumber(J)Z

+###org/rocksdb/RocksDBException
@3.5.0
+#<init>(Ljava/lang/String;)V
@4.13.4
+#<init>(Ljava/lang/String;Lorg/rocksdb/Status;)V
+#<init>(Lorg/rocksdb/Status;)V
+#getStatus()Lorg/rocksdb/Status;

+###org/rocksdb/RocksEnv
@3.5.0
+#getDefault()Lorg/rocksdb/RocksEnv;
+#setBackgroundThreads(I)Lorg/rocksdb/RocksEnv;
+#setBackgroundThreads(II)Lorg/rocksdb/RocksEnv;
+#getThreadPoolQueueLen(I)I
@3.10.0
-#getDefault()Lorg/rocksdb/RocksEnv;
-#setBackgroundThreads(I)Lorg/rocksdb/RocksEnv;
-#setBackgroundThreads(II)Lorg/rocksdb/RocksEnv;
-#getThreadPoolQueueLen(I)I

+###org/rocksdb/RocksIterator
@3.5.0
+#<init>(J)V
+#isValid()Z
+#seekToFirst()V
+#seekToLast()V
+#next()V
+#prev()V
+#key()[B
+#value()[B
+#seek([B)V
+#status()V
@3.6.2
+#<init>(Lorg/rocksdb/RocksDB;J)V
-#<init>(J)V
@3.10.0
-#<init>(Lorg/rocksdb/RocksDB;J)V
-#isValid()Z
-#seekToFirst()V
-#seekToLast()V
-#next()V
-#prev()V
-#seek([B)V
-#status()V
@6.8.1
+#key(Ljava/nio/ByteBuffer;)I
+#value(Ljava/nio/ByteBuffer;)I

+###org/rocksdb/RocksIteratorInterface
@3.10.0
+#isValid()Z
+#seekToFirst()V
+#seekToLast()V
+#seek([B)V
+#next()V
+#prev()V
+#status()V
@5.9.2
+#seekForPrev([B)V
@6.8.1
+#seek(Ljava/nio/ByteBuffer;)V
+#seekForPrev(Ljava/nio/ByteBuffer;)V
@6.10.2
+#refresh()V

+###org/rocksdb/RocksMemEnv
@3.10.0
+#<init>()V
@6.0.1
+#<init>(Lorg/rocksdb/Env;)V
*#<init>()V[deprecated]
@7.0.3
-#<init>()V[deprecated]

+###org/rocksdb/RocksMutableObject
@4.8.0
+#setNativeHandle(JZ)V
+#close()V
@5.3.4
+#resetNativeHandle(JZ)V

+###org/rocksdb/RocksObject
@3.5.0
+#dispose()V
@4.8.0
-#dispose()V
@6.14.5
+#getNativeHandle()J

+###org/rocksdb/SkipListMemTableConfig
@3.5.0
+#<init>()V
@3.6.2
+#setLookahead(J)Lorg/rocksdb/SkipListMemTableConfig;
+#lookahead()J

+###org/rocksdb/Slice
@3.6.2
+#<init>(Ljava/lang/String;)V
+#<init>([BI)V
+#<init>([B)V
+#startsWith(Lorg/rocksdb/AbstractSlice;)Z
+#equals(Ljava/lang/Object;)Z
+#compare(Lorg/rocksdb/AbstractSlice;)I
+#toString()Ljava/lang/String;
+#toString(Z)Ljava/lang/String;
+#empty()Z
+#size()I
@3.13.1
+#hashCode()I
@4.8.0
-#startsWith(Lorg/rocksdb/AbstractSlice;)Z
-#equals(Ljava/lang/Object;)Z
-#hashCode()I
-#compare(Lorg/rocksdb/AbstractSlice;)I
-#toString()Ljava/lang/String;
-#toString(Z)Ljava/lang/String;
-#empty()Z
-#size()I
@5.3.4
+#clear()V
+#removePrefix(I)V

+###org/rocksdb/Snapshot
@3.6.2
@3.10.0
+#getSequenceNumber()J

+###org/rocksdb/SstFileWriter
@4.13.4
+#<init>(Lorg/rocksdb/EnvOptions;Lorg/rocksdb/Options;Lorg/rocksdb/AbstractComparator;)V
+#open(Ljava/lang/String;)V
+#add(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V
+#add(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V
+#finish()V
@5.4.5
+#<init>(Lorg/rocksdb/EnvOptions;Lorg/rocksdb/Options;)V
@5.6.1
*#<init>(Lorg/rocksdb/EnvOptions;Lorg/rocksdb/Options;Lorg/rocksdb/AbstractComparator;)V[deprecated]
*#add(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V[deprecated]
*#add(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V[deprecated]
+#put(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V
+#put(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V
+#merge(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V
+#merge(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V
+#delete(Lorg/rocksdb/Slice;)V
+#delete(Lorg/rocksdb/DirectSlice;)V
@5.8.0
+#put([B[B)V
+#merge([B[B)V
+#delete([B)V
@6.8.1
+#put(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#fileSize()J
@7.0.3
-#<init>(Lorg/rocksdb/EnvOptions;Lorg/rocksdb/Options;Lorg/rocksdb/AbstractComparator;)V[deprecated]
-#add(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V[deprecated]
-#add(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V[deprecated]

+###org/rocksdb/Statistics
@3.5.0
+#<init>(J)V
+#getTickerCount(Lorg/rocksdb/TickerType;)J
+#geHistogramData(Lorg/rocksdb/HistogramType;)Lorg/rocksdb/HistogramData;
@4.9.0
+#getHistogramData(Lorg/rocksdb/HistogramType;)Lorg/rocksdb/HistogramData;
-#geHistogramData(Lorg/rocksdb/HistogramType;)Lorg/rocksdb/HistogramData;
@5.7.2
+#<init>()V
+#<init>(Lorg/rocksdb/Statistics;)V
+#<init>(Ljava/util/EnumSet;)V
+#<init>(Ljava/util/EnumSet;Lorg/rocksdb/Statistics;)V
+#statsLevel()Lorg/rocksdb/StatsLevel;
+#setStatsLevel(Lorg/rocksdb/StatsLevel;)V
+#getAndResetTickerCount(Lorg/rocksdb/TickerType;)J
+#getHistogramString(Lorg/rocksdb/HistogramType;)Ljava/lang/String;
+#reset()V
+#toString()Ljava/lang/String;
-#<init>(J)V

+###org/rocksdb/StatisticsCollector
@3.5.0
+#<init>(Ljava/util/List;I)V
+#start()V
+#shutDown(I)V

+###org/rocksdb/StatisticsCollectorCallback
@3.5.0
+#tickerCallback(Lorg/rocksdb/TickerType;J)V
+#histogramCallback(Lorg/rocksdb/HistogramType;Lorg/rocksdb/HistogramData;)V

+###org/rocksdb/StatsCollectorInput
@3.5.0
+#<init>(Lorg/rocksdb/Statistics;Lorg/rocksdb/StatisticsCollectorCallback;)V
+#getStatistics()Lorg/rocksdb/Statistics;
+#getCallback()Lorg/rocksdb/StatisticsCollectorCallback;

+###org/rocksdb/Status$Code
@4.13.4
+#values()[Lorg/rocksdb/Status$Code;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/Status$Code;
+#getCode(B)Lorg/rocksdb/Status$Code;
@5.11.3
+#getValue()B

+###org/rocksdb/Status$SubCode
@4.13.4
+#values()[Lorg/rocksdb/Status$SubCode;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/Status$SubCode;
+#getSubCode(B)Lorg/rocksdb/Status$SubCode;
@5.11.3
+#getValue()B

+###org/rocksdb/Status
@4.13.4
+#<init>(Lorg/rocksdb/Status$Code;Lorg/rocksdb/Status$SubCode;Ljava/lang/String;)V
+#getCode()Lorg/rocksdb/Status$Code;
+#getSubCode()Lorg/rocksdb/Status$SubCode;
+#getState()Ljava/lang/String;
+#getCodeString()Ljava/lang/String;
@6.15.2
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/rocksdb/StringAppendOperator
@3.6.2
+#<init>()V
+#newMergeOperatorHandle()J
@5.3.4
-#newMergeOperatorHandle()J
@5.13.1
+#<init>(C)V
@6.24.2
+#<init>(Ljava/lang/String;)V

+###org/rocksdb/TableFormatConfig
@3.5.0
+#<init>()V

+###org/rocksdb/TickerType
@3.5.0
+#values()[Lorg/rocksdb/TickerType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/TickerType;
+#getValue()I
@5.7.2
+#getValue()B
-#getValue()I
@6.0.1
*#getValue()B[deprecated]
@6.7.3
+#getTickerType(B)Lorg/rocksdb/TickerType;

+###org/rocksdb/TransactionLogIterator$BatchResult
@3.10.0
+#<init>(Lorg/rocksdb/TransactionLogIterator;JJ)V
+#sequenceNumber()J
+#writeBatch()Lorg/rocksdb/WriteBatch;
@5.3.4
+#<init>(JJ)V
-#<init>(Lorg/rocksdb/TransactionLogIterator;JJ)V

+###org/rocksdb/TransactionLogIterator
@3.10.0
+#isValid()Z
+#next()V
+#status()V
+#getBatch()Lorg/rocksdb/TransactionLogIterator$BatchResult;

+###org/rocksdb/TtlDB
@3.10.0
+#open(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/TtlDB;
+#open(Lorg/rocksdb/Options;Ljava/lang/String;IZ)Lorg/rocksdb/TtlDB;
+#open(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)Lorg/rocksdb/TtlDB;
+#createColumnFamilyWithTtl(Lorg/rocksdb/ColumnFamilyDescriptor;I)Lorg/rocksdb/ColumnFamilyHandle;
+#close()V
@6.0.1
+#closeE()V

+###org/rocksdb/VectorMemTableConfig
@3.5.0
+#<init>()V
+#setReservedSize(I)Lorg/rocksdb/VectorMemTableConfig;
+#reservedSize()I

+###org/rocksdb/WBWIRocksIterator$WriteEntry
@3.10.0
+#<init>(Lorg/rocksdb/WBWIRocksIterator$WriteType;Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)V
+#getType()Lorg/rocksdb/WBWIRocksIterator$WriteType;
+#getKey()Lorg/rocksdb/DirectSlice;
+#getValue()Lorg/rocksdb/DirectSlice;
+#equals(Ljava/lang/Object;)Z
@3.13.1
+#hashCode()I
@5.3.4
+#close()V

+###org/rocksdb/WBWIRocksIterator$WriteType
@3.10.0
+#values()[Lorg/rocksdb/WBWIRocksIterator$WriteType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/WBWIRocksIterator$WriteType;
@4.8.0
+#fromId(B)Lorg/rocksdb/WBWIRocksIterator$WriteType;

+###org/rocksdb/WBWIRocksIterator
@3.10.0
+#entry()Lorg/rocksdb/WBWIRocksIterator$WriteEntry;
@5.3.4
+#close()V

+###org/rocksdb/WriteBatch$Handler
@3.8.0
+#<init>()V
+#put([B[B)V
+#merge([B[B)V
+#delete([B)V
+#logData([B)V
+#shouldContinue()Z
@5.3.4
+#deleteRange([B[B)V
@5.11.3
+#put(I[B[B)V
+#merge(I[B[B)V
+#delete(I[B)V
+#singleDelete(I[B)V
+#singleDelete([B)V
+#deleteRange(I[B[B)V
+#putBlobIndex(I[B[B)V
+#markBeginPrepare()V
+#markEndPrepare([B)V
+#markNoop(Z)V
+#markRollback([B)V
+#markCommit([B)V
@6.28.2
+#markCommitWithTimestamp([B[B)V

+###org/rocksdb/WriteBatch
@3.5.0
+#<init>()V
+#<init>(I)V
+#count()I
+#put([B[B)V
+#merge([B[B)V
+#remove([B)V
+#putLogData([B)V
+#clear()V
@3.6.2
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V
@3.8.0
+#iterate(Lorg/rocksdb/WriteBatch$Handler;)V
@3.10.0
-#count()I
-#put([B[B)V
-#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
-#merge([B[B)V
-#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
-#remove([B)V
-#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V
-#putLogData([B)V
-#clear()V
@5.11.3
+#<init>([B)V
+#data()[B
+#getDataSize()J
+#hasPut()Z
+#hasDelete()Z
+#hasSingleDelete()Z
+#hasDeleteRange()Z
+#hasMerge()Z
+#hasBeginPrepare()Z
+#hasEndPrepare()Z
+#hasCommit()Z
+#hasRollback()Z
+#getWriteBatch()Lorg/rocksdb/WriteBatch;
+#markWalTerminationPoint()V
+#getWalTerminationPoint()Lorg/rocksdb/WriteBatch$SavePoint;

+###org/rocksdb/WriteBatchInterface
@3.10.0
+#count()I
+#put([B[B)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#merge([B[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#remove([B)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#putLogData([B)V
+#clear()V
@4.11.2
+#setSavePoint()V
+#rollbackToSavePoint()V
@5.3.4
+#deleteRange([B[B)V
+#deleteRange(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
@5.11.3
*#remove([B)V[deprecated]
*#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
+#delete([B)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#singleDelete([B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#popSavePoint()V
+#setMaxBytes(J)V
+#getWriteBatch()Lorg/rocksdb/WriteBatch;
@6.8.1
+#put(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#remove(Ljava/nio/ByteBuffer;)V
+#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V
@6.28.2
*#remove(Ljava/nio/ByteBuffer;)V[deprecated]
*#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V[deprecated]
+#delete(Ljava/nio/ByteBuffer;)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V
@7.0.3
-#remove([B)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;[B)V[deprecated]
-#remove(Ljava/nio/ByteBuffer;)V[deprecated]
-#remove(Lorg/rocksdb/ColumnFamilyHandle;Ljava/nio/ByteBuffer;)V[deprecated]

+###org/rocksdb/WriteBatchWithIndex
@3.10.0
+#<init>()V
+#<init>(Z)V
+#<init>(Lorg/rocksdb/AbstractComparator;IZ)V
+#newIterator(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/WBWIRocksIterator;
+#newIterator()Lorg/rocksdb/WBWIRocksIterator;
+#newIteratorWithBase(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/RocksIterator;)Lorg/rocksdb/RocksIterator;
+#newIteratorWithBase(Lorg/rocksdb/RocksIterator;)Lorg/rocksdb/RocksIterator;
@5.0.1
+#getFromBatch(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/DBOptions;[B)[B
+#getFromBatch(Lorg/rocksdb/DBOptions;[B)[B
+#getFromBatchAndDB(Lorg/rocksdb/RocksDB;Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[B)[B
+#getFromBatchAndDB(Lorg/rocksdb/RocksDB;Lorg/rocksdb/ReadOptions;[B)[B
@6.11.4
+#newIteratorWithBase(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/RocksIterator;Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/RocksIterator;
+#newIteratorWithBase(Lorg/rocksdb/RocksIterator;Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/RocksIterator;

+###org/rocksdb/WriteOptions
@3.5.0
+#<init>()V
+#setSync(Z)Lorg/rocksdb/WriteOptions;
+#sync()Z
+#setDisableWAL(Z)Lorg/rocksdb/WriteOptions;
+#disableWAL()Z
@5.4.5
+#setIgnoreMissingColumnFamilies(Z)Lorg/rocksdb/WriteOptions;
+#ignoreMissingColumnFamilies()Z
+#setNoSlowdown(Z)Lorg/rocksdb/WriteOptions;
+#noSlowdown()Z
@5.12.4
+#<init>(Lorg/rocksdb/WriteOptions;)V
@6.0.1
+#setLowPri(Z)Lorg/rocksdb/WriteOptions;
+#lowPri()Z
@7.0.3
+#memtableInsertHintPerBatch()Z
+#setMemtableInsertHintPerBatch(Z)Lorg/rocksdb/WriteOptions;

+###org/rocksdb/util/BytewiseComparator
@4.8.0
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
+#name()Ljava/lang/String;
+#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/Slice;)Ljava/lang/String;
+#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
+#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
@6.8.1
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#findShortestSeparator(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#findShortSuccessor(Ljava/nio/ByteBuffer;)V
-#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
-#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/Slice;)Ljava/lang/String;
-#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
-#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
-#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I

+###org/rocksdb/util/DirectBytewiseComparator
@4.8.0
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
+#name()Ljava/lang/String;
+#compare(Lorg/rocksdb/DirectSlice;Lorg/rocksdb/DirectSlice;)I
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/DirectSlice;)Ljava/lang/String;
+#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
+#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
@6.8.1
-###org/rocksdb/util/DirectBytewiseComparator

+###org/rocksdb/util/Environment
@3.5.0
+#<init>()V
+#isWindows()Z
+#isMac()Z
+#isUnix()Z
+#is64Bit()Z
+#getSharedLibraryName(Ljava/lang/String;)Ljava/lang/String;
+#getJniLibraryName(Ljava/lang/String;)Ljava/lang/String;
+#getJniLibraryExtension()Ljava/lang/String;
@3.10.0
+#getSharedLibraryFileName(Ljava/lang/String;)Ljava/lang/String;
+#getJniLibraryFileName(Ljava/lang/String;)Ljava/lang/String;
@4.5.1
+#isSolaris()Z
@5.3.4
+#isPowerPC()Z
@5.5.1
+#isAix()Z
@5.10.3
+#isFreeBSD()Z
@5.13.1
+#isOpenBSD()Z
@5.15.10
+#isS390x()Z
@5.18.4
+#isAarch64()Z
@6.0.1
-#isAarch64()Z
@6.3.6
+#isAarch64()Z
@6.5.2
+#isMuslLibc()Z
+#getLibcName()Ljava/lang/String;
@6.29.4
+#getFallbackJniLibraryName(Ljava/lang/String;)Ljava/lang/String;
+#getFallbackJniLibraryFileName(Ljava/lang/String;)Ljava/lang/String;

+###org/rocksdb/util/ReverseBytewiseComparator
@4.8.0
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
+#name()Ljava/lang/String;
+#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
+#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
@6.8.1
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#findShortestSeparator(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
-#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
-#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I

+###org/rocksdb/util/SizeUnit
@3.5.0

+###org/rocksdb/AbstractCompactionFilter$Context
@5.9.2
+#<init>(ZZ)V
+#isFullCompaction()Z
+#isManualCompaction()Z

+###org/rocksdb/AbstractCompactionFilterFactory
@5.9.2
+#<init>()V
+#createCompactionFilter(Lorg/rocksdb/AbstractCompactionFilter$Context;)Lorg/rocksdb/AbstractCompactionFilter;
+#name()Ljava/lang/String;

+###org/rocksdb/AbstractEventListener$EnabledEventCallback
@6.15.2
+#values()[Lorg/rocksdb/AbstractEventListener$EnabledEventCallback;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/AbstractEventListener$EnabledEventCallback;

+###org/rocksdb/AbstractEventListener
@6.15.2
+#onFlushCompleted(Lorg/rocksdb/RocksDB;Lorg/rocksdb/FlushJobInfo;)V
+#onFlushBegin(Lorg/rocksdb/RocksDB;Lorg/rocksdb/FlushJobInfo;)V
+#onTableFileDeleted(Lorg/rocksdb/TableFileDeletionInfo;)V
+#onCompactionBegin(Lorg/rocksdb/RocksDB;Lorg/rocksdb/CompactionJobInfo;)V
+#onCompactionCompleted(Lorg/rocksdb/RocksDB;Lorg/rocksdb/CompactionJobInfo;)V
+#onTableFileCreated(Lorg/rocksdb/TableFileCreationInfo;)V
+#onTableFileCreationStarted(Lorg/rocksdb/TableFileCreationBriefInfo;)V
+#onMemTableSealed(Lorg/rocksdb/MemTableInfo;)V
+#onColumnFamilyHandleDeletionStarted(Lorg/rocksdb/ColumnFamilyHandle;)V
+#onExternalFileIngested(Lorg/rocksdb/RocksDB;Lorg/rocksdb/ExternalFileIngestionInfo;)V
+#onBackgroundError(Lorg/rocksdb/BackgroundErrorReason;Lorg/rocksdb/Status;)V
+#onStallConditionsChanged(Lorg/rocksdb/WriteStallInfo;)V
+#onFileReadFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileWriteFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileFlushFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileSyncFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileRangeSyncFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileTruncateFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileCloseFinish(Lorg/rocksdb/FileOperationInfo;)V
+#shouldBeNotifiedOnFileIO()Z
+#onErrorRecoveryBegin(Lorg/rocksdb/BackgroundErrorReason;Lorg/rocksdb/Status;)Z
+#onErrorRecoveryCompleted(Lorg/rocksdb/Status;)V

+###org/rocksdb/AbstractMutableOptions$AbstractMutableOptionsBuilder
@6.0.1
+#<init>()V
+#build()Lorg/rocksdb/AbstractMutableOptions;
+#fromString(Ljava/lang/String;Ljava/lang/String;)Lorg/rocksdb/AbstractMutableOptions$AbstractMutableOptionsBuilder;
@6.26.1
+#getUnknown()Ljava/util/List;
-#fromString(Ljava/lang/String;Ljava/lang/String;)Lorg/rocksdb/AbstractMutableOptions$AbstractMutableOptionsBuilder;

+###org/rocksdb/AbstractMutableOptions
@6.0.1
+#toString()Ljava/lang/String;

+###org/rocksdb/AbstractTableFilter
@6.0.1

+###org/rocksdb/AbstractTraceWriter
@6.0.1
+#<init>()V

+###org/rocksdb/AbstractTransactionNotifier
@5.11.3
+#snapshotCreated(Lorg/rocksdb/Snapshot;)V

+###org/rocksdb/AbstractWalFilter
@6.0.1
+#<init>()V

+###org/rocksdb/AccessHint
@5.4.5
+#values()[Lorg/rocksdb/AccessHint;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/AccessHint;
+#getValue()B
+#getAccessHint(B)Lorg/rocksdb/AccessHint;

+###org/rocksdb/AdvancedColumnFamilyOptionsInterface
@5.4.5
+#setMinWriteBufferNumberToMerge(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#minWriteBufferNumberToMerge()I
+#setMaxWriteBufferNumberToMaintain(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#maxWriteBufferNumberToMaintain()I
+#setInplaceUpdateSupport(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#inplaceUpdateSupport()Z
+#setBloomLocality(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#bloomLocality()I
+#setCompressionPerLevel(Ljava/util/List;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#compressionPerLevel()Ljava/util/List;
+#setNumLevels(I)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#numLevels()I
+#setLevelCompactionDynamicLevelBytes(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#levelCompactionDynamicLevelBytes()Z
+#setMaxCompactionBytes(J)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#maxCompactionBytes()J
+#setCompactionStyle(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/ColumnFamilyOptionsInterface;
+#compactionStyle()Lorg/rocksdb/CompactionStyle;
+#setCompactionPriority(Lorg/rocksdb/CompactionPriority;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#compactionPriority()Lorg/rocksdb/CompactionPriority;
+#setCompactionOptionsUniversal(Lorg/rocksdb/CompactionOptionsUniversal;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#compactionOptionsUniversal()Lorg/rocksdb/CompactionOptionsUniversal;
+#setCompactionOptionsFIFO(Lorg/rocksdb/CompactionOptionsFIFO;)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#compactionOptionsFIFO()Lorg/rocksdb/CompactionOptionsFIFO;
+#setOptimizeFiltersForHits(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#optimizeFiltersForHits()Z
+#setForceConsistencyChecks(Z)Lorg/rocksdb/AdvancedColumnFamilyOptionsInterface;
+#forceConsistencyChecks()Z

+###org/rocksdb/AdvancedMutableColumnFamilyOptionsInterface
@5.4.5
+#setMaxWriteBufferNumber(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#maxWriteBufferNumber()I
+#setInplaceUpdateNumLocks(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#inplaceUpdateNumLocks()J
+#setMemtablePrefixBloomSizeRatio(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#memtablePrefixBloomSizeRatio()D
+#setMemtableHugePageSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#memtableHugePageSize()J
+#setArenaBlockSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#arenaBlockSize()J
+#setLevel0SlowdownWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#level0SlowdownWritesTrigger()I
+#setLevel0StopWritesTrigger(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#level0StopWritesTrigger()I
+#setTargetFileSizeBase(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#targetFileSizeBase()J
+#setTargetFileSizeMultiplier(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#targetFileSizeMultiplier()I
+#setMaxBytesForLevelMultiplier(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#maxBytesForLevelMultiplier()D
+#setMaxBytesForLevelMultiplierAdditional([I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#maxBytesForLevelMultiplierAdditional()[I
+#setSoftPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#softPendingCompactionBytesLimit()J
+#setHardPendingCompactionBytesLimit(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#hardPendingCompactionBytesLimit()J
+#setMaxSequentialSkipInIterations(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#maxSequentialSkipInIterations()J
+#setMaxSuccessiveMerges(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#maxSuccessiveMerges()J
+#setParanoidFileChecks(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#paranoidFileChecks()Z
+#setReportBgIoStats(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#reportBgIoStats()Z
@6.0.1
+#setTtl(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#ttl()J
@6.24.2
+#setPeriodicCompactionSeconds(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#periodicCompactionSeconds()J
@6.26.1
+#setEnableBlobFiles(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#enableBlobFiles()Z
+#setMinBlobSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#minBlobSize()J
+#setBlobFileSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobFileSize()J
+#setBlobCompressionType(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobCompressionType()Lorg/rocksdb/CompressionType;
+#setEnableBlobGarbageCollection(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#enableBlobGarbageCollection()Z
+#setBlobGarbageCollectionAgeCutoff(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobGarbageCollectionAgeCutoff()D
@6.27.3
+#setBlobGarbageCollectionForceThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobGarbageCollectionForceThreshold()D
@7.0.3
+#setMemtableWholeKeyFiltering(Z)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#memtableWholeKeyFiltering()Z
+#setBlobCompactionReadaheadSize(J)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobCompactionReadaheadSize()J
@7.4.3
+#setBlobFileStartingLevel(I)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#blobFileStartingLevel()I
@7.5.3
+#setExperimentalMempurgeThreshold(D)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#experimentalMempurgeThreshold()D
@7.6.0
+#setPrepopulateBlobCache(Lorg/rocksdb/PrepopulateBlobCache;)Lorg/rocksdb/AdvancedMutableColumnFamilyOptionsInterface;
+#prepopulateBlobCache()Lorg/rocksdb/PrepopulateBlobCache;

+###org/rocksdb/BackgroundErrorReason
@6.15.2
+#values()[Lorg/rocksdb/BackgroundErrorReason;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/BackgroundErrorReason;

+###org/rocksdb/BackupEngineOptions
@7.0.3
+#<init>(Ljava/lang/String;)V
+#backupDir()Ljava/lang/String;
+#setBackupEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/BackupEngineOptions;
+#backupEnv()Lorg/rocksdb/Env;
+#setShareTableFiles(Z)Lorg/rocksdb/BackupEngineOptions;
+#shareTableFiles()Z
+#setInfoLog(Lorg/rocksdb/Logger;)Lorg/rocksdb/BackupEngineOptions;
+#infoLog()Lorg/rocksdb/Logger;
+#setSync(Z)Lorg/rocksdb/BackupEngineOptions;
+#sync()Z
+#setDestroyOldData(Z)Lorg/rocksdb/BackupEngineOptions;
+#destroyOldData()Z
+#setBackupLogFiles(Z)Lorg/rocksdb/BackupEngineOptions;
+#backupLogFiles()Z
+#setBackupRateLimit(J)Lorg/rocksdb/BackupEngineOptions;
+#backupRateLimit()J
+#setBackupRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/BackupEngineOptions;
+#backupRateLimiter()Lorg/rocksdb/RateLimiter;
+#setRestoreRateLimit(J)Lorg/rocksdb/BackupEngineOptions;
+#restoreRateLimit()J
+#setRestoreRateLimiter(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/BackupEngineOptions;
+#restoreRateLimiter()Lorg/rocksdb/RateLimiter;
+#setShareFilesWithChecksum(Z)Lorg/rocksdb/BackupEngineOptions;
+#shareFilesWithChecksum()Z
+#setMaxBackgroundOperations(I)Lorg/rocksdb/BackupEngineOptions;
+#maxBackgroundOperations()I
+#setCallbackTriggerIntervalSize(J)Lorg/rocksdb/BackupEngineOptions;
+#callbackTriggerIntervalSize()J

+###org/rocksdb/ByteBufferGetStatus
@6.28.2

+###org/rocksdb/Cache
@5.4.5
@6.19.3
+#getUsage()J
+#getPinnedUsage()J

+###org/rocksdb/CassandraCompactionFilter
@5.8.0
+#<init>(Z)V
@5.9.2
+#<init>(ZI)V
-#<init>(Z)V

+###org/rocksdb/CassandraValueMergeOperator
@5.6.1
+#<init>()V
@5.9.2
+#<init>(I)V
+#<init>(II)V
-#<init>()V

+###org/rocksdb/ClockCache
@5.4.5
+#<init>(J)V
+#<init>(JI)V
+#<init>(JIZ)V

+###org/rocksdb/ColumnFamilyMetaData
@6.0.1
+#size()J
+#fileCount()J
+#name()[B
+#levels()Ljava/util/List;

+###org/rocksdb/CompactRangeOptions$BottommostLevelCompaction
@5.17.2
+#values()[Lorg/rocksdb/CompactRangeOptions$BottommostLevelCompaction;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompactRangeOptions$BottommostLevelCompaction;
+#getValue()B
+#fromRocksId(I)Lorg/rocksdb/CompactRangeOptions$BottommostLevelCompaction;

+###org/rocksdb/CompactRangeOptions
@5.17.2
+#<init>()V
+#exclusiveManualCompaction()Z
+#setExclusiveManualCompaction(Z)Lorg/rocksdb/CompactRangeOptions;
+#bottommostLevelCompaction()Lorg/rocksdb/CompactRangeOptions$BottommostLevelCompaction;
+#setBottommostLevelCompaction(Lorg/rocksdb/CompactRangeOptions$BottommostLevelCompaction;)Lorg/rocksdb/CompactRangeOptions;
+#changeLevel()Z
+#setChangeLevel(Z)Lorg/rocksdb/CompactRangeOptions;
+#targetLevel()I
+#setTargetLevel(I)Lorg/rocksdb/CompactRangeOptions;
+#targetPathId()I
+#setTargetPathId(I)Lorg/rocksdb/CompactRangeOptions;
+#allowWriteStall()Z
+#setAllowWriteStall(Z)Lorg/rocksdb/CompactRangeOptions;
+#maxSubcompactions()I
+#setMaxSubcompactions(I)Lorg/rocksdb/CompactRangeOptions;

+###org/rocksdb/CompactionJobInfo
@6.0.1
+#<init>()V
+#columnFamilyName()[B
+#status()Lorg/rocksdb/Status;
+#threadId()J
+#jobId()I
+#baseInputLevel()I
+#outputLevel()I
+#inputFiles()Ljava/util/List;
+#outputFiles()Ljava/util/List;
+#tableProperties()Ljava/util/Map;
+#compactionReason()Lorg/rocksdb/CompactionReason;
+#compression()Lorg/rocksdb/CompressionType;
+#stats()Lorg/rocksdb/CompactionJobStats;

+###org/rocksdb/CompactionJobStats
@6.0.1
+#<init>()V
+#reset()V
+#add(Lorg/rocksdb/CompactionJobStats;)V
+#elapsedMicros()J
+#numInputRecords()J
+#numInputFiles()J
+#numInputFilesAtOutputLevel()J
+#numOutputRecords()J
+#numOutputFiles()J
+#isManualCompaction()Z
+#totalInputBytes()J
+#totalOutputBytes()J
+#numRecordsReplaced()J
+#totalInputRawKeyBytes()J
+#totalInputRawValueBytes()J
+#numInputDeletionRecords()J
+#numExpiredDeletionRecords()J
+#numCorruptKeys()J
+#fileWriteNanos()J
+#fileRangeSyncNanos()J
+#fileFsyncNanos()J
+#filePrepareWriteNanos()J
+#smallestOutputKeyPrefix()[B
+#largestOutputKeyPrefix()[B
+#numSingleDelFallthru()J
+#numSingleDelMismatch()J

+###org/rocksdb/CompactionOptions
@6.0.1
+#<init>()V
+#compression()Lorg/rocksdb/CompressionType;
+#setCompression(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/CompactionOptions;
+#outputFileSizeLimit()J
+#setOutputFileSizeLimit(J)Lorg/rocksdb/CompactionOptions;
+#maxSubcompactions()I
+#setMaxSubcompactions(I)Lorg/rocksdb/CompactionOptions;

+###org/rocksdb/CompactionOptionsFIFO
@5.4.5
+#<init>()V
+#setMaxTableFilesSize(J)Lorg/rocksdb/CompactionOptionsFIFO;
+#maxTableFilesSize()J
@5.18.3
+#setTtl(J)Lorg/rocksdb/CompactionOptionsFIFO;
+#ttl()J
+#setAllowCompaction(Z)Lorg/rocksdb/CompactionOptionsFIFO;
+#allowCompaction()Z
@6.0.1
-#setTtl(J)Lorg/rocksdb/CompactionOptionsFIFO;
-#ttl()J

+###org/rocksdb/CompactionOptionsUniversal
@5.4.5
+#<init>()V
+#setSizeRatio(I)Lorg/rocksdb/CompactionOptionsUniversal;
+#sizeRatio()I
+#setMinMergeWidth(I)Lorg/rocksdb/CompactionOptionsUniversal;
+#minMergeWidth()I
+#setMaxMergeWidth(I)Lorg/rocksdb/CompactionOptionsUniversal;
+#maxMergeWidth()I
+#setMaxSizeAmplificationPercent(I)Lorg/rocksdb/CompactionOptionsUniversal;
+#maxSizeAmplificationPercent()I
+#setCompressionSizePercent(I)Lorg/rocksdb/CompactionOptionsUniversal;
+#compressionSizePercent()I
+#setStopStyle(Lorg/rocksdb/CompactionStopStyle;)Lorg/rocksdb/CompactionOptionsUniversal;
+#stopStyle()Lorg/rocksdb/CompactionStopStyle;
+#setAllowTrivialMove(Z)Lorg/rocksdb/CompactionOptionsUniversal;
+#allowTrivialMove()Z

+###org/rocksdb/CompactionPriority
@5.4.5
+#values()[Lorg/rocksdb/CompactionPriority;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompactionPriority;
+#getValue()B
+#getCompactionPriority(B)Lorg/rocksdb/CompactionPriority;

+###org/rocksdb/CompactionReason
@6.0.1
+#values()[Lorg/rocksdb/CompactionReason;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompactionReason;

+###org/rocksdb/CompactionStopStyle
@5.4.5
+#values()[Lorg/rocksdb/CompactionStopStyle;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/CompactionStopStyle;
+#getValue()B
+#getCompactionStopStyle(B)Lorg/rocksdb/CompactionStopStyle;

+###org/rocksdb/CompressionOptions
@5.4.5
+#<init>()V
+#setWindowBits(I)Lorg/rocksdb/CompressionOptions;
+#windowBits()I
+#setLevel(I)Lorg/rocksdb/CompressionOptions;
+#level()I
+#setStrategy(I)Lorg/rocksdb/CompressionOptions;
+#strategy()I
+#setMaxDictBytes(I)Lorg/rocksdb/CompressionOptions;
+#maxDictBytes()I
@6.0.1
+#setZStdMaxTrainBytes(I)Lorg/rocksdb/CompressionOptions;
+#zstdMaxTrainBytes()I
+#setEnabled(Z)Lorg/rocksdb/CompressionOptions;
+#enabled()Z

+###org/rocksdb/ConcurrentTaskLimiter
@6.13.3
+#name()Ljava/lang/String;
+#setMaxOutstandingTask(I)Lorg/rocksdb/ConcurrentTaskLimiter;
+#resetMaxOutstandingTask()Lorg/rocksdb/ConcurrentTaskLimiter;
+#outstandingTask()I

+###org/rocksdb/ConcurrentTaskLimiterImpl
@6.13.3
+#<init>(Ljava/lang/String;I)V
+#name()Ljava/lang/String;
+#setMaxOutstandingTask(I)Lorg/rocksdb/ConcurrentTaskLimiter;
+#resetMaxOutstandingTask()Lorg/rocksdb/ConcurrentTaskLimiter;
+#outstandingTask()I

+###org/rocksdb/ConfigOptions
@6.10.2
+#<init>()V
+#setDelimiter(Ljava/lang/String;)Lorg/rocksdb/ConfigOptions;
+#setIgnoreUnknownOptions(Z)Lorg/rocksdb/ConfigOptions;
+#setEnv(Lorg/rocksdb/Env;)Lorg/rocksdb/ConfigOptions;
+#setInputStringsEscaped(Z)Lorg/rocksdb/ConfigOptions;
+#setSanityLevel(Lorg/rocksdb/SanityLevel;)Lorg/rocksdb/ConfigOptions;

+###org/rocksdb/DataBlockIndexType
@6.0.1
+#values()[Lorg/rocksdb/DataBlockIndexType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/DataBlockIndexType;

+###org/rocksdb/DbPath
@5.4.5
+#<init>(Ljava/nio/file/Path;J)V
+#equals(Ljava/lang/Object;)Z
+#hashCode()I

+###org/rocksdb/EventListener
@6.15.2
+#onFlushBegin(Lorg/rocksdb/RocksDB;Lorg/rocksdb/FlushJobInfo;)V
+#onFlushCompleted(Lorg/rocksdb/RocksDB;Lorg/rocksdb/FlushJobInfo;)V
+#onTableFileDeleted(Lorg/rocksdb/TableFileDeletionInfo;)V
+#onCompactionBegin(Lorg/rocksdb/RocksDB;Lorg/rocksdb/CompactionJobInfo;)V
+#onCompactionCompleted(Lorg/rocksdb/RocksDB;Lorg/rocksdb/CompactionJobInfo;)V
+#onTableFileCreated(Lorg/rocksdb/TableFileCreationInfo;)V
+#onTableFileCreationStarted(Lorg/rocksdb/TableFileCreationBriefInfo;)V
+#onMemTableSealed(Lorg/rocksdb/MemTableInfo;)V
+#onColumnFamilyHandleDeletionStarted(Lorg/rocksdb/ColumnFamilyHandle;)V
+#onExternalFileIngested(Lorg/rocksdb/RocksDB;Lorg/rocksdb/ExternalFileIngestionInfo;)V
+#onBackgroundError(Lorg/rocksdb/BackgroundErrorReason;Lorg/rocksdb/Status;)V
+#onStallConditionsChanged(Lorg/rocksdb/WriteStallInfo;)V
+#onFileReadFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileWriteFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileFlushFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileSyncFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileRangeSyncFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileTruncateFinish(Lorg/rocksdb/FileOperationInfo;)V
+#onFileCloseFinish(Lorg/rocksdb/FileOperationInfo;)V
+#shouldBeNotifiedOnFileIO()Z
+#onErrorRecoveryBegin(Lorg/rocksdb/BackgroundErrorReason;Lorg/rocksdb/Status;)Z
+#onErrorRecoveryCompleted(Lorg/rocksdb/Status;)V

+###org/rocksdb/ExternalFileIngestionInfo
@6.15.2
+#getColumnFamilyName()Ljava/lang/String;
+#getExternalFilePath()Ljava/lang/String;
+#getInternalFilePath()Ljava/lang/String;
+#getGlobalSeqno()J
+#getTableProperties()Lorg/rocksdb/TableProperties;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/FileOperationInfo
@6.15.2
+#getPath()Ljava/lang/String;
+#getOffset()J
+#getLength()J
+#getStartTimestamp()J
+#getDuration()J
+#getStatus()Lorg/rocksdb/Status;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/FlushJobInfo
@6.15.2
+#getColumnFamilyId()J
+#getColumnFamilyName()Ljava/lang/String;
+#getFilePath()Ljava/lang/String;
+#getThreadId()J
+#getJobId()I
+#isTriggeredWritesSlowdown()Z
+#isTriggeredWritesStop()Z
+#getSmallestSeqno()J
+#getLargestSeqno()J
+#getTableProperties()Lorg/rocksdb/TableProperties;
+#getFlushReason()Lorg/rocksdb/FlushReason;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/FlushReason
@6.15.2
+#values()[Lorg/rocksdb/FlushReason;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/FlushReason;

+###org/rocksdb/Holder
@6.7.3
+#<init>()V
+#<init>(Ljava/lang/Object;)V
+#getValue()Ljava/lang/Object;
+#setValue(Ljava/lang/Object;)V

+###org/rocksdb/IndexShorteningMode
@6.12.7
+#values()[Lorg/rocksdb/IndexShorteningMode;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/IndexShorteningMode;

+###org/rocksdb/IngestExternalFileOptions
@5.5.1
+#<init>()V
+#<init>(ZZZZ)V
+#moveFiles()Z
+#setMoveFiles(Z)V
+#snapshotConsistency()Z
+#setSnapshotConsistency(Z)V
+#allowGlobalSeqNo()Z
+#setAllowGlobalSeqNo(Z)V
+#allowBlockingFlush()Z
+#setAllowBlockingFlush(Z)V
@6.0.1
+#setMoveFiles(Z)Lorg/rocksdb/IngestExternalFileOptions;
+#setSnapshotConsistency(Z)Lorg/rocksdb/IngestExternalFileOptions;
+#setAllowGlobalSeqNo(Z)Lorg/rocksdb/IngestExternalFileOptions;
+#setAllowBlockingFlush(Z)Lorg/rocksdb/IngestExternalFileOptions;
+#ingestBehind()Z
+#setIngestBehind(Z)Lorg/rocksdb/IngestExternalFileOptions;
+#writeGlobalSeqno()Z
+#setWriteGlobalSeqno(Z)Lorg/rocksdb/IngestExternalFileOptions;
-#setMoveFiles(Z)V
-#setSnapshotConsistency(Z)V
-#setAllowGlobalSeqNo(Z)V
-#setAllowBlockingFlush(Z)V

+###org/rocksdb/KeyMayExist$KeyMayExistEnum
@6.28.2
+#values()[Lorg/rocksdb/KeyMayExist$KeyMayExistEnum;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/KeyMayExist$KeyMayExistEnum;

+###org/rocksdb/KeyMayExist
@6.26.1
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#<init>(Lorg/rocksdb/KeyMayExist$KeyMayExistEnum;I)V

+###org/rocksdb/LRUCache
@5.4.5
+#<init>(J)V
+#<init>(JI)V
+#<init>(JIZ)V
+#<init>(JIZD)V
@7.6.0
+#<init>(JIZDD)V

+###org/rocksdb/LevelMetaData
@6.0.1
+#level()I
+#size()J
+#files()Ljava/util/List;

+###org/rocksdb/LiveFileMetaData
@6.0.1
+#columnFamilyName()[B
+#level()I

+###org/rocksdb/LogFile
@6.0.1
+#pathName()Ljava/lang/String;
+#logNumber()J
+#type()Lorg/rocksdb/WalFileType;
+#startSequence()J
+#sizeFileBytes()J

+###org/rocksdb/MemTableInfo
@6.15.2
+#getColumnFamilyName()Ljava/lang/String;
+#getFirstSeqno()J
+#getEarliestSeqno()J
+#getNumEntries()J
+#getNumDeletes()J
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/MemoryUsageType
@5.18.3
+#values()[Lorg/rocksdb/MemoryUsageType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MemoryUsageType;
+#getValue()B
+#getMemoryUsageType(B)Lorg/rocksdb/MemoryUsageType;

+###org/rocksdb/MemoryUtil
@5.18.3
+#<init>()V
+#getApproximateMemoryUsageByType(Ljava/util/List;Ljava/util/Set;)Ljava/util/Map;

+###org/rocksdb/MutableColumnFamilyOptions$BlobOption
@6.26.1
+#values()[Lorg/rocksdb/MutableColumnFamilyOptions$BlobOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableColumnFamilyOptions$BlobOption;
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;

+###org/rocksdb/MutableDBOptions$DBOption
@6.0.1
+#values()[Lorg/rocksdb/MutableDBOptions$DBOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableDBOptions$DBOption;
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;

+###org/rocksdb/MutableDBOptions$MutableDBOptionsBuilder
@6.0.1
+#setMaxBackgroundJobs(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#maxBackgroundJobs()I
+#setBaseBackgroundCompactions(I)V
+#baseBackgroundCompactions()I
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#maxBackgroundCompactions()I
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#avoidFlushDuringShutdown()Z
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#writableFileMaxBufferSize()J
+#setDelayedWriteRate(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#delayedWriteRate()J
+#setMaxTotalWalSize(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#maxTotalWalSize()J
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#deleteObsoleteFilesPeriodMicros()J
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#statsDumpPeriodSec()I
+#setMaxOpenFiles(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#maxOpenFiles()I
+#setBytesPerSync(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#bytesPerSync()J
+#setWalBytesPerSync(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#walBytesPerSync()J
+#setCompactionReadaheadSize(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#compactionReadaheadSize()J
+#setCompactionReadaheadSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWalBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxOpenFiles(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxTotalWalSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setDelayedWriteRate(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#setMaxBackgroundJobs(I)Lorg/rocksdb/MutableDBOptionsInterface;
@6.6.4
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#statsPersistPeriodSec()I
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#statsHistoryBufferSize()J
+#setStrictBytesPerSync(Z)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#strictBytesPerSync()Z
+#setStrictBytesPerSync(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
@6.7.3
*#setBaseBackgroundCompactions(I)V[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;[deprecated]
*#maxBackgroundCompactions()I[deprecated]
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;[deprecated]
@7.0.3
-#setBaseBackgroundCompactions(I)V[deprecated]
-#baseBackgroundCompactions()I

+###org/rocksdb/MutableDBOptions
@6.0.1
+#builder()Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
+#parse(Ljava/lang/String;)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;
@6.26.1
+#parse(Ljava/lang/String;Z)Lorg/rocksdb/MutableDBOptions$MutableDBOptionsBuilder;

+###org/rocksdb/MutableDBOptionsInterface
@6.0.1
+#setMaxBackgroundJobs(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#maxBackgroundJobs()I
+#setBaseBackgroundCompactions(I)V[deprecated]
+#baseBackgroundCompactions()I
+#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#maxBackgroundCompactions()I[deprecated]
+#setAvoidFlushDuringShutdown(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#avoidFlushDuringShutdown()Z
+#setWritableFileMaxBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#writableFileMaxBufferSize()J
+#setDelayedWriteRate(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#delayedWriteRate()J
+#setMaxTotalWalSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#maxTotalWalSize()J
+#setDeleteObsoleteFilesPeriodMicros(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#deleteObsoleteFilesPeriodMicros()J
+#setStatsDumpPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#statsDumpPeriodSec()I
+#setMaxOpenFiles(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#maxOpenFiles()I
+#setBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#bytesPerSync()J
+#setWalBytesPerSync(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#walBytesPerSync()J
+#setCompactionReadaheadSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#compactionReadaheadSize()J
@6.6.4
+#setStatsPersistPeriodSec(I)Lorg/rocksdb/MutableDBOptionsInterface;
+#statsPersistPeriodSec()I
+#setStatsHistoryBufferSize(J)Lorg/rocksdb/MutableDBOptionsInterface;
+#statsHistoryBufferSize()J
+#setStrictBytesPerSync(Z)Lorg/rocksdb/MutableDBOptionsInterface;
+#strictBytesPerSync()Z
@6.7.3
*#setMaxBackgroundCompactions(I)Lorg/rocksdb/MutableDBOptionsInterface;[deprecated]
@7.0.3
-#setBaseBackgroundCompactions(I)V[deprecated]
-#baseBackgroundCompactions()I

+###org/rocksdb/MutableOptionKey$ValueType
@6.0.1
+#values()[Lorg/rocksdb/MutableOptionKey$ValueType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/MutableOptionKey$ValueType;

+###org/rocksdb/MutableOptionKey
@6.0.1
+#name()Ljava/lang/String;
+#getValueType()Lorg/rocksdb/MutableOptionKey$ValueType;

+###org/rocksdb/MutableOptionValue
@6.0.1
+#<init>()V

+###org/rocksdb/NativeComparatorWrapper
@5.11.3
+#<init>()V
+#name()Ljava/lang/String;
+#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/Slice;)Ljava/lang/String;
+#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
+#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
+#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I
@6.8.1
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
+#findShortestSeparator(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
+#findShortSuccessor(Ljava/nio/ByteBuffer;)V
-#compare(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)I
-#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/Slice;)Ljava/lang/String;
-#findShortSuccessor(Ljava/lang/String;)Ljava/lang/String;
-#findShortestSeparator(Ljava/lang/String;Lorg/rocksdb/AbstractSlice;)Ljava/lang/String;
-#compare(Lorg/rocksdb/AbstractSlice;Lorg/rocksdb/AbstractSlice;)I

+###org/rocksdb/OperationStage
@6.0.1
+#values()[Lorg/rocksdb/OperationStage;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/OperationStage;

+###org/rocksdb/OperationType
@6.0.1
+#values()[Lorg/rocksdb/OperationType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/OperationType;

+###org/rocksdb/OptimisticTransactionDB
@5.11.3
+#open(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/OptimisticTransactionDB;
+#open(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/OptimisticTransactionDB;
+#beginTransaction(Lorg/rocksdb/WriteOptions;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/OptimisticTransactionOptions;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/OptimisticTransactionOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#getBaseDB()Lorg/rocksdb/RocksDB;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionalOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionalOptions;)Lorg/rocksdb/Transaction;
@6.0.1
+#closeE()V
+#close()V

+###org/rocksdb/OptimisticTransactionOptions
@5.11.3
+#<init>()V
+#isSetSnapshot()Z
+#setSetSnapshot(Z)Lorg/rocksdb/OptimisticTransactionOptions;
+#setComparator(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/OptimisticTransactionOptions;
+#setSetSnapshot(Z)Lorg/rocksdb/TransactionalOptions;

+###org/rocksdb/OptionString
@6.26.1
+#<init>()V

+###org/rocksdb/OptionsUtil
@5.9.2
+#loadLatestOptions(Ljava/lang/String;Lorg/rocksdb/Env;Lorg/rocksdb/DBOptions;Ljava/util/List;)V
+#loadLatestOptions(Ljava/lang/String;Lorg/rocksdb/Env;Lorg/rocksdb/DBOptions;Ljava/util/List;Z)V
+#loadOptionsFromFile(Ljava/lang/String;Lorg/rocksdb/Env;Lorg/rocksdb/DBOptions;Ljava/util/List;)V
+#loadOptionsFromFile(Ljava/lang/String;Lorg/rocksdb/Env;Lorg/rocksdb/DBOptions;Ljava/util/List;Z)V
+#getLatestOptionsFileName(Ljava/lang/String;Lorg/rocksdb/Env;)Ljava/lang/String;
@6.10.2
+#loadLatestOptions(Lorg/rocksdb/ConfigOptions;Ljava/lang/String;Lorg/rocksdb/DBOptions;Ljava/util/List;)V
+#loadOptionsFromFile(Lorg/rocksdb/ConfigOptions;Ljava/lang/String;Lorg/rocksdb/DBOptions;Ljava/util/List;)V

+###org/rocksdb/PersistentCache
@6.0.1
+#<init>(Lorg/rocksdb/Env;Ljava/lang/String;JLorg/rocksdb/Logger;Z)V

+###org/rocksdb/PrepopulateBlobCache
@7.6.0
+#values()[Lorg/rocksdb/PrepopulateBlobCache;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/PrepopulateBlobCache;
+#getPrepopulateBlobCache(Ljava/lang/String;)Lorg/rocksdb/PrepopulateBlobCache;
+#getPrepopulateBlobCache(B)Lorg/rocksdb/PrepopulateBlobCache;
+#getValue()B
+#getLibraryName()Ljava/lang/String;

+###org/rocksdb/Priority
@6.0.1
+#values()[Lorg/rocksdb/Priority;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/Priority;

+###org/rocksdb/Range
@6.0.1
+#<init>(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V

+###org/rocksdb/RateLimiterMode
@5.11.3
+#values()[Lorg/rocksdb/RateLimiterMode;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/RateLimiterMode;
+#getValue()B
+#getRateLimiterMode(B)Lorg/rocksdb/RateLimiterMode;

+###org/rocksdb/ReusedSynchronisationType
@6.8.1
+#values()[Lorg/rocksdb/ReusedSynchronisationType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/ReusedSynchronisationType;
+#getValue()B
+#getReusedSynchronisationType(B)Lorg/rocksdb/ReusedSynchronisationType;

+###org/rocksdb/RocksCallbackObject
@5.9.2

+###org/rocksdb/RocksDB$CountAndSize
@6.0.1
+#<init>(JJ)V

+###org/rocksdb/RocksDB$LiveFiles
@6.0.1

+###org/rocksdb/RocksDB$Version
@6.12.7
+#<init>(BBB)V
+#getMajor()I
+#getMinor()I
+#getPatch()I
+#toString()Ljava/lang/String;

+###org/rocksdb/SanityLevel
@6.10.2
+#values()[Lorg/rocksdb/SanityLevel;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/SanityLevel;
+#getValue()B
@6.28.2
-#getValue()B

+###org/rocksdb/SizeApproximationFlag
@6.0.1
+#values()[Lorg/rocksdb/SizeApproximationFlag;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/SizeApproximationFlag;

+###org/rocksdb/SstFileManager
@5.14.2
+#<init>(Lorg/rocksdb/Env;)V
+#<init>(Lorg/rocksdb/Env;Lorg/rocksdb/Logger;)V
+#<init>(Lorg/rocksdb/Env;Lorg/rocksdb/Logger;J)V
+#<init>(Lorg/rocksdb/Env;Lorg/rocksdb/Logger;JD)V
+#<init>(Lorg/rocksdb/Env;Lorg/rocksdb/Logger;JDJ)V
+#setMaxAllowedSpaceUsage(J)V
+#setCompactionBufferSize(J)V
+#isMaxAllowedSpaceReached()Z
+#isMaxAllowedSpaceReachedIncludingCompactions()Z
+#getTotalSize()J
+#getTrackedFiles()Ljava/util/Map;
+#getDeleteRateBytesPerSecond()J
+#setDeleteRateBytesPerSecond(J)V
+#getMaxTrashDBRatio()D
+#setMaxTrashDBRatio(D)V

+###org/rocksdb/SstFileMetaData
@6.0.1
+#fileName()Ljava/lang/String;
+#path()Ljava/lang/String;
+#size()J
+#smallestSeqno()J
+#largestSeqno()J
+#smallestKey()[B
+#largestKey()[B
+#numReadsSampled()J
+#beingCompacted()Z
+#numEntries()J
+#numDeletions()J

+###org/rocksdb/SstFileReader
@6.5.2
+#<init>(Lorg/rocksdb/Options;)V
+#newIterator(Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/SstFileReaderIterator;
+#open(Ljava/lang/String;)V
+#verifyChecksum()V
+#getTableProperties()Lorg/rocksdb/TableProperties;

+###org/rocksdb/SstFileReaderIterator
@6.5.2
+#key()[B
+#value()[B
@6.8.1
+#key(Ljava/nio/ByteBuffer;)I
+#value(Ljava/nio/ByteBuffer;)I

+###org/rocksdb/SstPartitionerFactory
@6.12.7

+###org/rocksdb/SstPartitionerFixedPrefixFactory
@6.12.7
+#<init>(J)V

+###org/rocksdb/StateType
@6.0.1
+#values()[Lorg/rocksdb/StateType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/StateType;

+###org/rocksdb/StatsLevel
@5.7.2
+#values()[Lorg/rocksdb/StatsLevel;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/StatsLevel;
+#getValue()B
+#getStatsLevel(B)Lorg/rocksdb/StatsLevel;

+###org/rocksdb/TableFileCreationBriefInfo
@6.15.2
+#getDbName()Ljava/lang/String;
+#getColumnFamilyName()Ljava/lang/String;
+#getFilePath()Ljava/lang/String;
+#getJobId()I
+#getReason()Lorg/rocksdb/TableFileCreationReason;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/TableFileCreationInfo
@6.15.2
+#getFileSize()J
+#getTableProperties()Lorg/rocksdb/TableProperties;
+#getStatus()Lorg/rocksdb/Status;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/TableFileCreationReason
@6.15.2
+#values()[Lorg/rocksdb/TableFileCreationReason;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/TableFileCreationReason;

+###org/rocksdb/TableFileDeletionInfo
@6.15.2
+#getDbName()Ljava/lang/String;
+#getFilePath()Ljava/lang/String;
+#getJobId()I
+#getStatus()Lorg/rocksdb/Status;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/TableFilter
@6.0.1
+#filter(Lorg/rocksdb/TableProperties;)Z

+###org/rocksdb/TableProperties
@6.0.1
+#getDataSize()J
+#getIndexSize()J
+#getIndexPartitions()J
+#getTopLevelIndexSize()J
+#getIndexKeyIsUserKey()J
+#getIndexValueIsDeltaEncoded()J
+#getFilterSize()J
+#getRawKeySize()J
+#getRawValueSize()J
+#getNumDataBlocks()J
+#getNumEntries()J
+#getNumDeletions()J
+#getNumMergeOperands()J
+#getNumRangeDeletions()J
+#getFormatVersion()J
+#getFixedKeyLen()J
+#getColumnFamilyId()J
+#getCreationTime()J
+#getOldestKeyTime()J
+#getColumnFamilyName()[B
+#getFilterPolicyName()Ljava/lang/String;
+#getComparatorName()Ljava/lang/String;
+#getMergeOperatorName()Ljava/lang/String;
+#getPrefixExtractorName()Ljava/lang/String;
+#getPropertyCollectorsNames()Ljava/lang/String;
+#getCompressionName()Ljava/lang/String;
+#getUserCollectedProperties()Ljava/util/Map;
+#getReadableProperties()Ljava/util/Map;
+#getPropertiesOffsets()Ljava/util/Map;
@6.15.2
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@6.20.3
+#getSlowCompressionEstimatedDataSize()J
+#getFastCompressionEstimatedDataSize()J
@6.28.2
-#getPropertiesOffsets()Ljava/util/Map;

+###org/rocksdb/ThreadStatus
@6.0.1
+#getThreadId()J
+#getThreadType()Lorg/rocksdb/ThreadType;
+#getDbName()Ljava/lang/String;
+#getCfName()Ljava/lang/String;
+#getOperationType()Lorg/rocksdb/OperationType;
+#getOperationElapsedTime()J
+#getOperationStage()Lorg/rocksdb/OperationStage;
+#getOperationProperties()[J
+#getStateType()Lorg/rocksdb/StateType;
+#getThreadTypeName(Lorg/rocksdb/ThreadType;)Ljava/lang/String;
+#getOperationName(Lorg/rocksdb/OperationType;)Ljava/lang/String;
+#microsToString(J)Ljava/lang/String;
+#getOperationStageName(Lorg/rocksdb/OperationStage;)Ljava/lang/String;
+#getOperationPropertyName(Lorg/rocksdb/OperationType;I)Ljava/lang/String;
+#interpretOperationProperties(Lorg/rocksdb/OperationType;[J)Ljava/util/Map;
+#getStateName(Lorg/rocksdb/StateType;)Ljava/lang/String;

+###org/rocksdb/ThreadType
@6.0.1
+#values()[Lorg/rocksdb/ThreadType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/ThreadType;

+###org/rocksdb/TimedEnv
@6.0.1
+#<init>(Lorg/rocksdb/Env;)V

+###org/rocksdb/TraceOptions
@6.0.1
+#<init>()V
+#<init>(J)V
+#getMaxTraceFileSize()J

+###org/rocksdb/TraceWriter
@6.0.1
+#write(Lorg/rocksdb/Slice;)V
+#closeWriter()V
+#getFileSize()J

+###org/rocksdb/Transaction$TransactionState
@5.11.3
+#values()[Lorg/rocksdb/Transaction$TransactionState;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/Transaction$TransactionState;
+#getTransactionState(B)Lorg/rocksdb/Transaction$TransactionState;

+###org/rocksdb/Transaction$WaitingTransactions
@5.11.3
+#getColumnFamilyId()J
+#getKey()Ljava/lang/String;
+#getTransactionIds()[J

+###org/rocksdb/Transaction
@5.11.3
+#setSnapshot()V
+#setSnapshotOnNextOperation()V
+#setSnapshotOnNextOperation(Lorg/rocksdb/AbstractTransactionNotifier;)V
+#getSnapshot()Lorg/rocksdb/Snapshot;
+#clearSnapshot()V
+#commit()V
+#rollback()V
+#setSavePoint()V
+#rollbackToSavePoint()V
+#get(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[B)[B
+#get(Lorg/rocksdb/ReadOptions;[B)[B
+#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;[[B)[[B
+#multiGet(Lorg/rocksdb/ReadOptions;[[B)[[B
+#getForUpdate(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BZ)[B
+#getForUpdate(Lorg/rocksdb/ReadOptions;[BZ)[B
+#multiGetForUpdate(Lorg/rocksdb/ReadOptions;Ljava/util/List;[[B)[[B
+#multiGetForUpdate(Lorg/rocksdb/ReadOptions;[[B)[[B
+#getIterator(Lorg/rocksdb/ReadOptions;)Lorg/rocksdb/RocksIterator;
+#getIterator(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/RocksIterator;
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#put([B[B)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;[[B[[B)V
+#put([[B[[B)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#merge([B[B)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#delete([B)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[[B)V
+#delete([[B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#singleDelete([B)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[[B)V
+#singleDelete([[B)V
+#putUntracked(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#putUntracked([B[B)V
+#putUntracked(Lorg/rocksdb/ColumnFamilyHandle;[[B[[B)V
+#putUntracked([[B[[B)V
+#mergeUntracked(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
+#mergeUntracked([B[B)V
+#deleteUntracked(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#deleteUntracked([B)V
+#deleteUntracked(Lorg/rocksdb/ColumnFamilyHandle;[[B)V
+#deleteUntracked([[B)V
+#putLogData([B)V
+#disableIndexing()V
+#enableIndexing()V
+#getNumKeys()J
+#getNumPuts()J
+#getNumDeletes()J
+#getNumMerges()J
+#getElapsedTime()J
+#getWriteBatch()Lorg/rocksdb/WriteBatchWithIndex;
+#setLockTimeout(J)V
+#getWriteOptions()Lorg/rocksdb/WriteOptions;
+#setWriteOptions(Lorg/rocksdb/WriteOptions;)V
+#undoGetForUpdate(Lorg/rocksdb/ColumnFamilyHandle;[B)V
+#undoGetForUpdate([B)V
+#rebuildFromWriteBatch(Lorg/rocksdb/WriteBatch;)V
+#getCommitTimeWriteBatch()Lorg/rocksdb/WriteBatch;
+#setLogNumber(J)V
+#getLogNumber()J
+#setName(Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#getID()J
+#isDeadlockDetect()Z
+#getWaitingTxns()Lorg/rocksdb/Transaction$WaitingTransactions;
+#getState()Lorg/rocksdb/Transaction$TransactionState;
+#getId()J
@6.0.1
+#getForUpdate(Lorg/rocksdb/ReadOptions;Lorg/rocksdb/ColumnFamilyHandle;[BZZ)[B
+#put(Lorg/rocksdb/ColumnFamilyHandle;[B[BZ)V
+#put(Lorg/rocksdb/ColumnFamilyHandle;[[B[[BZ)V
+#merge(Lorg/rocksdb/ColumnFamilyHandle;[B[BZ)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[BZ)V
+#delete(Lorg/rocksdb/ColumnFamilyHandle;[[BZ)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[BZ)V
+#singleDelete(Lorg/rocksdb/ColumnFamilyHandle;[[BZ)V
@7.0.3
*#multiGet(Lorg/rocksdb/ReadOptions;Ljava/util/List;[[B)[[B[deprecated]
+#multiGetAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
*#multiGet(Lorg/rocksdb/ReadOptions;[[B)[[B[deprecated]
+#multiGetAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/List;
*#multiGetForUpdate(Lorg/rocksdb/ReadOptions;Ljava/util/List;[[B)[[B[deprecated]
+#multiGetForUpdateAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
*#multiGetForUpdate(Lorg/rocksdb/ReadOptions;[[B)[[B[deprecated]
+#multiGetForUpdateAsList(Lorg/rocksdb/ReadOptions;Ljava/util/List;)Ljava/util/List;
@7.6.0
+#prepare()V

+###org/rocksdb/TransactionDB$DeadlockInfo
@5.11.3
+#getTransactionID()J
+#getColumnFamilyId()J
+#getWaitingKey()Ljava/lang/String;
+#isExclusive()Z

+###org/rocksdb/TransactionDB$DeadlockPath
@5.11.3
+#<init>([Lorg/rocksdb/TransactionDB$DeadlockInfo;Z)V
+#isEmpty()Z

+###org/rocksdb/TransactionDB$KeyLockInfo
@5.11.3
+#<init>(Ljava/lang/String;[JZ)V
+#getKey()Ljava/lang/String;
+#getTransactionIDs()[J
+#isExclusive()Z

+###org/rocksdb/TransactionDB
@5.11.3
+#open(Lorg/rocksdb/Options;Lorg/rocksdb/TransactionDBOptions;Ljava/lang/String;)Lorg/rocksdb/TransactionDB;
+#open(Lorg/rocksdb/DBOptions;Lorg/rocksdb/TransactionDBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/TransactionDB;
+#beginTransaction(Lorg/rocksdb/WriteOptions;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionOptions;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#getTransactionByName(Ljava/lang/String;)Lorg/rocksdb/Transaction;
+#getAllPreparedTransactions()Ljava/util/List;
+#getLockStatusData()Ljava/util/Map;
+#getDeadlockInfoBuffer()[Lorg/rocksdb/TransactionDB$DeadlockPath;
+#setDeadlockInfoBufferSize(I)V
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionalOptions;Lorg/rocksdb/Transaction;)Lorg/rocksdb/Transaction;
+#beginTransaction(Lorg/rocksdb/WriteOptions;Lorg/rocksdb/TransactionalOptions;)Lorg/rocksdb/Transaction;
@6.0.1
+#closeE()V
+#close()V

+###org/rocksdb/TransactionDBOptions
@5.11.3
+#<init>()V
+#getMaxNumLocks()J
+#setMaxNumLocks(J)Lorg/rocksdb/TransactionDBOptions;
+#getNumStripes()J
+#setNumStripes(J)Lorg/rocksdb/TransactionDBOptions;
+#getTransactionLockTimeout()J
+#setTransactionLockTimeout(J)Lorg/rocksdb/TransactionDBOptions;
+#getDefaultLockTimeout()J
+#setDefaultLockTimeout(J)Lorg/rocksdb/TransactionDBOptions;
+#getWritePolicy()Lorg/rocksdb/TxnDBWritePolicy;
+#setWritePolicy(Lorg/rocksdb/TxnDBWritePolicy;)Lorg/rocksdb/TransactionDBOptions;

+###org/rocksdb/TransactionOptions
@5.11.3
+#<init>()V
+#isSetSnapshot()Z
+#setSetSnapshot(Z)Lorg/rocksdb/TransactionOptions;
+#isDeadlockDetect()Z
+#setDeadlockDetect(Z)Lorg/rocksdb/TransactionOptions;
+#getLockTimeout()J
+#setLockTimeout(J)Lorg/rocksdb/TransactionOptions;
+#getExpiration()J
+#setExpiration(J)Lorg/rocksdb/TransactionOptions;
+#getDeadlockDetectDepth()J
+#setDeadlockDetectDepth(J)Lorg/rocksdb/TransactionOptions;
+#getMaxWriteBatchSize()J
+#setMaxWriteBatchSize(J)Lorg/rocksdb/TransactionOptions;
+#setSetSnapshot(Z)Lorg/rocksdb/TransactionalOptions;

+###org/rocksdb/TxnDBWritePolicy
@5.11.3
+#values()[Lorg/rocksdb/TxnDBWritePolicy;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/TxnDBWritePolicy;
+#getValue()B
+#getTxnDBWritePolicy(B)Lorg/rocksdb/TxnDBWritePolicy;

+###org/rocksdb/UInt64AddOperator
@5.18.3
+#<init>()V

+###org/rocksdb/WALRecoveryMode
@5.4.5
+#values()[Lorg/rocksdb/WALRecoveryMode;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/WALRecoveryMode;
+#getValue()B
+#getWALRecoveryMode(B)Lorg/rocksdb/WALRecoveryMode;

+###org/rocksdb/WalFileType
@6.0.1
+#values()[Lorg/rocksdb/WalFileType;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/WalFileType;

+###org/rocksdb/WalFilter$LogRecordFoundResult
@6.0.1
+#<init>(Lorg/rocksdb/WalProcessingOption;Z)V

+###org/rocksdb/WalFilter
@6.0.1
+#columnFamilyLogNumberMap(Ljava/util/Map;Ljava/util/Map;)V
+#logRecordFound(JLjava/lang/String;Lorg/rocksdb/WriteBatch;Lorg/rocksdb/WriteBatch;)Lorg/rocksdb/WalFilter$LogRecordFoundResult;
+#name()Ljava/lang/String;

+###org/rocksdb/WalProcessingOption
@6.0.1
+#values()[Lorg/rocksdb/WalProcessingOption;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/WalProcessingOption;
+#fromValue(B)Lorg/rocksdb/WalProcessingOption;

+###org/rocksdb/WriteBatch$SavePoint
@5.11.3
+#<init>(JJJ)V
+#clear()V
+#getSize()J
+#getCount()J
+#getContentFlags()J
+#isCleared()Z

+###org/rocksdb/WriteBufferManager
@5.18.3
+#<init>(JLorg/rocksdb/Cache;)V
@6.27.3
+#<init>(JLorg/rocksdb/Cache;Z)V
+#allowStall()Z

+###org/rocksdb/WriteStallCondition
@6.15.2
+#values()[Lorg/rocksdb/WriteStallCondition;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/WriteStallCondition;

+###org/rocksdb/WriteStallInfo
@6.15.2
+#getColumnFamilyName()Ljava/lang/String;
+#getCurrentCondition()Lorg/rocksdb/WriteStallCondition;
+#getPreviousCondition()Lorg/rocksdb/WriteStallCondition;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/rocksdb/util/ByteUtil
@6.8.1
+#<init>()V
+#bytes(Ljava/lang/String;)[B
+#memcmp(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)I

+###org/rocksdb/util/IntComparator
@6.8.1
+#<init>(Lorg/rocksdb/ComparatorOptions;)V
+#name()Ljava/lang/String;
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I

+###org/rocksdb/HdfsEnv
@6.0.1
+#<init>(Ljava/lang/String;)V
@7.0.3
-###org/rocksdb/HdfsEnv

+###org/rocksdb/WriteBatchTest
@3.5.0
+#<init>()V
+#main([Ljava/lang/String;)V
@3.9.0
-###org/rocksdb/WriteBatchTest

+###org/rocksdb/ComparatorBug$VersionedComparator
@6.8.1
+#name()Ljava/lang/String;
+#compare(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
@6.10.2
-###org/rocksdb/ComparatorBug$VersionedComparator

+###org/rocksdb/ComparatorBug
@6.8.1
+#<init>()V
+#main([Ljava/lang/String;)V
@6.10.2
-###org/rocksdb/ComparatorBug

+###org/rocksdb/Options$BuiltinComparator
@3.6.1
+#values()[Lorg/rocksdb/Options$BuiltinComparator;
+#valueOf(Ljava/lang/String;)Lorg/rocksdb/Options$BuiltinComparator;
@3.6.2
-###org/rocksdb/Options$BuiltinComparator
