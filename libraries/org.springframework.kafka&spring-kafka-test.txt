
+###org/springframework/kafka/test/core/BrokerAddress
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;)V
+#<init>(Lkafka/cluster/BrokerEndPoint;)V
+#fromAddress(Ljava/lang/String;)Lorg/springframework/kafka/test/core/BrokerAddress;
+#getHost()Ljava/lang/String;
+#getPort()I
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/test/utils/JUnitUtils$LevelsContainer
@2.3.0.RELEASE
+#<init>(Ljava/util/Map;Ljava/util/Map;)V

+###org/springframework/kafka/test/utils/JUnitUtils
@2.3.0.RELEASE
+#parseBooleanProperty(Ljava/lang/String;)Z
+#adjustLogLevels(Ljava/lang/String;Ljava/util/List;Ljava/util/List;Lorg/apache/logging/log4j/Level;)Lorg/springframework/kafka/test/utils/JUnitUtils$LevelsContainer;
+#revertLevels(Ljava/lang/String;Lorg/springframework/kafka/test/utils/JUnitUtils$LevelsContainer;)V

+###org/springframework/kafka/test/utils/KafkaTestUtils
@1.0.0.RELEASE
+#consumerProps(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;
+#producerProps(Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;
+#consumerProps(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#senderProps(Ljava/lang/String;)Ljava/util/Map;
+#getSingleRecord(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#getPropertyValue(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
+#getPropertyValue(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
@2.0.0.RELEASE
+#getSingleRecord(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;J)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;J)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
@2.2.0.RELEASE
*#consumerProps(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;[deprecated]
*#producerProps(Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;[deprecated]
+#consumerProps(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/test/EmbeddedKafkaBroker;)Ljava/util/Map;
+#producerProps(Lorg/springframework/kafka/test/EmbeddedKafkaBroker;)Ljava/util/Map;
@2.3.0.RELEASE
+#getOneRecord(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZZJ)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#getCurrentOffset(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/kafka/clients/consumer/OffsetAndMetadata;
+#defaultPropertyOverrides()Ljava/util/Properties;
-#consumerProps(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;[deprecated]
-#producerProps(Lorg/springframework/kafka/test/rule/KafkaEmbedded;)Ljava/util/Map;[deprecated]
@2.3.5.RELEASE
+#producerProps(Ljava/lang/String;)Ljava/util/Map;
*#senderProps(Ljava/lang/String;)Ljava/util/Map;[deprecated]
@2.4.2.RELEASE
+#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;JI)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
@2.5.0.RELEASE
-#senderProps(Ljava/lang/String;)Ljava/util/Map;[deprecated]
@2.6.5
+#getEndOffsets(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;[Ljava/lang/Integer;)Ljava/util/Map;
@2.8.5
+#getCurrentOffset(Lorg/apache/kafka/clients/admin/AdminClient;Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/kafka/clients/consumer/OffsetAndMetadata;
@2.9.3
*#getSingleRecord(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;J)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]
+#getSingleRecord(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;Ljava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
*#getOneRecord(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZZJ)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]
+#getOneRecord(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZZLjava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
*#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;J)Lorg/apache/kafka/clients/consumer/ConsumerRecords;[deprecated]
+#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
*#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;JI)Lorg/apache/kafka/clients/consumer/ConsumerRecords;[deprecated]
+#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/time/Duration;I)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
@3.0.0
-#getSingleRecord(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;J)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]
-#getOneRecord(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZZJ)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]
-#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;J)Lorg/apache/kafka/clients/consumer/ConsumerRecords;[deprecated]
-#getRecords(Lorg/apache/kafka/clients/consumer/Consumer;JI)Lorg/apache/kafka/clients/consumer/ConsumerRecords;[deprecated]

+###org/springframework/kafka/test/utils/ContainerTestUtils
@1.0.3.RELEASE
+#waitForAssignment(Ljava/lang/Object;I)V

+###org/springframework/kafka/test/context/EmbeddedKafka
@1.3.0.RELEASE
+#value()I
+#count()I
+#controlledShutdown()Z
+#partitions()I
+#topics()[Ljava/lang/String;
+#brokerProperties()[Ljava/lang/String;
@2.0.1.RELEASE
+#brokerPropertiesLocation()Ljava/lang/String;
@2.2.4.RELEASE
+#ports()[I
@2.3.0.RELEASE
+#zookeeperPort()I
+#bootstrapServersProperty()Ljava/lang/String;
@2.3.6.RELEASE
+#zkConnectionTimeout()I
+#zkSessionTimeout()I
@2.4.0.RELEASE
-#zkConnectionTimeout()I
-#zkSessionTimeout()I
@2.4.2.RELEASE
+#zkConnectionTimeout()I
+#zkSessionTimeout()I
@2.8.5
+#adminTimeout()I

+###org/springframework/kafka/test/condition/LogLevels
@2.3.0.RELEASE
+#classes()[Ljava/lang/Class;
+#categories()[Ljava/lang/String;
+#level()Ljava/lang/String;

+###org/springframework/kafka/test/condition/LogLevelsCondition
@2.3.0.RELEASE
+#<init>()V
+#evaluateExecutionCondition(Lorg/junit/jupiter/api/extension/ExtensionContext;)Lorg/junit/jupiter/api/extension/ConditionEvaluationResult;
+#beforeAll(Lorg/junit/jupiter/api/extension/ExtensionContext;)V
+#beforeEach(Lorg/junit/jupiter/api/extension/ExtensionContext;)V
+#afterEach(Lorg/junit/jupiter/api/extension/ExtensionContext;)V
+#afterAll(Lorg/junit/jupiter/api/extension/ExtensionContext;)V

+###org/springframework/kafka/test/condition/EmbeddedKafkaCondition
@2.3.0.RELEASE
+#<init>()V
+#supportsParameter(Lorg/junit/jupiter/api/extension/ParameterContext;Lorg/junit/jupiter/api/extension/ExtensionContext;)Z
+#resolveParameter(Lorg/junit/jupiter/api/extension/ParameterContext;Lorg/junit/jupiter/api/extension/ExtensionContext;)Ljava/lang/Object;
+#afterAll(Lorg/junit/jupiter/api/extension/ExtensionContext;)V
+#evaluateExecutionCondition(Lorg/junit/jupiter/api/extension/ExtensionContext;)Lorg/junit/jupiter/api/extension/ConditionEvaluationResult;
+#getBroker()Lorg/springframework/kafka/test/EmbeddedKafkaBroker;

+###org/springframework/kafka/test/EmbeddedKafkaBroker
@2.2.0.RELEASE
+#<init>(I)V
+#<init>(IZ[Ljava/lang/String;)V
+#<init>(IZI[Ljava/lang/String;)V
+#brokerProperties(Ljava/util/Map;)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#brokerProperty(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#kafkaPorts([I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#setAdminTimeout(I)V
+#afterPropertiesSet()V
+#addTopics([Ljava/lang/String;)V
+#addTopics([Lorg/apache/kafka/clients/admin/NewTopic;)V
+#doWithAdmin(Ljava/util/function/Consumer;)V
+#destroy()V
+#getTopics()Ljava/util/Set;
+#getKafkaServers()Ljava/util/List;
+#getKafkaServer(I)Lkafka/server/KafkaServer;
+#getZookeeper()Lkafka/zk/EmbeddedZookeeper;
+#getZkClient()Lorg/I0Itec/zkclient/ZkClient;
+#getZookeeperConnectionString()Ljava/lang/String;
+#getBrokerAddress(I)Lorg/springframework/kafka/test/core/BrokerAddress;
+#getBrokerAddresses()[Lorg/springframework/kafka/test/core/BrokerAddress;
+#getPartitionsPerTopic()I
+#bounce(Lorg/springframework/kafka/test/core/BrokerAddress;)V
+#restart(I)V
+#getBrokersAsString()Ljava/lang/String;
+#consumeFromAllEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#consumeFromAnEmbeddedTopic(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;)V
+#consumeFromEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;[Ljava/lang/String;)V
@2.3.0.RELEASE
+#zkPort(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#brokerListProperty(Ljava/lang/String;)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#getZkPort()I
+#setZkPort(I)V
+#getZookeeper()Lorg/springframework/kafka/test/EmbeddedKafkaBroker$EmbeddedZookeeper;
-#getZookeeper()Lkafka/zk/EmbeddedZookeeper;
@2.3.2.RELEASE
*#getZkClient()Lorg/I0Itec/zkclient/ZkClient;[deprecated]
+#getZooKeeperClient()Lkafka/zookeeper/ZooKeeperClient;
@2.3.6.RELEASE
+#zkConnectionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#zkSessionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
@2.4.0.RELEASE
-#zkConnectionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
-#zkSessionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
-#getZkClient()Lorg/I0Itec/zkclient/ZkClient;[deprecated]
@2.4.2.RELEASE
+#zkConnectionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#zkSessionTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
@2.5.4.RELEASE
+#addTopicsWithResults([Ljava/lang/String;)Ljava/util/Map;
+#addTopicsWithResults([Lorg/apache/kafka/clients/admin/NewTopic;)Ljava/util/Map;
+#doWithAdminFunction(Ljava/util/function/Function;)Ljava/lang/Object;
@2.8.2
+#consumeFromAllEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;Z)V
+#consumeFromAnEmbeddedTopic(Lorg/apache/kafka/clients/consumer/Consumer;ZLjava/lang/String;)V
+#consumeFromEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;Z[Ljava/lang/String;)V
@2.8.5
+#adminTimeout(I)Lorg/springframework/kafka/test/EmbeddedKafkaBroker;

+###org/springframework/kafka/test/EmbeddedKafkaBroker$EmbeddedZookeeper
@2.3.0.RELEASE
+#<init>(I)V
+#getPort()I
+#getSnapshotDir()Ljava/io/File;
+#getLogDir()Ljava/io/File;
+#shutdown()V

+###org/springframework/kafka/test/assertj/KafkaConditions$ConsumerRecordTimestampCondition
@1.3.0.RELEASE
+#<init>(Lorg/apache/kafka/common/record/TimestampType;J)V
+#matches(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
+#matches(Ljava/lang/Object;)Z

+###org/springframework/kafka/test/assertj/KafkaConditions$ConsumerRecordKeyCondition
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#matches(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
+#matches(Ljava/lang/Object;)Z

+###org/springframework/kafka/test/assertj/KafkaConditions$ConsumerRecordKeyValueCondition
@2.3.4.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#matches(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
+#matches(Ljava/lang/Object;)Z

+###org/springframework/kafka/test/assertj/KafkaConditions$ConsumerRecordValueCondition
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#matches(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
+#matches(Ljava/lang/Object;)Z

+###org/springframework/kafka/test/assertj/KafkaConditions$ConsumerRecordPartitionCondition
@1.0.0.RELEASE
+#<init>(I)V
+#matches(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
+#matches(Ljava/lang/Object;)Z

+###org/springframework/kafka/test/assertj/KafkaConditions
@1.0.0.RELEASE
+#key(Ljava/lang/Object;)Lorg/assertj/core/api/Condition;
+#value(Ljava/lang/Object;)Lorg/assertj/core/api/Condition;
+#partition(I)Lorg/assertj/core/api/Condition;
@1.3.0.RELEASE
+#timestamp(J)Lorg/assertj/core/api/Condition;
+#timestamp(Lorg/apache/kafka/common/record/TimestampType;J)Lorg/assertj/core/api/Condition;
@2.3.4.RELEASE
+#keyValue(Ljava/lang/Object;Ljava/lang/Object;)Lorg/assertj/core/api/Condition;

+###org/springframework/kafka/test/rule/Log4j2LevelAdjuster
@2.2.0.RELEASE
+#apply(Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;)Lorg/junit/runners/model/Statement;
+#classes([Ljava/lang/Class;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#classes(Z[Ljava/lang/Class;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#categories([Ljava/lang/String;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#categories(Z[Ljava/lang/String;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#trace()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#debug()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#info()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
+#forLevel(Lorg/apache/logging/log4j/Level;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
@2.3.0.RELEASE
+#<init>(Lorg/apache/logging/log4j/Level;[Ljava/lang/Class;)V
-#classes([Ljava/lang/Class;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#classes(Z[Ljava/lang/Class;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#categories(Z[Ljava/lang/String;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#trace()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#debug()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#info()Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;
-#forLevel(Lorg/apache/logging/log4j/Level;)Lorg/springframework/kafka/test/rule/Log4j2LevelAdjuster;

+###org/springframework/kafka/test/rule/EmbeddedKafkaRule
@2.2.0.RELEASE
+#<init>(I)V
+#<init>(IZ[Ljava/lang/String;)V
+#<init>(IZI[Ljava/lang/String;)V
+#brokerProperties(Ljava/util/Map;)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;
+#brokerProperty(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;
+#kafkaPorts([I)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;
+#getEmbeddedKafka()Lorg/springframework/kafka/test/EmbeddedKafkaBroker;
+#before()V
+#after()V
@2.3.0.RELEASE
+#zkPort(I)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;

+###org/springframework/kafka/test/hamcrest/KafkaMatchers$ConsumerRecordPartitionMatcher
@1.0.0.RELEASE
+#<init>(I)V
+#describeTo(Lorg/hamcrest/Description;)V

+###org/springframework/kafka/test/hamcrest/KafkaMatchers
@1.0.0.RELEASE
+#hasKey(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
+#hasValue(Ljava/lang/Object;)Lorg/hamcrest/Matcher;
+#hasPartition(I)Lorg/hamcrest/Matcher;
@1.3.0.RELEASE
+#hasTimestamp(J)Lorg/hamcrest/Matcher;
+#hasTimestamp(Lorg/apache/kafka/common/record/TimestampType;J)Lorg/hamcrest/Matcher;

+###org/springframework/kafka/test/hamcrest/KafkaMatchers$ConsumerRecordTimestampMatcher
@1.3.0.RELEASE
+#<init>(Lorg/apache/kafka/common/record/TimestampType;J)V
+#describeTo(Lorg/hamcrest/Description;)V

+###org/springframework/kafka/test/hamcrest/KafkaMatchers$ConsumerRecordValueMatcher
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#describeTo(Lorg/hamcrest/Description;)V

+###org/springframework/kafka/test/hamcrest/KafkaMatchers$ConsumerRecordKeyMatcher
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#describeTo(Lorg/hamcrest/Description;)V

+###org/springframework/kafka/test/rule/KafkaEmbedded
@1.0.0.RELEASE
+#<init>(I)V
+#<init>(IZ[Ljava/lang/String;)V
+#<init>(IZI[Ljava/lang/String;)V
+#getKafkaServers()Ljava/util/List;
+#getKafkaServer(I)Lkafka/server/KafkaServer;
+#getZookeeper()Lkafka/zk/EmbeddedZookeeper;
+#getZkClient()Lorg/I0Itec/zkclient/ZkClient;
+#getZookeeperConnectionString()Ljava/lang/String;
+#getBrokerAddress(I)Lorg/springframework/kafka/test/core/BrokerAddress;
+#getBrokerAddresses()[Lorg/springframework/kafka/test/core/BrokerAddress;
+#getPartitionsPerTopic()I
+#bounce(Lorg/springframework/kafka/test/core/BrokerAddress;)V
+#startZookeeper()V
+#bounce(IZ)V
+#bounce(I)V
+#restart(I)V
+#waitUntilSynced(Ljava/lang/String;I)V
+#getBrokersAsString()Ljava/lang/String;
+#isEmbedded()Z
+#consumeFromAllEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#consumeFromAnEmbeddedTopic(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/String;)V
@1.1.2.RELEASE
+#before()V
+#after()V
@1.3.0.RELEASE
+#brokerProperties(Ljava/util/Map;)Lorg/springframework/kafka/test/rule/KafkaEmbedded;
+#setKafkaPorts([I)V
+#afterPropertiesSet()V
+#destroy()V
+#consumeFromEmbeddedTopics(Lorg/apache/kafka/clients/consumer/Consumer;[Ljava/lang/String;)V
@1.3.1.RELEASE
+#createProperties(ILjava/lang/Integer;)Ljava/util/Properties;
@2.0.0.RELEASE
-#createProperties(ILjava/lang/Integer;)Ljava/util/Properties;
@2.0.1.RELEASE
+#createProperties(ILjava/lang/Integer;)Ljava/util/Properties;
*#bounce(IZ)V[deprecated]
*#bounce(I)V[deprecated]
*#waitUntilSynced(Ljava/lang/String;I)V[deprecated]
@2.1.0.RELEASE
-#createProperties(ILjava/lang/Integer;)Ljava/util/Properties;
@2.1.4.RELEASE
+#brokerProperty(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/kafka/test/rule/KafkaEmbedded;
@2.1.5.RELEASE
+#createBrokerProperties(I)Ljava/util/Properties;
@2.1.6.RELEASE
+#addTopics([Ljava/lang/String;)V
+#doWithAdmin(Ljava/util/function/Consumer;)V
@2.1.7.RELEASE
+#getTopics()Ljava/util/Set;
@2.2.0.RELEASE
+#brokerProperty(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;
+#brokerProperties(Ljava/util/Map;)Lorg/springframework/kafka/test/rule/EmbeddedKafkaRule;
-#before()V
-#addTopics([Ljava/lang/String;)V
-#after()V
@2.3.0.RELEASE
-###org/springframework/kafka/test/rule/KafkaEmbedded

+###org/springframework/kafka/test/rule/Log4jLevelAdjuster
@2.0.0.RELEASE
+#<init>(Lorg/apache/log4j/Level;[Ljava/lang/Class;)V
+#<init>(Lorg/apache/log4j/Level;[Ljava/lang/String;)V
+#apply(Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;)Lorg/junit/runners/model/Statement;
@2.2.0.RELEASE
-###org/springframework/kafka/test/rule/Log4jLevelAdjuster

+###org/springframework/kafka/test/rule/KafkaRule
@1.0.0.RELEASE
+#getZkClient()Lorg/I0Itec/zkclient/ZkClient;
+#getZookeeperConnectionString()Ljava/lang/String;
+#getBrokerAddresses()[Lorg/springframework/kafka/test/core/BrokerAddress;
+#getBrokersAsString()Ljava/lang/String;
+#isEmbedded()Z
+#getKafkaServers()Ljava/util/List;
+#getPartitionsPerTopic()I
@2.3.0.RELEASE
-###org/springframework/kafka/test/rule/KafkaRule

+###org/springframework/kafka/test/junit/GlobalEmbeddedKafkaTestExecutionListener
@3.0.0
+#<init>()V
+#testPlanExecutionStarted(Lorg/junit/platform/launcher/TestPlan;)V
+#testPlanExecutionFinished(Lorg/junit/platform/launcher/TestPlan;)V
