
+###io/airlift/slice/BasicSliceInput
@0.1
+#<init>(Lio/airlift/slice/Slice;)V
+#position()I
+#setPosition(I)V
+#isReadable()Z
+#available()I
+#readBoolean()Z
+#read()I
+#readByte()B
+#readUnsignedByte()I
+#readShort()S
+#readUnsignedShort()I
+#readInt()I
+#readLong()J
+#readSlice(I)Lio/airlift/slice/Slice;
+#readBytes([BII)V
+#readBytes(Lio/airlift/slice/Slice;II)V
+#readBytes(Ljava/io/OutputStream;I)V
+#skipBytes(I)I
+#slice()Lio/airlift/slice/Slice;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#toString()Ljava/lang/String;
@0.2
+#readFloat()F
+#readDouble()D
@0.6
+#read([B)I
+#read([BII)I
+#skip(J)J
@0.10
+#length()J
+#position()J
+#setPosition(J)V
-#position()I
-#setPosition(I)V
-#read([B)I
@0.35
+#getRetainedSize()J

+###io/airlift/slice/BasicSliceOutput
@0.1
+#reset()V
+#size()I
+#isWritable()Z
+#writableBytes()I
+#writeByte(I)V
+#writeShort(I)V
+#writeInt(I)V
+#writeLong(J)V
+#writeDouble(D)V
+#writeBytes([BII)V
+#writeBytes([B)V
+#writeBytes(Lio/airlift/slice/Slice;)V
+#writeBytes(Lio/airlift/slice/Slice;II)V
+#writeBytes(Ljava/io/InputStream;I)I
+#appendLong(J)Lio/airlift/slice/BasicSliceOutput;
+#appendDouble(D)Lio/airlift/slice/SliceOutput;
+#appendInt(I)Lio/airlift/slice/BasicSliceOutput;
+#appendShort(I)Lio/airlift/slice/BasicSliceOutput;
+#appendBytes([BII)Lio/airlift/slice/BasicSliceOutput;
+#appendBytes([B)Lio/airlift/slice/BasicSliceOutput;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/BasicSliceOutput;
+#slice()Lio/airlift/slice/Slice;
+#toString()Ljava/lang/String;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/SliceOutput;
+#appendBytes([B)Lio/airlift/slice/SliceOutput;
+#appendBytes([BII)Lio/airlift/slice/SliceOutput;
+#appendShort(I)Lio/airlift/slice/SliceOutput;
+#appendInt(I)Lio/airlift/slice/SliceOutput;
+#appendLong(J)Lio/airlift/slice/SliceOutput;
@0.4
+#getUnderlyingSlice()Lio/airlift/slice/Slice;
@0.5
+#appendByte(I)Lio/airlift/slice/BasicSliceOutput;
+#appendByte(I)Lio/airlift/slice/SliceOutput;
@0.10
+#writeFloat(F)V
+#writeBytes(Ljava/io/InputStream;I)V
-#writeBytes(Ljava/io/InputStream;I)I
@0.19
+#getRetainedSize()I
@0.25
+#reset(I)V
@0.30
+#getRetainedSize()J
-#getRetainedSize()I

+###io/airlift/slice/ByteArrays
@0.6
+#getShort([BI)S
+#getInt([BI)I
+#getLong([BI)J
+#getFloat([BI)F
+#getDouble([BI)D
@0.29
+#setShort([BIS)V
+#setInt([BII)V
+#setLong([BIJ)V
+#setFloat([BIF)V
+#setDouble([BID)V

+###io/airlift/slice/DynamicSliceOutput
@0.1
+#<init>(I)V
+#reset()V
+#size()I
+#isWritable()Z
+#writableBytes()I
+#writeByte(I)V
+#writeShort(I)V
+#writeInt(I)V
+#writeLong(J)V
+#writeDouble(D)V
+#writeBytes([B)V
+#writeBytes([BII)V
+#writeBytes(Lio/airlift/slice/Slice;)V
+#writeBytes(Lio/airlift/slice/Slice;II)V
+#writeBytes(Ljava/io/InputStream;I)I
+#writeZero(I)V
+#appendLong(J)Lio/airlift/slice/DynamicSliceOutput;
+#appendDouble(D)Lio/airlift/slice/DynamicSliceOutput;
+#appendInt(I)Lio/airlift/slice/DynamicSliceOutput;
+#appendShort(I)Lio/airlift/slice/DynamicSliceOutput;
+#appendBytes([BII)Lio/airlift/slice/DynamicSliceOutput;
+#appendBytes([B)Lio/airlift/slice/DynamicSliceOutput;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/DynamicSliceOutput;
+#slice()Lio/airlift/slice/Slice;
+#toString()Ljava/lang/String;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/SliceOutput;
+#appendBytes([B)Lio/airlift/slice/SliceOutput;
+#appendBytes([BII)Lio/airlift/slice/SliceOutput;
+#appendShort(I)Lio/airlift/slice/SliceOutput;
+#appendInt(I)Lio/airlift/slice/SliceOutput;
+#appendDouble(D)Lio/airlift/slice/SliceOutput;
+#appendLong(J)Lio/airlift/slice/SliceOutput;
@0.4
+#getUnderlyingSlice()Lio/airlift/slice/Slice;
@0.5
+#appendByte(I)Lio/airlift/slice/DynamicSliceOutput;
+#appendByte(I)Lio/airlift/slice/SliceOutput;
@0.6
+#copySlice()Lio/airlift/slice/Slice;
@0.10
+#writeFloat(F)V
+#writeBytes(Ljava/io/InputStream;I)V
-#writeBytes(Ljava/io/InputStream;I)I
@0.19
+#getRetainedSize()I
@0.25
+#reset(I)V
@0.30
+#getRetainedSize()J
-#getRetainedSize()I

+###io/airlift/slice/InputStreamSliceInput
@0.1
+#<init>(Ljava/io/InputStream;)V
+#position()I
+#setPosition(I)V
+#isReadable()Z
+#skipBytes(I)I
+#readUnsignedByte()I
+#readUnsignedShort()I
+#readInt()I
+#readLong()J
+#readShort()S
+#readByte()B
+#readBoolean()Z
+#read()I
+#read([B)I
+#read([BII)I
+#skip(J)J
+#available()I
+#close()V
+#readBytes([BII)V
+#readSlice(I)Lio/airlift/slice/Slice;
+#readBytes(Lio/airlift/slice/Slice;II)V
+#readBytes(Ljava/io/OutputStream;I)V
@0.2
+#readFloat()F
+#readDouble()D
@0.10
+#position()J
+#setPosition(J)V
-#position()I
-#setPosition(I)V
-#read([B)I
@0.25
+#<init>(Ljava/io/InputStream;I)V
@0.35
+#getRetainedSize()J

+###io/airlift/slice/Murmur3
@0.4
+#<init>()V
+#hash(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#hash(Lio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
+#hash(JLio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
+#hash64(Lio/airlift/slice/Slice;)J
+#hash64(Lio/airlift/slice/Slice;II)J
+#hash64(JLio/airlift/slice/Slice;II)J
+#hash64(J)J
@0.33
-#<init>()V
@0.38
-###io/airlift/slice/Murmur3

+###io/airlift/slice/Murmur3Hash128
@0.8
+#<init>()V
+#hash(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#hash(Lio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
+#hash(JLio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
+#hash64(Lio/airlift/slice/Slice;)J
+#hash64(Lio/airlift/slice/Slice;II)J
+#hash64(JLio/airlift/slice/Slice;II)J
+#hash64(J)J
@0.33
-#<init>()V

+###io/airlift/slice/Murmur3Hash32
@0.8
+#hash(Lio/airlift/slice/Slice;)I
+#hash(Lio/airlift/slice/Slice;II)I
+#hash(ILio/airlift/slice/Slice;II)I
+#hash(I)I
+#hash(J)I

+###io/airlift/slice/OutputStreamSliceOutput
@0.1
+#<init>(Ljava/io/OutputStream;)V
+#flush()V
+#close()V
+#reset()V
+#size()I
+#writableBytes()I
+#isWritable()Z
+#writeByte(I)V
+#writeShort(I)V
+#writeInt(I)V
+#writeLong(J)V
+#writeDouble(D)V
+#writeBytes(Lio/airlift/slice/Slice;)V
+#writeBytes(Lio/airlift/slice/Slice;II)V
+#writeBytes([B)V
+#writeBytes([BII)V
+#writeBytes(Ljava/io/InputStream;I)I
+#appendLong(J)Lio/airlift/slice/SliceOutput;
+#appendDouble(D)Lio/airlift/slice/SliceOutput;
+#appendInt(I)Lio/airlift/slice/SliceOutput;
+#appendShort(I)Lio/airlift/slice/SliceOutput;
+#appendBytes([BII)Lio/airlift/slice/SliceOutput;
+#appendBytes([B)Lio/airlift/slice/SliceOutput;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/SliceOutput;
+#slice()Lio/airlift/slice/Slice;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#toString()Ljava/lang/String;
@0.4
+#getUnderlyingSlice()Lio/airlift/slice/Slice;
@0.5
+#appendByte(I)Lio/airlift/slice/SliceOutput;
@0.10
+#writeFloat(F)V
+#writeBytes(Ljava/io/InputStream;I)V
-#writeBytes(Ljava/io/InputStream;I)I
@0.19
+#getRetainedSize()I
@0.25
+#<init>(Ljava/io/OutputStream;I)V
+#reset(I)V
+#writeZero(I)V
@0.30
+#getRetainedSize()J
-#getRetainedSize()I
@0.33
+#longSize()J

+###io/airlift/slice/RuntimeIOException
@0.1
+#<init>(Ljava/io/IOException;)V
@0.29
-###io/airlift/slice/RuntimeIOException

+###io/airlift/slice/SizeOf
@0.1
+#sizeOf([Z)J
+#sizeOf([B)J
+#sizeOf([S)J
+#sizeOf([I)J
+#sizeOf([J)J
+#sizeOf([F)J
+#sizeOf([D)J
+#sizeOf([Ljava/lang/Object;)J
@0.3
+#sizeOf([C)J
@0.4
+#sizeOfBooleanArray(I)J
+#sizeOfByteArray(I)J
+#sizeOfShortArray(I)J
+#sizeOfCharArray(I)J
+#sizeOfIntArray(I)J
+#sizeOfLongArray(I)J
+#sizeOfFloatArray(I)J
+#sizeOfDoubleArray(I)J
+#sizeOfObjectArray(I)J
@0.39
+#estimatedSizeOf(Ljava/lang/String;)J
+#estimatedSizeOf(Ljava/util/List;Ljava/util/function/ToLongFunction;)J
+#estimatedSizeOf(Ljava/util/Map;Ljava/util/function/ToLongFunction;Ljava/util/function/ToLongFunction;)J
@0.41
+#sizeOf(Ljava/lang/Boolean;)J
+#sizeOf(Ljava/lang/Byte;)J
+#sizeOf(Ljava/lang/Short;)J
+#sizeOf(Ljava/lang/Character;)J
+#sizeOf(Ljava/lang/Integer;)J
+#sizeOf(Ljava/lang/Long;)J
+#sizeOf(Ljava/lang/Float;)J
+#sizeOf(Ljava/lang/Double;)J
+#sizeOf(Ljava/util/Optional;Ljava/util/function/ToLongFunction;)J
+#sizeOf(Ljava/util/OptionalInt;)J
+#sizeOf(Ljava/util/OptionalLong;)J
+#sizeOf(Ljava/util/OptionalDouble;)J
+#estimatedSizeOf(Ljava/util/Set;Ljava/util/function/ToLongFunction;)J
@0.42
+#estimatedSizeOf(Ljava/util/Map;JJ)J
@0.45
+#estimatedSizeOf(Ljava/util/Queue;Ljava/util/function/ToLongFunction;)J
+#instanceSize(Ljava/lang/Class;)I

+###io/airlift/slice/Slice
@0.1
+#toUnsafeSlice(Ljava/nio/ByteBuffer;)Lio/airlift/slice/Slice;
+#length()I
+#fill(B)V
+#clear()V
+#clear(II)V
+#getByte(I)B
+#getUnsignedByte(I)S
+#getShort(I)S
+#getInt(I)I
+#getLong(I)J
+#getFloat(I)F
+#getDouble(I)D
+#getBytes(ILio/airlift/slice/Slice;)V
+#getBytes(ILio/airlift/slice/Slice;II)V
+#getBytes(I[B)V
+#getBytes(I[BII)V
+#getBytes()[B
+#getBytes(II)[B
+#getBytes(ILjava/io/OutputStream;I)V
+#setByte(II)V
+#setShort(II)V
+#setInt(II)V
+#setLong(IJ)V
+#setFloat(IF)V
+#setDouble(ID)V
+#setBytes(ILio/airlift/slice/Slice;)V
+#setBytes(ILio/airlift/slice/Slice;II)V
+#setBytes(I[B)V
+#setBytes(I[BII)V
+#setBytes(ILjava/io/InputStream;I)I
+#slice(II)Lio/airlift/slice/Slice;
+#compareTo(Lio/airlift/slice/Slice;)I
+#compareTo(IILio/airlift/slice/Slice;II)I
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#hashCode(II)I
+#equals(IILio/airlift/slice/Slice;II)Z
+#getInput()Lio/airlift/slice/BasicSliceInput;
+#getOutput()Lio/airlift/slice/SliceOutput;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#toString(IILjava/nio/charset/Charset;)Ljava/lang/String;
+#toString()Ljava/lang/String;
+#compareTo(Ljava/lang/Object;)I
+#getInput()Ljava/lang/Object;
+#getOutput()Ljava/lang/Object;
@0.2
+#toStringUtf8()Ljava/lang/String;
@0.3
+#getBase()Ljava/lang/Object;
+#getAddress()J
@0.4
-#getInput()Ljava/lang/Object;
-#getOutput()Ljava/lang/Object;
@0.6
*#toUnsafeSlice(Ljava/nio/ByteBuffer;)Lio/airlift/slice/Slice;[deprecated]
+#toByteBuffer()Ljava/nio/ByteBuffer;
+#toByteBuffer(II)Ljava/nio/ByteBuffer;
@0.10
+#setBytes(ILjava/io/InputStream;I)V
+#indexOfByte(I)I
+#toStringAscii()Ljava/lang/String;
+#toStringAscii(II)Ljava/lang/String;
-#setBytes(ILjava/io/InputStream;I)I
@0.11
+#getIntUnchecked(I)I
+#indexOf(Lio/airlift/slice/Slice;)I
+#indexOf(Lio/airlift/slice/Slice;I)I
@0.13
+#getRetainedSize()I
@0.21
-#getIntUnchecked(I)I
@0.25
+#getUnsignedShort(I)I
+#getUnsignedInt(I)J
@0.30
+#getRetainedSize()J
-#getRetainedSize()I
@0.32
+#isCompact()Z
@0.37
+#hasByteArray()Z
+#byteArray()[B
+#byteArrayOffset()I
@0.38
+#indexOfByte(B)I
-#toUnsafeSlice(Ljava/nio/ByteBuffer;)Lio/airlift/slice/Slice;[deprecated]

+###io/airlift/slice/SliceInput
@0.1
+#<init>()V
+#position()I
+#setPosition(I)V
+#isReadable()Z
+#available()I
+#read()I
+#readByte()B
+#readUnsignedByte()I
+#readShort()S
+#readInt()I
+#readUnsignedInt()J
+#readLong()J
+#readSlice(I)Lio/airlift/slice/Slice;
+#readFully([B)V
+#readBytes([B)V
+#readFully([BII)V
+#readBytes([BII)V
+#readBytes(Lio/airlift/slice/Slice;)V
+#readBytes(Lio/airlift/slice/Slice;I)V
+#readBytes(Lio/airlift/slice/Slice;II)V
+#readBytes(Ljava/io/OutputStream;I)V
+#skipBytes(I)I
+#mark(I)V
+#reset()V
+#markSupported()Z
+#readChar()C
+#readFloat()F
+#readDouble()D
+#readLine()Ljava/lang/String;
+#readUTF()Ljava/lang/String;
@0.9
+#readUnsignedShort()I
@0.10
+#position()J
+#setPosition(J)V
+#readBoolean()Z
+#read([B)I
+#read([BII)I
+#skip(J)J
+#close()V
-#position()I
-#setPosition(I)V
@0.35
+#getRetainedSize()J

+###io/airlift/slice/SliceOutput
@0.1
+#<init>()V
+#reset()V
+#size()I
+#writableBytes()I
+#isWritable()Z
+#writeBoolean(Z)V
+#write(I)V
+#writeByte(I)V
+#writeShort(I)V
+#writeInt(I)V
+#writeLong(J)V
+#writeDouble(D)V
+#writeBytes(Lio/airlift/slice/Slice;)V
+#writeBytes(Lio/airlift/slice/Slice;II)V
+#write([B)V
+#writeBytes([B)V
+#write([BII)V
+#writeBytes([BII)V
+#writeBytes(Ljava/io/InputStream;I)I
+#writeZero(I)V
+#slice()Lio/airlift/slice/Slice;
+#toString(Ljava/nio/charset/Charset;)Ljava/lang/String;
+#appendLong(J)Lio/airlift/slice/SliceOutput;
+#appendDouble(D)Lio/airlift/slice/SliceOutput;
+#appendInt(I)Lio/airlift/slice/SliceOutput;
+#appendShort(I)Lio/airlift/slice/SliceOutput;
+#appendBytes([BII)Lio/airlift/slice/SliceOutput;
+#appendBytes([B)Lio/airlift/slice/SliceOutput;
+#appendBytes(Lio/airlift/slice/Slice;)Lio/airlift/slice/SliceOutput;
+#writeChar(I)V
+#writeFloat(F)V
+#writeChars(Ljava/lang/String;)V
+#writeUTF(Ljava/lang/String;)V
+#writeBytes(Ljava/lang/String;)V
@0.4
+#getUnderlyingSlice()Lio/airlift/slice/Slice;
@0.5
+#appendByte(I)Lio/airlift/slice/SliceOutput;
@0.10
+#writeBytes(Ljava/io/InputStream;I)V
-#writeBytes(Ljava/io/InputStream;I)I
@0.19
+#getRetainedSize()I
@0.25
+#reset(I)V
@0.30
+#getRetainedSize()J
-#getRetainedSize()I

+###io/airlift/slice/Slices
@0.1
+#mapFileReadOnly(Ljava/io/File;)Lio/airlift/slice/Slice;
+#ensureSize(Lio/airlift/slice/Slice;I)Lio/airlift/slice/Slice;
+#allocate(I)Lio/airlift/slice/Slice;
+#wrappedBuffer([B)Lio/airlift/slice/Slice;
+#copiedBuffer(Ljava/lang/String;Ljava/nio/charset/Charset;)Lio/airlift/slice/Slice;
+#decodeString(Ljava/nio/ByteBuffer;Ljava/nio/charset/Charset;)Ljava/lang/String;
@0.2
+#utf8Slice(Ljava/lang/String;)Lio/airlift/slice/Slice;
@0.5
+#copyOf(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#copyOf(Lio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
@0.6
+#allocateDirect(I)Lio/airlift/slice/Slice;
+#wrappedBuffer(Ljava/nio/ByteBuffer;)Lio/airlift/slice/Slice;
+#wrappedBuffer([BII)Lio/airlift/slice/Slice;
-#decodeString(Ljava/nio/ByteBuffer;Ljava/nio/charset/Charset;)Ljava/lang/String;
@0.7
+#wrappedBooleanArray([Z)Lio/airlift/slice/Slice;
+#wrappedBooleanArray([ZII)Lio/airlift/slice/Slice;
+#wrappedShortArray([S)Lio/airlift/slice/Slice;
+#wrappedShortArray([SII)Lio/airlift/slice/Slice;
+#wrappedIntArray([I)Lio/airlift/slice/Slice;
+#wrappedIntArray([III)Lio/airlift/slice/Slice;
+#wrappedLongArray([J)Lio/airlift/slice/Slice;
+#wrappedLongArray([JII)Lio/airlift/slice/Slice;
+#wrappedFloatArray([F)Lio/airlift/slice/Slice;
+#wrappedFloatArray([FII)Lio/airlift/slice/Slice;
+#wrappedDoubleArray([D)Lio/airlift/slice/Slice;
+#wrappedDoubleArray([DII)Lio/airlift/slice/Slice;

+###io/airlift/slice/testing/SliceAssertions
@0.5
+#<init>()V
+#assertSlicesEqual(Lio/airlift/slice/Slice;Lio/airlift/slice/Slice;)V
@0.33
-#<init>()V

+###io/airlift/slice/UnsafeSliceFactory
@0.8
+#getInstance()Lio/airlift/slice/UnsafeSliceFactory;
+#newSlice(JI)Lio/airlift/slice/Slice;
+#newSlice(JILjava/lang/Object;)Lio/airlift/slice/Slice;
@0.29
+#newSlice(Ljava/lang/Object;JI)Lio/airlift/slice/Slice;

+###io/airlift/slice/XxHash64
@0.7
+#<init>()V
+#hash(J)J
+#hash(Lio/airlift/slice/Slice;)J
+#hash(JLio/airlift/slice/Slice;)J
+#hash(Lio/airlift/slice/Slice;II)J
+#hash(JLio/airlift/slice/Slice;II)J
@0.20
+#<init>(J)V
+#update([B)Lio/airlift/slice/XxHash64;
+#update([BII)Lio/airlift/slice/XxHash64;
+#update(Lio/airlift/slice/Slice;)Lio/airlift/slice/XxHash64;
+#update(Lio/airlift/slice/Slice;II)Lio/airlift/slice/XxHash64;
+#hash()J
@0.26
+#hash(Ljava/io/InputStream;)J
+#hash(JLjava/io/InputStream;)J
@0.45
+#hash(JJ)J

+###io/airlift/slice/ChunkedSliceInput$BufferReference
@0.10
+#getSlice()Lio/airlift/slice/Slice;

+###io/airlift/slice/ChunkedSliceInput$SliceLoader
@0.10
+#createBuffer(I)Lio/airlift/slice/ChunkedSliceInput$BufferReference;
+#getSize()J
+#load(JLio/airlift/slice/ChunkedSliceInput$BufferReference;I)V
+#close()V

+###io/airlift/slice/ChunkedSliceInput
@0.10
+#<init>(Lio/airlift/slice/ChunkedSliceInput$SliceLoader;I)V
+#length()J
+#position()J
+#setPosition(J)V
+#isReadable()Z
+#available()I
+#ensureAvailable(I)V
+#readBoolean()Z
+#read()I
+#readByte()B
+#readUnsignedByte()I
+#readShort()S
+#readUnsignedShort()I
+#readInt()I
+#readLong()J
+#readFloat()F
+#readDouble()D
+#readSlice(I)Lio/airlift/slice/Slice;
+#readBytes(Lio/airlift/slice/Slice;II)V
+#read([BII)I
+#readBytes([BII)V
+#readBytes(Ljava/io/OutputStream;I)V
+#skip(J)J
+#skipBytes(I)I
+#close()V
+#toString()Ljava/lang/String;
@0.35
+#getRetainedSize()J

+###io/airlift/slice/FixedLengthSliceInput
@0.10
+#<init>()V
+#length()J
+#remaining()J

+###io/airlift/slice/InvalidCodePointException
@0.11
+#<init>(I)V
+#getCodePoint()I

+###io/airlift/slice/InvalidUtf8Exception
@0.11
+#<init>(Ljava/lang/String;)V

+###io/airlift/slice/SliceUtf8
@0.11
+#isAscii(Lio/airlift/slice/Slice;)Z
+#countCodePoints(Lio/airlift/slice/Slice;)I
+#countCodePoints(Lio/airlift/slice/Slice;II)I
+#substring(Lio/airlift/slice/Slice;II)Lio/airlift/slice/Slice;
+#reverse(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#toUpperCase(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#toLowerCase(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#leftTrim(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#rightTrim(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#trim(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#fixInvalidUtf8(Lio/airlift/slice/Slice;)Lio/airlift/slice/Slice;
+#fixInvalidUtf8(Lio/airlift/slice/Slice;Ljava/util/OptionalInt;)Lio/airlift/slice/Slice;
+#offsetOfCodePoint(Lio/airlift/slice/Slice;I)I
+#offsetOfCodePoint(Lio/airlift/slice/Slice;II)I
+#lengthOfCodePoint(Lio/airlift/slice/Slice;I)I
+#lengthOfCodePoint(I)I
+#lengthOfCodePointFromStartByte(B)I
+#getCodePointAt(Lio/airlift/slice/Slice;I)I
+#getCodePointBefore(Lio/airlift/slice/Slice;I)I
+#codePointToUtf8(I)Lio/airlift/slice/Slice;
+#setCodePointAt(ILio/airlift/slice/Slice;I)I
@0.12
+#lengthOfCodePointSafe(Lio/airlift/slice/Slice;I)I
@0.16
+#tryGetCodePointAt(Lio/airlift/slice/Slice;I)I
@0.22
+#leftTrim(Lio/airlift/slice/Slice;[I)Lio/airlift/slice/Slice;
+#rightTrim(Lio/airlift/slice/Slice;[I)Lio/airlift/slice/Slice;
+#trim(Lio/airlift/slice/Slice;[I)Lio/airlift/slice/Slice;
@0.28
+#compareUtf16BE(Lio/airlift/slice/Slice;Lio/airlift/slice/Slice;)I

+###io/airlift/slice/UnsafeSlice
@0.21
+#getByteUnchecked(Lio/airlift/slice/Slice;I)B
+#getShortUnchecked(Lio/airlift/slice/Slice;I)S
+#getIntUnchecked(Lio/airlift/slice/Slice;I)I
+#getLongUnchecked(Lio/airlift/slice/Slice;I)J

+###io/airlift/slice/SliceTooLargeException
@0.37
+#<init>(Ljava/lang/String;)V

+###io/airlift/slice/SpookyHashV2
@0.36
+#hash64(Lio/airlift/slice/Slice;IIJ)J
+#hash32(Lio/airlift/slice/Slice;IIJ)I

+###io/airlift/slice/FnvHash
@0.37
+#hash32(Lio/airlift/slice/Slice;)I
+#hash64(Lio/airlift/slice/Slice;)J
