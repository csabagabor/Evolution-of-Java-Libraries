
+###io/airlift/testing/EquivalenceTester$InitialComparisonCheck
@0.65
+#addLesserGroup(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Lio/airlift/testing/EquivalenceTester$ComparisonCheck;
+#addLesserGroup(Ljava/lang/Iterable;)Lio/airlift/testing/EquivalenceTester$ComparisonCheck;

+###io/airlift/testing/EquivalenceTester$ComparisonCheck
@0.65
+#addGreaterGroup(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Lio/airlift/testing/EquivalenceTester$ComparisonCheck;
+#addGreaterGroup(Ljava/lang/Iterable;)Lio/airlift/testing/EquivalenceTester$ComparisonCheck;
+#check()V

+###io/airlift/testing/EquivalenceTester$PairCheckFailure
@0.65
+#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;IIII)V
+#getSecondaryClassNumber()I
+#getSecondaryElementNumber()I
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@0.66
+#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;IILjava/lang/Object;IILjava/lang/Object;)V
-#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;IIII)V

+###io/airlift/testing/EquivalenceTester$EquivalenceFailureType
@0.65
+#values()[Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;
+#valueOf(Ljava/lang/String;)Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;
+#getMessage()Ljava/lang/String;

+###io/airlift/testing/EquivalenceTester
@0.65
+#<init>()V
+#check([Ljava/util/Collection;)V[deprecated]
+#equivalenceTester()Lio/airlift/testing/EquivalenceTester$EquivalenceCheck;
+#checkComparison(Ljava/lang/Iterable;Ljava/lang/Iterable;[Ljava/lang/Iterable;)V[deprecated]
+#comparisonTester()Lio/airlift/testing/EquivalenceTester$InitialComparisonCheck;
@0.162
-#<init>()V

+###io/airlift/testing/ValidationAssertions
@0.65
+#<init>()V
+#assertValidates(Ljava/lang/Object;)V
+#assertValidates(Ljava/lang/Object;Ljava/lang/String;)V
+#assertFailsValidation(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;)V
+#assertFailsValidation(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
@0.162
-#<init>()V

+###io/airlift/testing/TempFile
@0.139
+#<init>()V
+#file()Ljava/io/File;
+#path()Ljava/nio/file/Path;
+#close()V

+###io/airlift/testing/Closeables
@0.79
+#<init>()V
+#closeQuietly(Ljava/io/Closeable;)V
@0.95
+#closeQuietly([Ljava/io/Closeable;)V
+#closeAll([Ljava/io/Closeable;)V
+#closeAllRuntimeException([Ljava/io/Closeable;)V
+#closeAllSuppress(Ljava/lang/Throwable;[Ljava/io/Closeable;)Ljava/lang/Throwable;
-#<init>()V
-#closeQuietly(Ljava/io/Closeable;)V
@0.196
*#closeQuietly([Ljava/io/Closeable;)V[deprecated]
@201
+#closeAll([Ljava/lang/AutoCloseable;)V
@202
+#closeAllSuppress(Ljava/lang/Throwable;[Ljava/lang/AutoCloseable;)Ljava/lang/Throwable;
-#closeAllSuppress(Ljava/lang/Throwable;[Ljava/io/Closeable;)Ljava/lang/Throwable;

+###io/airlift/testing/TestingTicker
@0.85
+#<init>()V
+#read()J
+#increment(JLjava/util/concurrent/TimeUnit;)V

+###io/airlift/testing/Assertions
@0.65
+#assertContains(Ljava/lang/String;Ljava/lang/String;)V
+#assertContainsAllOf(Ljava/lang/String;[Ljava/lang/String;)V
+#assertContains(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#assertEqualsIgnoreCase(Ljava/lang/String;Ljava/lang/String;)V
+#assertEqualsIgnoreCase(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#assertNotEquals(Ljava/lang/Object;Ljava/lang/Object;)V
+#assertNotEquals(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V
+#assertGreaterThan(Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertGreaterThan(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertGreaterThanOrEqual(Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertGreaterThanOrEqual(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertLessThan(Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertLessThan(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertLessThanOrEqual(Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertLessThanOrEqual(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertBetweenInclusive(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertBetweenInclusive(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertBetweenExclusive(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)V
+#assertBetweenExclusive(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/String;)V
+#assertInstanceOf(Ljava/lang/Object;Ljava/lang/Class;)V
+#assertInstanceOf(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V
+#assertEqualsIgnoreOrder(Ljava/lang/Iterable;Ljava/lang/Iterable;)V
+#assertEqualsIgnoreOrder(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/String;)V

+###io/airlift/testing/ConfigurationUtils
@0.79
+#loadPropertiesFromClasspath(Ljava/lang/String;)Ljava/util/Map;
@0.184
-###io/airlift/testing/ConfigurationUtils

+###io/airlift/testing/EquivalenceAssertionError
@0.65
+#<init>(Ljava/lang/Iterable;)V
+#getFailures()Ljava/util/List;

+###io/airlift/testing/EquivalenceTester$EquivalenceCheck
@0.65
+#addEquivalentGroup(Ljava/lang/Object;[Ljava/lang/Object;)Lio/airlift/testing/EquivalenceTester$EquivalenceCheck;
+#addEquivalentGroup(Ljava/lang/Iterable;)Lio/airlift/testing/EquivalenceTester$EquivalenceCheck;
+#check()V

+###io/airlift/testing/EquivalenceTester$ElementCheckFailure
@0.65
+#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;II)V
+#getType()Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;
+#getPrimaryClassNumber()I
+#getPrimaryElementNumber()I
+#toString()Ljava/lang/String;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
@0.66
+#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;IILjava/lang/Object;)V
-#<init>(Lio/airlift/testing/EquivalenceTester$EquivalenceFailureType;II)V

+###io/airlift/testing/FileUtils
@0.65
+#<init>()V
+#isSymbolicLink(Ljava/io/File;)Z
+#listFiles(Ljava/io/File;)Lcom/google/common/collect/ImmutableList;
+#listFiles(Ljava/io/File;Ljava/io/FilenameFilter;)Lcom/google/common/collect/ImmutableList;
+#createTempDir(Ljava/lang/String;)Ljava/io/File;
+#createTempDir(Ljava/io/File;Ljava/lang/String;)Ljava/io/File;
+#deleteDirectoryContents(Ljava/io/File;)Z
+#deleteRecursively(Ljava/io/File;)Z
+#copyDirectoryContents(Ljava/io/File;Ljava/io/File;)Z
+#copyRecursively(Ljava/io/File;Ljava/io/File;)Z
+#newFile(Ljava/lang/String;[Ljava/lang/String;)Ljava/io/File;
+#newFile(Ljava/io/File;[Ljava/lang/String;)Ljava/io/File;
+#newFile(Ljava/io/File;Ljava/lang/Iterable;)Ljava/io/File;
@0.150
-###io/airlift/testing/FileUtils

+###io/airlift/testing/TestingClock
@0.187
+#<init>()V
+#<init>(Ljava/time/ZoneId;)V
+#getZone()Ljava/time/ZoneId;
+#withZone(Ljava/time/ZoneId;)Ljava/time/Clock;
+#instant()Ljava/time/Instant;
+#increment(JLjava/util/concurrent/TimeUnit;)V
