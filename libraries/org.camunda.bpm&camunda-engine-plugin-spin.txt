
+###org/camunda/spin/plugin/variable/value/JsonValue
@7.3.0-alpha2
+#getValue()Lorg/camunda/spin/json/SpinJsonNode;
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
+#getType()Lorg/camunda/spin/plugin/variable/type/JsonValueType;
@7.13.0-alpha1
+#getValue()Lorg/camunda/spin/Spin;
+#getType()Lorg/camunda/bpm/engine/variable/type/SerializableValueType;
+#getValue()Ljava/lang/Object;
+#getType()Lorg/camunda/bpm/engine/variable/type/ValueType;

+###org/camunda/spin/plugin/variable/value/XmlValue
@7.3.0-alpha2
+#getValue()Lorg/camunda/spin/xml/SpinXmlElement;
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
@7.13.0-alpha1
+#getValue()Lorg/camunda/spin/Spin;
+#getValue()Ljava/lang/Object;

+###org/camunda/spin/plugin/variable/value/SpinValue
@7.3.0-alpha2
+#getValue()Lorg/camunda/spin/Spin;
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
@7.13.0-alpha1
+#getValue()Ljava/lang/Object;

+###org/camunda/spin/plugin/variable/value/builder/XmlValueBuilder
@7.3.0-alpha2
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
@7.13.0-alpha1
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;

+###org/camunda/spin/plugin/variable/value/builder/JsonValueBuilder
@7.3.0-alpha2
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
@7.13.0-alpha1
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;

+###org/camunda/spin/plugin/variable/value/builder/SpinValueBuilder
@7.3.0-alpha2
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#create()Lorg/camunda/spin/plugin/variable/value/SpinValue;
@7.3.0-alpha4
-#create()Lorg/camunda/spin/plugin/variable/value/SpinValue;

+###org/camunda/spin/plugin/variable/value/impl/JsonValueImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/json/SpinJsonNode;Ljava/lang/String;Ljava/lang/String;Z)V
+#<init>(Lorg/camunda/spin/json/SpinJsonNode;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;)V
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
+#getType()Lorg/camunda/spin/plugin/variable/type/JsonValueType;
+#getValue()Lorg/camunda/spin/json/SpinJsonNode;
+#getType()Lorg/camunda/spin/plugin/variable/type/SpinValueType;
+#getValue()Lorg/camunda/spin/Spin;
+#getType()Lorg/camunda/bpm/engine/variable/type/SerializableValueType;
+#getValue()Ljava/lang/Object;
+#getType()Lorg/camunda/bpm/engine/variable/type/ValueType;
@7.9.0-alpha4
+#<init>(Lorg/camunda/spin/json/SpinJsonNode;Ljava/lang/String;Ljava/lang/String;ZZ)V

+###org/camunda/spin/plugin/variable/value/impl/builder/XmlValueBuilderImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/plugin/variable/value/XmlValue;)V
+#<init>(Ljava/lang/String;)V
+#<init>(Lorg/camunda/spin/xml/SpinXmlElement;)V
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;

+###org/camunda/spin/plugin/variable/value/impl/builder/JsonValueBuilderImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/plugin/variable/value/JsonValue;)V
+#<init>(Ljava/lang/String;)V
+#<init>(Lorg/camunda/spin/json/SpinJsonNode;)V
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;

+###org/camunda/spin/plugin/variable/value/impl/builder/SpinValueBuilderImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/plugin/variable/value/SpinValue;)V
+#create()Lorg/camunda/spin/plugin/variable/value/SpinValue;
+#serializationDataFormat(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
+#serializationDataFormat(Lorg/camunda/bpm/engine/variable/value/SerializationDataFormat;)Lorg/camunda/spin/plugin/variable/value/builder/SpinValueBuilder;
@7.3.0-alpha4
+#create()Lorg/camunda/bpm/engine/variable/value/TypedValue;
@7.9.0-alpha1
+#setTransient(Z)Lorg/camunda/bpm/engine/variable/value/builder/TypedValueBuilder;

+###org/camunda/spin/plugin/variable/value/impl/SpinValueImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/Spin;Ljava/lang/String;Ljava/lang/String;ZLorg/camunda/bpm/engine/variable/type/ValueType;)V
+#getValue()Lorg/camunda/spin/Spin;
+#getType()Lorg/camunda/spin/plugin/variable/type/SpinValueType;
+#isDeserialized()Z
+#getValueSerialized()Ljava/lang/String;
+#setValueSerialized(Ljava/lang/String;)V
+#getSerializationDataFormat()Ljava/lang/String;
+#setSerializationDataFormat(Ljava/lang/String;)V
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
+#getType()Lorg/camunda/bpm/engine/variable/type/ValueType;
+#getValue()Ljava/lang/Object;
+#getType()Lorg/camunda/bpm/engine/variable/type/SerializableValueType;
@7.9.0-alpha4
+#<init>(Lorg/camunda/spin/Spin;Ljava/lang/String;Ljava/lang/String;ZLorg/camunda/bpm/engine/variable/type/ValueType;Z)V
-#<init>(Lorg/camunda/spin/Spin;Ljava/lang/String;Ljava/lang/String;ZLorg/camunda/bpm/engine/variable/type/ValueType;)V

+###org/camunda/spin/plugin/variable/value/impl/XmlValueImpl
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/xml/SpinXmlElement;Ljava/lang/String;Ljava/lang/String;Z)V
+#<init>(Lorg/camunda/spin/xml/SpinXmlElement;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Ljava/lang/String;)V
+#getDataFormat()Lorg/camunda/spin/spi/DataFormat;
+#getType()Lorg/camunda/spin/plugin/variable/type/XmlValueType;
+#getValue()Lorg/camunda/spin/xml/SpinXmlElement;
+#getType()Lorg/camunda/spin/plugin/variable/type/SpinValueType;
+#getValue()Lorg/camunda/spin/Spin;
+#getType()Lorg/camunda/bpm/engine/variable/type/SerializableValueType;
+#getValue()Ljava/lang/Object;
+#getType()Lorg/camunda/bpm/engine/variable/type/ValueType;
@7.9.0-alpha4
+#<init>(Lorg/camunda/spin/xml/SpinXmlElement;Ljava/lang/String;Ljava/lang/String;ZZ)V

+###org/camunda/spin/plugin/variable/type/JsonValueType
@7.3.0-alpha2

+###org/camunda/spin/plugin/variable/type/SpinValueType
@7.3.0-alpha2

+###org/camunda/spin/plugin/variable/type/XmlValueType
@7.3.0-alpha2

+###org/camunda/spin/plugin/variable/type/impl/XmlValueTypeImpl
@7.3.0-alpha2
+#<init>()V

+###org/camunda/spin/plugin/variable/type/impl/JsonValueTypeImpl
@7.3.0-alpha2
+#<init>()V

+###org/camunda/spin/plugin/variable/type/impl/SpinValueTypeImpl
@7.3.0-alpha2
+#<init>(Ljava/lang/String;)V
+#createValue(Ljava/lang/Object;Ljava/util/Map;)Lorg/camunda/bpm/engine/variable/value/TypedValue;
+#createValueFromSerialized(Ljava/lang/String;Ljava/util/Map;)Lorg/camunda/bpm/engine/variable/value/SerializableValue;
+#isPrimitiveValueType()Z
+#getValueInfo(Lorg/camunda/bpm/engine/variable/value/TypedValue;)Ljava/util/Map;

+###org/camunda/spin/plugin/variable/SpinValues
@7.3.0-alpha2
+#<init>()V
+#jsonValue(Lorg/camunda/spin/json/SpinJsonNode;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#jsonValue(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#xmlValue(Lorg/camunda/spin/xml/SpinXmlElement;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
+#xmlValue(Ljava/lang/String;)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
@7.9.0-alpha4
+#jsonValue(Lorg/camunda/spin/json/SpinJsonNode;Z)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#jsonValue(Ljava/lang/String;Z)Lorg/camunda/spin/plugin/variable/value/builder/JsonValueBuilder;
+#xmlValue(Lorg/camunda/spin/xml/SpinXmlElement;Z)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;
+#xmlValue(Ljava/lang/String;Z)Lorg/camunda/spin/plugin/variable/value/builder/XmlValueBuilder;

+###org/camunda/spin/plugin/impl/SpinObjectValueSerializer
@7.2.0-alpha6
+#<init>(Ljava/lang/String;Lorg/camunda/spin/spi/DataFormat;)V
+#getName()Ljava/lang/String;

+###org/camunda/spin/plugin/impl/SpinProcessEnginePlugin
@7.2.0-alpha6
+#<init>()V
+#preInit(Lorg/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl;)V
+#postInit(Lorg/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl;)V

+###org/camunda/spin/plugin/impl/SpinBpmPlatformPlugin
@7.5.0-alpha1
+#<init>()V
+#postProcessApplicationDeploy(Lorg/camunda/bpm/application/ProcessApplicationInterface;)V
@7.5.0-alpha2
+#postProcessApplicationUndeploy(Lorg/camunda/bpm/application/ProcessApplicationInterface;)V

+###org/camunda/spin/plugin/impl/SpinVariableSerializers
@7.5.0-alpha1
+#<init>()V
+#createObjectValueSerializers(Lorg/camunda/spin/DataFormats;)Ljava/util/List;
+#createSpinValueSerializers(Lorg/camunda/spin/DataFormats;)Ljava/util/List;

+###org/camunda/spin/plugin/impl/SpinFallbackSerializerFactory
@7.5.0-alpha1
+#<init>()V
+#getSerializer(Ljava/lang/String;)Lorg/camunda/bpm/engine/impl/variable/serializer/TypedValueSerializer;
+#getSerializer(Lorg/camunda/bpm/engine/variable/value/TypedValue;)Lorg/camunda/bpm/engine/impl/variable/serializer/TypedValueSerializer;

+###org/camunda/spin/plugin/impl/feel/integration/SpinValueMapper
@7.13.0-alpha2
+#<init>()V
+#toValue(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/util/Optional;
+#unpackValue(Lorg/camunda/feel/syntaxtree/Val;Ljava/util/function/Function;)Ljava/util/Optional;
+#priority()I

+###org/camunda/spin/plugin/impl/FallbackSpinObjectValueSerializer
@7.5.0-alpha1
+#<init>(Ljava/lang/String;)V
+#getName()Ljava/lang/String;

+###org/camunda/spin/plugin/impl/SpinFunctionMapper
@7.2.0-alpha6
+#<init>()V
+#resolveFunction(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/reflect/Method;
@7.18.0-alpha2
-###org/camunda/spin/plugin/impl/SpinFunctionMapper

+###org/camunda/spin/plugin/impl/SpinScriptEnvResolver
@7.2.0-alpha6
+#<init>()V
+#resolve(Ljava/lang/String;)[Ljava/lang/String;

+###org/camunda/spin/plugin/impl/JsonValueSerializer
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/spi/DataFormat;)V
+#<init>()V
+#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
+#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;
@7.4.0-alpha3
+#convertToTypedValue(Lorg/camunda/bpm/engine/variable/impl/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
+#convertToTypedValue(Lorg/camunda/bpm/engine/variable/impl/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;
-#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
-#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;

+###org/camunda/spin/plugin/impl/SpinPluginLogger
@7.5.0-alpha1
+#<init>()V
+#logNoDataFormatsInitiailized(Ljava/lang/String;Ljava/lang/String;)V
+#fallbackSerializerCannotDeserializeObjects()Lorg/camunda/bpm/engine/ProcessEngineException;

+###org/camunda/spin/plugin/impl/SpinValueSerializer
@7.3.0-alpha2
+#<init>(Lorg/camunda/bpm/engine/variable/type/SerializableValueType;Lorg/camunda/spin/spi/DataFormat;Ljava/lang/String;)V
+#getName()Ljava/lang/String;

+###org/camunda/spin/plugin/impl/XmlValueSerializer
@7.3.0-alpha2
+#<init>(Lorg/camunda/spin/spi/DataFormat;)V
+#<init>()V
+#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
+#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;
@7.4.0-alpha3
+#convertToTypedValue(Lorg/camunda/bpm/engine/variable/impl/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
+#convertToTypedValue(Lorg/camunda/bpm/engine/variable/impl/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;
-#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/spin/plugin/variable/value/SpinValue;
-#convertToTypedValue(Lorg/camunda/bpm/engine/impl/core/variable/value/UntypedValueImpl;)Lorg/camunda/bpm/engine/variable/value/TypedValue;

+###org/camunda/spin/plugin/impl/SpinConfiguration
@7.17.0-alpha3
+#<init>()V
+#isEnableXxeProcessing()Z
+#setEnableXxeProcessing(Z)V
+#isEnableSecureXmlProcessing()Z
+#setEnableSecureXmlProcessing(Z)V

+###org/camunda/spin/plugin/impl/SpinFunctions
@7.18.0-alpha2
+#<init>()V
