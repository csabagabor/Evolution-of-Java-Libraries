
+###org/springframework/kafka/config/AbstractKafkaListenerContainerFactory
@1.0.0.RELEASE
+#<init>()V
+#setConsumerFactory(Lorg/springframework/kafka/core/ConsumerFactory;)V
+#getConsumerFactory()Lorg/springframework/kafka/core/ConsumerFactory;
+#setAutoStartup(Ljava/lang/Boolean;)V
+#setPhase(I)V
+#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V
+#setRecordFilterStrategy(Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;)V
+#setAckDiscarded(Ljava/lang/Boolean;)V
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
+#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
+#createListenerContainer(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;
+#createListenerContainer(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@1.1.0.RELEASE
+#isBatchListener()Ljava/lang/Boolean;
+#setBatchListener(Ljava/lang/Boolean;)V
@1.3.5.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.0.0.RELEASE
+#setReplyTemplate(Lorg/springframework/kafka/core/KafkaTemplate;)V
-#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.0.5.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.1.0.RELEASE
-#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.1.3.RELEASE
+#setStatefulRetry(Z)V
@2.1.6.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.2.0.RELEASE
+#setErrorHandler(Lorg/springframework/kafka/listener/ErrorHandler;)V
+#setBatchErrorHandler(Lorg/springframework/kafka/listener/BatchErrorHandler;)V
+#setReplyHeadersConfigurer(Lorg/springframework/kafka/listener/adapter/ReplyHeadersConfigurer;)V
+#getContainerProperties()Lorg/springframework/kafka/listener/ContainerProperties;
+#afterPropertiesSet()V
+#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;
+#createContainer([Ljava/lang/String;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;
+#createContainer(Ljava/util/regex/Pattern;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;
+#createContainer(Ljava/util/regex/Pattern;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#createContainer([Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;
-#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
@2.2.7.RELEASE
+#setRecordInterceptor(Lorg/springframework/kafka/listener/RecordInterceptor;)V
@2.3.0.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setMissingTopicsFatal(Z)V
*#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;[deprecated]
+#createContainer([Lorg/springframework/kafka/support/TopicPartitionOffset;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;
+#createContainer([Lorg/springframework/kafka/support/TopicPartitionOffset;)Lorg/springframework/kafka/listener/MessageListenerContainer;
*#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;[deprecated]
@2.3.4.RELEASE
+#setContainerCustomizer(Lorg/springframework/kafka/config/ContainerCustomizer;)V
@2.4.2.RELEASE
+#setBatchToRecordAdapter(Lorg/springframework/kafka/listener/adapter/BatchToRecordAdapter;)V
@2.5.0.RELEASE
-#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;[deprecated]
-#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;[deprecated]
@2.6.8
+#setBatchInterceptor(Lorg/springframework/kafka/listener/BatchInterceptor;)V
@2.8.0
*#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V[deprecated]
+#setCommonErrorHandler(Lorg/springframework/kafka/listener/CommonErrorHandler;)V
@2.8.3
*#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V[deprecated]
*#setErrorHandler(Lorg/springframework/kafka/listener/ErrorHandler;)V[deprecated]
*#setBatchErrorHandler(Lorg/springframework/kafka/listener/BatchErrorHandler;)V[deprecated]
@2.8.4
*#setStatefulRetry(Z)V[deprecated]
@2.9.6
*#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V[deprecated]
+#setRecordMessageConverter(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
+#setBatchMessageConverter(Lorg/springframework/kafka/support/converter/BatchMessageConverter;)V
@3.0.0
+#setCorrelationHeaderName(Ljava/lang/String;)V
-#setRecordMessageConverter(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
-#setBatchMessageConverter(Lorg/springframework/kafka/support/converter/BatchMessageConverter;)V
-#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V[deprecated]
-#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V[deprecated]
-#setStatefulRetry(Z)V[deprecated]
@3.0.1
+#setChangeConsumerThreadName(Z)V
+#setThreadNameSupplier(Ljava/util/function/Function;)V
@3.0.3
*#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V[deprecated]
+#setRecordMessageConverter(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
+#setBatchMessageConverter(Lorg/springframework/kafka/support/converter/BatchMessageConverter;)V

+###org/springframework/kafka/config/KafkaListenerConfigUtils
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/kafka/config/CompositeKafkaStreamsCustomizer
@2.2.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/List;)V
+#customize(Lorg/apache/kafka/streams/KafkaStreams;)V
+#addKafkaStreamsCustomizers(Ljava/util/List;)V

+###org/springframework/kafka/config/MethodKafkaListenerEndpoint
@1.0.0.RELEASE
+#<init>()V
+#setBean(Ljava/lang/Object;)V
+#getBean()Ljava/lang/Object;
+#setMethod(Ljava/lang/reflect/Method;)V
+#getMethod()Ljava/lang/reflect/Method;
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
@1.3.0.RELEASE
+#setErrorHandler(Lorg/springframework/kafka/listener/KafkaListenerErrorHandler;)V
@2.7.1
+#setMessagingConverter(Lorg/springframework/messaging/converter/SmartMessageConverter;)V

+###org/springframework/kafka/config/KafkaListenerEndpoint
@1.0.0.RELEASE
+#getId()Ljava/lang/String;
+#getGroup()Ljava/lang/String;
+#getTopics()Ljava/util/Collection;
+#getTopicPartitions()Ljava/util/Collection;
+#getTopicPattern()Ljava/util/regex/Pattern;
+#setupListenerContainer(Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/springframework/kafka/support/converter/MessageConverter;)V
@1.3.0.RELEASE
+#getGroupId()Ljava/lang/String;
@2.1.1.RELEASE
+#getClientIdPrefix()Ljava/lang/String;
@2.2.0.RELEASE
+#getConcurrency()Ljava/lang/Integer;
+#getAutoStartup()Ljava/lang/Boolean;
@2.2.4.RELEASE
+#getConsumerProperties()Ljava/util/Properties;
@2.3.0.RELEASE
*#getTopicPartitions()Ljava/util/Collection;[deprecated]
+#getTopicPartitionsToAssign()[Lorg/springframework/kafka/support/TopicPartitionOffset;
@2.3.5.RELEASE
+#isSplitIterables()Z
@2.5.0.RELEASE
-#getTopicPartitions()Ljava/util/Collection;[deprecated]
@2.8.4
+#getListenerInfo()[B
@2.9.6
+#getBatchListener()Ljava/lang/Boolean;
@3.0.0
+#getMainListenerId()Ljava/lang/String;
-#getBatchListener()Ljava/lang/Boolean;
@3.0.3
+#getBatchListener()Ljava/lang/Boolean;

+###org/springframework/kafka/config/KafkaListenerContainerFactory
@1.0.0.RELEASE
+#createListenerContainer(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.2.0.RELEASE
+#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#createContainer([Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#createContainer(Ljava/util/regex/Pattern;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.3.0.RELEASE
*#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;[deprecated]
+#createContainer([Lorg/springframework/kafka/support/TopicPartitionOffset;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.5.0.RELEASE
-#createContainer(Ljava/util/Collection;)Lorg/springframework/kafka/listener/MessageListenerContainer;[deprecated]

+###org/springframework/kafka/config/KafkaListenerEndpointRegistrar
@1.0.0.RELEASE
+#<init>()V
+#setEndpointRegistry(Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;)V
+#getEndpointRegistry()Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
+#getMessageHandlerMethodFactory()Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;
+#setContainerFactory(Lorg/springframework/kafka/config/KafkaListenerContainerFactory;)V
+#setContainerFactoryBeanName(Ljava/lang/String;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#afterPropertiesSet()V
+#registerEndpoint(Lorg/springframework/kafka/config/KafkaListenerEndpoint;Lorg/springframework/kafka/config/KafkaListenerContainerFactory;)V
+#registerEndpoint(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)V
@2.2.0.RELEASE
+#getValidator()Lorg/springframework/validation/Validator;
+#setValidator(Lorg/springframework/validation/Validator;)V
@2.4.2.RELEASE
+#getCustomMethodArgumentResolvers()Ljava/util/List;
+#setCustomMethodArgumentResolvers([Lorg/springframework/messaging/handler/invocation/HandlerMethodArgumentResolver;)V

+###org/springframework/kafka/config/AbstractKafkaListenerEndpoint
@1.0.0.RELEASE
+#<init>()V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#setId(Ljava/lang/String;)V
+#getId()Ljava/lang/String;
+#setTopics([Ljava/lang/String;)V
+#getTopics()Ljava/util/Collection;
+#setTopicPartitions([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
+#getTopicPartitions()Ljava/util/Collection;
+#setTopicPattern(Ljava/util/regex/Pattern;)V
+#getTopicPattern()Ljava/util/regex/Pattern;
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
+#afterPropertiesSet()V
+#setRecordFilterStrategy(Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;)V
+#setAckDiscarded(Z)V
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
+#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
+#setupListenerContainer(Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/springframework/kafka/support/converter/MessageConverter;)V
+#toString()Ljava/lang/String;
@1.1.0.RELEASE
+#isBatchListener()Z
+#setBatchListener(Z)V
@1.3.0.RELEASE
+#setGroupId(Ljava/lang/String;)V
+#getGroupId()Ljava/lang/String;
@2.0.0.RELEASE
+#setReplyTemplate(Lorg/springframework/kafka/core/KafkaTemplate;)V
@2.1.1.RELEASE
+#getClientIdPrefix()Ljava/lang/String;
+#setClientIdPrefix(Ljava/lang/String;)V
@2.1.3.RELEASE
+#setStatefulRetry(Z)V
@2.2.0.RELEASE
+#getConcurrency()Ljava/lang/Integer;
+#setConcurrency(I)V
+#getAutoStartup()Ljava/lang/Boolean;
+#setAutoStartup(Ljava/lang/Boolean;)V
+#setReplyHeadersConfigurer(Lorg/springframework/kafka/listener/adapter/ReplyHeadersConfigurer;)V
@2.2.1.RELEASE
+#setConcurrency(Ljava/lang/Integer;)V
-#setConcurrency(I)V
@2.2.4.RELEASE
+#getConsumerProperties()Ljava/util/Properties;
+#setConsumerProperties(Ljava/util/Properties;)V
@2.3.0.RELEASE
*#setTopicPartitions([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V[deprecated]
+#setTopicPartitions([Lorg/springframework/kafka/support/TopicPartitionOffset;)V
+#getTopicPartitionsToAssign()[Lorg/springframework/kafka/support/TopicPartitionOffset;
-#getTopicPartitions()Ljava/util/Collection;
@2.3.5.RELEASE
+#isSplitIterables()Z
+#setSplitIterables(Z)V
@2.4.2.RELEASE
+#setBatchToRecordAdapter(Lorg/springframework/kafka/listener/adapter/BatchToRecordAdapter;)V
@2.5.0.RELEASE
-#setTopicPartitions([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V[deprecated]
@2.8.0
+#getBatchListener()Ljava/lang/Boolean;
*#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V[deprecated]
@2.8.3
*#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V[deprecated]
@2.8.4
*#setStatefulRetry(Z)V[deprecated]
+#getListenerInfo()[B
+#setListenerInfo([B)V
@3.0.0
+#setMainListenerId(Ljava/lang/String;)V
+#getMainListenerId()Ljava/lang/String;
+#setCorrelationHeaderName(Ljava/lang/String;)V
-#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V[deprecated]
-#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V[deprecated]
-#setStatefulRetry(Z)V[deprecated]

+###org/springframework/kafka/config/StreamsBuilderFactoryBean
@2.2.0.RELEASE
+#<init>()V
+#<init>(Lorg/apache/kafka/streams/StreamsConfig;)V[deprecated]
+#<init>(Lorg/apache/kafka/streams/StreamsConfig;Lorg/springframework/kafka/core/CleanupConfig;)V[deprecated]
+#<init>(Lorg/springframework/kafka/config/KafkaStreamsConfiguration;Lorg/springframework/kafka/core/CleanupConfig;)V
+#<init>(Ljava/util/Map;)V[deprecated]
+#<init>(Lorg/springframework/kafka/config/KafkaStreamsConfiguration;)V
+#<init>(Ljava/util/Map;Lorg/springframework/kafka/core/CleanupConfig;)V[deprecated]
+#setStreamsConfig(Lorg/apache/kafka/streams/StreamsConfig;)V
+#getStreamsConfig()Lorg/apache/kafka/streams/StreamsConfig;
+#setStreamsConfiguration(Ljava/util/Properties;)V
+#getStreamsConfiguration()Ljava/util/Properties;
+#setClientSupplier(Lorg/apache/kafka/streams/KafkaClientSupplier;)V
+#setKafkaStreamsCustomizer(Lorg/springframework/kafka/config/KafkaStreamsCustomizer;)V
+#setStateListener(Lorg/apache/kafka/streams/KafkaStreams$StateListener;)V
+#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V
+#setStateRestoreListener(Lorg/apache/kafka/streams/processor/StateRestoreListener;)V
+#setCloseTimeout(I)V
+#getObjectType()Ljava/lang/Class;
+#setAutoStartup(Z)V
+#setPhase(I)V
+#isAutoStartup()Z
+#stop(Ljava/lang/Runnable;)V
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
+#getKafkaStreams()Lorg/apache/kafka/streams/KafkaStreams;
@2.3.0.RELEASE
*#setStreamsConfig(Lorg/apache/kafka/streams/StreamsConfig;)V[deprecated]
*#getStreamsConfig()Lorg/apache/kafka/streams/StreamsConfig;[deprecated]
@2.3.7.RELEASE
+#getTopology()Lorg/apache/kafka/streams/Topology;
@2.4.0.RELEASE
-#<init>(Lorg/apache/kafka/streams/StreamsConfig;)V[deprecated]
-#<init>(Lorg/apache/kafka/streams/StreamsConfig;Lorg/springframework/kafka/core/CleanupConfig;)V[deprecated]
-#<init>(Ljava/util/Map;)V[deprecated]
-#<init>(Ljava/util/Map;Lorg/springframework/kafka/core/CleanupConfig;)V[deprecated]
-#setStreamsConfig(Lorg/apache/kafka/streams/StreamsConfig;)V[deprecated]
-#getStreamsConfig()Lorg/apache/kafka/streams/StreamsConfig;[deprecated]
-#getTopology()Lorg/apache/kafka/streams/Topology;
@2.4.1.RELEASE
+#setInfrastructureCustomizer(Lorg/springframework/kafka/config/KafkaStreamsInfrastructureCustomizer;)V
@2.4.4.RELEASE
+#getTopology()Lorg/apache/kafka/streams/Topology;
@2.5.3.RELEASE
+#setBeanName(Ljava/lang/String;)V
+#getListeners()Ljava/util/List;
+#addListener(Lorg/springframework/kafka/config/StreamsBuilderFactoryBean$Listener;)V
+#removeListener(Lorg/springframework/kafka/config/StreamsBuilderFactoryBean$Listener;)Z
@2.6.2
+#setCleanupConfig(Lorg/springframework/kafka/core/CleanupConfig;)V
@2.8.0
*#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V[deprecated]
+#setStreamsUncaughtExceptionHandler(Lorg/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler;)V
@2.8.4
+#getStreamsUncaughtExceptionHandler()Lorg/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler;
@3.0.0
-#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V[deprecated]

+###org/springframework/kafka/config/MultiMethodKafkaListenerEndpoint
@1.0.0.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;)V
@2.1.3.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/reflect/Method;Ljava/lang/Object;)V
@2.5.11.RELEASE
*#<init>(Ljava/util/List;Ljava/lang/Object;)V[deprecated]
+#setValidator(Lorg/springframework/validation/Validator;)V
@2.6.0
-#setValidator(Lorg/springframework/validation/Validator;)V
@2.6.5
*#<init>(Ljava/util/List;Ljava/lang/Object;)V[deprecated]
+#setValidator(Lorg/springframework/validation/Validator;)V
@2.7.0
-#<init>(Ljava/util/List;Ljava/lang/Object;)V[deprecated]

+###org/springframework/kafka/config/KafkaListenerEndpointRegistry
@1.0.0.RELEASE
+#<init>()V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#getListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#getListenerContainerIds()Ljava/util/Set;
+#getListenerContainers()Ljava/util/Collection;
+#registerListenerContainer(Lorg/springframework/kafka/config/KafkaListenerEndpoint;Lorg/springframework/kafka/config/KafkaListenerContainerFactory;)V
+#registerListenerContainer(Lorg/springframework/kafka/config/KafkaListenerEndpoint;Lorg/springframework/kafka/config/KafkaListenerContainerFactory;Z)V
+#destroy()V
+#getPhase()I
+#isAutoStartup()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#isRunning()Z
+#onApplicationEvent(Lorg/springframework/context/event/ContextRefreshedEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.2.5.RELEASE
+#getAllListenerContainers()Ljava/util/Collection;
@2.8.7
+#setAlwaysStartAfterRefresh(Z)V
@2.8.9
+#unregisterListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.0
+#getUnregisteredListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
-#unregisterListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.1
+#unregisterListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;

+###org/springframework/kafka/config/KafkaStreamsConfiguration
@2.2.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#asProperties()Ljava/util/Properties;

+###org/springframework/kafka/config/StreamsBuilderFactoryBeanCustomizer
@2.3.0.RELEASE
+#configure(Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;)V
@3.0.0
-###org/springframework/kafka/config/StreamsBuilderFactoryBeanCustomizer

+###org/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory
@1.0.0.RELEASE
+#<init>()V
+#setConcurrency(Ljava/lang/Integer;)V

+###org/springframework/kafka/config/ContainerCustomizer
@2.3.4.RELEASE
+#configure(Lorg/springframework/kafka/listener/AbstractMessageListenerContainer;)V

+###org/springframework/kafka/config/TopicBuilder
@2.3.0.RELEASE
+#partitions(I)Lorg/springframework/kafka/config/TopicBuilder;
+#replicas(I)Lorg/springframework/kafka/config/TopicBuilder;
+#replicasAssignments(Ljava/util/Map;)Lorg/springframework/kafka/config/TopicBuilder;
+#assignReplicas(ILjava/util/List;)Lorg/springframework/kafka/config/TopicBuilder;
+#configs(Ljava/util/Map;)Lorg/springframework/kafka/config/TopicBuilder;
+#config(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/config/TopicBuilder;
+#compact()Lorg/springframework/kafka/config/TopicBuilder;
+#build()Lorg/apache/kafka/clients/admin/NewTopic;
+#name(Ljava/lang/String;)Lorg/springframework/kafka/config/TopicBuilder;

+###org/springframework/kafka/config/KafkaStreamsCustomizer
@2.2.0.RELEASE
+#customize(Lorg/apache/kafka/streams/KafkaStreams;)V

+###org/springframework/kafka/listener/MessageListenerContainer
@1.0.0.RELEASE
+#setupMessageListener(Ljava/lang/Object;)V
@1.3.0.RELEASE
+#metrics()Ljava/util/Map;
@2.1.3.RELEASE
+#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
+#getAssignedPartitions()Ljava/util/Collection;
+#pause()V
+#resume()V
@2.1.5.RELEASE
+#isPauseRequested()Z
+#isContainerPaused()Z
@2.2.0.RELEASE
+#getContainerProperties()Lorg/springframework/kafka/listener/ContainerProperties;
+#setAutoStartup(Z)V
-#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
@2.2.5.RELEASE
+#getGroupId()Ljava/lang/String;
+#getListenerId()Ljava/lang/String;
@2.5.0.RELEASE
+#getAssignmentsByClientId()Ljava/util/Map;
@2.5.17.RELEASE
+#destroy()V
@2.6.0
-#destroy()V
@2.6.13
+#destroy()V
@2.7.0
+#pausePartition(Lorg/apache/kafka/common/TopicPartition;)V
+#resumePartition(Lorg/apache/kafka/common/TopicPartition;)V
+#isPartitionPauseRequested(Lorg/apache/kafka/common/TopicPartition;)Z
+#isPartitionPaused(Lorg/apache/kafka/common/TopicPartition;)Z
-#destroy()V
@2.7.3
+#isChildRunning()Z
@2.7.10
+#destroy()V
@2.8.0
+#isInExpectedState()Z
+#stopAbnormally(Ljava/lang/Runnable;)V
-#destroy()V
@2.8.2
+#destroy()V
@2.8.6
+#getListenerInfo()[B
@2.8.10
+#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.0
-#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.2
+#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;
@3.0.0
+#getMainListenerId()Ljava/lang/String;

+###org/springframework/kafka/listener/ContainerAwareBatchErrorHandler
@2.1.0.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.3.7.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.0.RELEASE
-#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.4.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V

+###org/springframework/kafka/listener/ContainerStoppingErrorHandler
@2.1.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/concurrent/Executor;)V
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.9.0
-###org/springframework/kafka/listener/ContainerStoppingErrorHandler

+###org/springframework/kafka/listener/ConsumerAwareBatchErrorHandler
@2.0.0.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;)V
@2.1.5.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/KafkaListenerErrorHandler
@1.3.0.RELEASE
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;)Ljava/lang/Object;
@2.0.0.RELEASE
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;Lorg/apache/kafka/clients/consumer/Consumer;)Ljava/lang/Object;
@2.9.0
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/support/Acknowledgment;)Ljava/lang/Object;

+###org/springframework/kafka/listener/GenericErrorHandler
@1.1.0.RELEASE
+#handle(Ljava/lang/Exception;Ljava/lang/Object;)V
@2.0.0.RELEASE
+#handle(Ljava/lang/Exception;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.3.0.RELEASE
+#clearThreadState()V
@2.3.2.RELEASE
+#isAckAfterHandle()Z
@2.5.6.RELEASE
+#setAckAfterHandle(Z)V

+###org/springframework/kafka/listener/ListenerType
@2.0.0.RELEASE
+#values()[Lorg/springframework/kafka/listener/ListenerType;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/ListenerType;

+###org/springframework/kafka/listener/BatchAcknowledgingMessageListener
@1.1.0.RELEASE
@2.0.0.RELEASE
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/FailedRecordProcessor
@2.3.1.RELEASE
+#setClassifications(Ljava/util/Map;Z)V
+#setCommitRecovered(Z)V
+#addNotRetryableException(Ljava/lang/Class;)V
+#removeNotRetryableException(Ljava/lang/Class;)Z
+#clearThreadState()V
@2.5.0.RELEASE
+#deliveryAttempt(Lorg/springframework/kafka/support/TopicPartitionOffset;)I
@2.5.5.RELEASE
+#setResetStateOnRecoveryFailure(Z)V
@2.6.0
+#setBackOffFunction(Ljava/util/function/BiFunction;)V
*#addNotRetryableException(Ljava/lang/Class;)V[deprecated]
+#addNotRetryableExceptions([Ljava/lang/Class;)V
@2.6.3
+#setResetStateOnExceptionChange(Z)V
@2.7.0
+#setRetryListeners([Lorg/springframework/kafka/listener/RetryListener;)V
-#addNotRetryableException(Ljava/lang/Class;)V[deprecated]
@2.8.0
-#setClassifications(Ljava/util/Map;Z)V
-#addNotRetryableExceptions([Ljava/lang/Class;)V
-#removeNotRetryableException(Ljava/lang/Class;)Z
@2.9.0
+#isSeekAfterError()Z
+#setSeekAfterError(Z)V

+###org/springframework/kafka/listener/DelegatingMessageListener
@2.0.0.RELEASE
+#getDelegate()Ljava/lang/Object;

+###org/springframework/kafka/listener/ConcurrentMessageListenerContainer
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;)V
+#getConcurrency()I
+#setConcurrency(I)V
+#getContainers()Ljava/util/List;
+#toString()Ljava/lang/String;
@1.3.0.RELEASE
+#metrics()Ljava/util/Map;
@2.1.3.RELEASE
+#getAssignedPartitions()Ljava/util/Collection;
+#pause()V
+#resume()V
@2.1.5.RELEASE
+#isContainerPaused()Z
@2.2.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;)V
-#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;)V
@2.2.14.RELEASE
+#setAlwaysClientIdSuffix(Z)V
@2.3.0.RELEASE
-#setAlwaysClientIdSuffix(Z)V
@2.3.9.RELEASE
+#setAlwaysClientIdSuffix(Z)V
@2.4.0.RELEASE
-#setAlwaysClientIdSuffix(Z)V
@2.4.7.RELEASE
+#setAlwaysClientIdSuffix(Z)V
@2.5.0.RELEASE
+#getAssignmentsByClientId()Ljava/util/Map;
@2.7.0
+#pausePartition(Lorg/apache/kafka/common/TopicPartition;)V
+#resumePartition(Lorg/apache/kafka/common/TopicPartition;)V
+#isPartitionPaused(Lorg/apache/kafka/common/TopicPartition;)Z
@2.7.3
+#isChildRunning()Z
@2.8.0
+#isInExpectedState()Z
@2.8.10
+#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.0
-#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;
@2.9.2
+#getContainerFor(Ljava/lang/String;I)Lorg/springframework/kafka/listener/MessageListenerContainer;

+###org/springframework/kafka/listener/MessageListener
@1.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@1.1.0.RELEASE
-#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V

+###org/springframework/kafka/listener/ConsumerAwareErrorHandler
@2.0.0.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;)V
@2.1.5.RELEASE
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/adapter/ReplyHeadersConfigurer
@2.2.0.RELEASE
+#shouldCopy(Ljava/lang/String;Ljava/lang/Object;)Z
+#additionalHeaders()Ljava/util/Map;

+###org/springframework/kafka/listener/adapter/RecordFilterStrategy
@1.0.0.RELEASE
+#filter(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Z
@2.8.0
+#filterBatch(Ljava/util/List;)Ljava/util/List;

+###org/springframework/kafka/listener/adapter/MessagingMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Ljava/lang/reflect/Method;)V
+#setHandlerMethod(Lorg/springframework/kafka/listener/adapter/HandlerAdapter;)V
+#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#setMessageConverter(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
+#registerSeekCallback(Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsAssigned(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onIdleContainer(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
-#<init>(Ljava/lang/reflect/Method;)V
-#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V
-#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.1.2.RELEASE
+#setFallbackType(Ljava/lang/Class;)V
@2.0.0.RELEASE
+#setReplyTopic(Ljava/lang/String;)V
+#setReplyTemplate(Lorg/springframework/kafka/core/KafkaTemplate;)V
+#setBeanResolver(Lorg/springframework/expression/BeanResolver;)V
@2.2.0.RELEASE
+#isConsumerRecords()Z
+#setReplyHeadersConfigurer(Lorg/springframework/kafka/listener/adapter/ReplyHeadersConfigurer;)V
@2.3.0.RELEASE
+#isConversionNeeded()Z
+#onPartitionsRevoked(Ljava/util/Collection;)V
@2.3.5.RELEASE
+#setSplitIterables(Z)V
@2.7.1
+#setMessagingConverter(Lorg/springframework/messaging/converter/SmartMessageConverter;)V
@3.0.0
+#setCorrelationHeaderName(Ljava/lang/String;)V
-#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V

+###org/springframework/kafka/listener/adapter/InvocationResult
@2.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;Z)V
+#getResult()Ljava/lang/Object;
+#getSendTo()Lorg/springframework/expression/Expression;
+#isMessageReturnType()Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/listener/adapter/DelegatingInvocableHandler
@1.0.0.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;)V
+#getBean()Ljava/lang/Object;
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
+#getMethodNameFor(Ljava/lang/Object;)Ljava/lang/String;
@2.0.0.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
-#<init>(Ljava/util/List;Ljava/lang/Object;)V
@2.1.3.RELEASE
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
+#hasDefaultHandler()Z
@2.1.11.RELEASE
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V
@2.2.0.RELEASE
-#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V
@2.2.1.RELEASE
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V
@2.5.11.RELEASE
*#<init>(Ljava/util/List;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]
*#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]
*#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V[deprecated]
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/validation/Validator;)V
@2.6.0
-#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/validation/Validator;)V
@2.6.5
*#<init>(Ljava/util/List;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]
*#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]
*#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V[deprecated]
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/validation/Validator;)V
@2.7.0
-#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/beans/factory/BeanFactory;)V[deprecated]
@3.0.0
-#<init>(Ljava/util/List;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]
-#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V[deprecated]

+###org/springframework/kafka/listener/adapter/FilteringMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;)V
@2.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;Z)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V

+###org/springframework/kafka/listener/adapter/FilteringBatchMessageListenerAdapter
@1.1.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/BatchMessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;)V
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/lang/Object;)V
@2.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/BatchMessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;Z)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V

+###org/springframework/kafka/listener/adapter/AbstractFilteringMessageListener
@1.0.0.RELEASE

+###org/springframework/kafka/listener/adapter/HandlerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;)V
+#<init>(Lorg/springframework/kafka/listener/adapter/DelegatingInvocableHandler;)V
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
+#getMethodAsString(Ljava/lang/Object;)Ljava/lang/String;
+#getBean()Ljava/lang/Object;

+###org/springframework/kafka/listener/adapter/AbstractRetryingMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/retry/support/RetryTemplate;)V
+#<init>(Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;)V
+#getRetryTemplate()Lorg/springframework/retry/support/RetryTemplate;
+#getRecoveryCallback()Lorg/springframework/retry/RecoveryCallback;
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/retry/support/RetryTemplate;)V
+#<init>(Ljava/lang/Object;Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;)V
-#<init>(Lorg/springframework/retry/support/RetryTemplate;)V
-#<init>(Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;)V

+###org/springframework/kafka/listener/adapter/RecordMessagingMessageListenerAdapter
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.3.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;Lorg/springframework/kafka/listener/KafkaListenerErrorHandler;)V
@2.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
-#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
-#onMessage(Ljava/lang/Object;)V
-#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V

+###org/springframework/kafka/listener/adapter/BatchMessagingMessageListenerAdapter
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#setBatchMessageConverter(Lorg/springframework/kafka/support/converter/BatchMessageConverter;)V
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.3.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;Lorg/springframework/kafka/listener/KafkaListenerErrorHandler;)V
@2.0.0.RELEASE
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#onMessage(Ljava/util/List;)V
-#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;)V
-#onMessage(Ljava/lang/Object;)V
-#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.2.0.RELEASE
+#wantsPollResult()Z
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.4.2.RELEASE
+#setBatchToRecordAdapter(Lorg/springframework/kafka/listener/adapter/BatchToRecordAdapter;)V

+###org/springframework/kafka/listener/adapter/MessagingMessageListenerAdapter$ReplyExpressionRoot
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
+#getRequest()Ljava/lang/Object;
+#getSource()Ljava/lang/Object;
+#getResult()Ljava/lang/Object;
@3.0.0
+#toString()Ljava/lang/String;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#request()Ljava/lang/Object;
+#source()Ljava/lang/Object;
+#result()Ljava/lang/Object;
-#getRequest()Ljava/lang/Object;
-#getSource()Ljava/lang/Object;
-#getResult()Ljava/lang/Object;

+###org/springframework/kafka/listener/adapter/AbstractDelegatingMessageListenerAdapter
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#getDelegate()Ljava/lang/Object;
+#registerSeekCallback(Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsAssigned(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onIdleContainer(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
@2.3.0.RELEASE
+#onPartitionsRevoked(Ljava/util/Collection;)V

+###org/springframework/kafka/listener/adapter/RetryingMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/retry/support/RetryTemplate;)V
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;)V
@2.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.1.3.RELEASE
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;Z)V
@3.0.0
-###org/springframework/kafka/listener/adapter/RetryingMessageListenerAdapter

+###org/springframework/kafka/listener/ConsumerRecordRecoverer
@2.3.0.RELEASE

+###org/springframework/kafka/listener/ConsumerProperties
@2.3.0.RELEASE
+#<init>([Ljava/lang/String;)V
+#<init>(Ljava/util/regex/Pattern;)V
+#<init>([Lorg/springframework/kafka/support/TopicPartitionOffset;)V
+#getTopics()[Ljava/lang/String;
+#getTopicPattern()Ljava/util/regex/Pattern;
+#getTopicPartitionsToAssign()[Lorg/springframework/kafka/support/TopicPartitionOffset;
+#setPollTimeout(J)V
+#getPollTimeout()J
+#setGroupId(Ljava/lang/String;)V
+#getGroupId()Ljava/lang/String;
+#getClientId()Ljava/lang/String;
+#setClientId(Ljava/lang/String;)V
+#setConsumerRebalanceListener(Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;)V
+#getConsumerRebalanceListener()Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;
+#setSyncCommitTimeout(Ljava/time/Duration;)V
+#getSyncCommitTimeout()Ljava/time/Duration;
+#setCommitCallback(Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;)V
+#getCommitCallback()Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;
+#setSyncCommits(Z)V
+#isSyncCommits()Z
+#getCommitLogLevel()Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;
+#setCommitLogLevel(Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
+#getKafkaConsumerProperties()Ljava/util/Properties;
+#setKafkaConsumerProperties(Ljava/util/Properties;)V
+#toString()Ljava/lang/String;
@2.3.5.RELEASE
+#getAuthorizationExceptionRetryInterval()Ljava/time/Duration;
+#setAuthorizationExceptionRetryInterval(Ljava/time/Duration;)V
@2.3.9.RELEASE
+#getCommitRetries()I
+#setCommitRetries(I)V
+#isOnlyLogRecordMetadata()Z
+#setOnlyLogRecordMetadata(Z)V
@2.4.0.RELEASE
-#getCommitRetries()I
-#setCommitRetries(I)V
-#isOnlyLogRecordMetadata()Z
-#setOnlyLogRecordMetadata(Z)V
@2.4.7.RELEASE
+#getCommitRetries()I
+#setCommitRetries(I)V
+#isOnlyLogRecordMetadata()Z
+#setOnlyLogRecordMetadata(Z)V
@2.5.0.RELEASE
*#getTopicPartitionsToAssign()[Lorg/springframework/kafka/support/TopicPartitionOffset;[deprecated]
+#getTopicPartitions()[Lorg/springframework/kafka/support/TopicPartitionOffset;
-#getCommitRetries()I
-#setCommitRetries(I)V
-#isOnlyLogRecordMetadata()Z
-#setOnlyLogRecordMetadata(Z)V
@2.5.2.RELEASE
+#getCommitRetries()I
+#setCommitRetries(I)V
+#isOnlyLogRecordMetadata()Z
+#setOnlyLogRecordMetadata(Z)V
@2.5.6.RELEASE
+#isFixTxOffsets()Z
+#setFixTxOffsets(Z)V
@2.6.0
-#isFixTxOffsets()Z
-#setFixTxOffsets(Z)V
@2.6.1
+#isFixTxOffsets()Z
+#setFixTxOffsets(Z)V
@2.7.0
-#getTopicPartitionsToAssign()[Lorg/springframework/kafka/support/TopicPartitionOffset;[deprecated]
@2.8.0
*#getAuthorizationExceptionRetryInterval()Ljava/time/Duration;[deprecated]
*#setAuthorizationExceptionRetryInterval(Ljava/time/Duration;)V[deprecated]
+#getAuthExceptionRetryInterval()Ljava/time/Duration;
+#setAuthExceptionRetryInterval(Ljava/time/Duration;)V
@2.8.1
+#isCheckDeserExWhenKeyNull()Z
+#setCheckDeserExWhenKeyNull(Z)V
+#isCheckDeserExWhenValueNull()Z
+#setCheckDeserExWhenValueNull(Z)V
@2.8.4
*#isOnlyLogRecordMetadata()Z[deprecated]
*#setOnlyLogRecordMetadata(Z)V[deprecated]
@2.8.5
+#setOffsetAndMetadataProvider(Lorg/springframework/kafka/listener/OffsetAndMetadataProvider;)V
+#getOffsetAndMetadataProvider()Lorg/springframework/kafka/listener/OffsetAndMetadataProvider;
@3.0.0
-#getAuthorizationExceptionRetryInterval()Ljava/time/Duration;[deprecated]
-#setAuthorizationExceptionRetryInterval(Ljava/time/Duration;)V[deprecated]
-#isOnlyLogRecordMetadata()Z[deprecated]
-#setOnlyLogRecordMetadata(Z)V[deprecated]

+###org/springframework/kafka/listener/RecordInterceptor
@2.2.7.RELEASE
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
@2.6.8
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
@2.7.0
*#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
-#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
@2.8.0
+#afterRecord(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
@3.0.0
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;[deprecated]

+###org/springframework/kafka/listener/ConsumerAwareRebalanceListener
@2.0.0.RELEASE
+#onPartitionsRevokedBeforeCommit(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
+#onPartitionsRevokedAfterCommit(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
+#onPartitionsRevoked(Ljava/util/Collection;)V
+#onPartitionsAssigned(Ljava/util/Collection;)V
@2.4.0.RELEASE
+#onPartitionsLost(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
+#onPartitionsLost(Ljava/util/Collection;)V

+###org/springframework/kafka/listener/ConsumerSeekAware
@1.1.0.RELEASE
+#registerSeekCallback(Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsAssigned(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onIdleContainer(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
@2.3.0.RELEASE
+#onPartitionsRevoked(Ljava/util/Collection;)V
@2.4.0.RELEASE
+#unregisterSeekCallback()V
@2.8.8
+#onFirstPoll()V

+###org/springframework/kafka/listener/LoggingCommitCallback
@2.2.4.RELEASE
+#<init>()V
+#onComplete(Ljava/util/Map;Ljava/lang/Exception;)V

+###org/springframework/kafka/listener/BatchMessageListener
@1.1.0.RELEASE
@2.2.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#wantsPollResult()Z

+###org/springframework/kafka/listener/ConsumerAwareListenerErrorHandler
@2.0.0.RELEASE
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;)Ljava/lang/Object;
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;Lorg/apache/kafka/clients/consumer/Consumer;)Ljava/lang/Object;

+###org/springframework/kafka/listener/BatchConsumerAwareMessageListener
@2.0.0.RELEASE
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/LoggingErrorHandler
@1.0.0.RELEASE
+#<init>()V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@1.1.0.RELEASE
+#handle(Ljava/lang/Exception;Ljava/lang/Object;)V
@3.0.0
-###org/springframework/kafka/listener/LoggingErrorHandler

+###org/springframework/kafka/listener/AcknowledgingMessageListener
@1.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.1.0.RELEASE
-#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/RemainingRecordsErrorHandler
@2.0.1.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.1.5.RELEASE
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/ErrorHandler
@1.0.0.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@2.0.0.RELEASE
-#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@2.1.5.RELEASE
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.2.0.RELEASE
+#clearThreadState()V
@2.3.0.RELEASE
-#clearThreadState()V

+###org/springframework/kafka/listener/CompositeRecordInterceptor
@2.3.0.RELEASE
+#<init>([Lorg/springframework/kafka/listener/RecordInterceptor;)V
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
@2.6.8
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
@2.7.0
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
-#success(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
-#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
@2.8.0
+#setupThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#clearThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#afterRecord(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/listener/DefaultAfterRollbackProcessor
@1.3.5.RELEASE
+#<init>()V
+#process(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/DefaultAfterRollbackProcessor

+###org/springframework/kafka/listener/BatchLoggingErrorHandler
@1.1.0.RELEASE
+#<init>()V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
+#handle(Ljava/lang/Exception;Ljava/lang/Object;)V
@2.9.0
-###org/springframework/kafka/listener/BatchLoggingErrorHandler

+###org/springframework/kafka/listener/SeekToCurrentBatchErrorHandler
@2.1.0.RELEASE
+#<init>()V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.3.0.RELEASE
+#setBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#clearThreadState()V
@3.0.0
-###org/springframework/kafka/listener/SeekToCurrentBatchErrorHandler

+###org/springframework/kafka/listener/BatchAcknowledgingConsumerAwareMessageListener
@2.0.0.RELEASE
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/SeekToCurrentErrorHandler
@2.0.1.RELEASE
+#<init>()V
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.1.0.RELEASE
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
-#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.2.0.RELEASE
+#<init>(Ljava/util/function/BiConsumer;)V
+#<init>(Ljava/util/function/BiConsumer;I)V
+#clearThreadState()V
@2.2.1.RELEASE
+#<init>(I)V
@2.2.4.RELEASE
+#setCommitRecovered(Z)V
@2.3.0.RELEASE
*#<init>(I)V[deprecated]
+#<init>(Lorg/springframework/util/backoff/BackOff;)V
*#<init>(Ljava/util/function/BiConsumer;I)V[deprecated]
+#<init>(Ljava/util/function/BiConsumer;Lorg/springframework/util/backoff/BackOff;)V
+#setClassifier(Lorg/springframework/classify/BinaryExceptionClassifier;)V
+#addNotRetryableException(Ljava/lang/Class;)V
+#removeNotRetryableException(Ljava/lang/Class;)Z
@2.3.1.RELEASE
*#setClassifier(Lorg/springframework/classify/BinaryExceptionClassifier;)V[deprecated]
-#addNotRetryableException(Ljava/lang/Class;)V
-#removeNotRetryableException(Ljava/lang/Class;)Z
-#clearThreadState()V
@2.3.2.RELEASE
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
@2.5.0.RELEASE
-#<init>(I)V[deprecated]
-#<init>(Ljava/util/function/BiConsumer;I)V[deprecated]
-#setClassifier(Lorg/springframework/classify/BinaryExceptionClassifier;)V[deprecated]
@2.9.0
-###org/springframework/kafka/listener/SeekToCurrentErrorHandler

+###org/springframework/kafka/listener/GenericMessageListener
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;)V
@2.0.0.RELEASE
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/listener/AbstractConsumerSeekAware
@2.3.0.RELEASE
+#<init>()V
+#registerSeekCallback(Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsAssigned(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsRevoked(Ljava/util/Collection;)V
@2.4.0.RELEASE
+#unregisterSeekCallback()V
@2.6.0
+#seekToBeginning()V
+#seekToEnd()V
+#seekToTimestamp(J)V

+###org/springframework/kafka/listener/AbstractMessageListenerContainer
@1.0.0.RELEASE
+#setBeanName(Ljava/lang/String;)V
+#getBeanName()Ljava/lang/String;
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#getApplicationEventPublisher()Lorg/springframework/context/ApplicationEventPublisher;
+#isAutoStartup()Z
+#setAutoStartup(Z)V
+#isRunning()Z
+#setPhase(I)V
+#getPhase()I
+#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
+#setupMessageListener(Ljava/lang/Object;)V
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
@1.3.5.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.0.0.RELEASE
-#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.0.5.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.1.0.RELEASE
-#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.1.3.RELEASE
+#pause()V
+#resume()V
@2.1.5.RELEASE
+#isPauseRequested()Z
+#checkGroupId()V
@2.1.6.RELEASE
+#setAfterRollbackProcessor(Lorg/springframework/kafka/listener/AfterRollbackProcessor;)V
@2.2.0.RELEASE
+#setErrorHandler(Lorg/springframework/kafka/listener/ErrorHandler;)V
+#setGenericErrorHandler(Lorg/springframework/kafka/listener/GenericErrorHandler;)V
+#setBatchErrorHandler(Lorg/springframework/kafka/listener/BatchErrorHandler;)V
+#getContainerProperties()Lorg/springframework/kafka/listener/ContainerProperties;
-#getContainerProperties()Lorg/springframework/kafka/listener/config/ContainerProperties;
@2.2.5.RELEASE
+#getGroupId()Ljava/lang/String;
+#getListenerId()Ljava/lang/String;
@2.2.7.RELEASE
+#setRecordInterceptor(Lorg/springframework/kafka/listener/RecordInterceptor;)V
@2.2.14.RELEASE
+#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
+#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.3.0.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setTopicCheckTimeout(I)V
-#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
-#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.3.4.RELEASE
+#setInterceptBeforeTx(Z)V
@2.3.8.RELEASE
+#stop(Z)V
@2.3.9.RELEASE
+#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
+#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.4.0.RELEASE
-#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
-#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
-#stop(Z)V
@2.4.6.RELEASE
+#stop(Z)V
@2.4.7.RELEASE
+#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
+#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.5.0.RELEASE
-#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
-#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.5.1.RELEASE
+#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
+#getAfterRollbackProcessor()Lorg/springframework/kafka/listener/AfterRollbackProcessor;
@2.6.8
+#setBatchInterceptor(Lorg/springframework/kafka/listener/BatchInterceptor;)V
@2.7.0
+#isPartitionPauseRequested(Lorg/apache/kafka/common/TopicPartition;)Z
+#pausePartition(Lorg/apache/kafka/common/TopicPartition;)V
+#resumePartition(Lorg/apache/kafka/common/TopicPartition;)V
@2.8.0
+#getCommonErrorHandler()Lorg/springframework/kafka/listener/CommonErrorHandler;
+#setCommonErrorHandler(Lorg/springframework/kafka/listener/CommonErrorHandler;)V
+#stopAbnormally(Ljava/lang/Runnable;)V
@2.8.3
*#setErrorHandler(Lorg/springframework/kafka/listener/ErrorHandler;)V[deprecated]
*#setGenericErrorHandler(Lorg/springframework/kafka/listener/GenericErrorHandler;)V[deprecated]
*#setBatchErrorHandler(Lorg/springframework/kafka/listener/BatchErrorHandler;)V[deprecated]
*#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;[deprecated]
@2.8.4
+#getListenerInfo()[B
+#setListenerInfo([B)V
@3.0.0
+#setMainListenerId(Ljava/lang/String;)V
+#getMainListenerId()Ljava/lang/String;
@3.0.1
+#isChangeConsumerThreadName()Z
+#setChangeConsumerThreadName(Z)V
+#getThreadNameSupplier()Ljava/util/function/Function;
+#setThreadNameSupplier(Ljava/util/function/Function;)V

+###org/springframework/kafka/listener/AcknowledgingConsumerAwareMessageListener
@2.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/ContainerProperties$AckMode
@2.2.0.RELEASE
+#values()[Lorg/springframework/kafka/listener/ContainerProperties$AckMode;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/ContainerProperties$AckMode;

+###org/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback
@1.1.0.RELEASE
+#seek(Ljava/lang/String;IJ)V
@1.3.0.RELEASE
+#seekToBeginning(Ljava/lang/String;I)V
+#seekToEnd(Ljava/lang/String;I)V
@2.3.0.RELEASE
+#seekRelative(Ljava/lang/String;IJZ)V
+#seekToTimestamp(Ljava/lang/String;IJ)V
+#seekToTimestamp(Ljava/util/Collection;J)V
@2.3.4.RELEASE
+#seekToBeginning(Ljava/util/Collection;)V
+#seekToEnd(Ljava/util/Collection;)V

+###org/springframework/kafka/listener/ListenerExecutionFailedException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@2.2.4.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
+#getGroupId()Ljava/lang/String;

+###org/springframework/kafka/listener/ContainerStoppingBatchErrorHandler
@2.1.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/concurrent/Executor;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.9.0
-###org/springframework/kafka/listener/ContainerStoppingBatchErrorHandler

+###org/springframework/kafka/listener/KafkaMessageListenerContainer
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;)V
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
+#getAssignedPartitions()Ljava/util/Collection;
+#toString()Ljava/lang/String;
@1.0.6.RELEASE
+#setClientIdSuffix(Ljava/lang/String;)V
@1.1.0.RELEASE
-#setClientIdSuffix(Ljava/lang/String;)V
@1.1.5.RELEASE
+#setClientIdSuffix(Ljava/lang/String;)V
@1.2.0.RELEASE
-#setClientIdSuffix(Ljava/lang/String;)V
@1.2.1.RELEASE
+#setClientIdSuffix(Ljava/lang/String;)V
@1.3.0.RELEASE
+#metrics()Ljava/util/Map;
@2.1.5.RELEASE
+#isContainerPaused()Z
@2.2.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;)V
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
-#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;)V
-#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/config/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
@2.2.1.RELEASE
+#setEmergencyStop(Ljava/lang/Runnable;)V
@2.3.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionOffset;)V[deprecated]
-#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
@2.5.0.RELEASE
+#getAssignmentsByClientId()Ljava/util/Map;
-#<init>(Lorg/springframework/kafka/core/ConsumerFactory;Lorg/springframework/kafka/listener/ContainerProperties;[Lorg/springframework/kafka/support/TopicPartitionOffset;)V[deprecated]
@2.7.0
+#isPartitionPaused(Lorg/apache/kafka/common/TopicPartition;)Z
@2.8.0
+#isInExpectedState()Z
+#pause()V
+#resume()V
@2.8.10
+#publishConsumerPausedEvent(Ljava/util/Collection;Ljava/lang/String;)V
+#publishConsumerResumedEvent(Ljava/util/Collection;)V
@2.9.0
+#resumePartition(Lorg/apache/kafka/common/TopicPartition;)V
-#publishConsumerPausedEvent(Ljava/util/Collection;Ljava/lang/String;)V
-#publishConsumerResumedEvent(Ljava/util/Collection;)V
@2.9.2
+#publishConsumerPausedEvent(Ljava/util/Collection;Ljava/lang/String;)V
+#publishConsumerResumedEvent(Ljava/util/Collection;)V

+###org/springframework/kafka/listener/BatchErrorHandler
@1.1.0.RELEASE
@2.1.5.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.3.7.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.0.RELEASE
-#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.4.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V

+###org/springframework/kafka/listener/ConsumerAwareMessageListener
@2.0.0.RELEASE
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/ListenerUtils
@2.0.0.RELEASE
+#determineListenerType(Ljava/lang/Object;)Lorg/springframework/kafka/listener/ListenerType;
@2.2.14.RELEASE
+#setLogOnlyMetadata(Z)V
+#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
@2.3.0.RELEASE
+#getExceptionFromHeader(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/String;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
-#setLogOnlyMetadata(Z)V
-#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
@2.3.9.RELEASE
+#setLogOnlyMetadata(Z)V
+#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
@2.3.12.RELEASE
+#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.4.0.RELEASE
-#setLogOnlyMetadata(Z)V
-#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
-#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.4.7.RELEASE
+#setLogOnlyMetadata(Z)V
+#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
@2.4.10.RELEASE
+#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.5.0.RELEASE
-#setLogOnlyMetadata(Z)V
-#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
-#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.5.2.RELEASE
+#setLogOnlyMetadata(Z)V
+#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
@2.5.4.RELEASE
+#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Z)Ljava/lang/String;
@2.5.7.RELEASE
+#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.6.0
-#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.6.2
+#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V
@2.7.0
*#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V[deprecated]
+#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#stoppableSleep(Lorg/springframework/kafka/listener/MessageListenerContainer;J)V
@2.8.1
+#byteArrayToDeserializationException(Lorg/springframework/core/log/LogAccessor;[B)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.8.4
*#setLogOnlyMetadata(Z)V[deprecated]
*#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;[deprecated]
*#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Z)Ljava/lang/String;[deprecated]
@2.8.6
+#createOffsetAndMetadata(Lorg/springframework/kafka/listener/MessageListenerContainer;J)Lorg/apache/kafka/clients/consumer/OffsetAndMetadata;
@3.0.0
-#setLogOnlyMetadata(Z)V[deprecated]
-#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;[deprecated]
-#recordToString(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Z)Ljava/lang/String;[deprecated]
-#unrecoverableBackOff(Lorg/springframework/util/backoff/BackOff;Ljava/lang/ThreadLocal;Ljava/lang/ThreadLocal;)V[deprecated]

+###org/springframework/kafka/listener/ContainerAwareErrorHandler
@2.1.0.RELEASE
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer
@2.2.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/KafkaTemplate;)V
+#<init>(Lorg/springframework/kafka/core/KafkaTemplate;Ljava/util/function/BiFunction;)V
+#accept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
+#accept(Ljava/lang/Object;Ljava/lang/Object;)V
@2.3.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Ljava/util/function/BiFunction;)V
@2.5.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/KafkaOperations;)V
+#<init>(Lorg/springframework/kafka/core/KafkaOperations;Ljava/util/function/BiFunction;)V
+#setRetainExceptionHeader(Z)V
-#<init>(Lorg/springframework/kafka/core/KafkaTemplate;)V
-#<init>(Lorg/springframework/kafka/core/KafkaTemplate;Ljava/util/function/BiFunction;)V
@2.5.1.RELEASE
+#<init>(Lorg/springframework/kafka/core/KafkaTemplate;)V[deprecated]
+#<init>(Lorg/springframework/kafka/core/KafkaTemplate;Ljava/util/function/BiFunction;)V[deprecated]
@2.5.4.RELEASE
+#setHeadersFunction(Ljava/util/function/BiFunction;)V
@2.7.0
+#<init>(Ljava/util/function/Function;ZLjava/util/function/BiFunction;)V
+#setVerifyPartition(Z)V
+#setPartitionInfoTimeout(Ljava/time/Duration;)V
+#setReplaceOriginalHeaders(Z)V
+#setThrowIfNoDestinationReturned(Z)V
+#setFailIfSendResultIsError(Z)V
+#setWaitForSendResultTimeout(Ljava/time/Duration;)V
+#setTimeoutBuffer(J)V
+#accept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;)V
-#<init>(Lorg/springframework/kafka/core/KafkaTemplate;)V[deprecated]
-#<init>(Lorg/springframework/kafka/core/KafkaTemplate;Ljava/util/function/BiFunction;)V[deprecated]
-#accept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
-#accept(Ljava/lang/Object;Ljava/lang/Object;)V
@2.7.9
*#setReplaceOriginalHeaders(Z)V[deprecated]
+#setAppendOriginalHeaders(Z)V
+#setStripPreviousExceptionHeaders(Z)V
@2.8.3
+#setSkipSameTopicFatalExceptions(Z)V
@2.8.4
+#setExceptionHeadersCreator(Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$ExceptionHeadersCreator;)V
+#excludeHeader([Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$HeadersToAdd;)V
+#includeHeader([Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$HeadersToAdd;)V
+#addHeadersFunction(Ljava/util/function/BiFunction;)V
@3.0.0
-#setReplaceOriginalHeaders(Z)V[deprecated]

+###org/springframework/kafka/listener/GenericMessageListenerContainer
@2.1.3.RELEASE

+###org/springframework/kafka/listener/ContainerProperties
@2.2.0.RELEASE
+#<init>([Ljava/lang/String;)V
+#<init>(Ljava/util/regex/Pattern;)V
+#<init>([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
+#setMessageListener(Ljava/lang/Object;)V
+#setAckMode(Lorg/springframework/kafka/listener/ContainerProperties$AckMode;)V
+#setPollTimeout(J)V
+#setAckCount(I)V
+#setAckTime(J)V
+#setConsumerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
+#setShutdownTimeout(J)V
+#setConsumerRebalanceListener(Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;)V
+#setCommitCallback(Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;)V
+#setSyncCommits(Z)V
+#setIdleEventInterval(Ljava/lang/Long;)V
+#setAckOnError(Z)V
+#setGroupId(Ljava/lang/String;)V
+#getTopics()[Ljava/lang/String;
+#getTopicPattern()Ljava/util/regex/Pattern;
+#getTopicPartitions()[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;
+#getAckMode()Lorg/springframework/kafka/listener/ContainerProperties$AckMode;
+#getAckCount()I
+#getAckTime()J
+#getMessageListener()Ljava/lang/Object;
+#getPollTimeout()J
+#getConsumerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
+#getShutdownTimeout()J
+#getConsumerRebalanceListener()Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;
+#getCommitCallback()Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;
+#isSyncCommits()Z
+#getIdleEventInterval()Ljava/lang/Long;
+#isAckOnError()Z
+#getGroupId()Ljava/lang/String;
+#getTransactionManager()Lorg/springframework/transaction/PlatformTransactionManager;
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#getMonitorInterval()I
+#setMonitorInterval(I)V
+#getScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#setScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#getNoPollThreshold()F
+#setNoPollThreshold(F)V
+#getClientId()Ljava/lang/String;
+#setClientId(Ljava/lang/String;)V
+#isLogContainerConfig()Z
+#setLogContainerConfig(Z)V
+#getCommitLogLevel()Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;
+#setCommitLogLevel(Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
+#isMissingTopicsFatal()Z
+#setMissingTopicsFatal(Z)V
+#toString()Ljava/lang/String;
@2.2.4.RELEASE
+#getConsumerProperties()Ljava/util/Properties;
+#setConsumerProperties(Ljava/util/Properties;)V
@2.2.14.RELEASE
+#isOnlyLogRecordMetadata()Z
+#setOnlyLogRecordMetadata(Z)V
@2.3.0.RELEASE
*#<init>([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V[deprecated]
+#<init>([Lorg/springframework/kafka/support/TopicPartitionOffset;)V
+#setSyncCommitTimeout(Ljava/time/Duration;)V
*#getTopicPartitions()[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;[deprecated]
*#getConsumerProperties()Ljava/util/Properties;[deprecated]
*#setConsumerProperties(Ljava/util/Properties;)V[deprecated]
+#setIdleBetweenPolls(J)V
+#getIdleBetweenPolls()J
+#isMicrometerEnabled()Z
+#setMicrometerEnabled(Z)V
+#setMicrometerTags(Ljava/util/Map;)V
+#getMicrometerTags()Ljava/util/Map;
+#getConsumerStartTimout()Ljava/time/Duration;
+#setConsumerStartTimout(Ljava/time/Duration;)V
-#setPollTimeout(J)V
-#setConsumerRebalanceListener(Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;)V
-#setCommitCallback(Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;)V
-#setSyncCommits(Z)V
-#setGroupId(Ljava/lang/String;)V
-#getTopics()[Ljava/lang/String;
-#getTopicPattern()Ljava/util/regex/Pattern;
-#getPollTimeout()J
-#getConsumerRebalanceListener()Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;
-#getCommitCallback()Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;
-#isSyncCommits()Z
-#getGroupId()Ljava/lang/String;
-#getClientId()Ljava/lang/String;
-#setClientId(Ljava/lang/String;)V
-#getCommitLogLevel()Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;
-#setCommitLogLevel(Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
-#isOnlyLogRecordMetadata()Z
-#setOnlyLogRecordMetadata(Z)V
@2.3.2.RELEASE
+#isSubBatchPerPartition()Z
+#setSubBatchPerPartition(Z)V
@2.3.6.RELEASE
+#getAssignmentCommitOption()Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;
+#setAssignmentCommitOption(Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;)V
@2.3.13.RELEASE
+#isDeliveryAttemptHeader()Z
@2.4.0.RELEASE
-#getAssignmentCommitOption()Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;
-#setAssignmentCommitOption(Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;)V
-#isDeliveryAttemptHeader()Z
@2.4.2.RELEASE
+#getAssignmentCommitOption()Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;
+#setAssignmentCommitOption(Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;)V
@2.4.11.RELEASE
+#isDeliveryAttemptHeader()Z
@2.5.0.RELEASE
*#setAckOnError(Z)V[deprecated]
+#getSubBatchPerPartition()Ljava/lang/Boolean;
+#setDeliveryAttemptHeader(Z)V
+#getEosMode()Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;
+#setEosMode(Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;)V
-#<init>([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V[deprecated]
-#getTopicPartitions()[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;[deprecated]
-#getConsumerProperties()Ljava/util/Properties;[deprecated]
-#setConsumerProperties(Ljava/util/Properties;)V[deprecated]
@2.5.4.RELEASE
+#getTransactionDefinition()Lorg/springframework/transaction/TransactionDefinition;
+#setTransactionDefinition(Lorg/springframework/transaction/TransactionDefinition;)V
@2.5.6.RELEASE
+#getAdviceChain()[Lorg/aopalliance/aop/Advice;
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
@2.5.8.RELEASE
+#isStopContainerWhenFenced()Z
+#setStopContainerWhenFenced(Z)V
@2.5.11.RELEASE
+#isStopImmediate()Z
+#setStopImmediate(Z)V
@2.6.0
-#isStopContainerWhenFenced()Z
-#setStopContainerWhenFenced(Z)V
-#isStopImmediate()Z
-#setStopImmediate(Z)V
@2.6.3
+#isStopContainerWhenFenced()Z
+#setStopContainerWhenFenced(Z)V
@2.6.5
+#getConsumerStartTimeout()Ljava/time/Duration;
*#getConsumerStartTimout()Ljava/time/Duration;[deprecated]
+#setConsumerStartTimeout(Ljava/time/Duration;)V
*#setConsumerStartTimout(Ljava/time/Duration;)V[deprecated]
+#isStopImmediate()Z
+#setStopImmediate(Z)V
@2.7.0
+#setIdlePartitionEventInterval(Ljava/lang/Long;)V
+#getIdlePartitionEventInterval()Ljava/lang/Long;
*#setTransactionDefinition(Lorg/springframework/transaction/TransactionDefinition;)V[deprecated]
-#setAckOnError(Z)V[deprecated]
-#isAckOnError()Z
@2.7.6
+#setSubBatchPerPartition(Ljava/lang/Boolean;)V
-#setSubBatchPerPartition(Z)V
@2.8.0
+#setIdleBeforeDataMultiplier(D)V
+#getIdleBeforeDataMultiplier()D
+#isAsyncAcks()Z
+#setAsyncAcks(Z)V
@2.9.0
+#isPauseImmediate()Z
+#setPauseImmediate(Z)V
@2.9.1
*#setConsumerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V[deprecated]
+#setListenerTaskExecutor(Lorg/springframework/core/task/AsyncTaskExecutor;)V
*#getConsumerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;[deprecated]
+#getListenerTaskExecutor()Lorg/springframework/core/task/AsyncTaskExecutor;
@3.0.0
+#isObservationEnabled()Z
+#setObservationEnabled(Z)V
+#getObservationConvention()Lorg/springframework/kafka/support/micrometer/KafkaListenerObservationConvention;
+#setObservationConvention(Lorg/springframework/kafka/support/micrometer/KafkaListenerObservationConvention;)V
-#setConsumerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V[deprecated]
-#getConsumerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;[deprecated]
-#getConsumerStartTimout()Ljava/time/Duration;[deprecated]
-#setConsumerStartTimout(Ljava/time/Duration;)V[deprecated]
@3.0.4
+#getPollTimeoutWhilePaused()Ljava/time/Duration;
+#setPollTimeoutWhilePaused(Ljava/time/Duration;)V

+###org/springframework/kafka/listener/AfterRollbackProcessor
@1.3.5.RELEASE
+#process(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/AfterRollbackProcessor

+###org/springframework/kafka/support/AbstractKafkaHeaderMapper$HeaderMatcher
@2.3.0.RELEASE
+#matchHeader(Ljava/lang/String;)Z
+#isNegated()Z

+###org/springframework/kafka/support/AbstractKafkaHeaderMapper
@2.1.3.RELEASE
+#<init>([Ljava/lang/String;)V
@2.2.5.RELEASE
+#setMapAllStringsOut(Z)V
+#setCharset(Ljava/nio/charset/Charset;)V
+#setRawMappedHaeaders(Ljava/util/Map;)V
@2.3.0.RELEASE
+#setRawMappedHeaders(Ljava/util/Map;)V
-#setRawMappedHaeaders(Ljava/util/Map;)V
@2.7.1
+#addRawMappedHeader(Ljava/lang/String;Z)V

+###org/springframework/kafka/support/CompositeProducerListener
@2.1.7.RELEASE
+#<init>([Lorg/springframework/kafka/support/ProducerListener;)V
+#setDelegates([Lorg/springframework/kafka/support/ProducerListener;)V
+#addDelegate(Lorg/springframework/kafka/support/ProducerListener;)V
+#removeDelegate(Lorg/springframework/kafka/support/ProducerListener;)Z
+#onSuccess(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V
@2.6.2
*#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V[deprecated]
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;Ljava/lang/Exception;)V
@2.7.0
-#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V[deprecated]

+###org/springframework/kafka/support/KafkaNull
@1.0.3.RELEASE

+###org/springframework/kafka/support/TopicPartitionInitialOffset
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;ILjava/lang/Long;)V
+#topicPartition()Lorg/apache/kafka/common/TopicPartition;
+#partition()I
+#topic()Ljava/lang/String;
+#initialOffset()Ljava/lang/Long;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@1.1.0.RELEASE
+#<init>(Ljava/lang/String;ILjava/lang/Long;Z)V
+#isRelativeToCurrent()Z
@1.3.0.RELEASE
+#<init>(Ljava/lang/String;ILorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;)V
+#getPosition()Lorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;
@2.3.0.RELEASE
+#<init>(Ljava/lang/String;ILjava/lang/Long;Lorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;)V
+#<init>(Lorg/apache/kafka/common/TopicPartition;Ljava/lang/Long;Lorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;)V
+#fromTPO(Lorg/springframework/kafka/support/TopicPartitionOffset;)Lorg/springframework/kafka/support/TopicPartitionInitialOffset;
+#toTPO(Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)Lorg/springframework/kafka/support/TopicPartitionOffset;
@2.5.0.RELEASE
-###org/springframework/kafka/support/TopicPartitionInitialOffset

+###org/springframework/kafka/support/SeekUtils
@2.2.0.RELEASE
+#doSeeks(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;ZLjava/util/function/BiPredicate;Lorg/apache/commons/logging/Log;)Z
@2.3.0.RELEASE
+#doSeeks(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;ZLjava/util/function/BiPredicate;Lorg/springframework/core/log/LogAccessor;)Z
-#doSeeks(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;ZLjava/util/function/BiPredicate;Lorg/apache/commons/logging/Log;)Z
@2.5.0.RELEASE
-###org/springframework/kafka/support/SeekUtils

+###org/springframework/kafka/support/SimpleKafkaHeaderMapper
@2.1.3.RELEASE
+#<init>()V
+#<init>([Ljava/lang/String;)V
+#fromHeaders(Lorg/springframework/messaging/MessageHeaders;Lorg/apache/kafka/common/header/Headers;)V
+#toHeaders(Lorg/apache/kafka/common/header/Headers;Ljava/util/Map;)V
@2.8.8
+#forInboundOnlyWithMatchers([Ljava/lang/String;)Lorg/springframework/kafka/support/SimpleKafkaHeaderMapper;

+###org/springframework/kafka/support/LogIfLevelEnabled$Level
@2.1.2.RELEASE
+#values()[Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;

+###org/springframework/kafka/support/JacksonUtils
@2.3.0.RELEASE
+#enhancedObjectMapper()Lcom/fasterxml/jackson/databind/ObjectMapper;
+#enhancedObjectMapper(Ljava/lang/ClassLoader;)Lcom/fasterxml/jackson/databind/ObjectMapper;
@2.7.5
*#enhancedObjectMapper(Ljava/lang/ClassLoader;)Lcom/fasterxml/jackson/databind/ObjectMapper;[deprecated]
@3.0.0
-#enhancedObjectMapper(Ljava/lang/ClassLoader;)Lcom/fasterxml/jackson/databind/ObjectMapper;[deprecated]

+###org/springframework/kafka/support/AbstractKafkaHeaderMapper$NeverMatchHeaderMatcher
@2.3.0.RELEASE
+#matchHeader(Ljava/lang/String;)Z
+#isNegated()Z

+###org/springframework/kafka/support/KafkaUtils
@2.2.0.RELEASE
+#returnTypeMessageOrCollectionOf(Ljava/lang/reflect/Method;)Z
@2.3.0.RELEASE
+#setConsumerGroupId(Ljava/lang/String;)V
+#getConsumerGroupId()Ljava/lang/String;
+#clearConsumerGroupId()V
@2.7.0
+#determineSendTimeout(Ljava/util/Map;JJ)Ljava/time/Duration;
@2.7.12
+#setConsumerRecordFormatter(Ljava/util/function/Function;)V
+#setProducerRecordFormatter(Ljava/util/function/Function;)V
+#format(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
+#format(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/lang/String;
@2.8.0
-#setConsumerRecordFormatter(Ljava/util/function/Function;)V
-#setProducerRecordFormatter(Ljava/util/function/Function;)V
-#format(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
-#format(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/lang/String;
@2.8.4
+#setConsumerRecordFormatter(Ljava/util/function/Function;)V
+#setProducerRecordFormatter(Ljava/util/function/Function;)V
+#format(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Ljava/lang/String;
+#format(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Z)Ljava/lang/String;[deprecated]
+#format(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/lang/String;
@3.0.0
+#setLogOnlyMetadata(Z)V
-#format(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Z)Ljava/lang/String;[deprecated]

+###org/springframework/kafka/support/KafkaHeaders
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/kafka/support/SendResult
@1.0.0.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
+#getProducerRecord()Lorg/apache/kafka/clients/producer/ProducerRecord;
+#getRecordMetadata()Lorg/apache/kafka/clients/producer/RecordMetadata;
@1.3.4.RELEASE
+#toString()Ljava/lang/String;
@2.0.0.RELEASE
-#toString()Ljava/lang/String;
@2.0.4.RELEASE
+#toString()Ljava/lang/String;
@2.1.0.RELEASE
-#toString()Ljava/lang/String;
@2.1.5.RELEASE
+#toString()Ljava/lang/String;

+###org/springframework/kafka/support/TopicPartitionOffset
@2.3.0.RELEASE
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;ILjava/lang/Long;)V
+#<init>(Ljava/lang/String;ILjava/lang/Long;Z)V
+#<init>(Ljava/lang/String;ILorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;)V
+#<init>(Ljava/lang/String;ILjava/lang/Long;Lorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;)V
+#<init>(Lorg/apache/kafka/common/TopicPartition;Ljava/lang/Long;Lorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;)V
+#getTopicPartition()Lorg/apache/kafka/common/TopicPartition;
+#getPartition()I
+#getTopic()Ljava/lang/String;
+#getOffset()Ljava/lang/Long;
+#isRelativeToCurrent()Z
+#getPosition()Lorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@2.5.5.RELEASE
+#setOffset(Ljava/lang/Long;)V
+#setRelativeToCurrent(Z)V

+###org/springframework/kafka/support/JavaUtils
@2.3.0.RELEASE
+#acceptIfCondition(ZLjava/lang/Object;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfNotNull(Ljava/lang/Object;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfHasText(Ljava/lang/String;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfNotEmpty(Ljava/util/List;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfNotEmpty([Ljava/lang/Object;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfCondition(ZLjava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiConsumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfNotNull(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiConsumer;)Lorg/springframework/kafka/support/JavaUtils;
+#acceptIfHasText(Ljava/lang/Object;Ljava/lang/String;Ljava/util/function/BiConsumer;)Lorg/springframework/kafka/support/JavaUtils;
@2.9.0
+#acceptIfInstanceOf(Ljava/lang/Class;Ljava/lang/Object;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/JavaUtils;

+###org/springframework/kafka/support/LogIfLevelEnabled
@2.1.2.RELEASE
+#<init>(Lorg/apache/commons/logging/Log;Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
+#log(Ljava/util/function/Supplier;)V
+#log(Ljava/util/function/Supplier;Ljava/lang/Throwable;)V
@2.3.0.RELEASE
+#<init>(Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
-#<init>(Lorg/apache/commons/logging/Log;Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V

+###org/springframework/kafka/support/KafkaStreamBrancher
@2.2.4.RELEASE
+#<init>()V
+#branch(Lorg/apache/kafka/streams/kstream/Predicate;Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/KafkaStreamBrancher;
+#defaultBranch(Ljava/util/function/Consumer;)Lorg/springframework/kafka/support/KafkaStreamBrancher;
+#onTopOf(Lorg/apache/kafka/streams/kstream/KStream;)Lorg/apache/kafka/streams/kstream/KStream;

+###org/springframework/kafka/support/DefaultKafkaHeaderMapper
@1.3.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>([Ljava/lang/String;)V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;[Ljava/lang/String;)V
+#addTrustedPackages([Ljava/lang/String;)V
+#fromHeaders(Lorg/springframework/messaging/MessageHeaders;Lorg/apache/kafka/common/header/Headers;)V
+#toHeaders(Lorg/apache/kafka/common/header/Headers;Ljava/util/Map;)V
@2.2.0.RELEASE
+#addToStringClasses([Ljava/lang/String;)V
@2.3.0.RELEASE
+#setEncodeStrings(Z)V
@2.8.8
+#forInboundOnlyWithMatchers([Ljava/lang/String;)Lorg/springframework/kafka/support/DefaultKafkaHeaderMapper;
+#forInboundOnlyWithMatchers(Lcom/fasterxml/jackson/databind/ObjectMapper;[Ljava/lang/String;)Lorg/springframework/kafka/support/DefaultKafkaHeaderMapper;

+###org/springframework/kafka/support/TopicPartitionOffset$SeekPosition
@2.3.0.RELEASE
+#values()[Lorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/TopicPartitionOffset$SeekPosition;

+###org/springframework/kafka/support/AbstractKafkaHeaderMapper$SimplePatternBasedHeaderMatcher
@2.1.3.RELEASE
+#<init>(Ljava/lang/String;)V
+#matchHeader(Ljava/lang/String;)Z
+#isNegated()Z
@2.3.0.RELEASE
-#<init>(Ljava/lang/String;)V

+###org/springframework/kafka/support/LoggingProducerListener
@1.0.0.RELEASE
+#<init>()V
+#setIncludeContents(Z)V
+#setMaxContentLogged(I)V
+#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V
@2.4.2.RELEASE
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V
-#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V
@2.6.2
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;Ljava/lang/Exception;)V
-#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V

+###org/springframework/kafka/support/TransactionSupport
@1.3.7.RELEASE
+#setTransactionIdSuffix(Ljava/lang/String;)V
+#getTransactionIdSuffix()Ljava/lang/String;
+#clearTransactionIdSuffix()V
@2.0.0.RELEASE
-###org/springframework/kafka/support/TransactionSupport

+###org/springframework/kafka/support/KafkaHeaderMapper
@1.3.0.RELEASE
+#fromHeaders(Lorg/springframework/messaging/MessageHeaders;Lorg/apache/kafka/common/header/Headers;)V
+#toHeaders(Lorg/apache/kafka/common/header/Headers;Ljava/util/Map;)V

+###org/springframework/kafka/support/ProducerListenerAdapter
@1.0.0.RELEASE
+#<init>()V
+#onSuccess(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
+#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V
+#isInterestedInSuccess()Z
@2.1.7.RELEASE
-#onSuccess(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
-#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V
-#isInterestedInSuccess()Z
@2.5.0.RELEASE
-###org/springframework/kafka/support/ProducerListenerAdapter

+###org/springframework/kafka/support/JacksonPresent
@1.3.0.RELEASE
+#isJackson2Present()Z

+###org/springframework/kafka/support/ProducerListener
@1.0.0.RELEASE
+#onSuccess(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
+#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V
+#isInterestedInSuccess()Z
@2.1.7.RELEASE
+#onSuccess(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;)V
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V
*#isInterestedInSuccess()Z[deprecated]
@2.4.2.RELEASE
*#onSuccess(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/producer/RecordMetadata;)V[deprecated]
*#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V[deprecated]
@2.6.0
-#onSuccess(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/producer/RecordMetadata;)V[deprecated]
-#onError(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Exception;)V[deprecated]
-#isInterestedInSuccess()Z[deprecated]
@2.6.2
*#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V[deprecated]
+#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/RecordMetadata;Ljava/lang/Exception;)V
@2.7.0
-#onError(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/Exception;)V[deprecated]

+###org/springframework/kafka/support/serializer/JsonDeserializer
@1.0.0.RELEASE
+#<init>(Ljava/lang/Class;)V
+#<init>(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#configure(Ljava/util/Map;Z)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#close()V
@2.1.0.RELEASE
+#<init>()V
+#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
+#addTrustedPackages([Ljava/lang/String;)V
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
@2.1.3.RELEASE
+#setUseTypeMapperForKey(Z)V
@2.2.0.RELEASE
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>(Ljava/lang/Class;Z)V
+#<init>(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/ObjectMapper;Z)V
+#setRemoveTypeHeaders(Z)V
@2.2.8.RELEASE
+#setUseTypeHeaders(Z)V
@2.3.0.RELEASE
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;)V
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;Z)V
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;Lcom/fasterxml/jackson/databind/ObjectMapper;Z)V
+#<init>(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/ObjectMapper;Z)V
+#forKeys()Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#dontRemoveTypeHeaders()Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#ignoreTypeHeaders()Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#typeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
@2.5.0.RELEASE
+#setTypeFunction(Ljava/util/function/BiFunction;)V
+#trustedPackages([Ljava/lang/String;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#typeFunction(Ljava/util/function/BiFunction;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
@2.5.3.RELEASE
+#setTypeResolver(Lorg/springframework/kafka/support/serializer/JsonTypeResolver;)V
+#typeResolver(Lorg/springframework/kafka/support/serializer/JsonTypeResolver;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
@2.6.0
+#<init>(Lcom/fasterxml/jackson/databind/JavaType;)V
+#<init>(Lcom/fasterxml/jackson/databind/JavaType;Z)V
+#<init>(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#copyWithType(Ljava/lang/Class;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#copyWithType(Lcom/fasterxml/jackson/core/type/TypeReference;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
+#copyWithType(Lcom/fasterxml/jackson/databind/JavaType;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
@2.8.0
+#getTypeMapper()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)V
+#typeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;
-#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
-#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
-#typeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonDeserializer;

+###org/springframework/kafka/support/serializer/DeserializationException
@2.2.0.RELEASE
+#<init>(Ljava/lang/String;[BZLjava/lang/Throwable;)V
+#getData()[B
+#isKey()Z
@2.2.1.RELEASE
+#<init>(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[BZLjava/lang/Throwable;)V
+#getHeaders()Lorg/apache/kafka/common/header/Headers;
+#setHeaders(Lorg/apache/kafka/common/header/Headers;)V
@2.5.0.RELEASE
*#<init>(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[BZLjava/lang/Throwable;)V[deprecated]
@2.7.0
-#<init>(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[BZLjava/lang/Throwable;)V[deprecated]

+###org/springframework/kafka/support/serializer/DelegatingDeserializer
@2.3.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/Map;)V
+#configure(Ljava/util/Map;Z)V
+#addDelegate(Ljava/lang/String;Lorg/apache/kafka/common/serialization/Deserializer;)V
+#removeDelegate(Ljava/lang/String;)Lorg/apache/kafka/common/serialization/Deserializer;
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
+#close()V

+###org/springframework/kafka/support/serializer/ErrorHandlingDeserializer2
@2.2.1.RELEASE
+#<init>()V
+#<init>(Lorg/apache/kafka/common/serialization/Deserializer;)V
+#setFailedDeserializationFunction(Ljava/util/function/BiFunction;)V
+#configure(Ljava/util/Map;Z)V
+#setupDelegate(Ljava/util/Map;Ljava/lang/String;)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
+#close()V
@2.2.3.RELEASE
+#isKey()Z
+#setKey(Z)V
+#keyDeserializer(Z)Lorg/springframework/kafka/support/serializer/ErrorHandlingDeserializer2;
@2.2.8.RELEASE
*#setFailedDeserializationFunction(Ljava/util/function/BiFunction;)V[deprecated]
+#setFailedDeserializationFunction(Ljava/util/function/Function;)V
@2.3.0.RELEASE
+#isForKey()Z
+#setForKey(Z)V
-#isKey()Z
-#setKey(Z)V
@2.5.0.RELEASE
-#<init>(Lorg/apache/kafka/common/serialization/Deserializer;)V
-#setFailedDeserializationFunction(Ljava/util/function/BiFunction;)V[deprecated]
-#setFailedDeserializationFunction(Ljava/util/function/Function;)V
-#isForKey()Z
-#setForKey(Z)V
-#keyDeserializer(Z)Lorg/springframework/kafka/support/serializer/ErrorHandlingDeserializer2;
-#configure(Ljava/util/Map;Z)V
-#setupDelegate(Ljava/util/Map;Ljava/lang/String;)V
-#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
-#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
-#close()V
@2.6.0
-###org/springframework/kafka/support/serializer/ErrorHandlingDeserializer2

+###org/springframework/kafka/support/serializer/RetryingDeserializer
@2.3.0.RELEASE
+#<init>(Lorg/apache/kafka/common/serialization/Deserializer;Lorg/springframework/retry/RetryOperations;)V
+#configure(Ljava/util/Map;Z)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
+#close()V

+###org/springframework/kafka/support/serializer/JsonSerde
@1.1.5.RELEASE
+#<init>()V
+#<init>(Ljava/lang/Class;)V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>(Lorg/springframework/kafka/support/serializer/JsonSerializer;Lorg/springframework/kafka/support/serializer/JsonDeserializer;)V
+#configure(Ljava/util/Map;Z)V
+#close()V
+#serializer()Lorg/apache/kafka/common/serialization/Serializer;
+#deserializer()Lorg/apache/kafka/common/serialization/Deserializer;
@1.2.0.RELEASE
-###org/springframework/kafka/support/serializer/JsonSerde

+###org/springframework/kafka/support/serializer/FailedDeserializationInfo
@2.2.8.RELEASE
+#<init>(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[BZLjava/lang/Exception;)V
+#getTopic()Ljava/lang/String;
+#getHeaders()Lorg/apache/kafka/common/header/Headers;
+#getData()[B
+#isForKey()Z
+#getException()Ljava/lang/Exception;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/support/serializer/JsonSerializer
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#configure(Ljava/util/Map;Z)V
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#close()V
@2.1.0.RELEASE
+#isAddTypeInfo()Z
+#setAddTypeInfo(Z)V
+#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
+#serialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Object;)[B
@2.1.3.RELEASE
+#setUseTypeMapperForKey(Z)V
@2.3.0.RELEASE
+#forKeys()Lorg/springframework/kafka/support/serializer/JsonSerializer;
+#noTypeInfo()Lorg/springframework/kafka/support/serializer/JsonSerializer;
+#typeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonSerializer;
@2.6.0
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;)V
+#<init>(Lcom/fasterxml/jackson/core/type/TypeReference;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#<init>(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#copyWithType(Ljava/lang/Class;)Lorg/springframework/kafka/support/serializer/JsonSerializer;
+#copyWithType(Lcom/fasterxml/jackson/core/type/TypeReference;)Lorg/springframework/kafka/support/serializer/JsonSerializer;
+#copyWithType(Lcom/fasterxml/jackson/databind/JavaType;)Lorg/springframework/kafka/support/serializer/JsonSerializer;
@2.8.0
+#getTypeMapper()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)V
+#typeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonSerializer;
-#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
-#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
-#typeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)Lorg/springframework/kafka/support/serializer/JsonSerializer;

+###org/springframework/kafka/support/serializer/ErrorHandlingDeserializer
@2.2.0.RELEASE
+#<init>()V
+#<init>(Lorg/apache/kafka/common/serialization/ExtendedDeserializer;)V
+#configure(Ljava/util/Map;Z)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#close()V
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
@2.2.1.RELEASE
+#<init>(Lorg/apache/kafka/common/serialization/Deserializer;)V
-#<init>(Lorg/apache/kafka/common/serialization/ExtendedDeserializer;)V
@2.5.0.RELEASE
+#setFailedDeserializationFunction(Ljava/util/function/Function;)V
+#isForKey()Z
+#setForKey(Z)V
+#keyDeserializer(Z)Lorg/springframework/kafka/support/serializer/ErrorHandlingDeserializer;
+#setupDelegate(Ljava/util/Map;Ljava/lang/String;)V

+###org/springframework/kafka/support/serializer/StringOrBytesSerializer
@2.3.0.RELEASE
+#<init>()V
+#configure(Ljava/util/Map;Z)V
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#close()V

+###org/springframework/kafka/support/serializer/DelegatingSerializer
@2.3.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/Map;)V
+#configure(Ljava/util/Map;Z)V
+#addDelegate(Ljava/lang/String;Lorg/apache/kafka/common/serialization/Serializer;)V
+#removeDelegate(Ljava/lang/String;)Lorg/apache/kafka/common/serialization/Serializer;
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#serialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Object;)[B
+#close()V

+###org/springframework/kafka/support/JacksonMimeTypeModule
@2.3.0.RELEASE
+#<init>()V

+###org/springframework/kafka/support/DefaultKafkaHeaderMapper$NonTrustedHeaderType
@1.3.0.RELEASE
+#getHeaderValue()[B
+#getUntrustedType()Ljava/lang/String;
+#toString()Ljava/lang/String;
@2.2.3.RELEASE
+#<init>()V
+#setHeaderValue([B)V
+#setUntrustedType(Ljava/lang/String;)V

+###org/springframework/kafka/support/converter/ByteArrayJsonMessageConverter
@2.3.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V

+###org/springframework/kafka/support/converter/KafkaMessageHeaders
@1.1.0.RELEASE
+#getRawHeaders()Ljava/util/Map;

+###org/springframework/kafka/support/converter/BatchMessagingMessageConverter
@1.1.0.RELEASE
+#<init>()V
+#setGenerateMessageId(Z)V
+#setGenerateTimestamp(Z)V
+#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
+#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Ljava/util/List;
@1.3.0.RELEASE
+#setHeaderMapper(Lorg/springframework/kafka/support/KafkaHeaderMapper;)V
@1.3.2.RELEASE
+#<init>(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
@2.0.0.RELEASE
+#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
-#<init>(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
-#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
@2.0.2.RELEASE
+#<init>(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
@2.1.5.RELEASE
+#getRecordMessageConverter()Lorg/springframework/kafka/support/converter/RecordMessageConverter;
@2.7.0
+#setRawRecordHeader(Z)V

+###org/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence
@2.1.0.RELEASE
+#values()[Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;
@2.8.0
-###org/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence

+###org/springframework/kafka/support/converter/DefaultJackson2JavaTypeMapper
@2.1.0.RELEASE
+#<init>()V
+#getTypePrecedence()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;
+#setTypePrecedence(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;)V
+#addTrustedPackages([Ljava/lang/String;)V
+#toJavaType(Lorg/apache/kafka/common/header/Headers;)Lcom/fasterxml/jackson/databind/JavaType;
+#fromJavaType(Lcom/fasterxml/jackson/databind/JavaType;Lorg/apache/kafka/common/header/Headers;)V
+#fromClass(Ljava/lang/Class;Lorg/apache/kafka/common/header/Headers;)V
+#toClass(Lorg/apache/kafka/common/header/Headers;)Ljava/lang/Class;
@2.2.0.RELEASE
+#removeHeaders(Lorg/apache/kafka/common/header/Headers;)V
@2.8.0
-###org/springframework/kafka/support/converter/DefaultJackson2JavaTypeMapper

+###org/springframework/kafka/support/converter/AbstractJavaTypeMapper
@2.1.0.RELEASE
+#<init>()V
+#getClassIdFieldName()Ljava/lang/String;
+#getContentClassIdFieldName()Ljava/lang/String;
+#getKeyClassIdFieldName()Ljava/lang/String;
+#setIdClassMapping(Ljava/util/Map;)V
+#setBeanClassLoader(Ljava/lang/ClassLoader;)V
+#getIdClassMapping()Ljava/util/Map;
@2.1.3.RELEASE
+#setClassIdFieldName(Ljava/lang/String;)V
+#setContentClassIdFieldName(Ljava/lang/String;)V
+#setKeyClassIdFieldName(Ljava/lang/String;)V
+#setUseForKey(Z)V
@2.8.0
-###org/springframework/kafka/support/converter/AbstractJavaTypeMapper

+###org/springframework/kafka/support/converter/MessagingMessageConverter
@1.0.0.RELEASE
+#<init>()V
+#setGenerateMessageId(Z)V
+#setGenerateTimestamp(Z)V
+#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
+#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Lorg/apache/kafka/clients/producer/ProducerRecord;
@1.3.0.RELEASE
+#setHeaderMapper(Lorg/springframework/kafka/support/KafkaHeaderMapper;)V
@2.0.0.RELEASE
+#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
-#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
@2.7.0
+#setRawRecordHeader(Z)V
@2.7.1
+#setMessagingConverter(Lorg/springframework/messaging/converter/SmartMessageConverter;)V

+###org/springframework/kafka/support/converter/Jackson2JavaTypeMapper
@2.1.0.RELEASE
+#fromJavaType(Lcom/fasterxml/jackson/databind/JavaType;Lorg/apache/kafka/common/header/Headers;)V
+#toJavaType(Lorg/apache/kafka/common/header/Headers;)Lcom/fasterxml/jackson/databind/JavaType;
+#getTypePrecedence()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;
+#addTrustedPackages([Ljava/lang/String;)V
@2.2.0.RELEASE
+#setTypePrecedence(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper$TypePrecedence;)V
+#removeHeaders(Lorg/apache/kafka/common/header/Headers;)V
@2.8.0
-###org/springframework/kafka/support/converter/Jackson2JavaTypeMapper

+###org/springframework/kafka/support/converter/RecordMessageConverter
@1.1.0.RELEASE
+#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
+#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Lorg/apache/kafka/clients/producer/ProducerRecord;
@2.0.0.RELEASE
+#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
-#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;

+###org/springframework/kafka/support/converter/BytesJsonMessageConverter
@2.1.7.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V

+###org/springframework/kafka/support/converter/BatchMessageConverter
@1.1.0.RELEASE
+#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
+#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Ljava/util/List;
@2.0.0.RELEASE
+#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
-#toMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
@2.1.5.RELEASE
+#getRecordMessageConverter()Lorg/springframework/kafka/support/converter/RecordMessageConverter;

+###org/springframework/kafka/support/converter/ConversionException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@2.7.2
+#<init>(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/util/List;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Lorg/springframework/messaging/Message;Ljava/lang/Throwable;)V
+#getRecord()Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#getRecords()Ljava/util/List;
+#getMsg()Lorg/springframework/messaging/Message;

+###org/springframework/kafka/support/converter/ClassMapper
@2.1.0.RELEASE
+#fromClass(Ljava/lang/Class;Lorg/apache/kafka/common/header/Headers;)V
+#toClass(Lorg/apache/kafka/common/header/Headers;)Ljava/lang/Class;
@2.8.0
-###org/springframework/kafka/support/converter/ClassMapper

+###org/springframework/kafka/support/converter/StringJsonMessageConverter
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
@2.1.0.RELEASE
+#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
@2.3.0.RELEASE
-#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
-#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V

+###org/springframework/kafka/support/converter/ProjectingMessageConverter
@2.1.1.RELEASE
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
@2.3.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/kafka/support/converter/MessagingMessageConverter;)V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;Lorg/springframework/kafka/support/converter/MessagingMessageConverter;)V

+###org/springframework/kafka/support/converter/JsonMessageConverter
@2.3.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
@2.8.0
+#getTypeMapper()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)V
-#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
-#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V

+###org/springframework/kafka/support/converter/MessageConverter
@1.0.0.RELEASE
+#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
+#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Lorg/apache/kafka/clients/producer/ProducerRecord;
@1.1.0.RELEASE
-#toMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Ljava/lang/reflect/Type;)Lorg/springframework/messaging/Message;
-#fromMessage(Lorg/springframework/messaging/Message;Ljava/lang/String;)Lorg/apache/kafka/clients/producer/ProducerRecord;
@2.1.13.RELEASE
+#commonHeaders(Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Map;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
@2.2.0.RELEASE
-#commonHeaders(Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Map;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
@2.2.6.RELEASE
+#commonHeaders(Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Map;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
@2.3.0.RELEASE
+#getGroupId()Ljava/lang/String;

+###org/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition
@1.3.0.RELEASE
+#values()[Lorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition;
@2.5.0.RELEASE
-###org/springframework/kafka/support/TopicPartitionInitialOffset$SeekPosition

+###org/springframework/kafka/support/Acknowledgment
@1.0.0.RELEASE
+#acknowledge()V
@2.3.0.RELEASE
+#nack(J)V
+#nack(IJ)V
@2.8.7
*#nack(J)V[deprecated]
+#nack(Ljava/time/Duration;)V
*#nack(IJ)V[deprecated]
+#nack(ILjava/time/Duration;)V
@2.9.0
-#nack(Ljava/time/Duration;)V
-#nack(ILjava/time/Duration;)V
@2.9.2
*#nack(J)V[deprecated]
+#nack(Ljava/time/Duration;)V
*#nack(IJ)V[deprecated]
+#nack(ILjava/time/Duration;)V
@3.0.0
-#nack(J)V[deprecated]
-#nack(IJ)V[deprecated]

+###org/springframework/kafka/core/KafkaOperations$OperationsCallback
@1.3.0.RELEASE
+#doInOperations(Lorg/springframework/kafka/core/KafkaOperations;)Ljava/lang/Object;

+###org/springframework/kafka/core/ProducerFactoryUtils
@1.3.0.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;)Lorg/springframework/kafka/core/KafkaResourceHolder;
+#releaseResources(Lorg/springframework/kafka/core/KafkaResourceHolder;)V
+#setConsumerGroupId(Ljava/lang/String;)V
+#getConsumerGroupId()Ljava/lang/String;
+#clearConsumerGroupId()V
@1.3.11.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;
@2.0.0.RELEASE
-#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;
@2.1.14.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;[deprecated]
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;Ljava/time/Duration;)Lorg/springframework/kafka/core/KafkaResourceHolder;
@2.2.0.RELEASE
-#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;[deprecated]
-#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;Ljava/time/Duration;)Lorg/springframework/kafka/core/KafkaResourceHolder;
@2.2.9.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;[deprecated]
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;Ljava/time/Duration;)Lorg/springframework/kafka/core/KafkaResourceHolder;
@2.3.0.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;Ljava/lang/String;Ljava/time/Duration;)Lorg/springframework/kafka/core/KafkaResourceHolder;
*#setConsumerGroupId(Ljava/lang/String;)V[deprecated]
*#getConsumerGroupId()Ljava/lang/String;[deprecated]
*#clearConsumerGroupId()V[deprecated]
-#getTransactionalResourceHolder(Lorg/springframework/kafka/core/ProducerFactory;J)Lorg/springframework/kafka/core/KafkaResourceHolder;[deprecated]
@2.5.0.RELEASE
-#setConsumerGroupId(Ljava/lang/String;)V[deprecated]
-#getConsumerGroupId()Ljava/lang/String;[deprecated]
-#clearConsumerGroupId()V[deprecated]

+###org/springframework/kafka/core/ConsumerFactory
@1.0.0.RELEASE
+#createConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#isAutoCommit()Z
@1.3.0.RELEASE
+#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
+#createConsumer(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
+#getConfigurationProperties()Ljava/util/Map;
@2.0.0.RELEASE
+#getKeyDeserializer()Lorg/apache/kafka/common/serialization/Deserializer;
+#getValueDeserializer()Lorg/apache/kafka/common/serialization/Deserializer;
@2.1.1.RELEASE
+#createConsumer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.2.4.RELEASE
+#createConsumer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.5.3.RELEASE
+#removeListener(Lorg/springframework/kafka/core/ConsumerFactory$Listener;)Z
+#addListener(ILorg/springframework/kafka/core/ConsumerFactory$Listener;)V
+#addListener(Lorg/springframework/kafka/core/ConsumerFactory$Listener;)V
+#getListeners()Ljava/util/List;
+#addPostProcessor(Lorg/springframework/kafka/core/ConsumerPostProcessor;)V
+#removePostProcessor(Lorg/springframework/kafka/core/ConsumerPostProcessor;)Z
+#getPostProcessors()Ljava/util/List;
@2.7.0
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V

+###org/springframework/kafka/core/DefaultKafkaConsumerFactory
@1.0.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Deserializer;Lorg/apache/kafka/common/serialization/Deserializer;)V
+#setKeyDeserializer(Lorg/apache/kafka/common/serialization/Deserializer;)V
+#setValueDeserializer(Lorg/apache/kafka/common/serialization/Deserializer;)V
+#createConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#isAutoCommit()Z
@1.0.6.RELEASE
+#getConfigurationProperties()Ljava/util/Map;
+#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.1.0.RELEASE
-#getConfigurationProperties()Ljava/util/Map;
-#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.1.5.RELEASE
+#getConfigurationProperties()Ljava/util/Map;
+#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.2.0.RELEASE
-#getConfigurationProperties()Ljava/util/Map;
-#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.2.1.RELEASE
+#getConfigurationProperties()Ljava/util/Map;
+#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.3.0.RELEASE
+#getKeyDeserializer()Lorg/apache/kafka/common/serialization/Deserializer;
+#getValueDeserializer()Lorg/apache/kafka/common/serialization/Deserializer;
+#createConsumer(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.1.1.RELEASE
+#createConsumer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.2.0.RELEASE
-#createConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
-#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
-#createConsumer(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.2.4.RELEASE
+#createConsumer(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/kafka/clients/consumer/Consumer;
@2.3.0.RELEASE
+#<init>(Ljava/util/Map;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V
@2.3.10.RELEASE
+#setBeanName(Ljava/lang/String;)V
@2.4.0.RELEASE
-#setBeanName(Ljava/lang/String;)V
@2.4.8.RELEASE
+#setBeanName(Ljava/lang/String;)V
@2.5.0.RELEASE
+#getListeners()Ljava/util/List;
+#addListener(Lorg/springframework/kafka/core/ConsumerFactory$Listener;)V
+#addListener(ILorg/springframework/kafka/core/ConsumerFactory$Listener;)V
+#removeListener(Lorg/springframework/kafka/core/ConsumerFactory$Listener;)Z
@2.5.3.RELEASE
+#getPostProcessors()Ljava/util/List;
+#addPostProcessor(Lorg/springframework/kafka/core/ConsumerPostProcessor;)V
+#removePostProcessor(Lorg/springframework/kafka/core/ConsumerPostProcessor;)Z
@2.7.0
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V
@2.8.0
+#setKeyDeserializerSupplier(Ljava/util/function/Supplier;)V
+#setValueDeserializerSupplier(Ljava/util/function/Supplier;)V
@2.8.7
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Deserializer;Lorg/apache/kafka/common/serialization/Deserializer;Z)V
+#<init>(Ljava/util/Map;Ljava/util/function/Supplier;Ljava/util/function/Supplier;Z)V
+#setConfigureDeserializers(Z)V

+###org/springframework/kafka/core/KafkaProducerException
@1.0.0.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/String;Ljava/lang/Throwable;)V
+#getProducerRecord()Lorg/apache/kafka/clients/producer/ProducerRecord;
@2.5.0.RELEASE
*#getProducerRecord()Lorg/apache/kafka/clients/producer/ProducerRecord;[deprecated]
+#getFailedProducerRecord()Lorg/apache/kafka/clients/producer/ProducerRecord;
@2.7.0
-#getProducerRecord()Lorg/apache/kafka/clients/producer/ProducerRecord;[deprecated]

+###org/springframework/kafka/core/DefaultKafkaProducerFactory
@1.0.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Serializer;Lorg/apache/kafka/common/serialization/Serializer;)V
+#setKeySerializer(Lorg/apache/kafka/common/serialization/Serializer;)V
+#setValueSerializer(Lorg/apache/kafka/common/serialization/Serializer;)V
+#destroy()V
+#start()V
+#stop()V
+#isRunning()Z
+#createProducer()Lorg/apache/kafka/clients/producer/Producer;
@1.1.6.RELEASE
+#setPhysicalCloseTimeout(I)V
@1.2.0.RELEASE
-#setPhysicalCloseTimeout(I)V
@1.2.2.RELEASE
+#setPhysicalCloseTimeout(I)V
@1.3.0.RELEASE
+#setTransactionIdPrefix(Ljava/lang/String;)V
+#getConfigurationProperties()Ljava/util/Map;
+#transactionCapable()Z
@1.3.7.RELEASE
+#setProducerPerConsumerPartition(Z)V
@1.3.8.RELEASE
+#isProducerPerConsumerPartition()Z
+#closeProducerFor(Ljava/lang/String;)V
@2.0.0.RELEASE
-#setProducerPerConsumerPartition(Z)V
-#isProducerPerConsumerPartition()Z
-#closeProducerFor(Ljava/lang/String;)V
@2.0.6.RELEASE
+#setProducerPerConsumerPartition(Z)V
@2.0.7.RELEASE
+#isProducerPerConsumerPartition()Z
+#closeProducerFor(Ljava/lang/String;)V
@2.1.0.RELEASE
-#setProducerPerConsumerPartition(Z)V
-#isProducerPerConsumerPartition()Z
-#closeProducerFor(Ljava/lang/String;)V
@2.1.10.RELEASE
+#setProducerPerConsumerPartition(Z)V
@2.1.11.RELEASE
+#isProducerPerConsumerPartition()Z
+#closeProducerFor(Ljava/lang/String;)V
@2.2.0.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#onApplicationEvent(Lorg/springframework/context/event/ContextStoppedEvent;)V
*#start()V[deprecated]
*#stop()V[deprecated]
+#reset()V
*#isRunning()Z[deprecated]
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
-#isProducerPerConsumerPartition()Z
@2.2.1.RELEASE
+#isProducerPerConsumerPartition()Z
@2.3.0.RELEASE
+#<init>(Ljava/util/Map;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V
+#setProducerPerThread(Z)V
+#createProducer(Ljava/lang/String;)Lorg/apache/kafka/clients/producer/Producer;
+#closeThreadBoundProducer()V
-#start()V[deprecated]
-#stop()V[deprecated]
@2.3.10.RELEASE
+#setBeanName(Ljava/lang/String;)V
@2.4.0.RELEASE
-#setBeanName(Ljava/lang/String;)V
@2.4.3.RELEASE
+#createNonTransactionalProducer()Lorg/apache/kafka/clients/producer/Producer;
@2.4.8.RELEASE
+#setBeanName(Ljava/lang/String;)V
@2.5.0.RELEASE
+#getPhysicalCloseTimeout()Ljava/time/Duration;
+#getTransactionIdPrefix()Ljava/lang/String;
+#isProducerPerThread()Z
+#getKeySerializerSupplier()Ljava/util/function/Supplier;
+#getValueSerializerSupplier()Ljava/util/function/Supplier;
+#getListeners()Ljava/util/List;
+#addListener(Lorg/springframework/kafka/core/ProducerFactory$Listener;)V
+#addListener(ILorg/springframework/kafka/core/ProducerFactory$Listener;)V
+#removeListener(Lorg/springframework/kafka/core/ProducerFactory$Listener;)Z
-#isRunning()Z[deprecated]
@2.5.3.RELEASE
+#getPostProcessors()Ljava/util/List;
+#addPostProcessor(Lorg/springframework/kafka/core/ProducerPostProcessor;)V
+#removePostProcessor(Lorg/springframework/kafka/core/ProducerPostProcessor;)Z
@2.5.8.RELEASE
+#setMaxAge(Ljava/time/Duration;)V
@2.5.10.RELEASE
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V
@2.5.17.RELEASE
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.6.0
-#setMaxAge(Ljava/time/Duration;)V
-#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
-#updateConfigs(Ljava/util/Map;)V
-#removeConfig(Ljava/lang/String;)V
@2.6.3
+#setMaxAge(Ljava/time/Duration;)V
@2.6.4
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V
@2.6.12
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.7.0
-#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.7.9
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.8.0
+#setKeySerializerSupplier(Ljava/util/function/Supplier;)V
+#setValueSerializerSupplier(Ljava/util/function/Supplier;)V
+#getKeySerializer()Lorg/apache/kafka/common/serialization/Serializer;
+#getValueSerializer()Lorg/apache/kafka/common/serialization/Serializer;
@2.8.7
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Serializer;Lorg/apache/kafka/common/serialization/Serializer;Z)V
+#<init>(Ljava/util/Map;Ljava/util/function/Supplier;Ljava/util/function/Supplier;Z)V
+#isConfigureSerializers()Z
+#setConfigureSerializers(Z)V
@3.0.0
*#setProducerPerConsumerPartition(Z)V[deprecated]
*#isProducerPerConsumerPartition()Z[deprecated]
-#closeProducerFor(Ljava/lang/String;)V

+###org/springframework/kafka/core/KafkaOperations
@1.0.0.RELEASE
+#sendDefault(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;ILjava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Lorg/springframework/messaging/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
+#flush()V
@1.1.0.RELEASE
+#partitionsFor(Ljava/lang/String;)Ljava/util/List;
+#metrics()Ljava/util/Map;
+#execute(Lorg/springframework/kafka/core/KafkaOperations$ProducerCallback;)Ljava/lang/Object;
@1.3.0.RELEASE
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;
+#executeInTransaction(Lorg/springframework/kafka/core/KafkaOperations$OperationsCallback;)Ljava/lang/Object;
+#sendOffsetsToTransaction(Ljava/util/Map;)V
+#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V
-#sendDefault(ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;ILjava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
@2.3.0.RELEASE
+#isTransactional()Z
@2.4.3.RELEASE
+#isAllowNonTransactional()Z
@2.5.0.RELEASE
+#sendOffsetsToTransaction(Ljava/util/Map;Lorg/apache/kafka/clients/consumer/ConsumerGroupMetadata;)V
+#inTransaction()Z
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
@2.8.0
*#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]
*#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]
+#receive(Ljava/lang/String;IJ)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#receive(Ljava/lang/String;IJLjava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#receive(Ljava/util/Collection;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#receive(Ljava/util/Collection;Ljava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
@2.9.0
*#sendDefault(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
*#send(Lorg/springframework/messaging/Message;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#usingCompletableFuture()Lorg/springframework/kafka/core/KafkaOperations2;
@3.0.0
+#sendDefault(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/springframework/messaging/Message;)Ljava/util/concurrent/CompletableFuture;
-#sendDefault(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#send(Lorg/springframework/messaging/Message;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
-#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]
-#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]
-#usingCompletableFuture()Lorg/springframework/kafka/core/KafkaOperations2;

+###org/springframework/kafka/core/KafkaAdmin
@1.3.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setCloseTimeout(I)V
+#setFatalIfBrokerNotAvailable(Z)V
+#setAutoCreate(Z)V
+#getConfig()Ljava/util/Map;
+#afterSingletonsInstantiated()V
+#initialize()Z
@1.3.2.RELEASE
+#setOperationTimeout(I)V
@2.0.0.RELEASE
-#setOperationTimeout(I)V
@2.0.2.RELEASE
+#setOperationTimeout(I)V
@2.5.0.RELEASE
*#getConfig()Ljava/util/Map;[deprecated]
+#getConfigurationProperties()Ljava/util/Map;
@2.7.0
+#createOrModifyTopics([Lorg/apache/kafka/clients/admin/NewTopic;)V
+#describeTopics([Ljava/lang/String;)Ljava/util/Map;
-#getConfig()Ljava/util/Map;[deprecated]
@2.8.7
+#setModifyTopicConfigs(Z)V
@3.0.0
+#clusterId()Ljava/lang/String;
@3.0.2
+#getOperationTimeout()I

+###org/springframework/kafka/core/DefaultKafkaProducerFactory$CloseSafeProducer
@1.3.5.RELEASE
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/util/concurrent/Future;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;Lorg/apache/kafka/clients/producer/Callback;)Ljava/util/concurrent/Future;
+#flush()V
+#partitionsFor(Ljava/lang/String;)Ljava/util/List;
+#metrics()Ljava/util/Map;
+#initTransactions()V
+#beginTransaction()V
+#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V
+#commitTransaction()V
+#abortTransaction()V
+#close()V
+#close(JLjava/util/concurrent/TimeUnit;)V
+#toString()Ljava/lang/String;
@2.0.0.RELEASE
-###org/springframework/kafka/core/DefaultKafkaProducerFactory$CloseSafeProducer

+###org/springframework/kafka/core/KafkaTemplate
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;)V
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Z)V
+#getDefaultTopic()Ljava/lang/String;
+#setDefaultTopic(Ljava/lang/String;)V
+#setProducerListener(Lorg/springframework/kafka/support/ProducerListener;)V
+#getMessageConverter()Lorg/springframework/kafka/support/converter/MessageConverter;
+#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V
+#sendDefault(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;ILjava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Lorg/springframework/messaging/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
+#flush()V
@1.1.0.RELEASE
+#setMessageConverter(Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
+#partitionsFor(Ljava/lang/String;)Ljava/util/List;
+#metrics()Ljava/util/Map;
+#execute(Lorg/springframework/kafka/core/KafkaOperations$ProducerCallback;)Ljava/lang/Object;
-#setMessageConverter(Lorg/springframework/kafka/support/converter/MessageConverter;)V
@1.1.7.RELEASE
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;
@1.2.0.RELEASE
-#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;
@1.2.3.RELEASE
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;
@1.3.0.RELEASE
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#executeInTransaction(Lorg/springframework/kafka/core/KafkaOperations$OperationsCallback;)Ljava/lang/Object;
+#sendOffsetsToTransaction(Ljava/util/Map;)V
+#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V
-#sendDefault(ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;ILjava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
@1.3.11.RELEASE
+#setCloseTimeout(J)V
@2.0.0.RELEASE
-#setCloseTimeout(J)V
@2.1.3.RELEASE
+#isTransactional()Z
@2.1.14.RELEASE
+#setCloseTimeout(J)V[deprecated]
+#setCloseTimeout(Ljava/time/Duration;)V
@2.2.0.RELEASE
-#setCloseTimeout(J)V[deprecated]
-#setCloseTimeout(Ljava/time/Duration;)V
@2.2.1.RELEASE
+#inTransaction()Z
@2.2.5.RELEASE
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
@2.2.9.RELEASE
+#setCloseTimeout(J)V[deprecated]
+#setCloseTimeout(Ljava/time/Duration;)V
@2.3.0.RELEASE
+#getTransactionIdPrefix()Ljava/lang/String;
+#setTransactionIdPrefix(Ljava/lang/String;)V
-#setCloseTimeout(J)V[deprecated]
@2.3.13.RELEASE
+#isAllowNonTransactional()Z
@2.4.0.RELEASE
-#isAllowNonTransactional()Z
@2.4.3.RELEASE
+#setAllowNonTransactional(Z)V
+#isAllowNonTransactional()Z
@2.5.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Ljava/util/Map;)V
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;ZLjava/util/Map;)V
+#setBeanName(Ljava/lang/String;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setMicrometerEnabled(Z)V
+#setMicrometerTags(Ljava/util/Map;)V
+#onApplicationEvent(Lorg/springframework/context/event/ContextStoppedEvent;)V
+#sendOffsetsToTransaction(Ljava/util/Map;Lorg/apache/kafka/clients/consumer/ConsumerGroupMetadata;)V
+#destroy()V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.7.0
+#getMessageConverter()Lorg/springframework/kafka/support/converter/RecordMessageConverter;
-#getMessageConverter()Lorg/springframework/kafka/support/converter/MessageConverter;
@2.7.1
+#setMessagingConverter(Lorg/springframework/messaging/converter/SmartMessageConverter;)V
@2.8.0
+#setConsumerFactory(Lorg/springframework/kafka/core/ConsumerFactory;)V
*#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]
*#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]
+#receive(Ljava/lang/String;IJLjava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#receive(Ljava/util/Collection;Ljava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
@3.0.0
+#setProducerInterceptor(Lorg/apache/kafka/clients/producer/ProducerInterceptor;)V
+#setObservationEnabled(Z)V
+#setObservationConvention(Lorg/springframework/kafka/support/micrometer/KafkaTemplateObservationConvention;)V
+#afterSingletonsInstantiated()V
+#sendDefault(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/springframework/messaging/Message;)Ljava/util/concurrent/CompletableFuture;
-#sendDefault(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/util/concurrent/ListenableFuture;
-#send(Lorg/springframework/messaging/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]
-#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]

+###org/springframework/kafka/core/KafkaResourceHolder
@1.3.0.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/Producer;)V
+#getProducer()Lorg/apache/kafka/clients/producer/Producer;
+#commit()V
+#close()V
+#rollback()V
@1.3.11.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V
@2.0.0.RELEASE
-#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V
@2.1.14.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V[deprecated]
+#<init>(Lorg/apache/kafka/clients/producer/Producer;Ljava/time/Duration;)V
@2.2.0.RELEASE
-#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V[deprecated]
-#<init>(Lorg/apache/kafka/clients/producer/Producer;Ljava/time/Duration;)V
@2.2.9.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V[deprecated]
+#<init>(Lorg/apache/kafka/clients/producer/Producer;Ljava/time/Duration;)V
@2.3.0.RELEASE
-#<init>(Lorg/apache/kafka/clients/producer/Producer;)V
-#<init>(Lorg/apache/kafka/clients/producer/Producer;J)V[deprecated]

+###org/springframework/kafka/core/CleanupConfig
@2.1.2.RELEASE
+#<init>()V
+#<init>(ZZ)V
+#cleanupOnStart()Z
+#cleanupOnStop()Z

+###org/springframework/kafka/core/reactive/ReactiveKafkaProducerTemplate
@2.3.0.RELEASE
+#<init>(Lreactor/kafka/sender/SenderOptions;)V
+#<init>(Lreactor/kafka/sender/SenderOptions;Lorg/springframework/kafka/support/converter/RecordMessageConverter;)V
+#sendTransactionally(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
+#sendTransactionally(Lreactor/kafka/sender/SenderRecord;)Lreactor/core/publisher/Mono;
+#send(Ljava/lang/String;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
+#send(Ljava/lang/String;ILjava/lang/Object;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
+#send(Ljava/lang/String;IJLjava/lang/Object;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
+#send(Ljava/lang/String;Lorg/springframework/messaging/Message;)Lreactor/core/publisher/Mono;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lreactor/core/publisher/Mono;
+#send(Lreactor/kafka/sender/SenderRecord;)Lreactor/core/publisher/Mono;
+#send(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
+#flush()Lreactor/core/publisher/Mono;
+#partitionsFromProducerFor(Ljava/lang/String;)Lreactor/core/publisher/Flux;
+#metricsFromProducer()Lreactor/core/publisher/Flux;
+#doOnProducer(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
+#transactionManager()Lreactor/kafka/sender/TransactionManager;
+#destroy()V
+#close()V
@2.5.13.RELEASE
*#flush()Lreactor/core/publisher/Mono;[deprecated]
@2.6.8
*#flush()Lreactor/core/publisher/Mono;[deprecated]
@3.0.0
-#flush()Lreactor/core/publisher/Mono;[deprecated]

+###org/springframework/kafka/core/reactive/ReactiveKafkaConsumerTemplate
@2.3.0.RELEASE
+#<init>(Lreactor/kafka/receiver/ReceiverOptions;)V
+#receive()Lreactor/core/publisher/Flux;
+#receiveAutoAck()Lreactor/core/publisher/Flux;
+#receiveAtMostOnce()Lreactor/core/publisher/Flux;
+#receiveExactlyOnce(Lreactor/kafka/sender/TransactionManager;)Lreactor/core/publisher/Flux;
+#doOnConsumer(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
+#assignment()Lreactor/core/publisher/Flux;
+#subscription()Lreactor/core/publisher/Flux;
+#seek(Lorg/apache/kafka/common/TopicPartition;J)Lreactor/core/publisher/Mono;
+#seekToBeginning([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#seekToEnd([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#position(Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#committed(Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#partitionsFromConsumerFor(Ljava/lang/String;)Lreactor/core/publisher/Flux;
+#paused()Lreactor/core/publisher/Flux;
+#pause([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#resume([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;
+#metricsFromConsumer()Lreactor/core/publisher/Flux;
+#listTopics()Lreactor/core/publisher/Flux;
+#offsetsForTimes(Ljava/util/Map;)Lreactor/core/publisher/Flux;
+#beginningOffsets([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Flux;
+#endOffsets([Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Flux;
@2.4.0.RELEASE
*#committed(Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;[deprecated]
+#committed(Ljava/util/Set;)Lreactor/core/publisher/Mono;
@2.5.0.RELEASE
-#committed(Lorg/apache/kafka/common/TopicPartition;)Lreactor/core/publisher/Mono;[deprecated]

+###org/springframework/kafka/core/KafkaOperations$ProducerCallback
@1.1.0.RELEASE
+#doInKafka(Lorg/apache/kafka/clients/producer/Producer;)Ljava/lang/Object;

+###org/springframework/kafka/core/ProducerFactory
@1.0.0.RELEASE
+#createProducer()Lorg/apache/kafka/clients/producer/Producer;
@1.3.0.RELEASE
+#transactionCapable()Z
@2.0.7.RELEASE
+#closeProducerFor(Ljava/lang/String;)V
+#isProducerPerConsumerPartition()Z
@2.1.0.RELEASE
-#closeProducerFor(Ljava/lang/String;)V
-#isProducerPerConsumerPartition()Z
@2.1.11.RELEASE
+#closeProducerFor(Ljava/lang/String;)V
+#isProducerPerConsumerPartition()Z
@2.2.0.RELEASE
-#isProducerPerConsumerPartition()Z
@2.2.1.RELEASE
+#isProducerPerConsumerPartition()Z
@2.3.0.RELEASE
+#createProducer(Ljava/lang/String;)Lorg/apache/kafka/clients/producer/Producer;
+#closeThreadBoundProducer()V
@2.3.13.RELEASE
+#getConfigurationProperties()Ljava/util/Map;
@2.4.0.RELEASE
+#reset()V
-#getConfigurationProperties()Ljava/util/Map;
@2.4.3.RELEASE
+#createNonTransactionalProducer()Lorg/apache/kafka/clients/producer/Producer;
@2.4.11.RELEASE
+#getConfigurationProperties()Ljava/util/Map;
@2.5.0.RELEASE
+#getValueSerializerSupplier()Ljava/util/function/Supplier;
+#getKeySerializerSupplier()Ljava/util/function/Supplier;
+#isProducerPerThread()Z
+#getTransactionIdPrefix()Ljava/lang/String;
+#getPhysicalCloseTimeout()Ljava/time/Duration;
@2.5.3.RELEASE
+#addListener(Lorg/springframework/kafka/core/ProducerFactory$Listener;)V
+#addListener(ILorg/springframework/kafka/core/ProducerFactory$Listener;)V
+#removeListener(Lorg/springframework/kafka/core/ProducerFactory$Listener;)Z
+#getListeners()Ljava/util/List;
+#addPostProcessor(Lorg/springframework/kafka/core/ProducerPostProcessor;)V
+#removePostProcessor(Lorg/springframework/kafka/core/ProducerPostProcessor;)Z
+#getPostProcessors()Ljava/util/List;
@2.5.10.RELEASE
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V
@2.5.17.RELEASE
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.6.0
-#updateConfigs(Ljava/util/Map;)V
-#removeConfig(Ljava/lang/String;)V
-#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.6.4
+#updateConfigs(Ljava/util/Map;)V
+#removeConfig(Ljava/lang/String;)V
@2.6.12
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.7.0
-#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.7.9
+#copyWithConfigurationOverride(Ljava/util/Map;)Lorg/springframework/kafka/core/ProducerFactory;
@2.8.0
+#getKeySerializer()Lorg/apache/kafka/common/serialization/Serializer;
+#getValueSerializer()Lorg/apache/kafka/common/serialization/Serializer;
@3.0.0
*#closeProducerFor(Ljava/lang/String;)V[deprecated]
*#isProducerPerConsumerPartition()Z[deprecated]

+###org/springframework/kafka/annotation/EnableKafka
@1.0.0.RELEASE

+###org/springframework/kafka/annotation/PartitionOffset
@1.0.0.RELEASE
+#partition()Ljava/lang/String;
+#initialOffset()Ljava/lang/String;
@1.1.0.RELEASE
+#relativeToCurrent()Ljava/lang/String;

+###org/springframework/kafka/annotation/KafkaListener
@1.0.0.RELEASE
+#id()Ljava/lang/String;
+#containerFactory()Ljava/lang/String;
+#topics()[Ljava/lang/String;
+#topicPattern()Ljava/lang/String;
+#topicPartitions()[Lorg/springframework/kafka/annotation/TopicPartition;
+#group()Ljava/lang/String;
@1.2.2.RELEASE
*#group()Ljava/lang/String;[deprecated]
+#containerGroup()Ljava/lang/String;
@1.3.0.RELEASE
+#errorHandler()Ljava/lang/String;
+#groupId()Ljava/lang/String;
+#idIsGroup()Z
@2.0.0.RELEASE
-#group()Ljava/lang/String;[deprecated]
@2.1.1.RELEASE
+#clientIdPrefix()Ljava/lang/String;
@2.1.2.RELEASE
+#beanRef()Ljava/lang/String;
@2.2.0.RELEASE
+#concurrency()Ljava/lang/String;
+#autoStartup()Ljava/lang/String;
@2.2.4.RELEASE
+#properties()[Ljava/lang/String;
@2.3.5.RELEASE
+#splitIterables()Z
@2.7.1
+#contentTypeConverter()Ljava/lang/String;
@2.8.0
+#batch()Ljava/lang/String;
@2.8.4
+#filter()Ljava/lang/String;
+#info()Ljava/lang/String;

+###org/springframework/kafka/annotation/KafkaBootstrapConfiguration
@1.0.0.RELEASE
+#<init>()V
+#kafkaListenerAnnotationProcessor()Lorg/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor;
+#defaultKafkaListenerEndpointRegistry()Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;
@2.3.0.RELEASE
+#registerBeanDefinitions(Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
-#kafkaListenerAnnotationProcessor()Lorg/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor;
-#defaultKafkaListenerEndpointRegistry()Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;

+###org/springframework/kafka/annotation/KafkaHandler
@1.0.0.RELEASE
@2.1.3.RELEASE
+#isDefault()Z

+###org/springframework/kafka/annotation/KafkaListenerConfigurer
@1.0.0.RELEASE
+#configureKafkaListeners(Lorg/springframework/kafka/config/KafkaListenerEndpointRegistrar;)V

+###org/springframework/kafka/annotation/KafkaStreamsDefaultConfiguration
@1.1.4.RELEASE
+#<init>()V
+#defaultKStreamBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/core/KStreamBuilderFactoryBean;
@2.1.0.RELEASE
+#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/core/StreamsBuilderFactoryBean;
-#defaultKStreamBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/core/KStreamBuilderFactoryBean;
@2.2.0.RELEASE
+#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
-#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/core/StreamsBuilderFactoryBean;
@2.3.0.RELEASE
+#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
-#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
@2.6.7
+#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
-#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
@2.8.0
+#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;
-#defaultKafkaStreamsBuilder(Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;

+###org/springframework/kafka/annotation/EnableKafkaStreams
@1.1.4.RELEASE

+###org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor
@1.0.0.RELEASE
+#<init>()V
+#getOrder()I
+#setEndpointRegistry(Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;)V
+#setContainerFactoryBeanName(Ljava/lang/String;)V
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#afterSingletonsInstantiated()V
+#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
+#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@2.2.0.RELEASE
+#setCharset(Ljava/nio/charset/Charset;)V
@2.2.1.RELEASE
+#setDefaultContainerFactoryBeanName(Ljava/lang/String;)V
-#setContainerFactoryBeanName(Ljava/lang/String;)V
@2.5.7.RELEASE
+#getMessageHandlerMethodFactory()Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;
@2.6.0
-#getMessageHandlerMethodFactory()Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;
@2.6.2
+#getMessageHandlerMethodFactory()Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;
@2.7.2
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#afterPropertiesSet()V
@2.9.3
+#getEndpointRegistrar()Lorg/springframework/kafka/config/KafkaListenerEndpointRegistrar;

+###org/springframework/kafka/annotation/KafkaListeners
@1.0.0.RELEASE
+#value()[Lorg/springframework/kafka/annotation/KafkaListener;

+###org/springframework/kafka/annotation/KafkaListenerConfigurationSelector
@2.3.0.RELEASE
+#<init>()V
+#selectImports(Lorg/springframework/core/type/AnnotationMetadata;)[Ljava/lang/String;

+###org/springframework/kafka/annotation/TopicPartition
@1.0.0.RELEASE
+#topic()Ljava/lang/String;
+#partitions()[Ljava/lang/String;
+#partitionOffsets()[Lorg/springframework/kafka/annotation/PartitionOffset;

+###org/springframework/kafka/event/NonResponsiveConsumerEvent
@1.3.1.RELEASE
+#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#getTimeSinceLastPoll()J
+#getTopicPartitions()Ljava/util/Collection;
+#getListenerId()Ljava/lang/String;
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#toString()Ljava/lang/String;
@2.0.0.RELEASE
-###org/springframework/kafka/event/NonResponsiveConsumerEvent

+###org/springframework/kafka/event/KafkaEvent
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;)V
@2.2.1.RELEASE
*#<init>(Ljava/lang/Object;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#getContainer(Ljava/lang/Class;)Ljava/lang/Object;
+#getSource(Ljava/lang/Class;)Ljava/lang/Object;
@2.7.0
-#<init>(Ljava/lang/Object;)V[deprecated]

+###org/springframework/kafka/event/ConsumerStoppedEvent
@2.2.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#toString()Ljava/lang/String;
@2.2.1.RELEASE
*#<init>(Ljava/lang/Object;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
@2.5.8.RELEASE
*#<init>(Ljava/lang/Object;Ljava/lang/Object;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;)V
+#getReason()Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;
@2.6.0
-#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;)V
-#getReason()Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;
@2.6.3
*#<init>(Ljava/lang/Object;Ljava/lang/Object;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;)V
+#getReason()Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;
@2.7.0
-#<init>(Ljava/lang/Object;)V[deprecated]
-#<init>(Ljava/lang/Object;Ljava/lang/Object;)V[deprecated]

+###org/springframework/kafka/event/ConsumerPausedEvent
@2.1.5.RELEASE
+#<init>(Ljava/lang/Object;Ljava/util/Collection;)V
+#getPartitions()Ljava/util/Collection;
+#toString()Ljava/lang/String;
@2.2.1.RELEASE
*#<init>(Ljava/lang/Object;Ljava/util/Collection;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;)V
@2.7.0
-#<init>(Ljava/lang/Object;Ljava/util/Collection;)V[deprecated]
@2.8.9
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;Ljava/lang/String;)V
@2.9.0
-#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;Ljava/lang/String;)V
@2.9.1
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;Ljava/lang/String;)V

+###org/springframework/kafka/event/ConsumerFailedToStartEvent
@2.3.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ConsumerStartingEvent
@2.3.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ListenerContainerIdleEvent
@1.0.0.RELEASE
+#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;)V
+#getIdleTime()J
+#getTopicPartitions()Ljava/util/Collection;
+#getListenerId()Ljava/lang/String;
+#toString()Ljava/lang/String;
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
-#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;)V
@2.1.5.RELEASE
*#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;)V[deprecated]
+#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;Z)V
+#isPaused()Z
@2.2.1.RELEASE
*#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;Z)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;Z)V
@2.5.0.RELEASE
-#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;)V[deprecated]
-#<init>(Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;Z)V[deprecated]

+###org/springframework/kafka/event/ContainerStoppedEvent
@2.2.1.RELEASE
+#<init>(Ljava/lang/Object;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#toString()Ljava/lang/String;
@2.7.0
-#<init>(Ljava/lang/Object;)V[deprecated]

+###org/springframework/kafka/event/ConsumerStoppingEvent
@2.2.1.RELEASE
+#<init>(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#getPartitions()Ljava/util/Collection;
+#toString()Ljava/lang/String;
@2.7.0
-#<init>(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V[deprecated]

+###org/springframework/kafka/event/ConsumerResumedEvent
@2.1.5.RELEASE
+#<init>(Ljava/lang/Object;Ljava/util/Collection;)V
+#getPartitions()Ljava/util/Collection;
+#toString()Ljava/lang/String;
@2.2.1.RELEASE
*#<init>(Ljava/lang/Object;Ljava/util/Collection;)V[deprecated]
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection;)V
@2.7.0
-#<init>(Ljava/lang/Object;Ljava/util/Collection;)V[deprecated]

+###org/springframework/kafka/event/ConsumerStartedEvent
@2.3.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#toString()Ljava/lang/String;

+###org/springframework/kafka/security/jaas/KafkaJaasLoginModuleInitializer
@1.3.0.RELEASE
+#<init>()V
+#setLoginModule(Ljava/lang/String;)V
+#setControlFlag(Lorg/springframework/kafka/security/jaas/KafkaJaasLoginModuleInitializer$ControlFlag;)V
+#setOptions(Ljava/util/Map;)V
+#afterSingletonsInstantiated()V
+#destroy()V

+###org/springframework/kafka/security/jaas/KafkaJaasLoginModuleInitializer$ControlFlag
@1.3.0.RELEASE
+#values()[Lorg/springframework/kafka/security/jaas/KafkaJaasLoginModuleInitializer$ControlFlag;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/security/jaas/KafkaJaasLoginModuleInitializer$ControlFlag;

+###org/springframework/kafka/KafkaException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@2.5.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/kafka/KafkaException$Level;Ljava/lang/Throwable;)V
+#selfLog(Ljava/lang/String;Lorg/springframework/core/log/LogAccessor;)V

+###org/springframework/kafka/streams/HeaderEnricher
@2.3.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#init(Lorg/apache/kafka/streams/processor/ProcessorContext;)V
+#transform(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/kafka/streams/KeyValue;
+#close()V
+#transform(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/kafka/streams/messaging/MessagingFunction
@2.3.0.RELEASE
+#exchange(Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/Message;

+###org/springframework/kafka/streams/messaging/MessagingTransformer
@2.3.0.RELEASE
+#<init>(Lorg/springframework/kafka/streams/messaging/MessagingFunction;Lorg/springframework/kafka/support/converter/MessagingMessageConverter;)V
+#init(Lorg/apache/kafka/streams/processor/ProcessorContext;)V
+#transform(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/kafka/streams/KeyValue;
+#close()V
+#transform(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/kafka/streams/HeaderEnricher$Container
@2.3.0.RELEASE
+#getContext()Lorg/apache/kafka/streams/processor/ProcessorContext;
+#getKey()Ljava/lang/Object;
+#getValue()Ljava/lang/Object;

+###org/springframework/kafka/streams/RecoveringDeserializationExceptionHandler
@2.3.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;)V
+#handle(Lorg/apache/kafka/streams/processor/ProcessorContext;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)Lorg/apache/kafka/streams/errors/DeserializationExceptionHandler$DeserializationHandlerResponse;
+#configure(Ljava/util/Map;)V

+###org/springframework/kafka/transaction/KafkaTransactionManager
@1.3.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;)V
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
+#getResourceFactory()Ljava/lang/Object;
@1.3.11.RELEASE
+#setCloseTimeout(J)V
@2.0.0.RELEASE
-#setCloseTimeout(J)V
@2.1.14.RELEASE
+#setCloseTimeout(J)V[deprecated]
+#setCloseTimeout(Ljava/time/Duration;)V
@2.2.0.RELEASE
*#getResourceFactory()Ljava/lang/Object;[deprecated]
-#setCloseTimeout(J)V[deprecated]
-#setCloseTimeout(Ljava/time/Duration;)V
@2.2.9.RELEASE
+#setCloseTimeout(J)V[deprecated]
+#setCloseTimeout(Ljava/time/Duration;)V
@2.3.0.RELEASE
+#setTransactionIdPrefix(Ljava/lang/String;)V
-#setCloseTimeout(J)V[deprecated]
@2.5.0.RELEASE
-#getResourceFactory()Ljava/lang/Object;[deprecated]

+###org/springframework/kafka/transaction/KafkaAwareTransactionManager
@2.1.3.RELEASE
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;

+###org/springframework/kafka/transaction/ChainedKafkaTransactionManager
@2.1.3.RELEASE
+#<init>([Lorg/springframework/transaction/PlatformTransactionManager;)V
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
@2.2.0.RELEASE
+#getResourceFactory()Ljava/lang/Object;[deprecated]
@2.5.0.RELEASE
-#getResourceFactory()Ljava/lang/Object;[deprecated]

+###org/springframework/kafka/requestreply/AggregatingReplyingKafkaTemplate
@2.3.0.RELEASE
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;Ljava/util/function/Predicate;)V
+#setCommitTimeout(Ljava/time/Duration;)V
+#setReturnPartialOnTimeout(Z)V
+#onMessage(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
@2.3.5.RELEASE
*#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;Ljava/util/function/Predicate;)V[deprecated]
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;Ljava/util/function/BiPredicate;)V
@2.5.0.RELEASE
-#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;Ljava/util/function/Predicate;)V[deprecated]

+###org/springframework/kafka/requestreply/CorrelationKey
@2.1.3.RELEASE
+#<init>([B)V
+#getCorrelationId()[B
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/requestreply/RequestReplyFuture
@2.1.3.RELEASE
+#<init>()V
+#getSendFuture()Lorg/springframework/util/concurrent/ListenableFuture;
@2.9.0
+#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyFuture$Completable;
@3.0.0
+#getSendFuture()Ljava/util/concurrent/CompletableFuture;
-#getSendFuture()Lorg/springframework/util/concurrent/ListenableFuture;
-#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyFuture$Completable;

+###org/springframework/kafka/requestreply/ReplyingKafkaOperations
@2.1.3.RELEASE
+#sendAndReceive(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/kafka/requestreply/RequestReplyFuture;
@2.3.0.RELEASE
+#sendAndReceive(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/time/Duration;)Lorg/springframework/kafka/requestreply/RequestReplyFuture;
@2.7.0
+#sendAndReceive(Lorg/springframework/messaging/Message;)Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Ljava/time/Duration;)Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Ljava/time/Duration;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture;
@2.8.8
+#waitForAssignment(Ljava/time/Duration;)Z

+###org/springframework/kafka/requestreply/ReplyingKafkaTemplate
@2.1.3.RELEASE
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;)V
+#<init>(Lorg/springframework/kafka/core/ProducerFactory;Lorg/springframework/kafka/listener/GenericMessageListenerContainer;Z)V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#setReplyTimeout(J)V
+#isRunning()Z
+#getPhase()I
+#setPhase(I)V
+#isAutoStartup()Z
+#setAutoStartup(Z)V
+#getAssignedReplyTopicPartitions()Ljava/util/Collection;
+#afterPropertiesSet()V
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#sendAndReceive(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/springframework/kafka/requestreply/RequestReplyFuture;
+#destroy()V
+#onMessage(Ljava/util/List;)V
+#onMessage(Ljava/lang/Object;)V
@2.2.0.RELEASE
+#setSharedReplyTopic(Z)V
@2.3.0.RELEASE
*#setReplyTimeout(J)V[deprecated]
+#setDefaultReplyTimeout(Ljava/time/Duration;)V
+#setCorrelationIdStrategy(Ljava/util/function/Function;)V
+#setCorrelationHeaderName(Ljava/lang/String;)V
+#setReplyTopicHeaderName(Ljava/lang/String;)V
+#setReplyPartitionHeaderName(Ljava/lang/String;)V
+#sendAndReceive(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/time/Duration;)Lorg/springframework/kafka/requestreply/RequestReplyFuture;
@2.3.11.RELEASE
+#checkDeserialization(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.4.0.RELEASE
-#checkDeserialization(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.4.9.RELEASE
+#checkDeserialization(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.5.0.RELEASE
-#setReplyTimeout(J)V[deprecated]
-#checkDeserialization(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.5.5.RELEASE
+#checkDeserialization(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/core/log/LogAccessor;)Lorg/springframework/kafka/support/serializer/DeserializationException;
@2.6.7
+#setReplyErrorChecker(Ljava/util/function/Function;)V
@2.7.0
+#sendAndReceive(Lorg/springframework/messaging/Message;)Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Ljava/time/Duration;)Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture;
+#sendAndReceive(Lorg/springframework/messaging/Message;Ljava/time/Duration;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture;
@2.8.8
+#onFirstPoll()V
+#waitForAssignment(Ljava/time/Duration;)Z
@3.0.0
+#setBinaryCorrelation(Z)V

+###org/springframework/kafka/requestreply/KafkaReplyTimeoutException
@2.3.0.RELEASE
+#<init>(Ljava/lang/String;)V

+###org/springframework/kafka/config/KafkaStreamsInfrastructureCustomizer
@2.4.1.RELEASE
+#configureBuilder(Lorg/apache/kafka/streams/StreamsBuilder;)V
+#configureTopology(Lorg/apache/kafka/streams/Topology;)V

+###org/springframework/kafka/config/StreamsBuilderFactoryBeanConfigurer
@2.6.7
+#configure(Lorg/springframework/kafka/config/StreamsBuilderFactoryBean;)V
+#getOrder()I

+###org/springframework/kafka/config/StreamsBuilderFactoryBean$Listener
@2.5.3.RELEASE
+#streamsAdded(Ljava/lang/String;Lorg/apache/kafka/streams/KafkaStreams;)V
+#streamsRemoved(Ljava/lang/String;Lorg/apache/kafka/streams/KafkaStreams;)V

+###org/springframework/kafka/config/CompositeKafkaStreamsInfrastructureCustomizer
@2.4.1.RELEASE
+#<init>([Lorg/springframework/kafka/config/KafkaStreamsInfrastructureCustomizer;)V
+#addKafkaStreamsCustomizers([Lorg/springframework/kafka/config/KafkaStreamsInfrastructureCustomizer;)V
+#configureBuilder(Lorg/apache/kafka/streams/StreamsBuilder;)V
+#configureTopology(Lorg/apache/kafka/streams/Topology;)V

+###org/springframework/kafka/listener/PartitionPausingBackoffManager
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/kafka/listener/KafkaConsumerTimingAdjuster;)V
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;)V
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/kafka/listener/KafkaConsumerTimingAdjuster;Ljava/time/Clock;)V
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Ljava/time/Clock;)V
+#backOffIfNecessary(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager$Context;)V
+#onApplicationEvent(Lorg/springframework/kafka/event/ListenerContainerPartitionIdleEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.9.0
-###org/springframework/kafka/listener/PartitionPausingBackoffManager

+###org/springframework/kafka/listener/RetryingBatchErrorHandler
@2.3.7.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.0.RELEASE
-###org/springframework/kafka/listener/RetryingBatchErrorHandler

+###org/springframework/kafka/listener/WakingKafkaConsumerTimingAdjuster
@2.7.0
+#<init>(Lorg/springframework/core/task/TaskExecutor;Lorg/springframework/retry/backoff/Sleeper;)V
+#<init>(Lorg/springframework/core/task/TaskExecutor;)V
+#setPollTimeoutsForAdjustmentWindow(I)V
+#setTimingAdjustmentThreshold(Ljava/time/Duration;)V
+#adjustTiming(Lorg/apache/kafka/clients/consumer/Consumer;Lorg/apache/kafka/common/TopicPartition;JJ)J
@2.9.0
-###org/springframework/kafka/listener/WakingKafkaConsumerTimingAdjuster

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$ExceptionHeadersCreator
@2.8.4
+#create(Lorg/apache/kafka/common/header/Headers;Ljava/lang/Exception;ZLorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames;)V

+###org/springframework/kafka/listener/SeekUtils
@2.5.0.RELEASE
+#doSeeks(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;ZLjava/util/function/BiPredicate;Lorg/springframework/core/log/LogAccessor;)Z
+#seekPartitions(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Map;Lorg/springframework/core/log/LogAccessor;)V
+#seekOrRecover(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;ZLjava/util/function/BiPredicate;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V
@2.7.0
+#doSeeks(Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;ZLorg/springframework/kafka/listener/RecoveryStrategy;Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/springframework/core/log/LogAccessor;)Z
+#seekOrRecover(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;ZLorg/springframework/kafka/listener/RecoveryStrategy;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V
+#isBackoffException(Ljava/lang/Exception;)Z

+###org/springframework/kafka/listener/CommonContainerStoppingErrorHandler
@2.8.0
+#<init>()V
+#<init>(Ljava/util/concurrent/Executor;)V
+#setStopContainerAbnormally(Z)V
+#remainingRecords()Z
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
+#handleRemaining(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.9.0
*#remainingRecords()Z[deprecated]
+#seeksAfterHandling()Z

+###org/springframework/kafka/listener/ContainerProperties$EOSMode
@2.5.0.RELEASE
+#values()[Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;
@2.8.0
+#getMode()Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;
@2.8.3
*#getMode()Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;[deprecated]
@3.0.0
-#getMode()Lorg/springframework/kafka/listener/ContainerProperties$EOSMode;[deprecated]

+###org/springframework/kafka/listener/RecoveringBatchErrorHandler
@2.5.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/util/backoff/BackOff;)V
+#<init>(Ljava/util/function/BiConsumer;)V
+#<init>(Ljava/util/function/BiConsumer;Lorg/springframework/util/backoff/BackOff;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.5.6.RELEASE
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
@2.9.0
-###org/springframework/kafka/listener/RecoveringBatchErrorHandler

+###org/springframework/kafka/listener/ListenerContainerRegistry
@2.7.0
+#getListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;
+#getListenerContainerIds()Ljava/util/Set;
+#getListenerContainers()Ljava/util/Collection;
+#getAllListenerContainers()Ljava/util/Collection;
@2.9.0
+#getUnregisteredListenerContainer(Ljava/lang/String;)Lorg/springframework/kafka/listener/MessageListenerContainer;

+###org/springframework/kafka/listener/adapter/ConsumerRecordMetadata
@2.5.0.RELEASE
+#<init>(Lorg/apache/kafka/clients/producer/RecordMetadata;Lorg/apache/kafka/common/record/TimestampType;)V
+#hasOffset()Z
+#offset()J
+#hasTimestamp()Z
+#timestamp()J
+#serializedKeySize()I
+#serializedValueSize()I
+#topic()Ljava/lang/String;
+#partition()I
+#timestampType()Lorg/apache/kafka/common/record/TimestampType;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/listener/adapter/DefaultBatchToRecordAdapter
@2.4.2.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;)V
+#adapt(Ljava/util/List;Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/adapter/BatchToRecordAdapter$Callback;)V

+###org/springframework/kafka/listener/adapter/BatchToRecordAdapter
@2.4.2.RELEASE
+#adapt(Ljava/util/List;Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/adapter/BatchToRecordAdapter$Callback;)V

+###org/springframework/kafka/listener/adapter/AdapterUtils
@2.3.13.RELEASE
+#getDefaultReplyTopicExpression()Ljava/lang/String;
@2.4.0.RELEASE
-###org/springframework/kafka/listener/adapter/AdapterUtils

+###org/springframework/kafka/listener/adapter/KafkaBackoffAwareMessageListenerAdapter
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Ljava/lang/String;Ljava/lang/String;Ljava/time/Clock;)V
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Ljava/lang/String;Ljava/time/Clock;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;)V

+###org/springframework/kafka/listener/adapter/BatchToRecordAdapter$Callback
@2.4.2.RELEASE
+#invoke(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/messaging/Message;)V
@2.4.3.RELEASE
+#invoke(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/messaging/Message;)V
-#invoke(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/messaging/Message;)V

+###org/springframework/kafka/listener/CommonLoggingErrorHandler
@2.8.0
+#<init>()V
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
+#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
@2.9.0
*#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V[deprecated]
@3.0.4
+#handleOne(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
-#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V[deprecated]

+###org/springframework/kafka/listener/ListenerMetadata
@2.8.5
+#getListenerId()Ljava/lang/String;
+#getGroupId()Ljava/lang/String;
+#getListenerInfo()[B

+###org/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption
@2.3.6.RELEASE
+#values()[Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption;
@2.4.0.RELEASE
-###org/springframework/kafka/listener/ContainerProperties$AssignmentCommitOption

+###org/springframework/kafka/listener/PartitionPausingBackOffManagerFactory
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/KafkaConsumerTimingAdjuster;)V
+#<init>(Lorg/springframework/core/task/TaskExecutor;)V
+#<init>(Z)V
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;)V
+#<init>()V
+#<init>(Ljava/time/Clock;)V
+#setTimingAdjustmentEnabled(Z)V
+#setTimingAdjustmentManager(Lorg/springframework/kafka/listener/KafkaConsumerTimingAdjuster;)V
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
@2.9.0
-###org/springframework/kafka/listener/PartitionPausingBackOffManagerFactory

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder
@2.7.0
+#<init>()V
+#original()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;

+###org/springframework/kafka/listener/KafkaConsumerBackoffManager
@2.7.0
+#backOffIfNecessary(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager$Context;)V
+#createContext(JLjava/lang/String;Lorg/apache/kafka/common/TopicPartition;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager$Context;

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$ExceptionInfo
@2.8.4
+#getKeyExceptionFqcn()Ljava/lang/String;
+#getExceptionFqcn()Ljava/lang/String;
+#getExceptionCauseFqcn()Ljava/lang/String;
+#getKeyExceptionMessage()Ljava/lang/String;
+#getExceptionMessage()Ljava/lang/String;
+#getKeyExceptionStacktrace()Ljava/lang/String;
+#getExceptionStacktrace()Ljava/lang/String;

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames
@2.7.0
@2.8.4
+#getOriginal()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Original;
+#getExceptionInfo()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$ExceptionInfo;

+###org/springframework/kafka/listener/ConditionalDelegatingBatchErrorHandler
@2.7.4
+#<init>(Lorg/springframework/kafka/listener/ContainerAwareBatchErrorHandler;)V
+#setErrorHandlers(Ljava/util/Map;)V
+#addDelegate(Ljava/lang/Class;Lorg/springframework/kafka/listener/ContainerAwareBatchErrorHandler;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.9.0
-###org/springframework/kafka/listener/ConditionalDelegatingBatchErrorHandler

+###org/springframework/kafka/listener/CommonErrorHandler
@2.8.0
+#remainingRecords()Z
+#deliveryAttemptHeader()Z
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
+#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleRemaining(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
+#deliveryAttempt(Lorg/springframework/kafka/support/TopicPartitionOffset;)I
+#clearThreadState()V
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
@2.8.8
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
@2.8.9
*#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V[deprecated]
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
@2.9.0
*#remainingRecords()Z[deprecated]
+#seeksAfterHandling()Z
*#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V[deprecated]
+#handleOne(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
+#handleBatchAndReturnRemaining(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
-#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
@2.9.1
*#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V[deprecated]
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
@3.0.0
-#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V[deprecated]

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Original
@2.8.4
+#getOffsetHeader()Ljava/lang/String;
+#getTimestampHeader()Ljava/lang/String;
+#getTimestampTypeHeader()Ljava/lang/String;
+#getTopicHeader()Ljava/lang/String;
+#getPartitionHeader()Ljava/lang/String;
+#getConsumerGroup()Ljava/lang/String;

+###org/springframework/kafka/listener/ConsumerAwareRecordInterceptor
@2.7.0
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
@3.0.0
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;

+###org/springframework/kafka/listener/DefaultErrorHandler
@2.8.0
+#<init>()V
+#<init>(Lorg/springframework/util/backoff/BackOff;)V
+#<init>(Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;)V
+#<init>(Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;Lorg/springframework/util/backoff/BackOff;)V
+#setCommitRecovered(Z)V
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
+#remainingRecords()Z
+#deliveryAttemptHeader()Z
+#handleRemaining(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
@2.8.8
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
@2.8.9
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
-#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
@2.9.0
+#<init>(Lorg/springframework/kafka/listener/ConsumerRecordRecoverer;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/BackOffHandler;)V
*#remainingRecords()Z[deprecated]
+#seeksAfterHandling()Z
+#handleOne(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
+#handleBatchAndReturnRemaining(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V
-#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
@2.9.1
+#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;Ljava/lang/Runnable;)V
-#onPartitionsAssigned(Lorg/apache/kafka/clients/consumer/Consumer;Ljava/util/Collection;)V

+###org/springframework/kafka/listener/ConsumerPauseResumeEventPublisher
@2.8.10
+#publishConsumerPausedEvent(Ljava/util/Collection;Ljava/lang/String;)V
+#publishConsumerResumedEvent(Ljava/util/Collection;)V
@2.9.0
-###org/springframework/kafka/listener/ConsumerPauseResumeEventPublisher

+###org/springframework/kafka/listener/KafkaConsumerTimingAdjuster
@2.7.0
+#adjustTiming(Lorg/apache/kafka/clients/consumer/Consumer;Lorg/apache/kafka/common/TopicPartition;JJ)J
@2.9.0
-###org/springframework/kafka/listener/KafkaConsumerTimingAdjuster

+###org/springframework/kafka/listener/RetryListener
@2.7.0
+#failedDelivery(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;I)V
+#recovered(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
+#recoveryFailed(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;Ljava/lang/Exception;)V
@2.8.10
+#failedDelivery(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;I)V
+#recovered(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
+#recoveryFailed(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;Ljava/lang/Exception;)V
@2.9.0
-#failedDelivery(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;I)V
-#recovered(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
-#recoveryFailed(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;Ljava/lang/Exception;)V
@2.9.2
+#failedDelivery(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;I)V
+#recovered(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
+#recoveryFailed(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;Ljava/lang/Exception;)V

+###org/springframework/kafka/listener/ContainerGroup
@2.7.3
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/List;)V
+#<init>(Ljava/lang/String;[Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#getName()Ljava/lang/String;
+#getListenerIds()Ljava/util/Collection;
+#contains(Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
+#allStopped()Z
+#addContainers([Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#removeContainer(Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
+#start()V
+#stop()V
+#isRunning()Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/listener/AbstractKafkaBackOffManagerFactory
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;)V
+#<init>()V
+#setListenerContainerRegistry(Lorg/springframework/kafka/listener/ListenerContainerRegistry;)V
+#create()Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V

+###org/springframework/kafka/listener/CompositeBatchInterceptor
@2.6.8
+#<init>([Lorg/springframework/kafka/listener/BatchInterceptor;)V
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
@2.7.0
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
-#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
-#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
@2.8.0
+#setupThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#clearThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/listener/KafkaExceptionLogLevelAware
@2.5.0.RELEASE
+#<init>()V
+#setLogLevel(Lorg/springframework/kafka/KafkaException$Level;)V

+###org/springframework/kafka/listener/ErrorHandlingUtils
@2.8.0
+#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V
+#recordsToString(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)Ljava/lang/String;
@2.8.10
+#setRetryListeners(Ljava/util/List;)V
+#clearRetryListeners()V
@2.8.11
*#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V[deprecated]
+#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;Ljava/util/List;Lorg/springframework/classify/BinaryExceptionClassifier;)V
+#unwrapIfNeeded(Ljava/lang/Exception;)Ljava/lang/Exception;
@2.9.0
-#setRetryListeners(Ljava/util/List;)V
-#clearRetryListeners()V
-#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;Ljava/util/List;Lorg/springframework/classify/BinaryExceptionClassifier;)V
-#unwrapIfNeeded(Ljava/lang/Exception;)Ljava/lang/Exception;
@2.9.2
+#setRetryListeners(Ljava/util/List;)V
+#clearRetryListeners()V
@2.9.3
*#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V[deprecated]
+#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;Ljava/util/List;Lorg/springframework/classify/BinaryExceptionClassifier;)V
+#unwrapIfNeeded(Ljava/lang/Exception;)Ljava/lang/Exception;
@3.0.0
-#setRetryListeners(Ljava/util/List;)V
-#clearRetryListeners()V
-#retryBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;Ljava/util/function/BiConsumer;Lorg/springframework/core/log/LogAccessor;Lorg/springframework/kafka/KafkaException$Level;)V[deprecated]

+###org/springframework/kafka/listener/ConditionalDelegatingErrorHandler
@2.7.4
+#<init>(Lorg/springframework/kafka/listener/ContainerAwareErrorHandler;)V
+#setErrorHandlers(Ljava/util/Map;)V
+#addDelegate(Ljava/lang/Class;Lorg/springframework/kafka/listener/ContainerAwareErrorHandler;)V
+#handle(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
@2.9.0
-###org/springframework/kafka/listener/ConditionalDelegatingErrorHandler

+###org/springframework/kafka/listener/CommonMixedErrorHandler
@2.8.0
+#<init>(Lorg/springframework/kafka/listener/CommonErrorHandler;Lorg/springframework/kafka/listener/CommonErrorHandler;)V
+#remainingRecords()Z
+#deliveryAttemptHeader()Z
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
+#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleRemaining(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
+#deliveryAttempt(Lorg/springframework/kafka/support/TopicPartitionOffset;)I
+#clearThreadState()V
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
@2.9.0
+#seeksAfterHandling()Z
+#handleOne(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)Z
-#handleRecord(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/CommonDelegatingErrorHandler
@2.8.0
+#<init>(Lorg/springframework/kafka/listener/CommonErrorHandler;)V
+#setErrorHandlers(Ljava/util/Map;)V
+#remainingRecords()Z
+#clearThreadState()V
+#isAckAfterHandle()Z
+#setAckAfterHandle(Z)V
+#addDelegate(Ljava/lang/Class;Lorg/springframework/kafka/listener/CommonErrorHandler;)V
+#handleRemaining(Ljava/lang/Exception;Ljava/util/List;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handleBatch(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
+#handleOtherException(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Z)V
@2.8.8
+#setCauseChainTraversing(Z)V
@2.9.0
+#seeksAfterHandling()Z

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$HeadersToAdd
@2.8.4
+#values()[Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$HeadersToAdd;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$HeadersToAdd;

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder;)V
+#offsetHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;
+#timestampHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;
+#timestampTypeHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;
+#topicHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;
+#partitionHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;
+#exception()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
@2.8.0
+#consumerGroupHeader(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$Original;

+###org/springframework/kafka/listener/ExceptionClassifier
@2.8.0
+#<init>()V
+#setClassifications(Ljava/util/Map;Z)V
+#addNotRetryableExceptions([Ljava/lang/Class;)V
+#removeNotRetryableException(Ljava/lang/Class;)Z
@2.8.4
+#defaultFalse()V
+#addRetryableExceptions([Ljava/lang/Class;)V
*#removeNotRetryableException(Ljava/lang/Class;)Z[deprecated]
+#removeClassification(Ljava/lang/Class;)Ljava/lang/Boolean;
@2.9.0
+#defaultFatalExceptionsList()Ljava/util/List;
@3.0.0
+#defaultFalse(Z)V
-#removeNotRetryableException(Ljava/lang/Class;)Z[deprecated]

+###org/springframework/kafka/listener/KafkaConsumerBackoffManager$Context
@2.7.0
+#getDueTimestamp()J
+#getListenerId()Ljava/lang/String;
+#getTopicPartition()Lorg/apache/kafka/common/TopicPartition;
+#getConsumerForTimingAdjustment()Lorg/apache/kafka/clients/consumer/Consumer;

+###org/springframework/kafka/listener/FailedBatchProcessor
@2.8.0
+#<init>(Ljava/util/function/BiConsumer;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/CommonErrorHandler;)V
@2.8.11
+#setLogLevel(Lorg/springframework/kafka/KafkaException$Level;)V
+#setClassifications(Ljava/util/Map;Z)V
+#removeClassification(Ljava/lang/Class;)Ljava/lang/Boolean;
@2.9.0
+#<init>(Ljava/util/function/BiConsumer;Lorg/springframework/util/backoff/BackOff;Lorg/springframework/kafka/listener/BackOffHandler;Lorg/springframework/kafka/listener/CommonErrorHandler;)V
-#setLogLevel(Lorg/springframework/kafka/KafkaException$Level;)V
-#setClassifications(Ljava/util/Map;Z)V
-#removeClassification(Ljava/lang/Class;)Ljava/lang/Boolean;
@2.9.3
+#setLogLevel(Lorg/springframework/kafka/KafkaException$Level;)V
+#setClassifications(Ljava/util/Map;Z)V
+#removeClassification(Ljava/lang/Class;)Ljava/lang/Boolean;
@3.0.0
+#setRetryListeners([Lorg/springframework/kafka/listener/RetryListener;)V

+###org/springframework/kafka/listener/DeliveryAttemptAware
@2.5.0.RELEASE
+#deliveryAttempt(Lorg/springframework/kafka/support/TopicPartitionOffset;)I

+###org/springframework/kafka/listener/ListenerInvokingBatchErrorHandler
@2.3.7.RELEASE
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;)V
+#handle(Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Runnable;)V
@2.4.0.RELEASE
-###org/springframework/kafka/listener/ListenerInvokingBatchErrorHandler

+###org/springframework/kafka/listener/OffsetAndMetadataProvider
@2.8.5
+#provide(Lorg/springframework/kafka/listener/ListenerMetadata;J)Lorg/apache/kafka/clients/consumer/OffsetAndMetadata;

+###org/springframework/kafka/listener/TimestampedException
@2.7.0
+#<init>(Ljava/lang/Exception;Ljava/time/Clock;)V
+#<init>(Ljava/lang/Exception;)V
+#getTimestamp()J
@2.7.13
*#<init>(Ljava/lang/Exception;Ljava/time/Clock;)V[deprecated]
+#<init>(Ljava/lang/Exception;J)V
+#<init>(Ljava/lang/Exception;Ljava/time/Instant;)V
@2.8.0
-#<init>(Ljava/lang/Exception;J)V
-#<init>(Ljava/lang/Exception;Ljava/time/Instant;)V
@2.8.5
*#<init>(Ljava/lang/Exception;Ljava/time/Clock;)V[deprecated]
+#<init>(Ljava/lang/Exception;J)V
+#<init>(Ljava/lang/Exception;Ljava/time/Instant;)V
@3.0.0
-#<init>(Ljava/lang/Exception;Ljava/time/Clock;)V[deprecated]

+###org/springframework/kafka/listener/BatchInterceptor
@2.6.8
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V
@2.7.0
+#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;Lorg/apache/kafka/clients/consumer/Consumer;)V
-#intercept(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
-#success(Lorg/apache/kafka/clients/consumer/ConsumerRecords;)V
-#failure(Lorg/apache/kafka/clients/consumer/ConsumerRecords;Ljava/lang/Exception;)V

+###org/springframework/kafka/listener/ContainerGroupSequencer
@2.7.3
+#<init>(Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;J[Ljava/lang/String;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setStopLastGroupWhenIdle(Z)V
+#onApplicationEvent(Lorg/springframework/kafka/event/ListenerContainerIdleEvent;)V
+#start()V
+#initialize()V
+#stop()V
+#isRunning()Z
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.7.6
+#isAutoStartup()Z
+#setAutoStartup(Z)V
+#getPhase()I
+#setPhase(I)V
@2.8.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;J[Ljava/lang/String;)V
-#<init>(Lorg/springframework/kafka/config/KafkaListenerEndpointRegistry;J[Ljava/lang/String;)V

+###org/springframework/kafka/listener/ConsumerAwareRecordRecoverer
@2.7.0
+#accept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;)V
+#accept(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/apache/kafka/clients/consumer/Consumer;Ljava/lang/Exception;)V
+#accept(Ljava/lang/Object;Ljava/lang/Object;)V

+###org/springframework/kafka/listener/KafkaBackoffException
@2.7.0
+#<init>(Ljava/lang/String;Lorg/apache/kafka/common/TopicPartition;Ljava/lang/String;J)V
+#getListenerId()Ljava/lang/String;
+#getTopicPartition()Lorg/apache/kafka/common/TopicPartition;
+#getDueTimestamp()J

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo
@2.7.0
+#<init>(Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder;)V
+#keyExceptionFqcn(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#exceptionFqcn(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#keyExceptionMessage(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#exceptionMessage(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#keyExceptionStacktrace(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#exceptionStacktrace(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;
+#build()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames;
@2.8.0
+#exceptionCauseFqcn(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer$HeaderNames$Builder$ExceptionInfo;

+###org/springframework/kafka/listener/BatchListenerFailedException
@2.5.0.RELEASE
+#<init>(Ljava/lang/String;I)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;I)V
+#<init>(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
+#getRecord()Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#getIndex()I
+#getMessage()Ljava/lang/String;

+###org/springframework/kafka/listener/KafkaBackOffManagerFactory
@2.7.0
+#create()Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;

+###org/springframework/kafka/listener/RecoveryStrategy
@2.7.0
+#recovered(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/Exception;Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/apache/kafka/clients/consumer/Consumer;)Z

+###org/springframework/kafka/listener/ThreadStateProcessor
@2.8.0
+#setupThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V
+#clearThreadState(Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/support/micrometer/MicrometerHolder
@2.5.0.RELEASE
+#<init>(Lorg/springframework/context/ApplicationContext;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#start()Ljava/lang/Object;
+#success(Ljava/lang/Object;)V
+#failure(Ljava/lang/Object;Ljava/lang/String;)V
+#destroy()V

+###org/springframework/kafka/support/ExponentialBackOffWithMaxRetries
@2.7.3
+#<init>(I)V
+#getMaxRetries()I
+#setInitialInterval(J)V
+#setMultiplier(D)V
+#setMaxInterval(J)V
+#setMaxElapsedTime(J)V

+###org/springframework/kafka/support/EndpointHandlerMethod
@2.8.0
+#<init>(Ljava/lang/Object;Ljava/lang/String;)V
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#getMethod()Ljava/lang/reflect/Method;
+#getMethodName()Ljava/lang/String;
+#resolveBean(Lorg/springframework/beans/factory/BeanFactory;)Ljava/lang/Object;

+###org/springframework/kafka/support/AllowDenyCollectionManager
@2.7.0
+#<init>(Ljava/util/Collection;Ljava/util/Collection;)V
+#<init>(Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Collection;)V
+#getDefaultPredicate(Ljava/util/Collection;Ljava/util/Collection;)Ljava/util/function/Predicate;
+#isAllowed(Ljava/lang/Object;)Z
+#areAllowed([Ljava/lang/Object;)Z
+#createManagerFor(Ljava/util/Collection;Ljava/util/Collection;)Lorg/springframework/kafka/support/AllowDenyCollectionManager;
+#createManagerFor(Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Collection;)Lorg/springframework/kafka/support/AllowDenyCollectionManager;
+#hasNoRestrictions()Z

+###org/springframework/kafka/support/Suffixer
@2.7.0
+#<init>(Ljava/lang/String;)V
+#maybeAddTo(Ljava/lang/String;)Ljava/lang/String;
+#maybeAddTo(Ljava/util/Collection;)Ljava/util/Collection;

+###org/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence
@2.8.0
+#values()[Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;

+###org/springframework/kafka/support/mapping/DefaultJackson2JavaTypeMapper
@2.8.0
+#<init>()V
+#getTypePrecedence()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;
+#setTypePrecedence(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;)V
+#addTrustedPackages([Ljava/lang/String;)V
+#toJavaType(Lorg/apache/kafka/common/header/Headers;)Lcom/fasterxml/jackson/databind/JavaType;
+#fromJavaType(Lcom/fasterxml/jackson/databind/JavaType;Lorg/apache/kafka/common/header/Headers;)V
+#fromClass(Ljava/lang/Class;Lorg/apache/kafka/common/header/Headers;)V
+#toClass(Lorg/apache/kafka/common/header/Headers;)Ljava/lang/Class;
+#removeHeaders(Lorg/apache/kafka/common/header/Headers;)V

+###org/springframework/kafka/support/mapping/AbstractJavaTypeMapper
@2.8.0
+#<init>()V
+#getClassIdFieldName()Ljava/lang/String;
+#setClassIdFieldName(Ljava/lang/String;)V
+#getContentClassIdFieldName()Ljava/lang/String;
+#setContentClassIdFieldName(Ljava/lang/String;)V
+#getKeyClassIdFieldName()Ljava/lang/String;
+#setKeyClassIdFieldName(Ljava/lang/String;)V
+#setIdClassMapping(Ljava/util/Map;)V
+#setBeanClassLoader(Ljava/lang/ClassLoader;)V
+#getIdClassMapping()Ljava/util/Map;
+#setUseForKey(Z)V

+###org/springframework/kafka/support/mapping/Jackson2JavaTypeMapper
@2.8.0
+#fromJavaType(Lcom/fasterxml/jackson/databind/JavaType;Lorg/apache/kafka/common/header/Headers;)V
+#toJavaType(Lorg/apache/kafka/common/header/Headers;)Lcom/fasterxml/jackson/databind/JavaType;
+#getTypePrecedence()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;
+#setTypePrecedence(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper$TypePrecedence;)V
+#addTrustedPackages([Ljava/lang/String;)V
+#removeHeaders(Lorg/apache/kafka/common/header/Headers;)V

+###org/springframework/kafka/support/mapping/ClassMapper
@2.8.0
+#fromClass(Ljava/lang/Class;Lorg/apache/kafka/common/header/Headers;)V
+#toClass(Lorg/apache/kafka/common/header/Headers;)Ljava/lang/Class;

+###org/springframework/kafka/support/serializer/DelegatingByTopicSerialization
@2.8.0
+#<init>()V
+#<init>(Ljava/util/Map;Ljava/io/Closeable;)V
+#setCaseSensitive(Z)V
+#addDelegate(Ljava/util/regex/Pattern;Ljava/io/Closeable;)V
+#removeDelegate(Ljava/util/regex/Pattern;)Ljava/io/Closeable;
+#close()V

+###org/springframework/kafka/support/serializer/JsonTypeResolver
@2.5.3.RELEASE
+#resolveType(Ljava/lang/String;[BLorg/apache/kafka/common/header/Headers;)Lcom/fasterxml/jackson/databind/JavaType;

+###org/springframework/kafka/support/serializer/ToFromStringSerde
@2.5.0.RELEASE
+#<init>(Lorg/springframework/kafka/support/serializer/ToStringSerializer;Lorg/springframework/kafka/support/serializer/ParseStringDeserializer;)V
+#configure(Ljava/util/Map;Z)V
+#serializer()Lorg/apache/kafka/common/serialization/Serializer;
+#deserializer()Lorg/apache/kafka/common/serialization/Deserializer;

+###org/springframework/kafka/support/serializer/ToStringSerializer
@2.5.0.RELEASE
+#<init>()V
+#configure(Ljava/util/Map;Z)V
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#serialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Object;)[B
+#close()V
+#isAddTypeInfo()Z
+#setAddTypeInfo(Z)V
+#setCharset(Ljava/nio/charset/Charset;)V
+#getCharset()Ljava/nio/charset/Charset;

+###org/springframework/kafka/support/serializer/SerializationUtils
@2.5.0.RELEASE
+#propertyToMethodInvokingFunction(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/function/BiFunction;
@2.8.0
+#deserializationException(Lorg/apache/kafka/common/header/Headers;[BLjava/lang/Exception;Z)V

+###org/springframework/kafka/support/serializer/ParseStringDeserializer
@2.5.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/function/Function;)V
+#<init>(Ljava/util/function/BiFunction;)V
+#configure(Ljava/util/Map;Z)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;
+#setCharset(Ljava/nio/charset/Charset;)V
+#getCharset()Ljava/nio/charset/Charset;
+#getParser()Ljava/util/function/BiFunction;

+###org/springframework/kafka/support/serializer/DelegatingByTopicDeserializer
@2.8.0
+#<init>()V
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Deserializer;)V
+#configure(Ljava/util/Map;Z)V
+#deserialize(Ljava/lang/String;[B)Ljava/lang/Object;
+#deserialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;[B)Ljava/lang/Object;

+###org/springframework/kafka/support/serializer/DelegatingByTopicSerializer
@2.8.0
+#<init>()V
+#<init>(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Serializer;)V
+#configure(Ljava/util/Map;Z)V
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#serialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Object;)[B

+###org/springframework/kafka/support/serializer/DelegatingByTypeSerializer
@2.7.9
+#<init>(Ljava/util/Map;)V
+#configure(Ljava/util/Map;Z)V
+#serialize(Ljava/lang/String;Ljava/lang/Object;)[B
+#serialize(Ljava/lang/String;Lorg/apache/kafka/common/header/Headers;Ljava/lang/Object;)[B
@2.8.3
+#<init>(Ljava/util/Map;Z)V

+###org/springframework/kafka/support/converter/MappingJacksonParameterizedConverter
@2.7.1
+#<init>()V
+#<init>([Lorg/springframework/util/MimeType;)V
+#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V
@2.8.0
+#getTypeMapper()Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;
+#setTypeMapper(Lorg/springframework/kafka/support/mapping/Jackson2JavaTypeMapper;)V
-#getTypeMapper()Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;
-#setTypeMapper(Lorg/springframework/kafka/support/converter/Jackson2JavaTypeMapper;)V

+###org/springframework/kafka/support/TopicForRetryable
@2.8.10
+#<init>(Ljava/lang/String;IS)V
@2.9.0
-###org/springframework/kafka/support/TopicForRetryable

+###org/springframework/kafka/core/KafkaAdmin$NewTopics
@2.7.0
+#<init>([Lorg/apache/kafka/clients/admin/NewTopic;)V

+###org/springframework/kafka/core/MicrometerConsumerListener
@2.5.0.RELEASE
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;)V
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/List;)V
+#consumerAdded(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#consumerRemoved(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/core/ABSwitchCluster
@2.5.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#get()Ljava/lang/String;
+#isPrimary()Z
+#primary()V
+#secondary()V
+#get()Ljava/lang/Object;

+###org/springframework/kafka/core/ProducerPostProcessor
@2.5.3.RELEASE

+###org/springframework/kafka/core/KafkaFailureCallback
@2.5.0.RELEASE
+#onFailure(Ljava/lang/Throwable;)V
+#onFailure(Lorg/springframework/kafka/core/KafkaProducerException;)V
@3.0.0
-###org/springframework/kafka/core/KafkaFailureCallback

+###org/springframework/kafka/core/KafkaSendCallback
@2.5.0.RELEASE
@3.0.0
-###org/springframework/kafka/core/KafkaSendCallback

+###org/springframework/kafka/core/RoutingKafkaTemplate
@2.5.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
+#getProducerFactory(Ljava/lang/String;)Lorg/springframework/kafka/core/ProducerFactory;
+#execute(Lorg/springframework/kafka/core/KafkaOperations$ProducerCallback;)Ljava/lang/Object;
+#executeInTransaction(Lorg/springframework/kafka/core/KafkaOperations$OperationsCallback;)Ljava/lang/Object;
+#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V
+#metrics()Ljava/util/Map;
+#flush()V
@2.8.0
*#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]
+#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]
+#sendOffsetsToTransaction(Ljava/util/Map;Lorg/apache/kafka/clients/consumer/ConsumerGroupMetadata;)V
@3.0.0
-#sendOffsetsToTransaction(Ljava/util/Map;Ljava/lang/String;)V[deprecated]
-#sendOffsetsToTransaction(Ljava/util/Map;)V[deprecated]

+###org/springframework/kafka/core/ConsumerFactory$Listener
@2.5.0.RELEASE
+#consumerAdded(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#consumerRemoved(Ljava/lang/String;Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/core/ConsumerPostProcessor
@2.5.3.RELEASE

+###org/springframework/kafka/core/ProducerFactory$Listener
@2.5.0.RELEASE
+#producerAdded(Ljava/lang/String;Lorg/apache/kafka/clients/producer/Producer;)V
+#producerRemoved(Ljava/lang/String;Lorg/apache/kafka/clients/producer/Producer;)V

+###org/springframework/kafka/core/KafkaResourceFactory
@2.5.0.RELEASE
+#<init>()V
+#setBootstrapServersSupplier(Ljava/util/function/Supplier;)V

+###org/springframework/kafka/core/KafkaAdminOperations
@2.7.0
+#getConfigurationProperties()Ljava/util/Map;
+#createOrModifyTopics([Lorg/apache/kafka/clients/admin/NewTopic;)V
+#describeTopics([Ljava/lang/String;)Ljava/util/Map;
@3.0.0
+#clusterId()Ljava/lang/String;

+###org/springframework/kafka/core/MicrometerProducerListener
@2.5.0.RELEASE
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;)V
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/List;)V
+#producerAdded(Ljava/lang/String;Lorg/apache/kafka/clients/producer/Producer;)V
+#producerRemoved(Ljava/lang/String;Lorg/apache/kafka/clients/producer/Producer;)V

+###org/springframework/kafka/annotation/RetryTopicConfigurationProvider
@2.7.0
+#<init>(Lorg/springframework/beans/factory/BeanFactory;)V
+#<init>(Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
+#findRetryConfigurationFor([Ljava/lang/String;Ljava/lang/reflect/Method;Ljava/lang/Object;)Lorg/springframework/kafka/retrytopic/RetryTopicConfiguration;

+###org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor$AnnotationEnhancer
@2.7.2

+###org/springframework/kafka/annotation/DltHandler
@2.7.0

+###org/springframework/kafka/annotation/RetryableTopic
@2.7.0
+#attempts()Ljava/lang/String;
+#backoff()Lorg/springframework/retry/annotation/Backoff;
+#timeout()Ljava/lang/String;
+#kafkaTemplate()Ljava/lang/String;
+#listenerContainerFactory()Ljava/lang/String;
+#autoCreateTopics()Ljava/lang/String;
+#numPartitions()Ljava/lang/String;
+#replicationFactor()Ljava/lang/String;
+#include()[Ljava/lang/Class;
+#exclude()[Ljava/lang/Class;
+#includeNames()[Ljava/lang/String;
+#excludeNames()[Ljava/lang/String;
+#traversingCauses()Ljava/lang/String;
+#retryTopicSuffix()Ljava/lang/String;
+#dltTopicSuffix()Ljava/lang/String;
+#topicSuffixingStrategy()Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;
+#dltStrategy()Lorg/springframework/kafka/retrytopic/DltStrategy;
+#fixedDelayTopicStrategy()Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;
@2.8.0
+#autoStartDltHandler()Ljava/lang/String;
@3.0.0
+#concurrency()Ljava/lang/String;
@3.0.4
+#sameIntervalTopicReuseStrategy()Lorg/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy;
*#fixedDelayTopicStrategy()Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;[deprecated]

+###org/springframework/kafka/annotation/RetryableTopicAnnotationProcessor
@2.7.0
+#<init>(Lorg/springframework/beans/factory/BeanFactory;)V
+#<init>(Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
+#processAnnotation([Ljava/lang/String;Ljava/lang/reflect/Method;Lorg/springframework/kafka/annotation/RetryableTopic;Ljava/lang/Object;)Lorg/springframework/kafka/retrytopic/RetryTopicConfiguration;

+###org/springframework/kafka/annotation/KafkaNullAwarePayloadArgumentResolver
@2.7.4
+#resolveArgument(Lorg/springframework/core/MethodParameter;Lorg/springframework/messaging/Message;)Ljava/lang/Object;

+###org/springframework/kafka/KafkaException$Level
@2.5.0.RELEASE
+#values()[Lorg/springframework/kafka/KafkaException$Level;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/KafkaException$Level;

+###org/springframework/kafka/event/ConsumerStoppedEvent$Reason
@2.5.8.RELEASE
+#values()[Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/event/ConsumerStoppedEvent$Reason;
@2.6.0
-###org/springframework/kafka/event/ConsumerStoppedEvent$Reason

+###org/springframework/kafka/event/ConsumerPartitionResumedEvent
@2.7.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/common/TopicPartition;)V
+#getPartition()Lorg/apache/kafka/common/TopicPartition;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ListenerContainerNoLongerIdleEvent
@2.6.2
+#<init>(Ljava/lang/Object;Ljava/lang/Object;JLjava/lang/String;Ljava/util/Collection;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#getTopicPartitions()Ljava/util/Collection;
+#getIdleTime()J
+#getListenerId()Ljava/lang/String;
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ListenerContainerPartitionIdleEvent
@2.7.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;JLjava/lang/String;Lorg/apache/kafka/common/TopicPartition;Lorg/apache/kafka/clients/consumer/Consumer;Z)V
+#getIdleTime()J
+#getTopicPartition()Lorg/apache/kafka/common/TopicPartition;
+#getListenerId()Ljava/lang/String;
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#isPaused()Z
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ConsumerPartitionPausedEvent
@2.7.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/apache/kafka/common/TopicPartition;)V
+#getPartitions()Lorg/apache/kafka/common/TopicPartition;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ListenerContainerPartitionNoLongerIdleEvent
@2.7.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;JLjava/lang/String;Lorg/apache/kafka/common/TopicPartition;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#getTopicPartition()Lorg/apache/kafka/common/TopicPartition;
+#getIdleTime()J
+#getListenerId()Ljava/lang/String;
+#getConsumer()Lorg/apache/kafka/clients/consumer/Consumer;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/retrytopic/DefaultDestinationTopicResolver
@2.7.0
+#<init>(Ljava/time/Clock;)V
+#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getDestinationTopicByName(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#addDestinationTopics(Ljava/util/List;)V
+#onApplicationEvent(Lorg/springframework/context/event/ContextRefreshedEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.7.8
+#<init>(Ljava/time/Clock;Lorg/springframework/context/ApplicationContext;)V
+#isContextRefreshed()Z
-#<init>(Ljava/time/Clock;)V
@2.9.0
*#<init>(Ljava/time/Clock;Lorg/springframework/context/ApplicationContext;)V[deprecated]
+#<init>(Ljava/time/Clock;)V
+#<init>()V
+#getDltFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getNextDestinationTopicFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@3.0.0
+#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getDestinationTopicByName(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getDltFor(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getNextDestinationTopicFor(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#addDestinationTopics(Ljava/lang/String;Ljava/util/List;)V
-#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#getDestinationTopicByName(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#getDltFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#getNextDestinationTopicFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#addDestinationTopics(Ljava/util/List;)V

+###org/springframework/kafka/retrytopic/DestinationTopicPropertiesFactory
@2.7.0
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lorg/springframework/classify/BinaryExceptionClassifier;ILorg/springframework/kafka/core/KafkaOperations;Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;Lorg/springframework/kafka/retrytopic/DltStrategy;Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;J)V
+#createProperties()Ljava/util/List;
@2.8.0
+#autoStartDltHandler(Ljava/lang/Boolean;)Lorg/springframework/kafka/retrytopic/DestinationTopicPropertiesFactory;
@3.0.4
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lorg/springframework/classify/BinaryExceptionClassifier;ILorg/springframework/kafka/core/KafkaOperations;Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;Lorg/springframework/kafka/retrytopic/DltStrategy;Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;Lorg/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy;J)V

+###org/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory$RetryTopicNamesProvider
@2.7.1
+#getEndpointId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getGroupId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getClientIdPrefix(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getGroup(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getTopicName(Ljava/lang/String;)Ljava/lang/String;
@2.9.0
+#getEndpointId(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getGroupId(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getClientIdPrefix(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getGroup(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
-#getEndpointId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getGroupId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getClientIdPrefix(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getGroup(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;

+###org/springframework/kafka/retrytopic/FixedDelayStrategy
@2.7.0
+#values()[Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;

+###org/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory
@2.7.1
+#createRetryTopicNamesProvider(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;)Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory$RetryTopicNamesProvider;

+###org/springframework/kafka/retrytopic/DeadLetterPublishingRecovererFactory
@2.7.0
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;)V
+#create()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer;
+#setDeadLetterPublishingRecovererCustomizer(Ljava/util/function/Consumer;)V
@2.7.13
+#neverLogListenerException()V
+#alwaysLogListenerException()V
@2.8.0
+#addNotRetryableException(Ljava/lang/Class;)V
+#removeNotRetryableException(Ljava/lang/Class;)Z
-#neverLogListenerException()V
-#alwaysLogListenerException()V
@2.8.4
+#setHeadersFunction(Ljava/util/function/BiFunction;)V
@2.8.5
+#neverLogListenerException()V
+#alwaysLogListenerException()V
@2.9.2
+#setPartitionResolver(Ljava/util/function/BiFunction;)V
@2.9.6
+#setRetainAllRetryHeaderValues(Z)V
@3.0.0
+#create(Ljava/lang/String;)Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer;
-#setRetainAllRetryHeaderValues(Z)V
-#create()Lorg/springframework/kafka/listener/DeadLetterPublishingRecoverer;
@3.0.3
+#setRetainAllRetryHeaderValues(Z)V

+###org/springframework/kafka/retrytopic/RetryTopicInternalBeanNames
@2.7.0
+#<init>()V
@2.9.0
-###org/springframework/kafka/retrytopic/RetryTopicInternalBeanNames

+###org/springframework/kafka/retrytopic/DestinationTopicResolver
@2.7.0
+#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;
@3.0.0
+#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#resolveDestinationTopic(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Exception;J)Lorg/springframework/kafka/retrytopic/DestinationTopic;

+###org/springframework/kafka/retrytopic/RetryTopicBootstrapper
@2.7.0
+#<init>(Lorg/springframework/context/ApplicationContext;Lorg/springframework/beans/factory/BeanFactory;)V
+#bootstrapRetryTopic()V
@2.9.0
-###org/springframework/kafka/retrytopic/RetryTopicBootstrapper

+###org/springframework/kafka/retrytopic/EndpointCustomizerFactory
@2.7.2
+#createEndpointCustomizer()Lorg/springframework/kafka/retrytopic/EndpointCustomizer;
@2.7.13
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V
@2.8.0
-#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V
@2.8.5
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Lorg/springframework/kafka/support/EndpointHandlerMethod;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V

+###org/springframework/kafka/retrytopic/DestinationTopicPropertiesFactory$DestinationTopicSuffixes
@2.7.0
+#<init>(Ljava/lang/String;Ljava/lang/String;)V
+#getRetrySuffix()Ljava/lang/String;
+#getDltSuffix()Ljava/lang/String;

+###org/springframework/kafka/retrytopic/DestinationTopic$Properties
@2.7.0
+#<init>(JLjava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Type;IILorg/springframework/kafka/retrytopic/DltStrategy;Lorg/springframework/kafka/core/KafkaOperations;Ljava/util/function/BiPredicate;J)V
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Type;)V
+#isDltTopic()Z
+#suffix()Ljava/lang/String;
+#delay()J
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#isMainEndpoint()Z
@2.7.2
+#toString()Ljava/lang/String;
@2.7.13
+#numPartitions()I
@2.8.0
+#<init>(JLjava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Type;IILorg/springframework/kafka/retrytopic/DltStrategy;Lorg/springframework/kafka/core/KafkaOperations;Ljava/util/function/BiPredicate;JLjava/lang/Boolean;)V
+#autoStartDltHandler()Ljava/lang/Boolean;
-#numPartitions()I
@2.8.5
+#numPartitions()I
@3.0.4
+#isRetryTopic()Z

+###org/springframework/kafka/retrytopic/EndpointCustomizer$TopicNamesHolder
@2.7.2

+###org/springframework/kafka/retrytopic/DefaultDestinationTopicProcessor
@2.7.0
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;)V
+#processDestinationTopicProperties(Ljava/util/function/Consumer;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V
+#registerDestinationTopic(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V
+#processRegisteredDestinations(Ljava/util/function/Consumer;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V

+###org/springframework/kafka/retrytopic/RetryTopicConfigurer$EndpointProcessor
@2.7.0
+#process(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)V

+###org/springframework/kafka/retrytopic/DestinationTopicProcessor
@2.7.0
+#processDestinationTopicProperties(Ljava/util/function/Consumer;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V
+#processRegisteredDestinations(Ljava/util/function/Consumer;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V
+#registerDestinationTopic(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor$Context;)V

+###org/springframework/kafka/retrytopic/ListenerContainerFactoryResolver
@2.7.0
@2.9.0
+#<init>(Lorg/springframework/beans/factory/BeanFactory;)V

+###org/springframework/kafka/retrytopic/SuffixingRetryTopicNamesProviderFactory$SuffixingRetryTopicNamesProvider
@2.7.1
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;)V
+#getEndpointId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getGroupId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getClientIdPrefix(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getGroup(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
+#getTopicName(Ljava/lang/String;)Ljava/lang/String;
@2.9.0
+#getEndpointId(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getGroupId(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getClientIdPrefix(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
+#getGroup(Lorg/springframework/kafka/config/KafkaListenerEndpoint;)Ljava/lang/String;
-#getEndpointId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getGroupId(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getClientIdPrefix(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;
-#getGroup(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/lang/String;

+###org/springframework/kafka/retrytopic/RetryTopicConfigurer
@2.7.0
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/beans/factory/BeanFactory;)V
+#processMainAndRetryListeners(Lorg/springframework/kafka/retrytopic/RetryTopicConfigurer$EndpointProcessor;Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;Lorg/springframework/kafka/retrytopic/RetryTopicConfiguration;Lorg/springframework/kafka/config/KafkaListenerEndpointRegistrar;Lorg/springframework/kafka/config/KafkaListenerContainerFactory;Ljava/lang/String;)V
+#createHandlerMethodWith(Ljava/lang/Class;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
+#createHandlerMethodWith(Ljava/lang/Object;Ljava/lang/reflect/Method;)Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
@2.7.1
*#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/beans/factory/BeanFactory;)V[deprecated]
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V
@2.8.0
+#createHandlerMethodWith(Ljava/lang/Object;Ljava/lang/String;)Lorg/springframework/kafka/support/EndpointHandlerMethod;
+#createHandlerMethodWith(Ljava/lang/Object;Ljava/lang/reflect/Method;)Lorg/springframework/kafka/support/EndpointHandlerMethod;
-#createHandlerMethodWith(Ljava/lang/Class;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
-#createHandlerMethodWith(Ljava/lang/Object;Ljava/lang/reflect/Method;)Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
@2.8.3
+#useLegacyFactoryConfigurer(Z)V[deprecated]
@2.9.0
*#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/beans/factory/BeanFactory;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V[deprecated]
+#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
-#useLegacyFactoryConfigurer(Z)V[deprecated]
@3.0.0
-#<init>(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/beans/factory/BeanFactory;)V[deprecated]

+###org/springframework/kafka/retrytopic/DltStrategy
@2.7.0
+#values()[Lorg/springframework/kafka/retrytopic/DltStrategy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DltStrategy;

+###org/springframework/kafka/retrytopic/DestinationTopic
@2.7.0
+#<init>(Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;)V
+#<init>(Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic;Ljava/lang/String;Lorg/springframework/kafka/retrytopic/DestinationTopic$Type;)V
+#getDestinationDelay()Ljava/lang/Long;
+#getDestinationPartitions()Ljava/lang/Integer;
+#isAlwaysRetryOnDltFailure()Z
+#isDltTopic()Z
+#isNoOpsTopic()Z
+#isSingleTopicRetry()Z
+#isMainTopic()Z
+#getDestinationName()Ljava/lang/String;
+#getKafkaOperations()Lorg/springframework/kafka/core/KafkaOperations;
+#shouldRetryOn(Ljava/lang/Integer;Ljava/lang/Throwable;)Z
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#getDestinationTimeout()J
@2.7.2
+#toString()Ljava/lang/String;
@3.0.4
+#isReusableRetryTopic()Z
*#isSingleTopicRetry()Z[deprecated]

+###org/springframework/kafka/retrytopic/DestinationTopicContainer
@2.7.0
+#addDestinationTopics(Ljava/util/List;)V
+#getDestinationTopicByName(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
@2.9.0
+#getNextDestinationTopicFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getDltFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
@3.0.0
+#addDestinationTopics(Ljava/lang/String;Ljava/util/List;)V
+#getDestinationTopicByName(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getNextDestinationTopicFor(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
+#getDltFor(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#addDestinationTopics(Ljava/util/List;)V
-#getDestinationTopicByName(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#getNextDestinationTopicFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;
-#getDltFor(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/DestinationTopic;

+###org/springframework/kafka/retrytopic/DestinationTopicProcessor$Context
@2.7.0
+#<init>(Ljava/util/List;)V
@3.0.0
+#<init>(Ljava/lang/String;Ljava/util/List;)V
-#<init>(Ljava/util/List;)V

+###org/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder
@2.7.0
+#<init>()V
+#dltHandlerMethod(Ljava/lang/Class;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#dltHandlerMethod(Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#doNotRetryOnDltFailure()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#dltProcessingFailureStrategy(Lorg/springframework/kafka/retrytopic/DltStrategy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#doNotConfigureDlt()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#includeTopics(Ljava/util/List;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#excludeTopics(Ljava/util/List;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#includeTopic(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#excludeTopic(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#retryTopicSuffix(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#dltSuffix(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#suffixTopicsWithIndexValues()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#setTopicSuffixingStrategy(Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#maxAttempts(I)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#timeoutAfter(J)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#exponentialBackoff(JDJ)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#exponentialBackoff(JDJZ)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#fixedBackOff(J)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#uniformRandomBackoff(JJ)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#noBackoff()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#customBackoff(Lorg/springframework/retry/backoff/SleepingBackOffPolicy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#fixedBackOff(I)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#useSingleTopicForFixedDelays()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#useSingleTopicForFixedDelays(Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#doNotAutoCreateRetryTopics()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#autoCreateTopicsWith(IS)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#autoCreateTopics(ZIS)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#retryOn(Ljava/lang/Class;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#notRetryOn(Ljava/lang/Class;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#retryOn(Ljava/util/List;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#notRetryOn(Ljava/util/List;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#traversingCauses()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#traversingCauses(Z)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#listenerFactory(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#listenerFactory(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#create(Lorg/springframework/kafka/core/KafkaOperations;)Lorg/springframework/kafka/retrytopic/RetryTopicConfiguration;
+#newInstance()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
@2.8.0
*#dltHandlerMethod(Ljava/lang/Class;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;[deprecated]
+#dltHandlerMethod(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#dltHandlerMethod(Lorg/springframework/kafka/support/EndpointHandlerMethod;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#autoStartDltHandler(Ljava/lang/Boolean;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
-#dltHandlerMethod(Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
@3.0.0
+#concurrency(Ljava/lang/Integer;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
-#dltHandlerMethod(Ljava/lang/Class;Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;[deprecated]
@3.0.4
+#sameIntervalTopicReuseStrategy(Lorg/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
+#useSingleTopicForSameIntervals()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;
*#useSingleTopicForFixedDelays()Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;[deprecated]
*#useSingleTopicForFixedDelays(Lorg/springframework/kafka/retrytopic/FixedDelayStrategy;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder;[deprecated]

+###org/springframework/kafka/retrytopic/TopicSuffixingStrategy
@2.7.0
+#values()[Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/TopicSuffixingStrategy;

+###org/springframework/kafka/retrytopic/RetryTopicConfiguration
@2.7.0
+#hasConfigurationForTopics([Ljava/lang/String;)Z
+#forKafkaTopicAutoCreation()Lorg/springframework/kafka/retrytopic/RetryTopicConfiguration$TopicCreation;
+#forContainerFactoryResolver()Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver$Configuration;
+#forContainerFactoryConfigurer()Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;
+#getDltHandlerMethod()Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
+#getDestinationTopicProperties()Ljava/util/List;
@2.8.0
+#getDltHandlerMethod()Lorg/springframework/kafka/support/EndpointHandlerMethod;
-#getDltHandlerMethod()Lorg/springframework/kafka/retrytopic/EndpointHandlerMethod;
@3.0.0
+#getConcurrency()Ljava/lang/Integer;

+###org/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer
@2.7.0
+#configure(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;
+#configureWithoutBackOffValues(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;
+#setContainerCustomizer(Ljava/util/function/Consumer;)V
+#setErrorHandlerCustomizer(Ljava/util/function/Consumer;)V
@2.8.3
+#<init>(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Lorg/springframework/kafka/retrytopic/DeadLetterPublishingRecovererFactory;Ljava/time/Clock;)V
*#configure(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;[deprecated]
*#configureWithoutBackOffValues(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;[deprecated]
+#decorateFactory(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/KafkaListenerContainerFactory;
+#decorateFactoryWithoutSettingContainerProperties(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/KafkaListenerContainerFactory;
@2.8.4
+#setBlockingRetriesBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#setBlockingRetryableExceptions([Ljava/lang/Class;)V
@2.9.0
-#configure(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;[deprecated]
-#configureWithoutBackOffValues(Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer$Configuration;)Lorg/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory;[deprecated]
@3.0.0
+#setRetainStandardFatal(Z)V

+###org/springframework/kafka/retrytopic/BackOffValuesGenerator
@2.7.0
+#<init>(ILorg/springframework/retry/backoff/BackOffPolicy;)V
+#getMaxAttemps(I)I
+#generateValues()Ljava/util/List;

+###org/springframework/kafka/retrytopic/RetryTopicConstants
@2.7.0
+#<init>()V

+###org/springframework/kafka/retrytopic/SuffixingRetryTopicNamesProviderFactory
@2.7.1
+#<init>()V
+#createRetryTopicNamesProvider(Lorg/springframework/kafka/retrytopic/DestinationTopic$Properties;)Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory$RetryTopicNamesProvider;

+###org/springframework/kafka/retrytopic/EndpointCustomizer
@2.7.2
+#customizeEndpointAndCollectTopics(Lorg/springframework/kafka/config/MethodKafkaListenerEndpoint;)Ljava/util/Collection;

+###org/springframework/kafka/retrytopic/DefaultDestinationTopicResolver$DestinationTopicHolder
@2.7.0

+###org/springframework/kafka/retrytopic/RetryTopicHeaders
@2.7.0
+#<init>()V

+###org/springframework/kafka/streams/KafkaStreamsMicrometerListener
@2.5.3.RELEASE
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;)V
+#<init>(Lio/micrometer/core/instrument/MeterRegistry;Ljava/util/List;)V
+#streamsAdded(Ljava/lang/String;Lorg/apache/kafka/streams/KafkaStreams;)V
+#streamsRemoved(Ljava/lang/String;Lorg/apache/kafka/streams/KafkaStreams;)V

+###org/springframework/kafka/requestreply/RequestReplyTypedMessageFuture
@2.7.0
+#get()Lorg/springframework/messaging/Message;
+#get(JLjava/util/concurrent/TimeUnit;)Lorg/springframework/messaging/Message;
+#get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
+#get()Ljava/lang/Object;
@2.9.0
+#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture$Completable;
+#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable;
@3.0.0
-#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyTypedMessageFuture$Completable;
-#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable;

+###org/springframework/kafka/requestreply/RequestReplyMessageFuture
@2.7.0
+#getSendFuture()Lorg/springframework/util/concurrent/ListenableFuture;
@2.9.0
+#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable;
@3.0.0
+#getSendFuture()Ljava/util/concurrent/CompletableFuture;
-#getSendFuture()Lorg/springframework/util/concurrent/ListenableFuture;
-#asCompletable()Lorg/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable;

+###org/springframework/kafka/listener/config/ContainerProperties
@1.0.0.RELEASE
+#<init>([Ljava/lang/String;)V
+#<init>(Ljava/util/regex/Pattern;)V
+#<init>([Lorg/springframework/kafka/support/TopicPartitionInitialOffset;)V
+#setMessageListener(Ljava/lang/Object;)V
+#setAckMode(Lorg/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode;)V
+#setPollTimeout(J)V
+#setAckCount(I)V
+#setAckTime(J)V
+#setErrorHandler(Lorg/springframework/kafka/listener/ErrorHandler;)V
+#setConsumerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
+#setListenerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
+#setPauseAfter(J)V
+#setPauseEnabled(Z)V
+#setQueueDepth(I)V
+#setShutdownTimeout(J)V
+#setConsumerRebalanceListener(Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;)V
+#setCommitCallback(Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;)V
+#setSyncCommits(Z)V
+#setIdleEventInterval(Ljava/lang/Long;)V
+#setAckOnError(Z)V
+#getTopics()[Ljava/lang/String;
+#getTopicPattern()Ljava/util/regex/Pattern;
+#getTopicPartitions()[Lorg/springframework/kafka/support/TopicPartitionInitialOffset;
+#getAckMode()Lorg/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode;
+#getAckCount()I
+#getAckTime()J
+#getMessageListener()Ljava/lang/Object;
+#getPollTimeout()J
+#getConsumerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
+#getListenerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
+#getErrorHandler()Lorg/springframework/kafka/listener/ErrorHandler;
+#getPauseAfter()J
+#isPauseEnabled()Z
+#getQueueDepth()I
+#getShutdownTimeout()J
+#getConsumerRebalanceListener()Lorg/apache/kafka/clients/consumer/ConsumerRebalanceListener;
+#getCommitCallback()Lorg/apache/kafka/clients/consumer/OffsetCommitCallback;
+#isSyncCommits()Z
+#getIdleEventInterval()Ljava/lang/Long;
+#isAckOnError()Z
@1.1.0.RELEASE
+#setGenericErrorHandler(Lorg/springframework/kafka/listener/GenericErrorHandler;)V
+#getGenericErrorHandler()Lorg/springframework/kafka/listener/GenericErrorHandler;
-#getErrorHandler()Lorg/springframework/kafka/listener/ErrorHandler;
@1.3.0.RELEASE
+#setGroupId(Ljava/lang/String;)V
+#getGroupId()Ljava/lang/String;
+#getTransactionManager()Lorg/springframework/transaction/PlatformTransactionManager;
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
-#setListenerTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
-#setPauseAfter(J)V
-#setPauseEnabled(Z)V
-#setQueueDepth(I)V
-#getListenerTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
-#getPauseAfter()J
-#isPauseEnabled()Z
-#getQueueDepth()I
@1.3.1.RELEASE
+#getMonitorInterval()I
+#setMonitorInterval(I)V
+#getScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#setScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#getNoPollThreshold()F
+#setNoPollThreshold(F)V
@2.0.0.RELEASE
+#setBatchErrorHandler(Lorg/springframework/kafka/listener/BatchErrorHandler;)V
-#setGenericErrorHandler(Lorg/springframework/kafka/listener/GenericErrorHandler;)V
-#getMonitorInterval()I
-#setMonitorInterval(I)V
-#getScheduler()Lorg/springframework/scheduling/TaskScheduler;
-#setScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
-#getNoPollThreshold()F
-#setNoPollThreshold(F)V
@2.0.1.RELEASE
+#getMonitorInterval()I
+#setMonitorInterval(I)V
+#getScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#setScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#getNoPollThreshold()F
+#setNoPollThreshold(F)V
@2.1.1.RELEASE
+#getClientId()Ljava/lang/String;
+#setClientId(Ljava/lang/String;)V
+#isLogContainerConfig()Z
+#setLogContainerConfig(Z)V
+#toString()Ljava/lang/String;
@2.1.2.RELEASE
+#getCommitLogLevel()Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;
+#setCommitLogLevel(Lorg/springframework/kafka/support/LogIfLevelEnabled$Level;)V
@2.2.0.RELEASE
-###org/springframework/kafka/listener/config/ContainerProperties

+###org/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode
@1.0.0.RELEASE
+#values()[Lorg/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode;
@2.2.0.RELEASE
-###org/springframework/kafka/listener/AbstractMessageListenerContainer$AckMode

+###org/springframework/kafka/listener/adapter/MessagingMessageListenerAdapter$ResultHolder
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;)V
+#toString()Ljava/lang/String;
@2.2.0.RELEASE
-###org/springframework/kafka/listener/adapter/MessagingMessageListenerAdapter$ResultHolder

+###org/springframework/kafka/support/MimeTypeJsonDeserializer
@1.3.0.RELEASE
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#convert(Lcom/fasterxml/jackson/databind/JsonNode;Lcom/fasterxml/jackson/databind/DeserializationContext;)Lorg/springframework/util/MimeType;
+#convert(Lcom/fasterxml/jackson/databind/JsonNode;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;
@2.2.0.RELEASE
-###org/springframework/kafka/support/MimeTypeJsonDeserializer

+###org/springframework/kafka/core/StreamsBuilderFactoryBean
@2.1.0.RELEASE
+#<init>(Lorg/apache/kafka/streams/StreamsConfig;)V
+#<init>(Ljava/util/Map;)V
+#setClientSupplier(Lorg/apache/kafka/streams/KafkaClientSupplier;)V
+#setStateListener(Lorg/apache/kafka/streams/KafkaStreams$StateListener;)V
+#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V
+#setCloseTimeout(I)V
+#getObjectType()Ljava/lang/Class;
+#setAutoStartup(Z)V
+#setPhase(I)V
+#isAutoStartup()Z
+#stop(Ljava/lang/Runnable;)V
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
+#getKafkaStreams()Lorg/apache/kafka/streams/KafkaStreams;
@2.1.2.RELEASE
+#<init>(Lorg/apache/kafka/streams/StreamsConfig;Lorg/springframework/kafka/core/CleanupConfig;)V
+#<init>(Ljava/util/Map;Lorg/springframework/kafka/core/CleanupConfig;)V
@2.1.3.RELEASE
+#<init>()V
+#setStreamsConfig(Lorg/apache/kafka/streams/StreamsConfig;)V
@2.1.5.RELEASE
+#getStreamsConfig()Lorg/apache/kafka/streams/StreamsConfig;
+#setKafkaStreamsCustomizer(Lorg/springframework/kafka/core/KafkaStreamsCustomizer;)V
+#setStateRestoreListener(Lorg/apache/kafka/streams/processor/StateRestoreListener;)V
@2.2.0.RELEASE
-###org/springframework/kafka/core/StreamsBuilderFactoryBean

+###org/springframework/kafka/requestreply/ReplyingKafkaTemplate$TemplateRequestReplyFuture
@2.1.3.RELEASE
@2.3.0.RELEASE
-###org/springframework/kafka/requestreply/ReplyingKafkaTemplate$TemplateRequestReplyFuture

+###org/springframework/kafka/listener/adapter/AbstractMessageListenerAdapter
@1.1.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#registerSeekCallback(Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onPartitionsAssigned(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
+#onIdleContainer(Ljava/util/Map;Lorg/springframework/kafka/listener/ConsumerSeekAware$ConsumerSeekCallback;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/adapter/AbstractMessageListenerAdapter

+###org/springframework/kafka/listener/adapter/RetryingAcknowledgingMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/AcknowledgingMessageListener;Lorg/springframework/retry/support/RetryTemplate;)V
+#<init>(Lorg/springframework/kafka/listener/AcknowledgingMessageListener;Lorg/springframework/retry/support/RetryTemplate;Lorg/springframework/retry/RecoveryCallback;)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/adapter/RetryingAcknowledgingMessageListenerAdapter

+###org/springframework/kafka/listener/adapter/FilteringAcknowledgingMessageListenerAdapter
@1.0.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/AcknowledgingMessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;Z)V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;)V
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/adapter/FilteringAcknowledgingMessageListenerAdapter

+###org/springframework/kafka/listener/adapter/FilteringBatchAcknowledgingMessageListenerAdapter
@1.1.0.RELEASE
+#<init>(Lorg/springframework/kafka/listener/BatchAcknowledgingMessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;)V
+#<init>(Lorg/springframework/kafka/listener/BatchAcknowledgingMessageListener;Lorg/springframework/kafka/listener/adapter/RecordFilterStrategy;Z)V
+#onMessage(Ljava/util/List;Lorg/springframework/kafka/support/Acknowledgment;)V
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/adapter/FilteringBatchAcknowledgingMessageListenerAdapter

+###org/springframework/kafka/listener/KafkaDataListener
@1.1.0.RELEASE
@2.0.0.RELEASE
-###org/springframework/kafka/listener/KafkaDataListener

+###org/springframework/kafka/listener/GenericAcknowledgingMessageListener
@1.1.0.RELEASE
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;)V
@2.0.0.RELEASE
-###org/springframework/kafka/listener/GenericAcknowledgingMessageListener

+###org/springframework/kafka/support/DefaultKafkaHeaderMapper$SimplePatternBasedHeaderMatcher
@1.3.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#matchHeader(Ljava/lang/String;)Z
+#isNegated()Z
@2.1.3.RELEASE
-###org/springframework/kafka/support/DefaultKafkaHeaderMapper$SimplePatternBasedHeaderMatcher

+###org/springframework/kafka/core/KStreamBuilderFactoryBean
@1.1.4.RELEASE
+#<init>(Lorg/apache/kafka/streams/StreamsConfig;)V
+#<init>(Ljava/util/Map;)V
+#setClientSupplier(Lorg/apache/kafka/streams/KafkaClientSupplier;)V
+#getObjectType()Ljava/lang/Class;
+#setAutoStartup(Z)V
+#setPhase(I)V
+#isAutoStartup()Z
+#stop(Ljava/lang/Runnable;)V
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
@1.1.5.RELEASE
+#getKafkaStreams()Lorg/apache/kafka/streams/KafkaStreams;
@1.1.6.RELEASE
+#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V
@1.2.0.RELEASE
-#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V
-#getKafkaStreams()Lorg/apache/kafka/streams/KafkaStreams;
@1.2.1.RELEASE
+#getKafkaStreams()Lorg/apache/kafka/streams/KafkaStreams;
@1.2.2.RELEASE
+#setStateListener(Lorg/apache/kafka/streams/KafkaStreams$StateListener;)V
+#setUncaughtExceptionHandler(Ljava/lang/Thread$UncaughtExceptionHandler;)V
@1.3.0.RELEASE
+#setCloseTimeout(I)V
@2.1.0.RELEASE
-###org/springframework/kafka/core/KStreamBuilderFactoryBean

+###org/springframework/kafka/listener/ContainerPausingBackOffHandler
@2.9.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerPauseService;)V
+#onNextBackOff(Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Exception;J)V
+#onNextBackOff(Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/apache/kafka/common/TopicPartition;J)V

+###org/springframework/kafka/listener/ListenerContainerPauseService
@2.9.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/scheduling/TaskScheduler;)V
+#pause(Ljava/lang/String;Ljava/time/Duration;)V
+#pause(Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/time/Duration;)V
+#pausePartition(Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/apache/kafka/common/TopicPartition;Ljava/time/Duration;)V
+#resume(Ljava/lang/String;)V
+#resume(Lorg/springframework/kafka/listener/MessageListenerContainer;)V

+###org/springframework/kafka/listener/BackOffHandler
@2.9.0
+#onNextBackOff(Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Exception;J)V
+#onNextBackOff(Lorg/springframework/kafka/listener/MessageListenerContainer;Lorg/apache/kafka/common/TopicPartition;J)V

+###org/springframework/kafka/listener/ContainerPartitionPausingBackOffManagerFactory
@2.9.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/context/ApplicationContext;)V
+#setBackOffHandler(Lorg/springframework/kafka/listener/BackOffHandler;)V

+###org/springframework/kafka/listener/ManualAckListenerErrorHandler
@2.9.0
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;)Ljava/lang/Object;
+#handleError(Lorg/springframework/messaging/Message;Lorg/springframework/kafka/listener/ListenerExecutionFailedException;Lorg/apache/kafka/clients/consumer/Consumer;Lorg/springframework/kafka/support/Acknowledgment;)Ljava/lang/Object;

+###org/springframework/kafka/listener/DefaultBackOffHandler
@2.9.0
+#<init>()V
+#onNextBackOff(Lorg/springframework/kafka/listener/MessageListenerContainer;Ljava/lang/Exception;J)V

+###org/springframework/kafka/listener/ContainerPartitionPausingBackOffManager
@2.9.0
+#<init>(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/kafka/listener/BackOffHandler;)V
+#backOffIfNecessary(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager$Context;)V

+###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$SingleRecordHeader
@2.9.5
+#<init>(Ljava/lang/String;[B)V
+#<init>(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
@3.0.0
-###org/springframework/kafka/listener/DeadLetterPublishingRecoverer$SingleRecordHeader

+###org/springframework/kafka/core/KafkaOperations2
@2.9.0
+#sendDefault(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendDefault(Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Long;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/apache/kafka/clients/producer/ProducerRecord;)Ljava/util/concurrent/CompletableFuture;
+#send(Lorg/springframework/messaging/Message;)Ljava/util/concurrent/CompletableFuture;
+#partitionsFor(Ljava/lang/String;)Ljava/util/List;
+#metrics()Ljava/util/Map;
+#execute(Lorg/springframework/kafka/core/KafkaOperations$ProducerCallback;)Ljava/lang/Object;
+#executeInTransaction(Lorg/springframework/kafka/core/KafkaOperations$OperationsCallback;)Ljava/lang/Object;
+#flush()V
+#sendOffsetsToTransaction(Ljava/util/Map;Lorg/apache/kafka/clients/consumer/ConsumerGroupMetadata;)V
+#isTransactional()Z
+#isAllowNonTransactional()Z
+#inTransaction()Z
+#getProducerFactory()Lorg/springframework/kafka/core/ProducerFactory;
+#receive(Ljava/lang/String;IJ)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#receive(Ljava/lang/String;IJLjava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecord;
+#receive(Ljava/util/Collection;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;
+#receive(Ljava/util/Collection;Ljava/time/Duration;)Lorg/apache/kafka/clients/consumer/ConsumerRecords;

+###org/springframework/kafka/annotation/EnableKafkaRetryTopic
@2.9.0

+###org/springframework/kafka/retrytopic/RetryTopicBeanNames
@2.9.0

+###org/springframework/kafka/retrytopic/RetryTopicSchedulerWrapper
@2.9.0
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
+#getScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#afterPropertiesSet()V
+#destroy()V

+###org/springframework/kafka/retrytopic/RetryTopicComponentFactory
@2.9.0
+#<init>()V
+#retryTopicConfigurer(Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurer;
+#destinationTopicProcessor(Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;)Lorg/springframework/kafka/retrytopic/DestinationTopicProcessor;
+#destinationTopicResolver()Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;
+#deadLetterPublishingRecovererFactory(Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;)Lorg/springframework/kafka/retrytopic/DeadLetterPublishingRecovererFactory;
+#listenerContainerFactoryResolver(Lorg/springframework/beans/factory/BeanFactory;)Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryResolver;
+#listenerContainerFactoryConfigurer(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Lorg/springframework/kafka/retrytopic/DeadLetterPublishingRecovererFactory;Ljava/time/Clock;)Lorg/springframework/kafka/retrytopic/ListenerContainerFactoryConfigurer;
+#retryTopicNamesProviderFactory()Lorg/springframework/kafka/retrytopic/RetryTopicNamesProviderFactory;
+#kafkaBackOffManagerFactory(Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/context/ApplicationContext;)Lorg/springframework/kafka/listener/KafkaBackOffManagerFactory;
+#internalRetryTopicClock()Ljava/time/Clock;

+###org/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$BlockingRetriesConfigurer
@2.9.0
+#<init>()V
+#retryOn([Ljava/lang/Class;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$BlockingRetriesConfigurer;
+#backOff(Lorg/springframework/util/backoff/BackOff;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$BlockingRetriesConfigurer;

+###org/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$CustomizersConfigurer
@2.9.0
+#<init>()V
+#customizeErrorHandler(Ljava/util/function/Consumer;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$CustomizersConfigurer;
+#customizeListenerContainer(Ljava/util/function/Consumer;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$CustomizersConfigurer;
+#customizeDeadLetterPublishingRecoverer(Ljava/util/function/Consumer;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurationSupport$CustomizersConfigurer;

+###org/springframework/kafka/retrytopic/RetryTopicConfigurationSupport
@2.9.0
+#<init>()V
+#retryTopicConfigurer(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;Lorg/springframework/beans/factory/BeanFactory;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurer;
+#destinationTopicResolver()Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;
+#kafkaConsumerBackoffManager(Lorg/springframework/context/ApplicationContext;Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/kafka/retrytopic/RetryTopicSchedulerWrapper;Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;
@2.9.3
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#afterSingletonsInstantiated()V
@3.0.0
+#retryTopicConfigurer(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/beans/factory/BeanFactory;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurer;
+#destinationTopicResolver(Lorg/springframework/beans/factory/ObjectProvider;)Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;
+#kafkaConsumerBackoffManager(Lorg/springframework/context/ApplicationContext;Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/beans/factory/ObjectProvider;Lorg/springframework/kafka/retrytopic/RetryTopicSchedulerWrapper;Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;
-#retryTopicConfigurer(Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;Lorg/springframework/beans/factory/BeanFactory;)Lorg/springframework/kafka/retrytopic/RetryTopicConfigurer;
-#destinationTopicResolver()Lorg/springframework/kafka/retrytopic/DestinationTopicResolver;
-#kafkaConsumerBackoffManager(Lorg/springframework/context/ApplicationContext;Lorg/springframework/kafka/listener/ListenerContainerRegistry;Lorg/springframework/kafka/retrytopic/RetryTopicSchedulerWrapper;Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/kafka/listener/KafkaConsumerBackoffManager;

+###org/springframework/kafka/requestreply/RequestReplyFuture$Completable
@2.9.0
+#getSendFuture()Ljava/util/concurrent/CompletableFuture;
+#cancel(Z)Z
@3.0.0
-###org/springframework/kafka/requestreply/RequestReplyFuture$Completable

+###org/springframework/kafka/requestreply/RequestReplyTypedMessageFuture$Completable
@2.9.0
+#get()Lorg/springframework/messaging/Message;
+#get(JLjava/util/concurrent/TimeUnit;)Lorg/springframework/messaging/Message;
+#get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
+#get()Ljava/lang/Object;
@3.0.0
-###org/springframework/kafka/requestreply/RequestReplyTypedMessageFuture$Completable

+###org/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable
@2.9.0
+#getSendFuture()Ljava/util/concurrent/CompletableFuture;
+#cancel(Z)Z
@3.0.0
-###org/springframework/kafka/requestreply/RequestReplyMessageFuture$Completable

+###org/springframework/kafka/core/ClientIdSuffixAware
@1.0.6.RELEASE
+#createConsumer(Ljava/lang/String;)Lorg/apache/kafka/clients/consumer/Consumer;
@1.1.0.RELEASE
-###org/springframework/kafka/core/ClientIdSuffixAware

+###org/springframework/kafka/retrytopic/EndpointHandlerMethod
@2.7.0
+#<init>(Ljava/lang/Class;Ljava/lang/String;)V
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#getMethod()Ljava/lang/reflect/Method;
+#resolveBean(Lorg/springframework/beans/factory/BeanFactory;)Ljava/lang/Object;
@2.8.0
-###org/springframework/kafka/retrytopic/EndpointHandlerMethod

+###org/springframework/kafka/core/CompositeKafkaStreamsCustomizer
@2.1.5.RELEASE
+#<init>()V
+#<init>(Ljava/util/List;)V
+#customize(Lorg/apache/kafka/streams/KafkaStreams;)V
+#addKafkaStreamsCustomizers(Ljava/util/List;)V
@2.2.0.RELEASE
-###org/springframework/kafka/core/CompositeKafkaStreamsCustomizer

+###org/springframework/kafka/core/KafkaStreamsCustomizer
@2.1.5.RELEASE
+#customize(Lorg/apache/kafka/streams/KafkaStreams;)V
@2.2.0.RELEASE
-###org/springframework/kafka/core/KafkaStreamsCustomizer

+###org/springframework/kafka/listener/adapter/ConvertingMessageListener
@3.0.0
+#<init>(Lorg/springframework/kafka/listener/MessageListener;Ljava/lang/Class;)V
+#setMessageConverter(Lorg/springframework/messaging/converter/MessageConverter;)V
+#setKafkaHeaderMapper(Lorg/springframework/kafka/support/KafkaHeaderMapper;)V
+#getDelegate()Lorg/springframework/kafka/listener/MessageListener;
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V
+#getDelegate()Ljava/lang/Object;
+#onMessage(Ljava/lang/Object;Lorg/springframework/kafka/support/Acknowledgment;Lorg/apache/kafka/clients/consumer/Consumer;)V

+###org/springframework/kafka/support/micrometer/KafkaTemplateObservation$TemplateLowCardinalityTags
@3.0.0
+#values()[Lorg/springframework/kafka/support/micrometer/KafkaTemplateObservation$TemplateLowCardinalityTags;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/micrometer/KafkaTemplateObservation$TemplateLowCardinalityTags;

+###org/springframework/kafka/support/micrometer/KafkaRecordSenderContext
@3.0.0
+#<init>(Lorg/apache/kafka/clients/producer/ProducerRecord;Ljava/lang/String;Ljava/util/function/Supplier;)V
+#getBeanName()Ljava/lang/String;
+#getDestination()Ljava/lang/String;

+###org/springframework/kafka/support/micrometer/KafkaListenerObservation$DefaultKafkaListenerObservationConvention
@3.0.0
+#<init>()V
+#getLowCardinalityKeyValues(Lorg/springframework/kafka/support/micrometer/KafkaRecordReceiverContext;)Lio/micrometer/common/KeyValues;
+#getContextualName(Lorg/springframework/kafka/support/micrometer/KafkaRecordReceiverContext;)Ljava/lang/String;
+#getName()Ljava/lang/String;
+#getContextualName(Lio/micrometer/observation/Observation$Context;)Ljava/lang/String;
+#getLowCardinalityKeyValues(Lio/micrometer/observation/Observation$Context;)Lio/micrometer/common/KeyValues;

+###org/springframework/kafka/support/micrometer/KafkaTemplateObservationConvention
@3.0.0
+#supportsContext(Lio/micrometer/observation/Observation$Context;)Z
+#getName()Ljava/lang/String;

+###org/springframework/kafka/support/micrometer/KafkaRecordReceiverContext
@3.0.0
+#<init>(Lorg/apache/kafka/clients/consumer/ConsumerRecord;Ljava/lang/String;Ljava/util/function/Supplier;)V
+#getListenerId()Ljava/lang/String;
+#getSource()Ljava/lang/String;

+###org/springframework/kafka/support/micrometer/KafkaTemplateObservation$DefaultKafkaTemplateObservationConvention
@3.0.0
+#<init>()V
+#getLowCardinalityKeyValues(Lorg/springframework/kafka/support/micrometer/KafkaRecordSenderContext;)Lio/micrometer/common/KeyValues;
+#getContextualName(Lorg/springframework/kafka/support/micrometer/KafkaRecordSenderContext;)Ljava/lang/String;
+#getName()Ljava/lang/String;
+#getContextualName(Lio/micrometer/observation/Observation$Context;)Ljava/lang/String;
+#getLowCardinalityKeyValues(Lio/micrometer/observation/Observation$Context;)Lio/micrometer/common/KeyValues;

+###org/springframework/kafka/support/micrometer/KafkaListenerObservation
@3.0.0
+#values()[Lorg/springframework/kafka/support/micrometer/KafkaListenerObservation;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/micrometer/KafkaListenerObservation;

+###org/springframework/kafka/support/micrometer/KafkaListenerObservation$ListenerLowCardinalityTags
@3.0.0
+#values()[Lorg/springframework/kafka/support/micrometer/KafkaListenerObservation$ListenerLowCardinalityTags;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/micrometer/KafkaListenerObservation$ListenerLowCardinalityTags;

+###org/springframework/kafka/support/micrometer/KafkaTemplateObservation
@3.0.0
+#values()[Lorg/springframework/kafka/support/micrometer/KafkaTemplateObservation;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/support/micrometer/KafkaTemplateObservation;

+###org/springframework/kafka/support/micrometer/KafkaListenerObservationConvention
@3.0.0
+#supportsContext(Lio/micrometer/observation/Observation$Context;)Z
+#getName()Ljava/lang/String;

+###org/springframework/kafka/support/CompositeProducerInterceptor
@3.0.0
+#<init>([Lorg/apache/kafka/clients/producer/ProducerInterceptor;)V
+#onSend(Lorg/apache/kafka/clients/producer/ProducerRecord;)Lorg/apache/kafka/clients/producer/ProducerRecord;
+#onAcknowledgement(Lorg/apache/kafka/clients/producer/RecordMetadata;Ljava/lang/Exception;)V
+#close()V
+#configure(Ljava/util/Map;)V

+###org/springframework/kafka/event/ConsumerRetryAuthEvent$Reason
@3.0.0
+#values()[Lorg/springframework/kafka/event/ConsumerRetryAuthEvent$Reason;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/event/ConsumerRetryAuthEvent$Reason;

+###org/springframework/kafka/event/ConsumerRetryAuthSuccessfulEvent
@3.0.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#toString()Ljava/lang/String;

+###org/springframework/kafka/event/ConsumerRetryAuthEvent
@3.0.0
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Lorg/springframework/kafka/event/ConsumerRetryAuthEvent$Reason;)V
+#getReason()Lorg/springframework/kafka/event/ConsumerRetryAuthEvent$Reason;
+#toString()Ljava/lang/String;

+###org/springframework/kafka/aot/KafkaAvroBeanRegistrationAotProcessor
@3.0.0
+#<init>()V
+#processAheadOfTime(Lorg/springframework/beans/factory/support/RegisteredBean;)Lorg/springframework/beans/factory/aot/BeanRegistrationAotContribution;

+###org/springframework/kafka/aot/KafkaRuntimeHints
@3.0.0
+#<init>()V
+#registerHints(Lorg/springframework/aot/hint/RuntimeHints;Ljava/lang/ClassLoader;)V

+###org/springframework/kafka/streams/messaging/MessagingProcessor
@3.0.0
+#<init>(Lorg/springframework/kafka/streams/messaging/MessagingFunction;Lorg/springframework/kafka/support/converter/MessagingMessageConverter;)V
+#process(Lorg/apache/kafka/streams/processor/api/Record;)V
+#close()V

+###org/springframework/kafka/streams/HeaderEnricherProcessor
@3.0.0
+#<init>(Ljava/util/Map;)V
+#process(Lorg/apache/kafka/streams/processor/api/Record;)V
+#close()V

+###org/springframework/kafka/streams/HeaderEnricherProcessor$Container
@3.0.0
+#getContext()Lorg/apache/kafka/streams/processor/api/ProcessorContext;
+#getKey()Ljava/lang/Object;
+#getValue()Ljava/lang/Object;
+#getRecord()Lorg/apache/kafka/streams/processor/api/Record;

+###org/springframework/kafka/config/SimpleKafkaListenerEndpoint
@1.0.0.RELEASE
+#<init>()V
+#setMessageListener(Lorg/springframework/kafka/listener/MessageListener;)V
+#getMessageListener()Lorg/springframework/kafka/listener/MessageListener;
@1.1.0.RELEASE
-###org/springframework/kafka/config/SimpleKafkaListenerEndpoint

+###org/springframework/kafka/listener/adapter/AbstractAdaptableMessageListener
@1.0.0.RELEASE
+#<init>()V
+#onMessage(Lorg/apache/kafka/clients/consumer/ConsumerRecord;)V
@1.1.0.RELEASE
-###org/springframework/kafka/listener/adapter/AbstractAdaptableMessageListener

+###org/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy
@3.0.4
+#values()[Lorg/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/kafka/retrytopic/SameIntervalTopicReuseStrategy;
