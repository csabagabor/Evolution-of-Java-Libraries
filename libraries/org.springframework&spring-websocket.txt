
+###org/springframework/web/socket/PingMessage
@4.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/nio/ByteBuffer;)V
@4.0.3.RELEASE
+#getPayloadLength()I

+###org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer
@4.0.1.RELEASE
+#<init>()V
+#configureClientInboundChannel(Lorg/springframework/messaging/simp/config/ChannelRegistration;)V
+#configureClientOutboundChannel(Lorg/springframework/messaging/simp/config/ChannelRegistration;)V
+#configureMessageConverters(Ljava/util/List;)Z
+#configureMessageBroker(Lorg/springframework/messaging/simp/config/MessageBrokerRegistry;)V
@4.0.3.RELEASE
+#configureWebSocketTransport(Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;)V
@4.1.1.RELEASE
+#addArgumentResolvers(Ljava/util/List;)V
+#addReturnValueHandlers(Ljava/util/List;)V
@6.0.0
-###org/springframework/web/socket/config/annotation/AbstractWebSocketMessageBrokerConfigurer

+###org/springframework/web/socket/config/annotation/DelegatingWebSocketMessageBrokerConfiguration
@4.0.0.RELEASE
+#<init>()V
+#setConfigurers(Ljava/util/List;)V

+###org/springframework/web/socket/config/annotation/WebSocketConfigurationSupport
@4.0.0.RELEASE
+#<init>()V
+#webSocketHandlerMapping()Lorg/springframework/web/servlet/HandlerMapping;
+#defaultSockJsTaskScheduler()Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
@5.0.0.RELEASE
+#defaultSockJsTaskScheduler()Lorg/springframework/scheduling/TaskScheduler;
-#defaultSockJsTaskScheduler()Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
@5.3.2
+#webSocketHandlerMapping(Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/web/servlet/HandlerMapping;
-#webSocketHandlerMapping()Lorg/springframework/web/servlet/HandlerMapping;
@6.0.0
+#webSocketHandlerMapping(Lorg/springframework/web/socket/config/annotation/WebSocketConfigurationSupport$DefaultSockJsSchedulerContainer;)Lorg/springframework/web/servlet/HandlerMapping;
-#webSocketHandlerMapping(Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/web/servlet/HandlerMapping;
-#defaultSockJsTaskScheduler()Lorg/springframework/scheduling/TaskScheduler;

+###org/springframework/web/socket/config/annotation/AbstractWebSocketHandlerRegistration
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
+#addHandler(Lorg/springframework/web/socket/WebSocketHandler;[Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#setHandshakeHandler(Lorg/springframework/web/socket/server/HandshakeHandler;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#getHandshakeHandler()Lorg/springframework/web/socket/server/HandshakeHandler;
+#addInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#setInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)V
+#withSockJS()Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#getMappings()Ljava/lang/Object;
@4.1.0.RELEASE
-#getHandshakeHandler()Lorg/springframework/web/socket/server/HandshakeHandler;
-#setInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)V
-#getMappings()Ljava/lang/Object;
@4.1.2.RELEASE
+#setAllowedOrigins([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
@5.0.0.RELEASE
+#<init>()V
*#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]
@5.1.0.RELEASE
-#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]
@5.3.5
+#setAllowedOriginPatterns([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;

+###org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurer
@4.0.0.RELEASE
+#registerStompEndpoints(Lorg/springframework/web/socket/config/annotation/StompEndpointRegistry;)V
+#configureClientInboundChannel(Lorg/springframework/messaging/simp/config/ChannelRegistration;)V
+#configureClientOutboundChannel(Lorg/springframework/messaging/simp/config/ChannelRegistration;)V
+#configureMessageBroker(Lorg/springframework/messaging/simp/config/MessageBrokerRegistry;)V
@4.0.1.RELEASE
+#configureMessageConverters(Ljava/util/List;)Z
@4.0.3.RELEASE
+#configureWebSocketTransport(Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;)V
@4.1.1.RELEASE
+#addArgumentResolvers(Ljava/util/List;)V
+#addReturnValueHandlers(Ljava/util/List;)V

+###org/springframework/web/socket/config/annotation/DelegatingWebSocketConfiguration
@4.0.0.RELEASE
+#<init>()V
+#setConfigurers(Ljava/util/List;)V

+###org/springframework/web/socket/config/annotation/StompEndpointRegistry
@4.0.0.RELEASE
+#addEndpoint([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@4.2.0.RELEASE
+#setOrder(I)V
+#setUrlPathHelper(Lorg/springframework/web/util/UrlPathHelper;)V
+#setErrorHandler(Lorg/springframework/web/socket/messaging/StompSubProtocolErrorHandler;)Lorg/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry;

+###org/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration
@4.0.0.RELEASE
+#withSockJS()Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setHandshakeHandler(Lorg/springframework/web/socket/server/HandshakeHandler;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@4.1.0.RELEASE
+#addInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@4.1.2.RELEASE
+#setAllowedOrigins([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@5.3.2
+#setAllowedOriginPatterns([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;

+###org/springframework/web/socket/config/annotation/WebSocketHandlerRegistration
@4.0.0.RELEASE
+#addHandler(Lorg/springframework/web/socket/WebSocketHandler;[Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#addInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#setHandshakeHandler(Lorg/springframework/web/socket/server/HandshakeHandler;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#withSockJS()Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
@4.1.2.RELEASE
+#setAllowedOrigins([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
@5.3.5
+#setAllowedOriginPatterns([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;

+###org/springframework/web/socket/config/annotation/WebSocketTransportRegistration
@4.0.3.RELEASE
+#<init>()V
+#setMessageSizeLimit(I)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;
+#setSendTimeLimit(I)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;
+#setSendBufferSizeLimit(I)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;
@4.1.2.RELEASE
+#setDecoratorFactories([Lorg/springframework/web/socket/handler/WebSocketHandlerDecoratorFactory;)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;
+#addDecoratorFactory(Lorg/springframework/web/socket/handler/WebSocketHandlerDecoratorFactory;)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;
@5.1.0.RELEASE
+#setTimeToFirstMessage(I)Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;

+###org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
@5.0.0.RELEASE
+#<init>()V
*#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]
@5.1.0.RELEASE
-#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]

+###org/springframework/web/socket/config/annotation/EnableWebSocketMessageBroker
@4.0.0.RELEASE

+###org/springframework/web/socket/config/annotation/WebSocketHandlerRegistry
@4.0.0.RELEASE
+#addHandler(Lorg/springframework/web/socket/WebSocketHandler;[Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;

+###org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/messaging/simp/user/UserSessionRegistry;Lorg/springframework/scheduling/TaskScheduler;)V
+#addEndpoint([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
+#setOrder(I)V
+#getOrder()I
+#getHandlerMapping()Lorg/springframework/web/servlet/handler/AbstractHandlerMapping;
@4.0.3.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;Lorg/springframework/messaging/simp/user/UserSessionRegistry;Lorg/springframework/scheduling/TaskScheduler;)V
-#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/messaging/simp/user/UserSessionRegistry;Lorg/springframework/scheduling/TaskScheduler;)V
@4.1.0.RELEASE
+#setUrlPathHelper(Lorg/springframework/web/util/UrlPathHelper;)V
+#getUrlPathHelper()Lorg/springframework/web/util/UrlPathHelper;
@4.2.0.RELEASE
+#setErrorHandler(Lorg/springframework/web/socket/messaging/StompSubProtocolErrorHandler;)Lorg/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry;
-#getOrder()I
-#getUrlPathHelper()Lorg/springframework/web/util/UrlPathHelper;
@5.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;Lorg/springframework/scheduling/TaskScheduler;)V
-#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/config/annotation/WebSocketTransportRegistration;Lorg/springframework/messaging/simp/user/UserSessionRegistry;Lorg/springframework/scheduling/TaskScheduler;)V

+###org/springframework/web/socket/config/annotation/SockJsServiceRegistration
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setClientLibraryUrl(Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setStreamBytesLimit(I)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setSessionCookieNeeded(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setHeartbeatTime(J)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setDisconnectDelay(J)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setHttpMessageCacheSize(I)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setWebSocketEnabled(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setTransportHandlers([Lorg/springframework/web/socket/sockjs/transport/TransportHandler;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setTransportHandlerOverrides([Lorg/springframework/web/socket/sockjs/transport/TransportHandler;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#setInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
@4.1.0.RELEASE
+#setMessageCodec(Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
@4.1.2.RELEASE
+#setSupressCors(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
@5.0.0.RELEASE
+#<init>()V
*#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]
@5.1.0.RELEASE
-#<init>(Lorg/springframework/scheduling/TaskScheduler;)V[deprecated]
@5.3.23
+#setSuppressCors(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
*#setSupressCors(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;[deprecated]
@6.0.0
-#setSupressCors(Z)Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;[deprecated]

+###org/springframework/web/socket/config/annotation/EnableWebSocket
@4.0.0.RELEASE

+###org/springframework/web/socket/config/annotation/WebMvcStompWebSocketEndpointRegistration
@4.0.0.RELEASE
+#<init>([Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/scheduling/TaskScheduler;)V
+#setHandshakeHandler(Lorg/springframework/web/socket/server/HandshakeHandler;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
+#withSockJS()Lorg/springframework/web/socket/config/annotation/SockJsServiceRegistration;
+#getMappings()Lorg/springframework/util/MultiValueMap;
@4.1.0.RELEASE
+#addInterceptors([Lorg/springframework/web/socket/server/HandshakeInterceptor;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@4.1.2.RELEASE
+#setAllowedOrigins([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;
@5.3.2
+#setAllowedOriginPatterns([Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/StompWebSocketEndpointRegistration;

+###org/springframework/web/socket/config/annotation/WebSocketConfigurer
@4.0.0.RELEASE
+#registerWebSocketHandlers(Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistry;)V

+###org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport
@4.0.0.RELEASE
+#stompWebSocketHandlerMapping()Lorg/springframework/web/servlet/HandlerMapping;
+#subProtocolWebSocketHandler()Lorg/springframework/web/socket/WebSocketHandler;
+#messageBrokerSockJsTaskScheduler()Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
@4.1.0.RELEASE
+#webSocketScopeConfigurer()Lorg/springframework/beans/factory/config/CustomScopeConfigurer;
+#webSocketMessageBrokerStats()Lorg/springframework/web/socket/config/WebSocketMessageBrokerStats;
@4.1.1.RELEASE
+#<init>()V
@4.2.0.RELEASE
-#messageBrokerSockJsTaskScheduler()Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;
@5.3.2
+#stompWebSocketHandlerMapping(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/web/servlet/HandlerMapping;
+#subProtocolWebSocketHandler(Lorg/springframework/messaging/support/AbstractSubscribableChannel;Lorg/springframework/messaging/support/AbstractSubscribableChannel;)Lorg/springframework/web/socket/WebSocketHandler;
+#webSocketMessageBrokerStats(Lorg/springframework/messaging/simp/broker/AbstractBrokerMessageHandler;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/core/task/TaskExecutor;Lorg/springframework/core/task/TaskExecutor;Lorg/springframework/scheduling/TaskScheduler;)Lorg/springframework/web/socket/config/WebSocketMessageBrokerStats;
-#stompWebSocketHandlerMapping()Lorg/springframework/web/servlet/HandlerMapping;
-#subProtocolWebSocketHandler()Lorg/springframework/web/socket/WebSocketHandler;
-#webSocketMessageBrokerStats()Lorg/springframework/web/socket/config/WebSocketMessageBrokerStats;

+###org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistry
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;)V
+#addHandler(Lorg/springframework/web/socket/WebSocketHandler;[Ljava/lang/String;)Lorg/springframework/web/socket/config/annotation/WebSocketHandlerRegistration;
+#getHandlerMapping()Lorg/springframework/web/servlet/handler/AbstractHandlerMapping;
@4.1.0.RELEASE
+#setOrder(I)V
+#getOrder()I
+#setUrlPathHelper(Lorg/springframework/web/util/UrlPathHelper;)V
+#getUrlPathHelper()Lorg/springframework/web/util/UrlPathHelper;
@5.0.0.RELEASE
+#<init>()V
*#<init>(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;)V[deprecated]
@5.1.0.RELEASE
-#<init>(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;)V[deprecated]

+###org/springframework/web/socket/config/WebSocketMessageBrokerStats
@4.1.0.RELEASE
+#<init>()V
+#setSubProtocolWebSocketHandler(Lorg/springframework/web/socket/messaging/SubProtocolWebSocketHandler;)V
+#setStompBrokerRelay(Lorg/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler;)V
+#setInboundChannelExecutor(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;)V
+#setOutboundChannelExecutor(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;)V
+#setSockJsTaskScheduler(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;)V
+#setLoggingPeriod(J)V
+#getLoggingPeriod()J
+#getWebSocketSessionStatsInfo()Ljava/lang/String;
+#getStompSubProtocolStatsInfo()Ljava/lang/String;
+#getStompBrokerRelayStatsInfo()Ljava/lang/String;
+#getClientInboundExecutorStatsInfo()Ljava/lang/String;
+#getClientOutboundExecutorStatsInfo()Ljava/lang/String;
+#getSockJsTaskSchedulerStatsInfo()Ljava/lang/String;
+#toString()Ljava/lang/String;
@5.2.0.RELEASE
+#setInboundChannelExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#setOutboundChannelExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#setSockJsTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
-#setInboundChannelExecutor(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;)V
-#setOutboundChannelExecutor(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;)V
-#setSockJsTaskScheduler(Lorg/springframework/scheduling/concurrent/ThreadPoolTaskScheduler;)V

+###org/springframework/web/socket/config/WebSocketNamespaceHandler
@4.0.0.RELEASE
+#<init>()V
+#init()V

+###org/springframework/web/socket/WebSocketHttpHeaders
@4.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/http/HttpHeaders;)V
+#readOnlyWebSocketHttpHeaders(Lorg/springframework/web/socket/WebSocketHttpHeaders;)Lorg/springframework/web/socket/WebSocketHttpHeaders;
+#setSecWebSocketAccept(Ljava/lang/String;)V
+#getSecWebSocketAccept()Ljava/lang/String;
+#getSecWebSocketExtensions()Ljava/util/List;
+#setSecWebSocketExtensions(Ljava/util/List;)V
+#setSecWebSocketKey(Ljava/lang/String;)V
+#getSecWebSocketKey()Ljava/lang/String;
+#setSecWebSocketProtocol(Ljava/lang/String;)V
+#setSecWebSocketProtocol(Ljava/util/List;)V
+#getSecWebSocketProtocol()Ljava/util/List;
+#setSecWebSocketVersion(Ljava/lang/String;)V
+#getSecWebSocketVersion()Ljava/lang/String;
+#getFirst(Ljava/lang/String;)Ljava/lang/String;
+#add(Ljava/lang/String;Ljava/lang/String;)V
+#set(Ljava/lang/String;Ljava/lang/String;)V
+#setAll(Ljava/util/Map;)V
+#toSingleValueMap()Ljava/util/Map;
+#size()I
+#isEmpty()Z
+#containsKey(Ljava/lang/Object;)Z
+#containsValue(Ljava/lang/Object;)Z
+#get(Ljava/lang/Object;)Ljava/util/List;
+#put(Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
+#remove(Ljava/lang/Object;)Ljava/util/List;
+#putAll(Ljava/util/Map;)V
+#clear()V
+#keySet()Ljava/util/Set;
+#values()Ljava/util/Collection;
+#entrySet()Ljava/util/Set;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
+#set(Ljava/lang/Object;Ljava/lang/Object;)V
+#add(Ljava/lang/Object;Ljava/lang/Object;)V
+#getFirst(Ljava/lang/Object;)Ljava/lang/Object;
+#remove(Ljava/lang/Object;)Ljava/lang/Object;
+#put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
+#get(Ljava/lang/Object;)Ljava/lang/Object;
@5.1.16.RELEASE
*#readOnlyWebSocketHttpHeaders(Lorg/springframework/web/socket/WebSocketHttpHeaders;)Lorg/springframework/web/socket/WebSocketHttpHeaders;[deprecated]
@5.2.7.RELEASE
*#readOnlyWebSocketHttpHeaders(Lorg/springframework/web/socket/WebSocketHttpHeaders;)Lorg/springframework/web/socket/WebSocketHttpHeaders;[deprecated]
@6.0.0
-#readOnlyWebSocketHttpHeaders(Lorg/springframework/web/socket/WebSocketHttpHeaders;)Lorg/springframework/web/socket/WebSocketHttpHeaders;[deprecated]

+###org/springframework/web/socket/AbstractWebSocketMessage
@4.0.0.RELEASE
+#getPayload()Ljava/lang/Object;
+#isLast()Z
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/client/jetty/JettyWebSocketClient
@4.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/eclipse/jetty/websocket/client/WebSocketClient;)V
+#setTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
+#setAutoStartup(Z)V
+#isAutoStartup()Z
+#setPhase(I)V
+#getPhase()I
+#isRunning()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#doHandshakeInternal(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/http/HttpHeaders;Ljava/net/URI;Ljava/util/List;Ljava/util/List;Ljava/util/Map;)Lorg/springframework/util/concurrent/ListenableFuture;
@4.1.0.RELEASE
-#setAutoStartup(Z)V
-#isAutoStartup()Z
-#setPhase(I)V
-#getPhase()I
-#stop(Ljava/lang/Runnable;)V
@6.0.0
+#setTaskExecutor(Lorg/springframework/core/task/AsyncTaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/AsyncTaskExecutor;
+#executeInternal(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/http/HttpHeaders;Ljava/net/URI;Ljava/util/List;Ljava/util/List;Ljava/util/Map;)Ljava/util/concurrent/CompletableFuture;
-#setTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
-#getTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
-#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#doHandshakeInternal(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/http/HttpHeaders;Ljava/net/URI;Ljava/util/List;Ljava/util/List;Ljava/util/Map;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/web/socket/client/ConnectionManagerSupport
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;[Ljava/lang/Object;)V
+#setAutoStartup(Z)V
+#isAutoStartup()Z
+#setPhase(I)V
+#getPhase()I
+#isRunning()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
@5.3.23
+#isConnected()Z
@6.0.5
+#<init>(Ljava/net/URI;)V

+###org/springframework/web/socket/client/WebSocketConnectionManager
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/client/WebSocketClient;Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)V
+#setSubProtocols(Ljava/util/List;)V
+#getSubProtocols()Ljava/util/List;
+#setOrigin(Ljava/lang/String;)V
+#getOrigin()Ljava/lang/String;
+#setHeaders(Lorg/springframework/http/HttpHeaders;)V
+#getHeaders()Lorg/springframework/http/HttpHeaders;
+#startInternal()V
+#stopInternal()V
@5.3.23
+#isConnected()Z
@6.0.5
+#<init>(Lorg/springframework/web/socket/client/WebSocketClient;Lorg/springframework/web/socket/WebSocketHandler;Ljava/net/URI;)V

+###org/springframework/web/socket/client/standard/AnnotatedEndpointConnectionManager
@4.0.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V
+#<init>(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
+#setWebSocketContainer(Ljavax/websocket/WebSocketContainer;)V
+#getWebSocketContainer()Ljavax/websocket/WebSocketContainer;
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/TaskExecutor;
@5.3.23
+#isConnected()Z
@6.0.0
+#setWebSocketContainer(Ljakarta/websocket/WebSocketContainer;)V
+#getWebSocketContainer()Ljakarta/websocket/WebSocketContainer;
-#setWebSocketContainer(Ljavax/websocket/WebSocketContainer;)V
-#getWebSocketContainer()Ljavax/websocket/WebSocketContainer;

+###org/springframework/web/socket/client/standard/StandardWebSocketClient
@4.0.0.RELEASE
+#<init>()V
+#<init>(Ljavax/websocket/WebSocketContainer;)V
+#setTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;
@4.2.0.RELEASE
+#setUserProperties(Ljava/util/Map;)V
+#getUserProperties()Ljava/util/Map;
@6.0.0
+#<init>(Ljakarta/websocket/WebSocketContainer;)V
+#setTaskExecutor(Lorg/springframework/core/task/AsyncTaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/AsyncTaskExecutor;
-#<init>(Ljavax/websocket/WebSocketContainer;)V
-#setTaskExecutor(Lorg/springframework/core/task/AsyncListenableTaskExecutor;)V
-#getTaskExecutor()Lorg/springframework/core/task/AsyncListenableTaskExecutor;

+###org/springframework/web/socket/client/standard/EndpointConnectionManager
@4.0.0.RELEASE
+#<init>(Ljavax/websocket/Endpoint;Ljava/lang/String;[Ljava/lang/Object;)V
+#<init>(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
+#setSupportedProtocols([Ljava/lang/String;)V
+#setExtensions([Ljavax/websocket/Extension;)V
+#setEncoders(Ljava/util/List;)V
+#setDecoders(Ljava/util/List;)V
+#setConfigurator(Ljavax/websocket/ClientEndpointConfig$Configurator;)V
+#setWebSocketContainer(Ljavax/websocket/WebSocketContainer;)V
+#getWebSocketContainer()Ljavax/websocket/WebSocketContainer;
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/TaskExecutor;
@5.3.23
+#isConnected()Z
@6.0.0
+#<init>(Ljakarta/websocket/Endpoint;Ljava/lang/String;[Ljava/lang/Object;)V
+#setExtensions([Ljakarta/websocket/Extension;)V
+#setConfigurator(Ljakarta/websocket/ClientEndpointConfig$Configurator;)V
+#setWebSocketContainer(Ljakarta/websocket/WebSocketContainer;)V
+#getWebSocketContainer()Ljakarta/websocket/WebSocketContainer;
-#<init>(Ljavax/websocket/Endpoint;Ljava/lang/String;[Ljava/lang/Object;)V
-#setExtensions([Ljavax/websocket/Extension;)V
-#setConfigurator(Ljavax/websocket/ClientEndpointConfig$Configurator;)V
-#setWebSocketContainer(Ljavax/websocket/WebSocketContainer;)V
-#getWebSocketContainer()Ljavax/websocket/WebSocketContainer;

+###org/springframework/web/socket/client/standard/WebSocketContainerFactoryBean
@4.0.0.RELEASE
+#<init>()V
+#setAsyncSendTimeout(J)V
+#getAsyncSendTimeout()J
+#setMaxSessionIdleTimeout(J)V
+#getMaxSessionIdleTimeout()J
+#setMaxTextMessageBufferSize(I)V
+#getMaxTextMessageBufferSize()I
+#setMaxBinaryMessageBufferSize(I)V
+#getMaxBinaryMessageBufferSize()I
+#getObject()Ljavax/websocket/WebSocketContainer;
+#getObjectType()Ljava/lang/Class;
+#isSingleton()Z
+#getObject()Ljava/lang/Object;
@6.0.0
+#getObject()Ljakarta/websocket/WebSocketContainer;
-#getObject()Ljavax/websocket/WebSocketContainer;

+###org/springframework/web/socket/client/AbstractWebSocketClient
@4.0.0.RELEASE
+#<init>()V
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;
@6.0.0
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Ljava/util/concurrent/CompletableFuture;
-#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/web/socket/client/WebSocketClient
@4.0.0.RELEASE
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;
@6.0.0
*#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
*#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Ljava/util/concurrent/CompletableFuture;

+###org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/adapter/jetty/JettyWebSocketSession;)V
+#onWebSocketConnect(Lorg/eclipse/jetty/websocket/api/Session;)V
+#onWebSocketText(Ljava/lang/String;)V
+#onWebSocketBinary([BII)V
+#onWebSocketFrame(Lorg/eclipse/jetty/websocket/api/extensions/Frame;)V
+#onWebSocketClose(ILjava/lang/String;)V
+#onWebSocketError(Ljava/lang/Throwable;)V
@6.0.0
+#onWebSocketFrame(Lorg/eclipse/jetty/websocket/api/Frame;)V
-#onWebSocketFrame(Lorg/eclipse/jetty/websocket/api/extensions/Frame;)V

+###org/springframework/web/socket/adapter/jetty/WebSocketToJettyExtensionConfigAdapter
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketExtension;)V

+###org/springframework/web/socket/adapter/jetty/JettyWebSocketSession
@4.0.0.RELEASE
+#<init>(Ljava/security/Principal;Ljava/util/Map;)V
+#getId()Ljava/lang/String;
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#isOpen()Z
@4.0.1.RELEASE
+#<init>(Ljava/util/Map;)V
+#<init>(Ljava/util/Map;Ljava/security/Principal;)V
-#<init>(Ljava/security/Principal;Ljava/util/Map;)V
@4.0.3.RELEASE
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
@4.0.4.RELEASE
+#initializeNativeSession(Lorg/eclipse/jetty/websocket/api/Session;)V
+#initializeNativeSession(Ljava/lang/Object;)V

+###org/springframework/web/socket/adapter/standard/StandardToWebSocketExtensionAdapter
@4.0.0.RELEASE
+#<init>(Ljavax/websocket/Extension;)V
@6.0.0
+#<init>(Ljakarta/websocket/Extension;)V
-#<init>(Ljavax/websocket/Extension;)V

+###org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport$TextDecoder
@4.0.0.RELEASE
+#<init>()V
+#willDecode(Ljava/lang/String;)Z
+#decode(Ljava/lang/String;)Ljava/lang/Object;

+###org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/adapter/standard/StandardWebSocketSession;)V
+#onOpen(Ljavax/websocket/Session;Ljavax/websocket/EndpointConfig;)V
+#onClose(Ljavax/websocket/Session;Ljavax/websocket/CloseReason;)V
+#onError(Ljavax/websocket/Session;Ljava/lang/Throwable;)V
@6.0.0
+#onOpen(Ljakarta/websocket/Session;Ljakarta/websocket/EndpointConfig;)V
+#onClose(Ljakarta/websocket/Session;Ljakarta/websocket/CloseReason;)V
+#onError(Ljakarta/websocket/Session;Ljava/lang/Throwable;)V
-#onOpen(Ljavax/websocket/Session;Ljavax/websocket/EndpointConfig;)V
-#onClose(Ljavax/websocket/Session;Ljavax/websocket/CloseReason;)V
-#onError(Ljavax/websocket/Session;Ljava/lang/Throwable;)V

+###org/springframework/web/socket/adapter/standard/WebSocketToStandardExtensionAdapter
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketExtension;)V
+#getName()Ljava/lang/String;
+#getParameters()Ljava/util/List;

+###org/springframework/web/socket/adapter/standard/StandardWebSocketSession
@4.0.0.RELEASE
+#<init>(Lorg/springframework/http/HttpHeaders;Ljava/util/Map;Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)V
+#getId()Ljava/lang/String;
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#isOpen()Z
@4.0.1.RELEASE
+#<init>(Lorg/springframework/http/HttpHeaders;Ljava/util/Map;Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;Ljava/security/Principal;)V
@4.0.3.RELEASE
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
@4.0.4.RELEASE
+#initializeNativeSession(Ljavax/websocket/Session;)V
+#initializeNativeSession(Ljava/lang/Object;)V
@6.0.0
+#initializeNativeSession(Ljakarta/websocket/Session;)V
-#initializeNativeSession(Ljavax/websocket/Session;)V

+###org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport$BinaryDecoder
@4.0.0.RELEASE
+#<init>()V
+#willDecode(Ljava/nio/ByteBuffer;)Z
+#decode(Ljava/nio/ByteBuffer;)Ljava/lang/Object;

+###org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport$TextEncoder
@4.0.0.RELEASE
+#<init>()V
+#encode(Ljava/lang/Object;)Ljava/lang/String;

+###org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport
@4.0.0.RELEASE
+#<init>()V
+#init(Ljavax/websocket/EndpointConfig;)V
+#destroy()V
+#encode(Ljava/lang/Object;)Ljava/lang/Object;
+#willDecode(Ljava/lang/Object;)Z
+#decode(Ljava/lang/Object;)Ljava/lang/Object;
@6.0.0
+#init(Ljakarta/websocket/EndpointConfig;)V
-#init(Ljavax/websocket/EndpointConfig;)V

+###org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport$BinaryEncoder
@4.0.0.RELEASE
+#<init>()V
+#encode(Ljava/lang/Object;)Ljava/nio/ByteBuffer;

+###org/springframework/web/socket/adapter/AbstractWebSocketSession
@4.0.0.RELEASE
+#<init>(Ljava/util/Map;)V
+#getHandshakeAttributes()Ljava/util/Map;
+#getNativeSession()Ljava/lang/Object;
+#getNativeSession(Ljava/lang/Class;)Ljava/lang/Object;
+#initializeNativeSession(Ljava/lang/Object;)V
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
+#close()V
+#close(Lorg/springframework/web/socket/CloseStatus;)V
+#toString()Ljava/lang/String;
@4.0.3.RELEASE
+#getAttributes()Ljava/util/Map;
-#getHandshakeAttributes()Ljava/util/Map;

+###org/springframework/web/socket/adapter/NativeWebSocketSession
@4.0.0.RELEASE
+#getNativeSession()Ljava/lang/Object;
+#getNativeSession(Ljava/lang/Class;)Ljava/lang/Object;

+###org/springframework/web/socket/SubProtocolCapable
@4.0.0.RELEASE
+#getSubProtocols()Ljava/util/List;

+###org/springframework/web/socket/messaging/SessionConnectedEvent
@4.0.3.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
+#getMessage()Lorg/springframework/messaging/Message;
+#toString()Ljava/lang/String;
@4.1.0.RELEASE
-#getMessage()Lorg/springframework/messaging/Message;
-#toString()Ljava/lang/String;
@4.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/security/Principal;)V

+###org/springframework/web/socket/messaging/WebSocketStompClient
@4.2.0.RELEASE
+#<init>(Lorg/springframework/web/socket/client/WebSocketClient;)V
+#getWebSocketClient()Lorg/springframework/web/socket/client/WebSocketClient;
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#setInboundMessageSizeLimit(I)V
+#getInboundMessageSizeLimit()I
+#setAutoStartup(Z)V
+#isAutoStartup()Z
+#isRunning()Z
+#setPhase(I)V
+#getPhase()I
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#connect(Ljava/lang/String;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#connect(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#connect(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#connect(Ljava/net/URI;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
@5.1.0.RELEASE
-#stop(Ljava/lang/Runnable;)V
@6.0.0
*#connect(Ljava/lang/String;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#connectAsync(Ljava/lang/String;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
*#connect(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#connectAsync(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
*#connect(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#connectAsync(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
*#connect(Ljava/net/URI;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#connectAsync(Ljava/net/URI;Lorg/springframework/web/socket/WebSocketHttpHeaders;Lorg/springframework/messaging/simp/stomp/StompHeaders;Lorg/springframework/messaging/simp/stomp/StompSessionHandler;)Ljava/util/concurrent/CompletableFuture;

+###org/springframework/web/socket/messaging/DefaultSimpUserRegistry
@4.2.0.RELEASE
+#<init>()V
+#getUser(Ljava/lang/String;)Lorg/springframework/messaging/simp/user/SimpUser;
+#getUsers()Ljava/util/Set;
+#findSubscriptions(Lorg/springframework/messaging/simp/user/SimpSubscriptionMatcher;)Ljava/util/Set;
+#supportsEventType(Ljava/lang/Class;)Z
+#supportsSourceType(Ljava/lang/Class;)Z
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
+#getOrder()I
+#toString()Ljava/lang/String;
@4.3.5.RELEASE
+#getUserCount()I
@5.0.8.RELEASE
+#setOrder(I)V

+###org/springframework/web/socket/messaging/SessionSubscribeEvent
@4.1.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
@4.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/security/Principal;)V

+###org/springframework/web/socket/messaging/SessionUnsubscribeEvent
@4.1.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
@4.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/security/Principal;)V

+###org/springframework/web/socket/messaging/SubProtocolErrorHandler
@4.2.0.RELEASE
+#handleClientMessageProcessingError(Lorg/springframework/messaging/Message;Ljava/lang/Throwable;)Lorg/springframework/messaging/Message;
+#handleErrorMessageToClient(Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/Message;

+###org/springframework/web/socket/messaging/SessionConnectEvent
@4.0.3.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;)V
+#getMessage()Lorg/springframework/messaging/Message;
+#toString()Ljava/lang/String;
@4.1.0.RELEASE
-#getMessage()Lorg/springframework/messaging/Message;
-#toString()Ljava/lang/String;
@4.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/security/Principal;)V

+###org/springframework/web/socket/messaging/WebSocketAnnotationMethodMessageHandler
@4.2.0.RELEASE
+#<init>(Lorg/springframework/messaging/SubscribableChannel;Lorg/springframework/messaging/MessageChannel;Lorg/springframework/messaging/simp/SimpMessageSendingOperations;)V
+#afterPropertiesSet()V

+###org/springframework/web/socket/messaging/SubProtocolWebSocketHandler
@4.0.0.RELEASE
+#<init>(Lorg/springframework/messaging/MessageChannel;Lorg/springframework/messaging/SubscribableChannel;)V
+#setProtocolHandlers(Ljava/util/List;)V
+#getProtocolHandlers()Ljava/util/List;
+#addProtocolHandler(Lorg/springframework/web/socket/messaging/SubProtocolHandler;)V
+#getProtocolHandlerMap()Ljava/util/Map;
+#setDefaultProtocolHandler(Lorg/springframework/web/socket/messaging/SubProtocolHandler;)V
+#getDefaultProtocolHandler()Lorg/springframework/web/socket/messaging/SubProtocolHandler;
+#getSubProtocols()Ljava/util/List;
+#isAutoStartup()Z
+#getPhase()I
+#isRunning()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleMessage(Lorg/springframework/messaging/Message;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#supportsPartialMessages()Z
@4.0.3.RELEASE
+#setSendTimeLimit(I)V
+#getSendTimeLimit()I
+#setSendBufferSizeLimit(I)V
+#getSendBufferSizeLimit()I
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
@4.0.6.RELEASE
-#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
@4.1.0.RELEASE
+#getStatsInfo()Ljava/lang/String;
+#toString()Ljava/lang/String;
@5.1.0.RELEASE
+#setTimeToFirstMessage(I)V
+#getTimeToFirstMessage()I
-#isAutoStartup()Z
-#getPhase()I
@5.2.0.RELEASE
+#getStats()Lorg/springframework/web/socket/messaging/SubProtocolWebSocketHandler$Stats;

+###org/springframework/web/socket/messaging/AbstractSubProtocolEvent
@4.1.0.RELEASE
+#getMessage()Lorg/springframework/messaging/Message;
+#toString()Ljava/lang/String;
@4.2.0.RELEASE
+#getUser()Ljava/security/Principal;

+###org/springframework/web/socket/messaging/SessionDisconnectEvent
@4.0.3.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;Lorg/springframework/web/socket/CloseStatus;)V
+#getSessionId()Ljava/lang/String;
+#getCloseStatus()Lorg/springframework/web/socket/CloseStatus;
+#toString()Ljava/lang/String;
@4.1.1.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/lang/String;Lorg/springframework/web/socket/CloseStatus;)V
-#<init>(Ljava/lang/Object;Ljava/lang/String;Lorg/springframework/web/socket/CloseStatus;)V
@4.2.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/messaging/Message;Ljava/lang/String;Lorg/springframework/web/socket/CloseStatus;Ljava/security/Principal;)V

+###org/springframework/web/socket/messaging/StompSubProtocolHandler
@4.0.0.RELEASE
+#<init>()V
+#setUserSessionRegistry(Lorg/springframework/messaging/simp/user/UserSessionRegistry;)V
+#getUserSessionRegistry()Lorg/springframework/messaging/simp/user/UserSessionRegistry;
+#getSupportedProtocols()Ljava/util/List;
+#handleMessageFromClient(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;Lorg/springframework/messaging/MessageChannel;)V
+#handleMessageToClient(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/messaging/Message;)V
+#resolveSessionId(Lorg/springframework/messaging/Message;)Ljava/lang/String;
+#afterSessionStarted(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/messaging/MessageChannel;)V
+#afterSessionEnded(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;Lorg/springframework/messaging/MessageChannel;)V
@4.0.3.RELEASE
+#setMessageSizeLimit(I)V
+#getMessageSizeLimit()I
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
@4.1.0.RELEASE
+#setHeaderInitializer(Lorg/springframework/messaging/support/MessageHeaderInitializer;)V
+#getHeaderInitializer()Lorg/springframework/messaging/support/MessageHeaderInitializer;
+#getStatsInfo()Ljava/lang/String;
+#toString()Ljava/lang/String;
@4.2.0.RELEASE
+#setErrorHandler(Lorg/springframework/web/socket/messaging/StompSubProtocolErrorHandler;)V
+#getErrorHandler()Lorg/springframework/web/socket/messaging/StompSubProtocolErrorHandler;
*#setUserSessionRegistry(Lorg/springframework/messaging/simp/user/UserSessionRegistry;)V[deprecated]
*#getUserSessionRegistry()Lorg/springframework/messaging/simp/user/UserSessionRegistry;[deprecated]
@4.3.5.RELEASE
+#setEncoder(Lorg/springframework/messaging/simp/stomp/StompEncoder;)V
+#setDecoder(Lorg/springframework/messaging/simp/stomp/StompDecoder;)V
@5.0.0.RELEASE
-#setUserSessionRegistry(Lorg/springframework/messaging/simp/user/UserSessionRegistry;)V[deprecated]
-#getUserSessionRegistry()Lorg/springframework/messaging/simp/user/UserSessionRegistry;[deprecated]
@5.2.0.RELEASE
+#getStats()Lorg/springframework/web/socket/messaging/StompSubProtocolHandler$Stats;

+###org/springframework/web/socket/messaging/SubProtocolHandler
@4.0.0.RELEASE
+#getSupportedProtocols()Ljava/util/List;
+#handleMessageFromClient(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;Lorg/springframework/messaging/MessageChannel;)V
+#handleMessageToClient(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/messaging/Message;)V
+#resolveSessionId(Lorg/springframework/messaging/Message;)Ljava/lang/String;
+#afterSessionStarted(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/messaging/MessageChannel;)V
+#afterSessionEnded(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;Lorg/springframework/messaging/MessageChannel;)V

+###org/springframework/web/socket/messaging/StompSubProtocolErrorHandler
@4.2.0.RELEASE
+#<init>()V
+#handleClientMessageProcessingError(Lorg/springframework/messaging/Message;Ljava/lang/Throwable;)Lorg/springframework/messaging/Message;
+#handleErrorMessageToClient(Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/Message;

+###org/springframework/web/socket/WebSocketSession
@4.0.0.RELEASE
+#getId()Ljava/lang/String;
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getHandshakeAttributes()Ljava/util/Map;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#isOpen()Z
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
+#close()V
+#close(Lorg/springframework/web/socket/CloseStatus;)V
@4.0.3.RELEASE
+#getAttributes()Ljava/util/Map;
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
-#getHandshakeAttributes()Ljava/util/Map;

+###org/springframework/web/socket/CloseStatus
@4.0.0.RELEASE
+#<init>(I)V
+#<init>(ILjava/lang/String;)V
+#getCode()I
+#getReason()Ljava/lang/String;
+#withReason(Ljava/lang/String;)Lorg/springframework/web/socket/CloseStatus;
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#equalsCode(Lorg/springframework/web/socket/CloseStatus;)Z
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/WebSocketExtension
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/lang/String;Ljava/util/Map;)V
+#getName()Ljava/lang/String;
+#getParameters()Ljava/util/Map;
+#parseExtensions(Ljava/lang/String;)Ljava/util/List;
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/BinaryMessage
@4.0.0.RELEASE
+#<init>(Ljava/nio/ByteBuffer;)V
+#<init>(Ljava/nio/ByteBuffer;Z)V
+#<init>([B)V
+#<init>([BZ)V
+#<init>([BIIZ)V
@4.0.3.RELEASE
+#getPayloadLength()I

+###org/springframework/web/socket/WebSocketMessage
@4.0.0.RELEASE
+#getPayload()Ljava/lang/Object;
+#isLast()Z
@4.0.3.RELEASE
+#getPayloadLength()I

+###org/springframework/web/socket/PongMessage
@4.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/nio/ByteBuffer;)V
@4.0.3.RELEASE
+#getPayloadLength()I

+###org/springframework/web/socket/handler/SessionLimitExceededException
@4.0.3.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/CloseStatus;)V
+#getStatus()Lorg/springframework/web/socket/CloseStatus;

+###org/springframework/web/socket/handler/WebSocketHandlerDecorator
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;)V
+#getDelegate()Lorg/springframework/web/socket/WebSocketHandler;
+#getLastHandler()Lorg/springframework/web/socket/WebSocketHandler;
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#supportsPartialMessages()Z
+#toString()Ljava/lang/String;
@4.0.3.RELEASE
+#unwrap(Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/web/socket/WebSocketHandler;

+###org/springframework/web/socket/handler/TextWebSocketHandler
@4.0.0.RELEASE
+#<init>()V

+###org/springframework/web/socket/handler/WebSocketSessionDecorator
@4.0.3.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketSession;)V
+#getDelegate()Lorg/springframework/web/socket/WebSocketSession;
+#getLastSession()Lorg/springframework/web/socket/WebSocketSession;
+#unwrap(Lorg/springframework/web/socket/WebSocketSession;)Lorg/springframework/web/socket/WebSocketSession;
+#getId()Ljava/lang/String;
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getAttributes()Ljava/util/Map;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
+#isOpen()Z
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
+#close()V
+#close(Lorg/springframework/web/socket/CloseStatus;)V
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/handler/AbstractWebSocketHandler
@4.0.0.RELEASE
+#<init>()V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#supportsPartialMessages()Z

+###org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator$OverflowStrategy
@5.1.0.RELEASE
+#values()[Lorg/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator$OverflowStrategy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator$OverflowStrategy;

+###org/springframework/web/socket/handler/BeanCreatingHandlerProvider
@4.0.0.RELEASE
+#<init>(Ljava/lang/Class;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#getHandlerType()Ljava/lang/Class;
+#getHandler()Ljava/lang/Object;
+#destroy(Ljava/lang/Object;)V
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/handler/PerConnectionWebSocketHandler
@4.0.0.RELEASE
+#<init>(Ljava/lang/Class;)V
+#<init>(Ljava/lang/Class;Z)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#supportsPartialMessages()Z
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/handler/BinaryWebSocketHandler
@4.0.0.RELEASE
+#<init>()V

+###org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator
@4.0.3.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketSession;II)V
+#getBufferSize()I
+#getTimeSinceSendStarted()J
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
@4.0.4.RELEASE
+#close(Lorg/springframework/web/socket/CloseStatus;)V
@4.1.0.RELEASE
+#toString()Ljava/lang/String;
@4.3.13.RELEASE
+#getSendTimeLimit()I
+#getBufferSizeLimit()I
@5.0.0.RELEASE
-#getSendTimeLimit()I
-#getBufferSizeLimit()I
@5.0.1.RELEASE
+#getSendTimeLimit()I
+#getBufferSizeLimit()I
@5.1.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketSession;IILorg/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator$OverflowStrategy;)V
@5.3.0
+#setMessageCallback(Ljava/util/function/Consumer;)V

+###org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;)V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V

+###org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;)V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#tryCloseWithError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;Lorg/apache/commons/logging/Log;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V

+###org/springframework/web/socket/handler/WebSocketHandlerDecoratorFactory
@4.1.2.RELEASE
+#decorate(Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/web/socket/WebSocketHandler;

+###org/springframework/web/socket/sockjs/support/SockJsHttpRequestHandler
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/sockjs/SockJsService;Lorg/springframework/web/socket/WebSocketHandler;)V
+#getSockJsService()Lorg/springframework/web/socket/sockjs/SockJsService;
+#getWebSocketHandler()Lorg/springframework/web/socket/WebSocketHandler;
+#handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
+#isRunning()Z
+#start()V
+#stop()V
+#getCorsConfiguration(Ljavax/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
+#handleRequest(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;)V
+#getCorsConfiguration(Ljakarta/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;
-#setServletContext(Ljavax/servlet/ServletContext;)V
-#handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V
-#getCorsConfiguration(Ljavax/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;

+###org/springframework/web/socket/sockjs/support/AbstractSockJsService
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
+#setName(Ljava/lang/String;)V
+#getName()Ljava/lang/String;
+#setSockJsClientLibraryUrl(Ljava/lang/String;)V
+#getSockJsClientLibraryUrl()Ljava/lang/String;
+#setStreamBytesLimit(I)V
+#getStreamBytesLimit()I
+#setSessionCookieNeeded(Z)V
+#isSessionCookieNeeded()Z
+#setHeartbeatTime(J)V
+#getHeartbeatTime()J
+#getTaskScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#setDisconnectDelay(J)V
+#getDisconnectDelay()J
+#setHttpMessageCacheSize(I)V
+#getHttpMessageCacheSize()I
+#setWebSocketEnabled(Z)V
+#isWebSocketEnabled()Z
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;)V
@4.1.2.RELEASE
+#setAllowedOrigins(Ljava/util/List;)V
+#getAllowedOrigins()Ljava/util/List;
+#setSuppressCors(Z)V
+#shouldSuppressCors()Z
@4.1.9.RELEASE
+#setAllowedOrigins(Ljava/util/Collection;)V
+#getAllowedOrigins()Ljava/util/Collection;
-#setAllowedOrigins(Ljava/util/List;)V
-#getAllowedOrigins()Ljava/util/List;
@4.2.0.RELEASE
+#setAllowedOrigins(Ljava/util/List;)V
+#getAllowedOrigins()Ljava/util/List;
+#getCorsConfiguration(Ljavax/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;
-#setAllowedOrigins(Ljava/util/Collection;)V
-#getAllowedOrigins()Ljava/util/Collection;
@4.2.4.RELEASE
+#setAllowedOrigins(Ljava/util/Collection;)V
+#getAllowedOrigins()Ljava/util/Collection;
-#setAllowedOrigins(Ljava/util/List;)V
-#getAllowedOrigins()Ljava/util/List;
@5.3.2
+#setAllowedOriginPatterns(Ljava/util/Collection;)V
+#getAllowedOriginPatterns()Ljava/util/Collection;
@6.0.0
+#getCorsConfiguration(Ljakarta/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;
-#getCorsConfiguration(Ljavax/servlet/http/HttpServletRequest;)Lorg/springframework/web/cors/CorsConfiguration;

+###org/springframework/web/socket/sockjs/SockJsException
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
+#getSockJsSessionId()Ljava/lang/String;

+###org/springframework/web/socket/sockjs/client/XhrClientSockJsSession
@4.1.0.RELEASE
+#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/client/XhrTransport;Lorg/springframework/util/concurrent/SettableListenableFuture;)V
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
+#getExtensions()Ljava/util/List;
@4.2.0.RELEASE
+#getHeaders()Lorg/springframework/http/HttpHeaders;
@6.0.0
*#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/client/XhrTransport;Lorg/springframework/util/concurrent/SettableListenableFuture;)V[deprecated]
+#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/client/XhrTransport;Ljava/util/concurrent/CompletableFuture;)V

+###org/springframework/web/socket/sockjs/client/WebSocketTransport
@4.1.0.RELEASE
+#<init>(Lorg/springframework/web/socket/client/WebSocketClient;)V
+#getWebSocketClient()Lorg/springframework/web/socket/client/WebSocketClient;
+#getTransportTypes()Ljava/util/List;
+#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
+#start()V
+#stop()V
+#isRunning()Z
+#toString()Ljava/lang/String;
@6.0.0
+#connectAsync(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Ljava/util/concurrent/CompletableFuture;
-#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/web/socket/sockjs/client/InfoReceiver
@4.1.0.RELEASE
+#executeInfoRequest(Ljava/net/URI;)Ljava/lang/String;
@4.2.0.RELEASE
+#executeInfoRequest(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;)Ljava/lang/String;
-#executeInfoRequest(Ljava/net/URI;)Ljava/lang/String;

+###org/springframework/web/socket/sockjs/client/SockJsClient
@4.1.0.RELEASE
+#<init>(Ljava/util/List;)V
+#setInfoReceiver(Lorg/springframework/web/socket/sockjs/client/InfoReceiver;)V
+#getInfoReceiver()Lorg/springframework/web/socket/sockjs/client/InfoReceiver;
+#setMessageCodec(Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;)V
+#getMessageCodec()Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;
+#setConnectTimeoutScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#start()V
+#stop()V
+#isRunning()Z
+#clearServerInfoCache()V
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;
@4.2.0.RELEASE
+#setHttpHeaderNames([Ljava/lang/String;)V
+#getHttpHeaderNames()[Ljava/lang/String;
@6.0.0
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#execute(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Ljava/util/concurrent/CompletableFuture;
-#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/String;[Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#doHandshake(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/WebSocketHttpHeaders;Ljava/net/URI;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/web/socket/sockjs/client/SockJsUrlInfo
@4.1.0.RELEASE
+#<init>(Ljava/net/URI;)V
+#getSockJsUrl()Ljava/net/URI;
+#getServerId()Ljava/lang/String;
+#getSessionId()Ljava/lang/String;
+#getInfoUrl()Ljava/net/URI;
+#getTransportUrl(Lorg/springframework/web/socket/sockjs/transport/TransportType;)Ljava/net/URI;
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/sockjs/client/WebSocketClientSockJsSession
@4.1.0.RELEASE
+#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/util/concurrent/SettableListenableFuture;)V
+#getNativeSession()Ljava/lang/Object;
+#getNativeSession(Ljava/lang/Class;)Ljava/lang/Object;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I
+#getExtensions()Ljava/util/List;
+#initializeDelegateSession(Lorg/springframework/web/socket/WebSocketSession;)V
@6.0.0
*#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/util/concurrent/SettableListenableFuture;)V[deprecated]
+#<init>(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/concurrent/CompletableFuture;)V

+###org/springframework/web/socket/sockjs/client/XhrTransport
@4.1.0.RELEASE
+#isXhrStreamingDisabled()Z
+#executeSendRequest(Ljava/net/URI;Lorg/springframework/web/socket/TextMessage;)V
@4.2.0.RELEASE
+#executeSendRequest(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;Lorg/springframework/web/socket/TextMessage;)V
-#executeSendRequest(Ljava/net/URI;Lorg/springframework/web/socket/TextMessage;)V

+###org/springframework/web/socket/sockjs/client/AbstractXhrTransport
@4.1.0.RELEASE
+#<init>()V
+#getTransportTypes()Ljava/util/List;
+#setXhrStreamingDisabled(Z)V
+#isXhrStreamingDisabled()Z
+#setRequestHeaders(Lorg/springframework/http/HttpHeaders;)V
+#getRequestHeaders()Lorg/springframework/http/HttpHeaders;
+#executeInfoRequest(Ljava/net/URI;)Ljava/lang/String;
+#executeSendRequest(Ljava/net/URI;Lorg/springframework/web/socket/TextMessage;)V
+#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
+#toString()Ljava/lang/String;
@4.2.0.RELEASE
*#setRequestHeaders(Lorg/springframework/http/HttpHeaders;)V[deprecated]
*#getRequestHeaders()Lorg/springframework/http/HttpHeaders;[deprecated]
+#executeInfoRequest(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;)Ljava/lang/String;
+#executeSendRequest(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;Lorg/springframework/web/socket/TextMessage;)V
-#executeInfoRequest(Ljava/net/URI;)Ljava/lang/String;
-#executeSendRequest(Ljava/net/URI;Lorg/springframework/web/socket/TextMessage;)V
@5.0.0.RELEASE
-#setRequestHeaders(Lorg/springframework/http/HttpHeaders;)V[deprecated]
-#getRequestHeaders()Lorg/springframework/http/HttpHeaders;[deprecated]
@5.0.5.RELEASE
-#toString()Ljava/lang/String;
@6.0.0
+#connectAsync(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Ljava/util/concurrent/CompletableFuture;
-#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/web/socket/sockjs/client/UndertowXhrTransport
@4.1.2.RELEASE
+#<init>()V
+#<init>(Lorg/xnio/OptionMap;)V
+#getHttpClient()Lio/undertow/client/UndertowClient;
+#getWorker()Lorg/xnio/XnioWorker;

+###org/springframework/web/socket/sockjs/client/JettyXhrTransport
@4.1.0.RELEASE
+#<init>(Lorg/eclipse/jetty/client/HttpClient;)V
+#getHttpClient()Lorg/eclipse/jetty/client/HttpClient;
+#start()V
+#stop()V
+#isRunning()Z
+#executeSendRequestInternal(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;Lorg/springframework/web/socket/TextMessage;)Lorg/springframework/http/ResponseEntity;

+###org/springframework/web/socket/sockjs/client/AbstractClientSockJsSession
@4.1.0.RELEASE
+#getId()Ljava/lang/String;
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getAttributes()Ljava/util/Map;
+#getPrincipal()Ljava/security/Principal;
+#getMessageCodec()Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;
+#getWebSocketHandler()Lorg/springframework/web/socket/WebSocketHandler;
+#isOpen()Z
+#isDisconnected()Z
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
+#close()V
+#close(Lorg/springframework/web/socket/CloseStatus;)V
+#handleFrame(Ljava/lang/String;)V
+#handleTransportError(Ljava/lang/Throwable;)V
+#afterTransportClosed(Lorg/springframework/web/socket/CloseStatus;)V
+#toString()Ljava/lang/String;

+###org/springframework/web/socket/sockjs/client/Transport
@4.1.0.RELEASE
+#getTransportTypes()Ljava/util/List;
+#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;
@6.0.0
*#connect(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Lorg/springframework/util/concurrent/ListenableFuture;[deprecated]
+#connectAsync(Lorg/springframework/web/socket/sockjs/client/TransportRequest;Lorg/springframework/web/socket/WebSocketHandler;)Ljava/util/concurrent/CompletableFuture;

+###org/springframework/web/socket/sockjs/client/TransportRequest
@4.1.0.RELEASE
+#getSockJsUrlInfo()Lorg/springframework/web/socket/sockjs/client/SockJsUrlInfo;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getTransportUrl()Ljava/net/URI;
+#getUser()Ljava/security/Principal;
+#getMessageCodec()Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;
+#addTimeoutTask(Ljava/lang/Runnable;)V
@4.2.0.RELEASE
+#getHttpRequestHeaders()Lorg/springframework/http/HttpHeaders;

+###org/springframework/web/socket/sockjs/client/RestTemplateXhrTransport
@4.1.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/web/client/RestOperations;)V
+#getRestTemplate()Lorg/springframework/web/client/RestOperations;
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#getTaskExecutor()Lorg/springframework/core/task/TaskExecutor;
+#executeInfoRequestInternal(Ljava/net/URI;)Lorg/springframework/http/ResponseEntity;
+#executeSendRequestInternal(Ljava/net/URI;Lorg/springframework/http/HttpHeaders;Lorg/springframework/web/socket/TextMessage;)Lorg/springframework/http/ResponseEntity;
@4.2.0.RELEASE
-#executeInfoRequestInternal(Ljava/net/URI;)Lorg/springframework/http/ResponseEntity;

+###org/springframework/web/socket/sockjs/transport/TransportHandler
@4.0.0.RELEASE
+#initialize(Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;)V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)V
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;[Lorg/springframework/web/socket/sockjs/transport/TransportHandler;)V
+#<init>(Lorg/springframework/scheduling/TaskScheduler;Ljava/util/Collection;)V
+#getTransportHandlers()Ljava/util/Map;
+#setMessageCodec(Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;)V
+#getMessageCodec()Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;
+#setHandshakeInterceptors(Ljava/util/List;)V
+#getHandshakeInterceptors()Ljava/util/List;
@4.2.0.RELEASE
+#isRunning()Z
+#start()V
+#stop()V

+###org/springframework/web/socket/sockjs/transport/SockJsSession
@4.0.0.RELEASE
+#getTimeSinceLastActive()J
@4.0.3.RELEASE
+#disableHeartbeat()V

+###org/springframework/web/socket/sockjs/transport/SockJsServiceConfig
@4.0.0.RELEASE
+#getTaskScheduler()Lorg/springframework/scheduling/TaskScheduler;
+#getStreamBytesLimit()I
+#getHeartbeatTime()J
+#getHttpMessageCacheSize()I
+#getMessageCodec()Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;

+###org/springframework/web/socket/sockjs/transport/handler/WebSocketTransportHandler
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/server/HandshakeHandler;)V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#getHandshakeHandler()Lorg/springframework/web/socket/server/HandshakeHandler;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession;
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)V
+#doHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
+#isRunning()Z
+#start()V
+#stop()V
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
-#setServletContext(Ljavax/servlet/ServletContext;)V

+###org/springframework/web/socket/sockjs/transport/handler/EventSourceTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/StreamingSockJsSession;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)V
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/handler/XhrPollingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/PollingSockJsSession;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)V

+###org/springframework/web/socket/sockjs/transport/handler/SockJsWebSocketHandler
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/session/WebSocketServerSockJsSession;)V
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleTextMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/TextMessage;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
@4.1.0.RELEASE
+#getSubProtocols()Ljava/util/List;

+###org/springframework/web/socket/sockjs/transport/handler/XhrStreamingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/StreamingSockJsSession;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/handler/XhrReceivingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;

+###org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/StreamingSockJsSession;
+#handleRequestInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession;)V
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z

+###org/springframework/web/socket/sockjs/transport/handler/DefaultSockJsService
@4.0.0.RELEASE
+#<init>(Lorg/springframework/scheduling/TaskScheduler;)V
+#<init>(Lorg/springframework/scheduling/TaskScheduler;[Lorg/springframework/web/socket/sockjs/transport/TransportHandler;)V
+#<init>(Lorg/springframework/scheduling/TaskScheduler;Ljava/util/Collection;)V
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
-#setServletContext(Ljavax/servlet/ServletContext;)V

+###org/springframework/web/socket/sockjs/transport/handler/AbstractTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#initialize(Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;)V
+#getServiceConfig()Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;

+###org/springframework/web/socket/sockjs/transport/TransportType
@4.0.0.RELEASE
+#values()[Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#valueOf(Ljava/lang/String;)Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#value()Ljava/lang/String;
+#getHttpMethod()Lorg/springframework/http/HttpMethod;
+#sendsNoCacheInstruction()Z
+#supportsCors()Z
+#sendsSessionCookie()Z
+#fromValue(Ljava/lang/String;)Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#toString()Ljava/lang/String;
@4.1.2.RELEASE
+#supportsOrigin()Z

+###org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#setAcceptedProtocol(Ljava/lang/String;)V
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#handleInitialRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V
+#startLongPollingRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V
+#isActive()Z
@4.0.1.RELEASE
+#handleSuccessiveRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V
-#startLongPollingRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V
@4.0.3.RELEASE
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I

+###org/springframework/web/socket/sockjs/transport/session/PollingSockJsSession
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V

+###org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
+#getId()Ljava/lang/String;
+#getSockJsServiceConfig()Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;
+#getHandshakeAttributes()Ljava/util/Map;
+#isNew()Z
+#isOpen()Z
+#isClosed()Z
+#isActive()Z
+#getTimeSinceLastActive()J
+#delegateConnectionEstablished()V
+#delegateMessages([Ljava/lang/String;)V
+#delegateConnectionClosed(Lorg/springframework/web/socket/CloseStatus;)V
+#delegateError(Ljava/lang/Throwable;)V
+#sendMessage(Lorg/springframework/web/socket/WebSocketMessage;)V
+#close()V
+#close(Lorg/springframework/web/socket/CloseStatus;)V
+#tryCloseWithSockJsTransportError(Ljava/lang/Throwable;Lorg/springframework/web/socket/CloseStatus;)V
+#sendHeartbeat()V
+#toString()Ljava/lang/String;
@4.0.3.RELEASE
+#getAttributes()Ljava/util/Map;
+#disableHeartbeat()V
-#getHandshakeAttributes()Ljava/util/Map;
@5.0.0.RELEASE
-#sendHeartbeat()V

+###org/springframework/web/socket/sockjs/transport/session/StreamingSockJsSession
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
+#handleInitialRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V
@4.0.6.RELEASE
-#handleInitialRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/frame/SockJsFrameFormat;)V

+###org/springframework/web/socket/sockjs/transport/session/WebSocketServerSockJsSession
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/springframework/web/socket/sockjs/transport/SockJsServiceConfig;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
+#getUri()Ljava/net/URI;
+#getHandshakeHeaders()Lorg/springframework/http/HttpHeaders;
+#getPrincipal()Ljava/security/Principal;
+#getLocalAddress()Ljava/net/InetSocketAddress;
+#getRemoteAddress()Ljava/net/InetSocketAddress;
+#getAcceptedProtocol()Ljava/lang/String;
+#getExtensions()Ljava/util/List;
+#getNativeSession()Ljava/lang/Object;
+#getNativeSession(Ljava/lang/Class;)Ljava/lang/Object;
+#initializeDelegateSession(Lorg/springframework/web/socket/WebSocketSession;)V
+#isActive()Z
+#handleMessage(Lorg/springframework/web/socket/TextMessage;Lorg/springframework/web/socket/WebSocketSession;)V
+#sendMessageInternal(Ljava/lang/String;)V
@4.0.3.RELEASE
+#setTextMessageSizeLimit(I)V
+#getTextMessageSizeLimit()I
+#setBinaryMessageSizeLimit(I)V
+#getBinaryMessageSizeLimit()I

+###org/springframework/web/socket/sockjs/transport/SockJsSessionFactory
@4.0.0.RELEASE
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;

+###org/springframework/web/socket/sockjs/SockJsTransportFailureException
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V
@4.1.7.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/web/socket/sockjs/SockJsMessageDeliveryException
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/util/List;Ljava/lang/Throwable;)V
+#getUndeliveredMessages()Ljava/util/List;
@4.0.1.RELEASE
+#<init>(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)V

+###org/springframework/web/socket/sockjs/frame/DefaultSockJsFrameFormat
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
@4.1.0.RELEASE
+#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Ljava/lang/String;
-#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;

+###org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec
@4.0.0.RELEASE
+#<init>()V
+#encode([Ljava/lang/String;)Ljava/lang/String;

+###org/springframework/web/socket/sockjs/frame/SockJsFrameFormat
@4.0.0.RELEASE
+#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
@4.1.0.RELEASE
+#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Ljava/lang/String;
-#format(Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;

+###org/springframework/web/socket/sockjs/frame/SockJsMessageCodec
@4.0.0.RELEASE
+#encode([Ljava/lang/String;)Ljava/lang/String;
+#decode(Ljava/lang/String;)[Ljava/lang/String;
+#decodeInputStream(Ljava/io/InputStream;)[Ljava/lang/String;

+###org/springframework/web/socket/sockjs/frame/SockJsFrameType
@4.1.0.RELEASE
+#values()[Lorg/springframework/web/socket/sockjs/frame/SockJsFrameType;
+#valueOf(Ljava/lang/String;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrameType;

+###org/springframework/web/socket/sockjs/frame/SockJsFrame
@4.0.0.RELEASE
+#openFrame()Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#heartbeatFrame()Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#messageFrame(Lorg/springframework/web/socket/sockjs/frame/SockJsMessageCodec;[Ljava/lang/String;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#closeFrameGoAway()Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#closeFrameAnotherConnectionOpen()Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#closeFrame(ILjava/lang/String;)Lorg/springframework/web/socket/sockjs/frame/SockJsFrame;
+#<init>(Ljava/lang/String;)V
+#getContent()Ljava/lang/String;
+#getContentBytes()[B
+#equals(Ljava/lang/Object;)Z
+#hashCode()I
+#toString()Ljava/lang/String;
@4.1.0.RELEASE
+#getType()Lorg/springframework/web/socket/sockjs/frame/SockJsFrameType;
+#getFrameData()Ljava/lang/String;

+###org/springframework/web/socket/sockjs/frame/Jackson2SockJsMessageCodec
@4.0.0.RELEASE
+#<init>()V
+#<init>(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
+#decode(Ljava/lang/String;)[Ljava/lang/String;
+#decodeInputStream(Ljava/io/InputStream;)[Ljava/lang/String;

+###org/springframework/web/socket/sockjs/SockJsService
@4.0.0.RELEASE
+#handleRequest(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;)V

+###org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy
@4.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/eclipse/jetty/websocket/server/WebSocketServerFactory;)V
+#getSupportedVersions()[Ljava/lang/String;
+#getSupportedExtensions(Lorg/springframework/http/server/ServerHttpRequest;)Ljava/util/List;
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
@4.0.1.RELEASE
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljava/security/Principal;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
-#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
+#isRunning()Z
+#start()V
+#stop()V
@4.3.5.RELEASE
+#<init>(Lorg/eclipse/jetty/websocket/api/WebSocketPolicy;)V
@6.0.0
-#<init>(Lorg/eclipse/jetty/websocket/api/WebSocketPolicy;)V
-#<init>(Lorg/eclipse/jetty/websocket/server/WebSocketServerFactory;)V
-#setServletContext(Ljavax/servlet/ServletContext;)V
-#start()V
-#stop()V
-#isRunning()Z

+###org/springframework/web/socket/server/RequestUpgradeStrategy
@4.0.0.RELEASE
+#getSupportedVersions()[Ljava/lang/String;
+#getSupportedExtensions(Lorg/springframework/http/server/ServerHttpRequest;)Ljava/util/List;
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
@4.0.1.RELEASE
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljava/security/Principal;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
-#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V

+###org/springframework/web/socket/server/support/HandshakeInterceptorChain
@4.0.0.RELEASE
+#<init>(Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;)V
+#applyBeforeHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/util/Map;)Z
+#applyAfterHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/Exception;)V

+###org/springframework/web/socket/server/support/OriginHandshakeInterceptor
@4.1.2.RELEASE
+#<init>()V
+#setAllowedOrigins(Ljava/util/Collection;)V
+#beforeHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
+#afterHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/Exception;)V
@4.1.5.RELEASE
+#<init>(Ljava/util/Collection;)V
+#getAllowedOrigins()Ljava/util/Collection;
@5.3.2
+#setAllowedOriginPatterns(Ljava/util/Collection;)V
+#getAllowedOriginPatterns()Ljava/util/Collection;

+###org/springframework/web/socket/server/support/WebSocketHandlerMapping
@4.2.0.RELEASE
+#<init>()V
+#isAutoStartup()Z
+#isRunning()Z
+#getPhase()I
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
@5.1.0.RELEASE
-#isAutoStartup()Z
-#getPhase()I
-#stop(Ljava/lang/Runnable;)V
@5.3.5
+#setWebSocketUpgradeMatch(Z)V

+###org/springframework/web/socket/server/support/WebSocketHttpRequestHandler
@4.0.0.RELEASE
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;)V
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/server/HandshakeHandler;)V
+#getWebSocketHandler()Lorg/springframework/web/socket/WebSocketHandler;
+#getHandshakeHandler()Lorg/springframework/web/socket/server/HandshakeHandler;
+#setHandshakeInterceptors(Ljava/util/List;)V
+#getHandshakeInterceptors()Ljava/util/List;
+#handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
+#isRunning()Z
+#start()V
+#stop()V
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
+#handleRequest(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;)V
-#setServletContext(Ljavax/servlet/ServletContext;)V
-#handleRequest(Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;)V

+###org/springframework/web/socket/server/support/AbstractHandshakeHandler
@4.2.0.RELEASE
+#getRequestUpgradeStrategy()Lorg/springframework/web/socket/server/RequestUpgradeStrategy;
+#setSupportedProtocols([Ljava/lang/String;)V
+#getSupportedProtocols()[Ljava/lang/String;
+#isRunning()Z
+#start()V
+#stop()V
+#doHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z

+###org/springframework/web/socket/server/support/HttpSessionHandshakeInterceptor
@4.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/util/Collection;)V
+#beforeHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
+#afterHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/Exception;)V
@4.1.2.RELEASE
+#getAttributeNames()Ljava/util/Collection;
+#setCopyAllAttributes(Z)V
+#isCopyAllAttributes()Z
+#setCopyHttpSessionId(Z)V
+#isCopyHttpSessionId()Z
@4.2.0.RELEASE
+#setCreateSession(Z)V
+#isCreateSession()Z

+###org/springframework/web/socket/server/support/DefaultHandshakeHandler
@4.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/web/socket/server/RequestUpgradeStrategy;)V
+#setSupportedProtocols([Ljava/lang/String;)V
+#getSupportedProtocols()[Ljava/lang/String;
+#doHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
@4.2.0.RELEASE
+#setServletContext(Ljavax/servlet/ServletContext;)V
-#setSupportedProtocols([Ljava/lang/String;)V
-#getSupportedProtocols()[Ljava/lang/String;
-#doHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
-#setServletContext(Ljavax/servlet/ServletContext;)V

+###org/springframework/web/socket/server/HandshakeHandler
@4.0.0.RELEASE
+#doHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z

+###org/springframework/web/socket/server/standard/AbstractStandardUpgradeStrategy
@4.0.0.RELEASE
+#<init>()V
+#getSupportedExtensions(Lorg/springframework/http/server/ServerHttpRequest;)Ljava/util/List;
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
@4.0.1.RELEASE
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljava/security/Principal;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
-#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V

+###org/springframework/web/socket/server/standard/SpringConfigurator
@4.0.0.RELEASE
+#<init>()V
+#getEndpointInstance(Ljava/lang/Class;)Ljava/lang/Object;

+###org/springframework/web/socket/server/standard/WebLogicRequestUpgradeStrategy
@4.1.0.RELEASE
+#<init>()V

+###org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy
@4.0.0.RELEASE
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
+#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V
@4.1.0.RELEASE
-#getSupportedVersions()[Ljava/lang/String;
-#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V

+###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy
@4.1.0.RELEASE
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
+#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V
@6.0.0
+#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljakarta/websocket/Endpoint;)V
-#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V

+###org/springframework/web/socket/server/standard/ServerEndpointExporter
@4.0.0.RELEASE
+#<init>()V
+#setAnnotatedEndpointClasses([Ljava/lang/Class;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#afterPropertiesSet()V
+#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
+#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@4.0.7.RELEASE
+#setServerContainer(Ljavax/websocket/server/ServerContainer;)V
-#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@4.0.8.RELEASE
-#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
-#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@4.1.0.RELEASE
+#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
+#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@4.1.2.RELEASE
+#afterSingletonsInstantiated()V
-#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
-#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@6.0.0
+#setServerContainer(Ljakarta/websocket/server/ServerContainer;)V
-#setServerContainer(Ljavax/websocket/server/ServerContainer;)V

+###org/springframework/web/socket/server/standard/ServletServerContainerFactoryBean
@4.0.0.RELEASE
+#<init>()V
+#setAsyncSendTimeout(J)V
+#getAsyncSendTimeout()J
+#setMaxSessionIdleTimeout(J)V
+#getMaxSessionIdleTimeout()Ljava/lang/Long;
+#setMaxTextMessageBufferSize(I)V
+#getMaxTextMessageBufferSize()Ljava/lang/Integer;
+#setMaxBinaryMessageBufferSize(I)V
+#getMaxBinaryMessageBufferSize()Ljava/lang/Integer;
+#setServletContext(Ljavax/servlet/ServletContext;)V
+#afterPropertiesSet()V
+#getObject()Ljavax/websocket/server/ServerContainer;
+#getObjectType()Ljava/lang/Class;
+#isSingleton()Z
+#getObject()Ljava/lang/Object;
@4.3.12.RELEASE
+#getAsyncSendTimeout()Ljava/lang/Long;
-#getAsyncSendTimeout()J
@5.0.0.RELEASE
+#setAsyncSendTimeout(Ljava/lang/Long;)V
+#setMaxSessionIdleTimeout(Ljava/lang/Long;)V
+#setMaxTextMessageBufferSize(Ljava/lang/Integer;)V
+#setMaxBinaryMessageBufferSize(Ljava/lang/Integer;)V
-#setAsyncSendTimeout(J)V
-#setMaxSessionIdleTimeout(J)V
-#setMaxTextMessageBufferSize(I)V
-#setMaxBinaryMessageBufferSize(I)V
@6.0.0
+#setServletContext(Ljakarta/servlet/ServletContext;)V
+#getObject()Ljakarta/websocket/server/ServerContainer;
-#setServletContext(Ljavax/servlet/ServletContext;)V
-#getObject()Ljavax/websocket/server/ServerContainer;

+###org/springframework/web/socket/server/standard/TomcatRequestUpgradeStrategy
@4.0.0.RELEASE
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
+#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V
+#getContainer(Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/tomcat/websocket/server/WsServerContainer;
+#getContainer(Ljavax/servlet/http/HttpServletRequest;)Ljavax/websocket/server/ServerContainer;
@6.0.0
-#getSupportedVersions()[Ljava/lang/String;
-#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V
-#getContainer(Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/tomcat/websocket/server/WsServerContainer;
-#getContainer(Ljavax/servlet/http/HttpServletRequest;)Ljavax/websocket/server/ServerContainer;

+###org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy
@4.0.1.RELEASE
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
@4.3.0.RELEASE
+#getContainer(Ljavax/servlet/http/HttpServletRequest;)Lio/undertow/websockets/jsr/ServerWebSocketContainer;
+#getContainer(Ljavax/servlet/http/HttpServletRequest;)Ljavax/websocket/server/ServerContainer;
@6.0.0
-#getContainer(Ljavax/servlet/http/HttpServletRequest;)Lio/undertow/websockets/jsr/ServerWebSocketContainer;
-#getContainer(Ljavax/servlet/http/HttpServletRequest;)Ljavax/websocket/server/ServerContainer;

+###org/springframework/web/socket/server/standard/ServerEndpointRegistration
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Class;)V
+#<init>(Ljava/lang/String;Ljavax/websocket/Endpoint;)V
+#getPath()Ljava/lang/String;
+#getEndpointClass()Ljava/lang/Class;
+#getEndpoint()Ljavax/websocket/Endpoint;
+#setSubprotocols(Ljava/util/List;)V
+#getSubprotocols()Ljava/util/List;
+#setExtensions(Ljava/util/List;)V
+#getExtensions()Ljava/util/List;
+#setUserProperties(Ljava/util/Map;)V
+#getUserProperties()Ljava/util/Map;
+#setEncoders(Ljava/util/List;)V
+#getEncoders()Ljava/util/List;
+#setDecoders(Ljava/util/List;)V
+#getDecoders()Ljava/util/List;
+#getConfigurator()Ljavax/websocket/server/ServerEndpointConfig$Configurator;
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#getEndpointInstance(Ljava/lang/Class;)Ljava/lang/Object;
+#modifyHandshake(Ljavax/websocket/server/ServerEndpointConfig;Ljavax/websocket/server/HandshakeRequest;Ljavax/websocket/HandshakeResponse;)V
+#checkOrigin(Ljava/lang/String;)Z
+#getNegotiatedSubprotocol(Ljava/util/List;Ljava/util/List;)Ljava/lang/String;
+#getNegotiatedExtensions(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
@4.0.8.RELEASE
+#toString()Ljava/lang/String;
@4.1.0.RELEASE
-#toString()Ljava/lang/String;
@4.1.2.RELEASE
+#toString()Ljava/lang/String;
@4.3.15.RELEASE
-#checkOrigin(Ljava/lang/String;)Z
-#getNegotiatedSubprotocol(Ljava/util/List;Ljava/util/List;)Ljava/lang/String;
-#getNegotiatedExtensions(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
@5.0.0.RELEASE
+#checkOrigin(Ljava/lang/String;)Z
+#getNegotiatedSubprotocol(Ljava/util/List;Ljava/util/List;)Ljava/lang/String;
+#getNegotiatedExtensions(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
@5.0.5.RELEASE
-#checkOrigin(Ljava/lang/String;)Z
-#getNegotiatedSubprotocol(Ljava/util/List;Ljava/util/List;)Ljava/lang/String;
-#getNegotiatedExtensions(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
@6.0.0
+#<init>(Ljava/lang/String;Ljakarta/websocket/Endpoint;)V
+#getEndpoint()Ljakarta/websocket/Endpoint;
+#getConfigurator()Ljakarta/websocket/server/ServerEndpointConfig$Configurator;
+#modifyHandshake(Ljakarta/websocket/server/ServerEndpointConfig;Ljakarta/websocket/server/HandshakeRequest;Ljakarta/websocket/HandshakeResponse;)V
-#<init>(Ljava/lang/String;Ljavax/websocket/Endpoint;)V
-#getEndpoint()Ljavax/websocket/Endpoint;
-#getConfigurator()Ljavax/websocket/server/ServerEndpointConfig$Configurator;
-#modifyHandshake(Ljavax/websocket/server/ServerEndpointConfig;Ljavax/websocket/server/HandshakeRequest;Ljavax/websocket/HandshakeResponse;)V

+###org/springframework/web/socket/server/standard/WebSphereRequestUpgradeStrategy
@4.2.1.RELEASE
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
+#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V
@6.0.0
-#getSupportedVersions()[Ljava/lang/String;
-#upgradeInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljavax/websocket/Endpoint;)V

+###org/springframework/web/socket/server/HandshakeInterceptor
@4.0.0.RELEASE
+#beforeHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Z
+#afterHandshake(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Ljava/lang/Exception;)V

+###org/springframework/web/socket/server/HandshakeFailureException
@4.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/springframework/web/socket/TextMessage
@4.0.0.RELEASE
+#<init>(Ljava/lang/CharSequence;)V
+#<init>(Ljava/lang/CharSequence;Z)V
@4.0.3.RELEASE
+#<init>([B)V
+#getPayloadLength()I
+#asBytes()[B

+###org/springframework/web/socket/WebSocketHandler
@4.0.0.RELEASE
+#afterConnectionEstablished(Lorg/springframework/web/socket/WebSocketSession;)V
+#handleMessage(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/WebSocketMessage;)V
+#handleTransportError(Lorg/springframework/web/socket/WebSocketSession;Ljava/lang/Throwable;)V
+#afterConnectionClosed(Lorg/springframework/web/socket/WebSocketSession;Lorg/springframework/web/socket/CloseStatus;)V
+#supportsPartialMessages()Z

+###org/springframework/web/socket/messaging/SubProtocolWebSocketHandler$Stats
@5.2.0.RELEASE
+#getTotalSessions()I
+#getWebSocketSessions()I
+#getHttpStreamingSessions()I
+#getHttpPollingSessions()I
+#getLimitExceededSessions()I
+#getNoMessagesReceivedSessions()I
+#getTransportErrorSessions()I

+###org/springframework/web/socket/messaging/StompSubProtocolHandler$Stats
@5.2.0.RELEASE
+#getTotalConnect()I
+#getTotalConnected()I
+#getTotalDisconnect()I

+###org/springframework/web/socket/server/jetty/Jetty10RequestUpgradeStrategy
@5.3.4
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
+#getSupportedExtensions(Lorg/springframework/http/server/ServerHttpRequest;)Ljava/util/List;
+#upgrade(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Ljava/lang/String;Ljava/util/List;Ljava/security/Principal;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)V
@6.0.0
-###org/springframework/web/socket/server/jetty/Jetty10RequestUpgradeStrategy

+###org/springframework/web/socket/adapter/jetty/Jetty10WebSocketHandlerAdapter
@5.3.4
+#<init>(Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/adapter/jetty/JettyWebSocketSession;)V
+#onWebSocketConnect(Lorg/eclipse/jetty/websocket/api/Session;)V
+#onWebSocketText(Ljava/lang/String;)V
+#onWebSocketBinary([BII)V
+#onWebSocketClose(ILjava/lang/String;)V
+#onWebSocketError(Ljava/lang/Throwable;)V
@6.0.0
-###org/springframework/web/socket/adapter/jetty/Jetty10WebSocketHandlerAdapter

+###org/springframework/web/socket/sockjs/transport/handler/JsonpPollingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/session/PollingSockJsSession;
+#handleRequestInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession;)V
+#createSession(Ljava/lang/String;Lorg/springframework/web/socket/WebSocketHandler;Ljava/util/Map;)Lorg/springframework/web/socket/sockjs/transport/SockJsSession;
@4.3.4.RELEASE
+#checkSessionType(Lorg/springframework/web/socket/sockjs/transport/SockJsSession;)Z
@5.1.0.RELEASE
-###org/springframework/web/socket/sockjs/transport/handler/JsonpPollingTransportHandler

+###org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler
@4.0.0.RELEASE
+#<init>()V
+#getTransportType()Lorg/springframework/web/socket/sockjs/transport/TransportType;
+#handleRequestInternal(Lorg/springframework/http/server/ServerHttpRequest;Lorg/springframework/http/server/ServerHttpResponse;Lorg/springframework/web/socket/WebSocketHandler;Lorg/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession;)V
@5.1.0.RELEASE
-###org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler

+###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$Tyrus17EndpointHelper
@4.1.0.RELEASE
+#createdEndpoint(Lorg/springframework/web/socket/server/standard/ServerEndpointRegistration;Lorg/glassfish/tyrus/core/ComponentProviderService;Ljavax/websocket/WebSocketContainer;Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;)Ljava/lang/Object;
+#register(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
+#unregister(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
@5.0.0.RELEASE
-###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$Tyrus17EndpointHelper

+###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$TyrusEndpointHelper
@4.1.0.RELEASE
+#createdEndpoint(Lorg/springframework/web/socket/server/standard/ServerEndpointRegistration;Lorg/glassfish/tyrus/core/ComponentProviderService;Ljavax/websocket/WebSocketContainer;Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;)Ljava/lang/Object;
+#register(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
+#unregister(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
@5.0.0.RELEASE
-###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$TyrusEndpointHelper

+###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$Tyrus135EndpointHelper
@4.1.0.RELEASE
+#createdEndpoint(Lorg/springframework/web/socket/server/standard/ServerEndpointRegistration;Lorg/glassfish/tyrus/core/ComponentProviderService;Ljavax/websocket/WebSocketContainer;Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;)Ljava/lang/Object;
+#register(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
+#unregister(Lorg/glassfish/tyrus/core/TyrusWebSocketEngine;Ljava/lang/Object;)V
@5.0.0.RELEASE
-###org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy$Tyrus135EndpointHelper

+###org/springframework/web/socket/sockjs/client/UndertowXhrTransport$SockJsResponseListener
@4.1.2.RELEASE
+#<init>(Lorg/springframework/web/socket/sockjs/client/UndertowXhrTransport;Lio/undertow/client/ClientConnection;Ljava/net/URI;Lorg/springframework/http/HttpHeaders;Lorg/springframework/web/socket/sockjs/client/XhrClientSockJsSession;Lorg/springframework/util/concurrent/SettableListenableFuture;)V
+#setup(Lorg/xnio/channels/StreamSourceChannel;)V
+#handleEvent(Lorg/xnio/channels/StreamSourceChannel;)V
+#onSuccess()V
+#onFailure(Ljava/lang/Throwable;)V
+#handleEvent(Ljava/nio/channels/Channel;)V
@4.2.0.RELEASE
-###org/springframework/web/socket/sockjs/client/UndertowXhrTransport$SockJsResponseListener

+###org/springframework/web/socket/server/standard/StandardWebSocketUpgradeStrategy
@6.0.0
+#<init>()V
+#getSupportedVersions()[Ljava/lang/String;
