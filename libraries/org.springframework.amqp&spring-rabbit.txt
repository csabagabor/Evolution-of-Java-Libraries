
+###org/springframework/amqp/rabbit/transaction/RabbitTransactionManager
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#afterPropertiesSet()V
+#getResourceFactory()Ljava/lang/Object;

+###org/springframework/amqp/rabbit/connection/RabbitAccessor
@1.0.0.RELEASE
+#<init>()V
+#isChannelTransacted()Z
+#setChannelTransacted(Z)V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#afterPropertiesSet()V

+###org/springframework/amqp/rabbit/connection/Connection
@1.0.0.RELEASE
+#createChannel(Z)Lcom/rabbitmq/client/Channel;
+#close()V
+#isOpen()Z
@1.6.0.RELEASE
+#getLocalPort()I
@2.0.0.RELEASE
+#addBlockedListener(Lcom/rabbitmq/client/BlockedListener;)V
+#removeBlockedListener(Lcom/rabbitmq/client/BlockedListener;)Z
@2.0.5.RELEASE
+#getDelegate()Lcom/rabbitmq/client/Connection;
@2.3.0
+#closeThreadChannel()V

+###org/springframework/amqp/rabbit/connection/CachingConnectionFactory
@1.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/String;I)V
+#<init>(I)V
+#<init>(Ljava/lang/String;)V
+#<init>(Lcom/rabbitmq/client/ConnectionFactory;)V
+#setChannelCacheSize(I)V
+#getChannelCacheSize()I
+#setConnectionListeners(Ljava/util/List;)V
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#destroy()V
+#toString()Ljava/lang/String;
@1.1.0.RELEASE
+#isPublisherConfirms()Z
+#setPublisherConfirms(Z)V
@1.1.1.RELEASE
+#isPublisherReturns()Z
+#setPublisherReturns(Z)V
@1.3.0.RELEASE
+#getCacheMode()Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$CacheMode;
+#setCacheMode(Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$CacheMode;)V
+#getConnectionCachesize()I
+#setConnectionCacheSize(I)V
+#afterPropertiesSet()V
@1.3.5.RELEASE
+#shutdownCompleted(Lcom/rabbitmq/client/ShutdownSignalException;)V
@1.4.2.RELEASE
*#getConnectionCachesize()I[deprecated]
+#getConnectionCacheSize()I
+#setChannelCheckoutTimeout(J)V
@1.4.6.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#onApplicationEvent(Lorg/springframework/context/event/ContextClosedEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@1.5.0.RELEASE
+#<init>(Ljava/net/URI;)V
+#setCloseExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
+#resetConnection()V
@1.5.3.RELEASE
+#start()V
+#isRunning()Z
+#getPhase()I
+#setPhase(I)V
+#isAutoStartup()Z
+#stop()V
+#stop(Ljava/lang/Runnable;)V
@1.5.5.RELEASE
+#setConnectionLimit(I)V
@1.6.0.RELEASE
+#getCacheProperties()Ljava/util/Properties;
@1.6.11.RELEASE
*#start()V[deprecated]
*#isRunning()Z[deprecated]
*#getPhase()I[deprecated]
*#setPhase(I)V[deprecated]
*#isAutoStartup()Z[deprecated]
*#stop()V[deprecated]
*#stop(Ljava/lang/Runnable;)V[deprecated]
@1.7.4.RELEASE
*#start()V[deprecated]
*#isRunning()Z[deprecated]
*#getPhase()I[deprecated]
*#setPhase(I)V[deprecated]
*#isAutoStartup()Z[deprecated]
*#stop()V[deprecated]
*#stop(Ljava/lang/Runnable;)V[deprecated]
@2.0.0.RELEASE
-#getConnectionCachesize()I[deprecated]
-#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
-#onApplicationEvent(Lorg/springframework/context/event/ContextClosedEvent;)V
-#start()V[deprecated]
-#isRunning()Z[deprecated]
-#getPhase()I[deprecated]
-#setPhase(I)V[deprecated]
-#isAutoStartup()Z[deprecated]
-#stop()V[deprecated]
-#stop(Ljava/lang/Runnable;)V[deprecated]
-#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.0.2.RELEASE
+#getPublisherConnectionFactoryCacheProperties()Ljava/util/Properties;
@2.1.0.RELEASE
+#setSimplePublisherConfirms(Z)V
+#isSimplePublisherConfirms()Z
@2.1.6.RELEASE
+#setPublisherChannelFactory(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannelFactory;)V
@2.2.0.RELEASE
*#setPublisherConfirms(Z)V[deprecated]
*#setSimplePublisherConfirms(Z)V[deprecated]
+#setPublisherConfirmType(Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;)V
@2.3.2
+#setPublisherConnectionFactory(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;)V
-#setCloseExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
-#shutdownCompleted(Lcom/rabbitmq/client/ShutdownSignalException;)V
@3.0.0
-#setPublisherConfirms(Z)V[deprecated]
-#setSimplePublisherConfirms(Z)V[deprecated]

+###org/springframework/amqp/rabbit/connection/ChannelListener
@1.0.0.RELEASE
+#onCreate(Lcom/rabbitmq/client/Channel;Z)V
@2.0.0.RELEASE
+#onShutDown(Lcom/rabbitmq/client/ShutdownSignalException;)V

+###org/springframework/amqp/rabbit/connection/RabbitUtils
@1.0.0.RELEASE
+#<init>()V
+#closeConnection(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#closeChannel(Lcom/rabbitmq/client/Channel;)V
+#commitIfNecessary(Lcom/rabbitmq/client/Channel;)V
+#rollbackIfNecessary(Lcom/rabbitmq/client/Channel;)V
+#convertRabbitAccessException(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
+#closeMessageConsumer(Lcom/rabbitmq/client/Channel;Ljava/lang/String;Z)V
+#declareTransactional(Lcom/rabbitmq/client/Channel;)V
@1.1.3.RELEASE
+#setPhysicalCloseRequired(Z)V
+#isPhysicalCloseRequired()Z
@1.2.0.RELEASE
-#convertRabbitAccessException(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
@1.3.0.RELEASE
+#closeMessageConsumer(Lcom/rabbitmq/client/Channel;Ljava/util/Collection;Z)V
+#isNormalShutdown(Lcom/rabbitmq/client/ShutdownSignalException;)Z
-#closeMessageConsumer(Lcom/rabbitmq/client/Channel;Ljava/lang/String;Z)V
@1.3.5.RELEASE
+#isNormalChannelClose(Lcom/rabbitmq/client/ShutdownSignalException;)Z
@1.3.9.RELEASE
+#determineShutdownReason(Lcom/rabbitmq/client/ShutdownSignalException;)Ljava/lang/Object;
@1.4.0.RELEASE
-#determineShutdownReason(Lcom/rabbitmq/client/ShutdownSignalException;)Ljava/lang/Object;
@1.4.2.RELEASE
+#isPassiveDeclarationChannelClose(Lcom/rabbitmq/client/ShutdownSignalException;)Z
@1.4.3.RELEASE
+#determineShutdownReason(Lcom/rabbitmq/client/ShutdownSignalException;)Ljava/lang/Object;
@1.5.0.RELEASE
+#isExclusiveUseChannelClose(Lcom/rabbitmq/client/ShutdownSignalException;)Z
@1.6.0.RELEASE
+#isMismatchedQueueArgs(Ljava/lang/Exception;)Z
+#isExchangeDeclarationFailure(Ljava/lang/Exception;)Z
-#determineShutdownReason(Lcom/rabbitmq/client/ShutdownSignalException;)Ljava/lang/Object;
@1.7.1.RELEASE
+#shouldRequeue(ZLjava/lang/Throwable;Lorg/apache/commons/logging/Log;)Z
@1.7.4.RELEASE
*#setPhysicalCloseRequired(Z)V[deprecated]
+#setPhysicalCloseRequired(Lcom/rabbitmq/client/Channel;Z)V
@2.0.0.RELEASE
-#setPhysicalCloseRequired(Z)V[deprecated]
@2.0.5.RELEASE
+#getMaxFrame(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)I
@2.1.0.RELEASE
-#shouldRequeue(ZLjava/lang/Throwable;Lorg/apache/commons/logging/Log;)Z
@2.1.8.RELEASE
+#stringToSaslConfig(Ljava/lang/String;Lcom/rabbitmq/client/ConnectionFactory;)Lcom/rabbitmq/client/SaslConfig;
@2.1.12.RELEASE
+#cancel(Lcom/rabbitmq/client/Channel;Ljava/lang/String;)V
@2.2.0.RELEASE
-#cancel(Lcom/rabbitmq/client/Channel;Ljava/lang/String;)V
@2.2.1.RELEASE
+#cancel(Lcom/rabbitmq/client/Channel;Ljava/lang/String;)V
@2.3.1
+#clearPhysicalCloseRequired()V

+###org/springframework/amqp/rabbit/connection/ConnectionFactory
@1.0.0.RELEASE
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#getHost()Ljava/lang/String;
+#getPort()I
+#getVirtualHost()Ljava/lang/String;
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
@1.3.0.RELEASE
+#removeConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)Z
+#clearConnectionListeners()V
@1.6.0.RELEASE
+#getUsername()Ljava/lang/String;
@2.0.2.RELEASE
+#getPublisherConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
@2.1.0.RELEASE
+#isSimplePublisherConfirms()Z
+#isPublisherConfirms()Z
+#isPublisherReturns()Z
@2.4.4
+#resetConnection()V

+###org/springframework/amqp/rabbit/connection/SimpleResourceHolder
@1.3.0.RELEASE
+#getResources()Ljava/util/Map;
+#has(Ljava/lang/Object;)Z
+#get(Ljava/lang/Object;)Ljava/lang/Object;
+#bind(Ljava/lang/Object;Ljava/lang/Object;)V
+#unbind(Ljava/lang/Object;)Ljava/lang/Object;
+#unbindIfPossible(Ljava/lang/Object;)Ljava/lang/Object;
+#clear()V
@2.1.11.RELEASE
+#push(Ljava/lang/Object;Ljava/lang/Object;)V
+#pop(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/connection/CompositeChannelListener
@1.0.0.RELEASE
+#<init>()V
+#onCreate(Lcom/rabbitmq/client/Channel;Z)V
+#setDelegates(Ljava/util/List;)V
+#addDelegate(Lorg/springframework/amqp/rabbit/connection/ChannelListener;)V
@2.0.0.RELEASE
+#onShutDown(Lcom/rabbitmq/client/ShutdownSignalException;)V

+###org/springframework/amqp/rabbit/connection/AbstractConnectionFactory
@1.0.0.RELEASE
+#<init>(Lcom/rabbitmq/client/ConnectionFactory;)V
+#setUsername(Ljava/lang/String;)V
+#setPassword(Ljava/lang/String;)V
+#setHost(Ljava/lang/String;)V
+#getHost()Ljava/lang/String;
+#setVirtualHost(Ljava/lang/String;)V
+#getVirtualHost()Ljava/lang/String;
+#setPort(I)V
+#getPort()I
+#setConnectionListeners(Ljava/util/List;)V
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#setChannelListeners(Ljava/util/List;)V
+#addChannelListener(Lorg/springframework/amqp/rabbit/connection/ChannelListener;)V
+#destroy()V
@1.1.0.RELEASE
+#setAddresses(Ljava/lang/String;)V
+#setExecutor(Ljava/util/concurrent/Executor;)V
@1.2.0.RELEASE
+#setRequestedHeartBeat(I)V
+#setCloseTimeout(I)V
@1.3.0.RELEASE
+#removeConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)Z
+#clearConnectionListeners()V
@1.4.0.RELEASE
+#setConnectionTimeout(I)V
+#getCloseTimeout()I
@1.5.0.RELEASE
+#setUri(Ljava/net/URI;)V
+#setUri(Ljava/lang/String;)V
+#setBeanName(Ljava/lang/String;)V
+#toString()Ljava/lang/String;
@1.5.3.RELEASE
+#setConnectionThreadFactory(Ljava/util/concurrent/ThreadFactory;)V
@1.5.6.RELEASE
+#getRabbitConnectionFactory()Lcom/rabbitmq/client/ConnectionFactory;
@1.6.0.RELEASE
+#getUsername()Ljava/lang/String;
@1.7.0.RELEASE
+#setRecoveryListener(Lcom/rabbitmq/client/RecoveryListener;)V
+#setConnectionNameStrategy(Lorg/springframework/amqp/rabbit/connection/ConnectionNameStrategy;)V
@2.0.0.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#onApplicationEvent(Lorg/springframework/context/event/ContextClosedEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.0.2.RELEASE
+#hasPublisherConnectionFactory()Z
+#getPublisherConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
@2.1.8.RELEASE
+#setShuffleAddresses(Z)V
@2.1.15.RELEASE
+#setAddressResolver(Lcom/rabbitmq/client/AddressResolver;)V
@2.2.0.RELEASE
-#setAddressResolver(Lcom/rabbitmq/client/AddressResolver;)V
@2.2.7.RELEASE
+#setAddressResolver(Lcom/rabbitmq/client/AddressResolver;)V
@2.3.0
*#setShuffleAddresses(Z)V[deprecated]
+#setAddressShuffleMode(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory$AddressShuffleMode;)V
@2.3.2
+#setPublisherConnectionFactory(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;)V
+#setCloseExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
+#shutdownCompleted(Lcom/rabbitmq/client/ShutdownSignalException;)V
@3.0.0
-#setShuffleAddresses(Z)V[deprecated]

+###org/springframework/amqp/rabbit/connection/ConnectionFactoryUtils$ResourceFactory
@1.0.0.RELEASE
+#getChannel(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;)Lcom/rabbitmq/client/Channel;
+#getConnection(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;)Lorg/springframework/amqp/rabbit/connection/Connection;
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#createChannel(Lorg/springframework/amqp/rabbit/connection/Connection;)Lcom/rabbitmq/client/Channel;
+#isSynchedLocalTransactionAllowed()Z

+###org/springframework/amqp/rabbit/connection/CompositeConnectionListener
@1.0.0.RELEASE
+#<init>()V
+#onCreate(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#onClose(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#setDelegates(Ljava/util/List;)V
+#addDelegate(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
@1.3.0.RELEASE
+#removeDelegate(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)Z
+#clearDelegates()V
@2.0.0.RELEASE
+#onShutDown(Lcom/rabbitmq/client/ShutdownSignalException;)V
@2.2.17.RELEASE
+#onFailed(Ljava/lang/Exception;)V
@2.3.0
-#onFailed(Ljava/lang/Exception;)V
@2.3.7
+#onFailed(Ljava/lang/Exception;)V

+###org/springframework/amqp/rabbit/connection/SimpleRoutingConnectionFactory
@1.3.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/connection/CachingConnectionFactory$CacheMode
@1.3.0.RELEASE
+#values()[Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$CacheMode;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$CacheMode;

+###org/springframework/amqp/rabbit/connection/ChannelProxy
@1.0.0.RELEASE
+#getTargetChannel()Lcom/rabbitmq/client/Channel;
@1.5.0.RELEASE
+#isTransactional()Z
@2.1.0.RELEASE
+#isConfirmSelected()Z
@2.4.4
+#isPublisherConfirms()Z

+###org/springframework/amqp/rabbit/connection/AbstractRoutingConnectionFactory
@1.3.0.RELEASE
+#<init>()V
+#setTargetConnectionFactories(Ljava/util/Map;)V
+#setDefaultTargetConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setLenientFallback(Z)V
+#afterPropertiesSet()V
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#removeConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)Z
+#clearConnectionListeners()V
+#getHost()Ljava/lang/String;
+#getPort()I
+#getVirtualHost()Ljava/lang/String;
@1.3.5.RELEASE
-#afterPropertiesSet()V
@1.4.0.RELEASE
+#isLenientFallback()Z
+#getTargetConnectionFactory(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
@1.6.0.RELEASE
+#getUsername()Ljava/lang/String;
@2.1.18.RELEASE
+#isPublisherConfirms()Z
+#isPublisherReturns()Z
+#afterPropertiesSet()V
@2.2.0.RELEASE
-#isPublisherConfirms()Z
-#isPublisherReturns()Z
-#afterPropertiesSet()V
@2.2.14.RELEASE
+#isPublisherConfirms()Z
+#isPublisherReturns()Z
+#afterPropertiesSet()V
@2.3.0
-#isPublisherConfirms()Z
-#isPublisherReturns()Z
-#afterPropertiesSet()V
@2.3.3
+#isPublisherConfirms()Z
+#isPublisherReturns()Z
+#afterPropertiesSet()V
@2.4.4
+#setConsistentConfirmsReturns(Z)V
+#destroy()V
+#resetConnection()V

+###org/springframework/amqp/rabbit/connection/SimpleConnection
@1.0.0.RELEASE
+#<init>(Lcom/rabbitmq/client/Connection;)V
+#createChannel(Z)Lcom/rabbitmq/client/Channel;
+#close()V
+#isOpen()Z
@1.2.0.RELEASE
+#<init>(Lcom/rabbitmq/client/Connection;I)V
-#<init>(Lcom/rabbitmq/client/Connection;)V
@1.4.4.RELEASE
+#toString()Ljava/lang/String;
@1.6.0.RELEASE
+#getLocalPort()I
@1.7.0.RELEASE
+#getLocalAddress()Ljava/net/InetAddress;
+#getAddress()Ljava/net/InetAddress;
+#getPort()I
@2.0.0.RELEASE
+#addBlockedListener(Lcom/rabbitmq/client/BlockedListener;)V
+#removeBlockedListener(Lcom/rabbitmq/client/BlockedListener;)Z
@2.0.5.RELEASE
+#getDelegate()Lcom/rabbitmq/client/Connection;

+###org/springframework/amqp/rabbit/connection/ConnectionListener
@1.0.0.RELEASE
+#onCreate(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#onClose(Lorg/springframework/amqp/rabbit/connection/Connection;)V
@2.0.0.RELEASE
+#onShutDown(Lcom/rabbitmq/client/ShutdownSignalException;)V
@2.2.17.RELEASE
+#onFailed(Ljava/lang/Exception;)V
@2.3.0
-#onFailed(Ljava/lang/Exception;)V
@2.3.7
+#onFailed(Ljava/lang/Exception;)V

+###org/springframework/amqp/rabbit/connection/RabbitResourceHolder
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lcom/rabbitmq/client/Channel;)V
+#isFrozen()Z
+#addConnection(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#addChannel(Lcom/rabbitmq/client/Channel;)V
+#addChannel(Lcom/rabbitmq/client/Channel;Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#containsChannel(Lcom/rabbitmq/client/Channel;)Z
+#getConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#getConnection(Ljava/lang/Class;)Lorg/springframework/amqp/rabbit/connection/Connection;
+#getChannel()Lcom/rabbitmq/client/Channel;
+#commitAll()V
+#closeAll()V
+#addDeliveryTag(Lcom/rabbitmq/client/Channel;J)V
+#rollbackAll()V
+#isChannelTransactional()Z
@1.1.2.RELEASE
+#<init>(Lcom/rabbitmq/client/Channel;Z)V
+#isReleaseAfterCompletion()Z
-#<init>(Lcom/rabbitmq/client/Channel;)V
@1.7.1.RELEASE
+#setRequeueOnRollback(Z)V
*#isChannelTransactional()Z[deprecated]
@2.1.0.RELEASE
-#isChannelTransactional()Z[deprecated]
@2.1.2.RELEASE
*#getConnection(Ljava/lang/Class;)Lorg/springframework/amqp/rabbit/connection/Connection;[deprecated]
@2.1.3.RELEASE
*#isFrozen()Z[deprecated]
@2.2.0.RELEASE
-#isFrozen()Z[deprecated]
-#getConnection(Ljava/lang/Class;)Lorg/springframework/amqp/rabbit/connection/Connection;[deprecated]

+###org/springframework/amqp/rabbit/connection/ConsumerChannelRegistry
@1.2.0.RELEASE
+#<init>()V
+#registerConsumerChannel(Lcom/rabbitmq/client/Channel;Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#unRegisterConsumerChannel()V
+#getConsumerChannel()Lcom/rabbitmq/client/Channel;
+#getConsumerChannel(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)Lcom/rabbitmq/client/Channel;
@1.6.0.RELEASE
-#<init>()V

+###org/springframework/amqp/rabbit/connection/ConnectionFactoryUtils
@1.0.0.RELEASE
+#<init>()V
+#isChannelTransactional(Lcom/rabbitmq/client/Channel;Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)Z
+#getTransactionalResourceHolder(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Z)Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;
+#releaseResources(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;)V
+#bindResourceToTransaction(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Z)V
+#registerDeliveryTag(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lcom/rabbitmq/client/Channel;Ljava/lang/Long;)V
@1.1.2.RELEASE
+#registerConsumerChannel(Lcom/rabbitmq/client/Channel;)V
+#unRegisterConsumerChannel()V
@1.1.3.RELEASE
+#getConsumerChannel()Lcom/rabbitmq/client/Channel;
@1.2.0.RELEASE
-#registerConsumerChannel(Lcom/rabbitmq/client/Channel;)V
-#unRegisterConsumerChannel()V
-#getConsumerChannel()Lcom/rabbitmq/client/Channel;
@1.6.0.RELEASE
-#<init>()V
@1.7.1.RELEASE
+#bindResourceToTransaction(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Z)Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;
-#bindResourceToTransaction(Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Z)V
@2.0.2.RELEASE
+#getTransactionalResourceHolder(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;ZZ)Lorg/springframework/amqp/rabbit/connection/RabbitResourceHolder;
+#createConnection(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Z)Lorg/springframework/amqp/rabbit/connection/Connection;
@2.3.10
+#enableAfterCompletionFailureCapture(Z)V
+#checkAfterCompletion()V

+###org/springframework/amqp/rabbit/connection/ConnectionProxy
@1.0.0.RELEASE
+#getTargetConnection()Lorg/springframework/amqp/rabbit/connection/Connection;

+###org/springframework/amqp/rabbit/retry/RejectAndDontRequeueRecoverer
@1.1.2.RELEASE
+#<init>()V
+#recover(Lorg/springframework/amqp/core/Message;Ljava/lang/Throwable;)V
@2.3.7
+#<init>(Ljava/lang/String;)V
+#<init>(Ljava/util/function/Supplier;)V

+###org/springframework/amqp/rabbit/retry/MessageRecoverer
@1.0.0.RELEASE
+#recover(Lorg/springframework/amqp/core/Message;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/retry/RepublishMessageRecoverer
@1.3.0.RELEASE
+#<init>(Lorg/springframework/amqp/core/AmqpTemplate;)V
+#<init>(Lorg/springframework/amqp/core/AmqpTemplate;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/core/AmqpTemplate;Ljava/lang/String;Ljava/lang/String;)V
+#errorRoutingKeyPrefix(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/retry/RepublishMessageRecoverer;
+#setErrorRoutingKeyPrefix(Ljava/lang/String;)V
+#recover(Lorg/springframework/amqp/core/Message;Ljava/lang/Throwable;)V
@2.0.0.RELEASE
+#setDeliveryMode(Lorg/springframework/amqp/core/MessageDeliveryMode;)V
@2.0.5.RELEASE
+#frameMaxHeadroom(I)Lorg/springframework/amqp/rabbit/retry/RepublishMessageRecoverer;
@2.4.8
+#<init>(Lorg/springframework/amqp/core/AmqpTemplate;Lorg/springframework/expression/Expression;Lorg/springframework/expression/Expression;)V

+###org/springframework/amqp/rabbit/retry/NewMessageIdentifier
@1.0.0.RELEASE
+#isNew(Lorg/springframework/amqp/core/Message;)Z

+###org/springframework/amqp/rabbit/retry/MissingMessageIdAdvice
@1.1.2.RELEASE
+#<init>(Lorg/springframework/retry/policy/RetryContextCache;)V
+#invoke(Lorg/aopalliance/intercept/MethodInvocation;)Ljava/lang/Object;
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/retry/MissingMessageIdAdvice

+###org/springframework/amqp/rabbit/retry/MessageKeyGenerator
@1.0.0.RELEASE
+#getKey(Lorg/springframework/amqp/core/Message;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/log4j/AmqpAppender$EventSender
@1.0.0.RELEASE
+#run()V
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/log4j/AmqpAppender$EventSender

+###org/springframework/amqp/rabbit/log4j/AmqpAppender
@1.0.0.RELEASE
+#<init>()V
+#getHost()Ljava/lang/String;
+#setHost(Ljava/lang/String;)V
+#getPort()I
+#setPort(I)V
+#getVirtualHost()Ljava/lang/String;
+#setVirtualHost(Ljava/lang/String;)V
+#getUsername()Ljava/lang/String;
+#setUsername(Ljava/lang/String;)V
+#getPassword()Ljava/lang/String;
+#setPassword(Ljava/lang/String;)V
+#getExchangeName()Ljava/lang/String;
+#setExchangeName(Ljava/lang/String;)V
+#getExchangeType()Ljava/lang/String;
+#setExchangeType(Ljava/lang/String;)V
+#getRoutingKeyPattern()Ljava/lang/String;
+#setRoutingKeyPattern(Ljava/lang/String;)V
+#isDeclareExchange()Z
+#setDeclareExchange(Z)V
+#getContentType()Ljava/lang/String;
+#setContentType(Ljava/lang/String;)V
+#getContentEncoding()Ljava/lang/String;
+#setContentEncoding(Ljava/lang/String;)V
+#getApplicationId()Ljava/lang/String;
+#setApplicationId(Ljava/lang/String;)V
+#getSenderPoolSize()I
+#setSenderPoolSize(I)V
+#getMaxSenderRetries()I
+#setMaxSenderRetries(I)V
+#isDurable()Z
+#setDurable(Z)V
+#isAutoDelete()Z
+#setAutoDelete(Z)V
+#append(Lorg/apache/log4j/spi/LoggingEvent;)V
+#close()V
+#requiresLayout()Z
@1.1.2.RELEASE
+#isGenerateId()Z
+#setGenerateId(Z)V
@1.1.4.RELEASE
+#getCharset()Ljava/lang/String;
+#setCharset(Ljava/lang/String;)V
@1.4.0.RELEASE
+#getDeliveryMode()Ljava/lang/String;
+#setDeliveryMode(Ljava/lang/String;)V
+#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/log4j/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@1.4.4.RELEASE
+#activateOptions()V
@1.5.6.RELEASE
+#setAddresses(Ljava/lang/String;)V
+#getAddresses()Ljava/lang/String;
+#setClientConnectionProperties(Ljava/lang/String;)V
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/log4j/AmqpAppender

+###org/springframework/amqp/rabbit/log4j/AmqpAppender$Event
@1.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/log4j/AmqpAppender;Lorg/apache/log4j/spi/LoggingEvent;Ljava/util/Map;)V
+#getEvent()Lorg/apache/log4j/spi/LoggingEvent;
+#getProperties()Ljava/util/Map;
+#incrementRetries()I
@1.5.0.RELEASE
+#<init>(Lorg/apache/log4j/spi/LoggingEvent;Ljava/util/Map;)V
-#<init>(Lorg/springframework/amqp/rabbit/log4j/AmqpAppender;Lorg/apache/log4j/spi/LoggingEvent;Ljava/util/Map;)V
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/log4j/AmqpAppender$Event

+###org/springframework/amqp/rabbit/support/RabbitExceptionTranslator
@1.2.0.RELEASE
+#<init>()V
+#convertRabbitAccessException(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
@1.6.0.RELEASE
-#<init>()V

+###org/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener
@1.1.0.RELEASE
+#handleConfirm(Lorg/springframework/amqp/rabbit/support/PendingConfirm;Z)V
+#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#removePendingConfirmsReference(Lcom/rabbitmq/client/Channel;Ljava/util/SortedMap;)V
+#getUUID()Ljava/lang/String;
+#isConfirmListener()Z
+#isReturnListener()Z
@1.6.0.RELEASE
+#revoke(Lcom/rabbitmq/client/Channel;)V
-#removePendingConfirmsReference(Lcom/rabbitmq/client/Channel;Ljava/util/SortedMap;)V
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener

+###org/springframework/amqp/rabbit/support/PublisherCallbackChannel
@1.1.0.RELEASE
+#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Ljava/util/SortedMap;
+#removeListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Z
+#addPendingConfirm(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;JLorg/springframework/amqp/rabbit/support/PendingConfirm;)V
@1.4.0.RELEASE
+#getDelegate()Lcom/rabbitmq/client/Channel;
@1.6.0.RELEASE
+#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)V
+#expire(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;J)Ljava/util/Collection;
-#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Ljava/util/SortedMap;
-#removeListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Z
@2.0.0.RELEASE
+#getPendingConfirmsCount(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)I
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/PublisherCallbackChannel

+###org/springframework/amqp/rabbit/support/PendingConfirm
@1.1.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/support/CorrelationData;J)V
+#getCorrelationData()Lorg/springframework/amqp/rabbit/support/CorrelationData;
+#getTimestamp()J
+#toString()Ljava/lang/String;
@1.4.0.RELEASE
+#setCause(Ljava/lang/String;)V
+#getCause()Ljava/lang/String;
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/PendingConfirm

+###org/springframework/amqp/rabbit/support/MessagePropertiesConverter
@1.0.0.RELEASE
+#toMessageProperties(Lcom/rabbitmq/client/AMQP$BasicProperties;Lcom/rabbitmq/client/Envelope;Ljava/lang/String;)Lorg/springframework/amqp/core/MessageProperties;
+#fromMessageProperties(Lorg/springframework/amqp/core/MessageProperties;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$BasicProperties;

+###org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter
@1.0.0.RELEASE
+#<init>()V
+#toMessageProperties(Lcom/rabbitmq/client/AMQP$BasicProperties;Lcom/rabbitmq/client/Envelope;Ljava/lang/String;)Lorg/springframework/amqp/core/MessageProperties;
+#fromMessageProperties(Lorg/springframework/amqp/core/MessageProperties;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$BasicProperties;
@1.4.4.RELEASE
+#<init>(I)V
@1.6.0.RELEASE
+#<init>(IZ)V
+#setCorrelationIdAsString(Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;)V
@1.6.3.RELEASE
*#setCorrelationIdAsString(Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;)V[deprecated]
+#setCorrelationIdPolicy(Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;)V[deprecated]
@2.0.0.RELEASE
-#setCorrelationIdAsString(Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;)V[deprecated]
-#setCorrelationIdPolicy(Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;)V[deprecated]

+###org/springframework/amqp/rabbit/support/PublisherCallbackChannelImpl
@1.1.0.RELEASE
+#<init>(Lcom/rabbitmq/client/Channel;)V
+#addShutdownListener(Lcom/rabbitmq/client/ShutdownListener;)V
+#removeShutdownListener(Lcom/rabbitmq/client/ShutdownListener;)V
+#getCloseReason()Lcom/rabbitmq/client/ShutdownSignalException;
+#notifyListeners()V
+#isOpen()Z
+#getChannelNumber()I
+#getConnection()Lcom/rabbitmq/client/Connection;
+#close(ILjava/lang/String;)V
+#flow(Z)Lcom/rabbitmq/client/AMQP$Channel$FlowOk;
+#getFlow()Lcom/rabbitmq/client/AMQP$Channel$FlowOk;
+#abort()V
+#abort(ILjava/lang/String;)V
+#addFlowListener(Lcom/rabbitmq/client/FlowListener;)V
+#removeFlowListener(Lcom/rabbitmq/client/FlowListener;)Z
+#clearFlowListeners()V
+#getDefaultConsumer()Lcom/rabbitmq/client/Consumer;
+#setDefaultConsumer(Lcom/rabbitmq/client/Consumer;)V
+#basicQos(IIZ)V
+#basicQos(I)V
+#basicPublish(Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#basicPublish(Ljava/lang/String;Ljava/lang/String;ZZLcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclarePassive(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDelete(Ljava/lang/String;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeleteOk;
+#exchangeDelete(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeleteOk;
+#exchangeBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$BindOk;
+#exchangeBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$BindOk;
+#exchangeUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$UnbindOk;
+#exchangeUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$UnbindOk;
+#queueDeclare()Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDeclare(Ljava/lang/String;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDeclarePassive(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDelete(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$DeleteOk;
+#queueDelete(Ljava/lang/String;ZZ)Lcom/rabbitmq/client/AMQP$Queue$DeleteOk;
+#queueBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$BindOk;
+#queueBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$BindOk;
+#queueUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$UnbindOk;
+#queueUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$UnbindOk;
+#queuePurge(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$PurgeOk;
+#basicGet(Ljava/lang/String;Z)Lcom/rabbitmq/client/GetResponse;
+#basicAck(JZ)V
+#basicNack(JZZ)V
+#basicReject(JZ)V
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicCancel(Ljava/lang/String;)V
+#basicRecover()Lcom/rabbitmq/client/AMQP$Basic$RecoverOk;
+#basicRecover(Z)Lcom/rabbitmq/client/AMQP$Basic$RecoverOk;
+#basicRecoverAsync(Z)V
+#txSelect()Lcom/rabbitmq/client/AMQP$Tx$SelectOk;
+#txCommit()Lcom/rabbitmq/client/AMQP$Tx$CommitOk;
+#txRollback()Lcom/rabbitmq/client/AMQP$Tx$RollbackOk;
+#confirmSelect()Lcom/rabbitmq/client/AMQP$Confirm$SelectOk;
+#getNextPublishSeqNo()J
+#waitForConfirms()Z
+#waitForConfirms(J)Z
+#waitForConfirmsOrDie()V
+#waitForConfirmsOrDie(J)V
+#asyncRpc(Lcom/rabbitmq/client/Method;)V
+#rpc(Lcom/rabbitmq/client/Method;)Lcom/rabbitmq/client/Command;
+#addConfirmListener(Lcom/rabbitmq/client/ConfirmListener;)V
+#removeConfirmListener(Lcom/rabbitmq/client/ConfirmListener;)Z
+#clearConfirmListeners()V
+#addReturnListener(Lcom/rabbitmq/client/ReturnListener;)V
+#removeReturnListener(Lcom/rabbitmq/client/ReturnListener;)Z
+#clearReturnListeners()V
+#close()V
+#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Ljava/util/SortedMap;
+#removeListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Z
+#handleAck(JZ)V
+#handleNack(JZ)V
+#addPendingConfirm(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;JLorg/springframework/amqp/rabbit/support/PendingConfirm;)V
+#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
@1.2.0.RELEASE
+#basicPublish(Ljava/lang/String;Ljava/lang/String;ZLcom/rabbitmq/client/AMQP$BasicProperties;[B)V
@1.3.0.RELEASE
*#basicRecoverAsync(Z)V[deprecated]
@1.3.3.RELEASE
*#flow(Z)Lcom/rabbitmq/client/AMQP$Channel$FlowOk;[deprecated]
*#getFlow()Lcom/rabbitmq/client/AMQP$Channel$FlowOk;[deprecated]
+#flowBlocked()Z
+#basicQos(IZ)V
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
@1.3.5.RELEASE
+#shutdownCompleted(Lcom/rabbitmq/client/ShutdownSignalException;)V
@1.4.0.RELEASE
+#exchangeBindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#exchangeDeclareNoWait(Ljava/lang/String;Ljava/lang/String;ZZZLjava/util/Map;)V
+#exchangeDeleteNoWait(Ljava/lang/String;Z)V
+#exchangeUnbindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#queueBindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#queueDeclareNoWait(Ljava/lang/String;ZZZLjava/util/Map;)V
+#queueDeleteNoWait(Ljava/lang/String;ZZ)V
+#getDelegate()Lcom/rabbitmq/client/Channel;
@1.4.6.RELEASE
*#flowBlocked()Z[deprecated]
@1.5.3.RELEASE
+#consumerCount(Ljava/lang/String;)J
+#messageCount(Ljava/lang/String;)J
@1.6.0.RELEASE
+#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)V
+#expire(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;J)Ljava/util/Collection;
-#flow(Z)Lcom/rabbitmq/client/AMQP$Channel$FlowOk;[deprecated]
-#getFlow()Lcom/rabbitmq/client/AMQP$Channel$FlowOk;[deprecated]
-#basicRecoverAsync(Z)V[deprecated]
-#addListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Ljava/util/SortedMap;
-#removeListener(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)Z
@1.7.0.RELEASE
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclareNoWait(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZZLjava/util/Map;)V
@2.0.0.RELEASE
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#addConfirmListener(Lcom/rabbitmq/client/ConfirmCallback;Lcom/rabbitmq/client/ConfirmCallback;)Lcom/rabbitmq/client/ConfirmListener;
+#addReturnListener(Lcom/rabbitmq/client/ReturnCallback;)Lcom/rabbitmq/client/ReturnListener;
+#asyncCompletableRpc(Lcom/rabbitmq/client/Method;)Ljava/util/concurrent/CompletableFuture;
+#getPendingConfirmsCount(Lorg/springframework/amqp/rabbit/support/PublisherCallbackChannel$Listener;)I
-#flowBlocked()Z[deprecated]
-#addFlowListener(Lcom/rabbitmq/client/FlowListener;)V
-#removeFlowListener(Lcom/rabbitmq/client/FlowListener;)Z
-#clearFlowListeners()V
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/PublisherCallbackChannelImpl

+###org/springframework/amqp/rabbit/support/CorrelationData
@1.1.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#getId()Ljava/lang/String;
+#toString()Ljava/lang/String;
@1.6.0.RELEASE
+#setId(Ljava/lang/String;)V
@1.6.7.RELEASE
+#<init>()V
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/CorrelationData

+###org/springframework/amqp/rabbit/config/AbstractExchangeParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/RabbitNamespaceUtils
@1.1.0.RELEASE
+#<init>()V
+#parseContainer(Lorg/w3c/dom/Element;Lorg/springframework/beans/factory/xml/ParserContext;)Lorg/springframework/beans/factory/config/BeanDefinition;
@1.6.0.RELEASE
-#<init>()V

+###org/springframework/amqp/rabbit/config/AbstractRetryOperationsInterceptorFactoryBean
@1.0.0.RELEASE
+#<init>()V
+#setRetryOperations(Lorg/springframework/retry/RetryOperations;)V
+#setMessageRecoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)V
+#isSingleton()Z

+###org/springframework/amqp/rabbit/config/DirectExchangeParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/FanoutExchangeParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/QueueParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/BindingFactoryBean
@1.0.0.RELEASE
+#<init>()V
+#setArguments(Ljava/util/Map;)V
+#setRoutingKey(Ljava/lang/String;)V
+#setExchange(Ljava/lang/String;)V
+#setDestinationQueue(Lorg/springframework/amqp/core/Queue;)V
+#setDestinationExchange(Lorg/springframework/amqp/core/Exchange;)V
+#getObject()Lorg/springframework/amqp/core/Binding;
+#getObjectType()Ljava/lang/Class;
+#isSingleton()Z
+#getObject()Ljava/lang/Object;
@1.2.0.RELEASE
+#setShouldDeclare(Z)V
+#setAdminsThatShouldDeclare([Lorg/springframework/amqp/core/AmqpAdmin;)V
@1.6.0.RELEASE
+#setIgnoreDeclarationExceptions(Ljava/lang/Boolean;)V

+###org/springframework/amqp/rabbit/config/StatefulRetryOperationsInterceptorFactoryBean
@1.0.0.RELEASE
+#<init>()V
+#setMessageKeyGeneretor(Lorg/springframework/amqp/rabbit/retry/MessageKeyGenerator;)V
+#setNewMessageIdentifier(Lorg/springframework/amqp/rabbit/retry/NewMessageIdentifier;)V
+#getObject()Lorg/springframework/retry/interceptor/StatefulRetryOperationsInterceptor;
+#getObjectType()Ljava/lang/Class;
+#isSingleton()Z
+#getObject()Ljava/lang/Object;
@1.2.0.RELEASE
*#setMessageKeyGeneretor(Lorg/springframework/amqp/rabbit/retry/MessageKeyGenerator;)V[deprecated]
+#setMessageKeyGenerator(Lorg/springframework/amqp/rabbit/retry/MessageKeyGenerator;)V
@1.3.0.RELEASE
-#setMessageKeyGeneretor(Lorg/springframework/amqp/rabbit/retry/MessageKeyGenerator;)V[deprecated]

+###org/springframework/amqp/rabbit/config/RabbitNamespaceHandler
@1.0.0.RELEASE
+#<init>()V
+#init()V

+###org/springframework/amqp/rabbit/config/HeadersExchangeParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatelessRetryInterceptorBuilder
@1.3.0.RELEASE
+#build()Lorg/springframework/retry/interceptor/RetryOperationsInterceptor;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;

+###org/springframework/amqp/rabbit/config/StatelessRetryOperationsInterceptorFactoryBean
@1.0.0.RELEASE
+#<init>()V
+#getObject()Lorg/springframework/retry/interceptor/RetryOperationsInterceptor;
+#getObjectType()Ljava/lang/Class;
+#isSingleton()Z
+#getObject()Ljava/lang/Object;

+###org/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder
@1.3.0.RELEASE
+#messageKeyGenerator(Lorg/springframework/amqp/rabbit/retry/MessageKeyGenerator;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#newMessageIdentifier(Lorg/springframework/amqp/rabbit/retry/NewMessageIdentifier;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#recoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#build()Lorg/springframework/retry/interceptor/StatefulRetryOperationsInterceptor;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;
+#recoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
@2.1.0.RELEASE
-#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#maxAttempts(I)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#backOffOptions(JDJ)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#recoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
-#recoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
-#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
-#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
-#backOffOptions(JDJ)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
-#maxAttempts(I)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
-#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;

+###org/springframework/amqp/rabbit/config/RetryInterceptorBuilder
@1.3.0.RELEASE
+#stateful()Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatefulRetryInterceptorBuilder;
+#stateless()Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder$StatelessRetryInterceptorBuilder;
+#retryOperations(Lorg/springframework/retry/RetryOperations;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#maxAttempts(I)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#backOffOptions(JDJ)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#retryPolicy(Lorg/springframework/retry/RetryPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#backOffPolicy(Lorg/springframework/retry/backoff/BackOffPolicy;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#recoverer(Lorg/springframework/amqp/rabbit/retry/MessageRecoverer;)Lorg/springframework/amqp/rabbit/config/RetryInterceptorBuilder;
+#build()Lorg/aopalliance/intercept/MethodInterceptor;
@2.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/TopicExchangeParser
@1.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/NamespaceUtils
@1.0.0.RELEASE
+#<init>()V
+#setValueIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;Ljava/lang/String;)Z
+#setValueIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#isAttributeDefined(Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#addConstructorArgValueIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#addConstructorArgBooleanValueIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;Z)V
+#addConstructorArgRefIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#addConstructorArgParentRefIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#setReferenceIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;Ljava/lang/String;)Z
+#setReferenceIfAttributeDefined(Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;Lorg/w3c/dom/Element;Ljava/lang/String;)Z
+#createElementDescription(Lorg/w3c/dom/Element;)Ljava/lang/String;
+#parseInnerBeanDefinition(Lorg/w3c/dom/Element;Lorg/springframework/beans/factory/xml/ParserContext;)Lorg/springframework/beans/factory/parsing/BeanComponentDefinition;
@1.2.0.RELEASE
+#parseDeclarationControls(Lorg/w3c/dom/Element;Lorg/springframework/beans/factory/support/BeanDefinitionBuilder;)V
@1.4.0.RELEASE
+#createExpressionDefinitionFromValueOrExpression(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/beans/factory/xml/ParserContext;Lorg/w3c/dom/Element;Z)Lorg/springframework/beans/factory/config/BeanDefinition;
+#createExpressionDefIfAttributeDefined(Ljava/lang/String;Lorg/w3c/dom/Element;)Lorg/springframework/beans/factory/config/BeanDefinition;
@2.1.2.RELEASE
*#parseInnerBeanDefinition(Lorg/w3c/dom/Element;Lorg/springframework/beans/factory/xml/ParserContext;)Lorg/springframework/beans/factory/parsing/BeanComponentDefinition;[deprecated]
@2.2.0.RELEASE
-#parseInnerBeanDefinition(Lorg/w3c/dom/Element;Lorg/springframework/beans/factory/xml/ParserContext;)Lorg/springframework/beans/factory/parsing/BeanComponentDefinition;[deprecated]

+###org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer$SharedConnectionNotInitializedException
@1.0.0.RELEASE

+###org/springframework/amqp/rabbit/listener/ConditionalRejectingErrorHandler
@1.3.2.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/listener/FatalExceptionStrategy;)V
+#handleError(Ljava/lang/Throwable;)V
@2.1.0.RELEASE
+#setDiscardFatalsWithXDeath(Z)V
@2.1.9.RELEASE
+#setRejectManual(Z)V

+###org/springframework/amqp/rabbit/listener/BlockingQueueConsumer$DeclarationException
@1.3.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/listener/BlockingQueueConsumer;)V
+#getFailedQueues()Ljava/util/List;
+#getMessage()Ljava/lang/String;
@1.3.9.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/listener/BlockingQueueConsumer;Ljava/lang/Throwable;)V
@1.4.0.RELEASE
-#<init>(Lorg/springframework/amqp/rabbit/listener/BlockingQueueConsumer;Ljava/lang/Throwable;)V
@1.4.3.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/listener/BlockingQueueConsumer;Ljava/lang/Throwable;)V
@1.5.0.RELEASE
-###org/springframework/amqp/rabbit/listener/BlockingQueueConsumer$DeclarationException

+###org/springframework/amqp/rabbit/listener/FatalListenerStartupException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@1.4.0.RELEASE
-###org/springframework/amqp/rabbit/listener/FatalListenerStartupException

+###org/springframework/amqp/rabbit/listener/FatalExceptionStrategy
@1.3.2.RELEASE
+#isFatal(Ljava/lang/Throwable;)Z

+###org/springframework/amqp/rabbit/listener/BlockingQueueConsumer
@1.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZI[Ljava/lang/String;)V
+#getChannel()Lcom/rabbitmq/client/Channel;
+#getConsumerTag()Ljava/lang/String;
+#nextMessage()Lorg/springframework/amqp/core/Message;
+#nextMessage(J)Lorg/springframework/amqp/core/Message;
+#start()V
+#stop()V
+#toString()Ljava/lang/String;
+#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;)V
+#commitIfNecessary(Z)Z
@1.1.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZ[Ljava/lang/String;)V
@1.2.1.RELEASE
+#setQuiesce(J)V
@1.3.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;Z[Ljava/lang/String;)V
@1.3.9.RELEASE
+#setDeclarationRetries(I)V
+#setFailedDeclarationRetryInterval(J)V
+#setRetryDeclarationInterval(J)V
@1.4.0.RELEASE
*#setQuiesce(J)V[deprecated]
-#setDeclarationRetries(I)V
-#setFailedDeclarationRetryInterval(J)V
-#setRetryDeclarationInterval(J)V
@1.4.3.RELEASE
+#setDeclarationRetries(I)V
+#setFailedDeclarationRetryInterval(J)V
+#setRetryDeclarationInterval(J)V
@1.4.5.RELEASE
+#setTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
@1.5.0.RELEASE
+#setBackOffExecution(Lorg/springframework/util/backoff/BackOffExecution;)V
+#getBackOffExecution()Lorg/springframework/util/backoff/BackOffExecution;
@1.6.1.RELEASE
+#setShutdownTimeout(J)V
@1.6.6.RELEASE
+#setLocallyTransacted(Z)V
+#clearDeliveryTags()V
@1.7.2.RELEASE
+#isNormalCancel()Z
@1.7.4.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;ZZ[Ljava/lang/String;)V
@1.7.5.RELEASE
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
+#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
@1.7.10.RELEASE
-#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
-#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
@2.0.0.RELEASE
-#setQuiesce(J)V[deprecated]
-#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
@2.0.1.RELEASE
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
+#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
@2.0.6.RELEASE
-#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
-#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
@2.1.0.RELEASE
+#getConsumerTags()Ljava/util/Collection;
-#getConsumerTag()Ljava/lang/String;
@2.1.18.RELEASE
+#setMissingQueuePublisher(Ljava/util/function/Consumer;)V
@2.2.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/support/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZI[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/support/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZ[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/support/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/support/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;Z[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/support/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;ZZ[Ljava/lang/String;)V
-#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZI[Ljava/lang/String;)V
-#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZ[Ljava/lang/String;)V
-#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;[Ljava/lang/String;)V
-#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;Z[Ljava/lang/String;)V
-#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;Lorg/springframework/amqp/rabbit/listener/ActiveObjectCounter;Lorg/springframework/amqp/core/AcknowledgeMode;ZIZLjava/util/Map;ZZ[Ljava/lang/String;)V
-#setMissingQueuePublisher(Ljava/util/function/Consumer;)V
@2.2.14.RELEASE
+#setMissingQueuePublisher(Ljava/util/function/Consumer;)V
@2.2.17.RELEASE
+#setGlobalQos(Z)V
@2.2.21.RELEASE
+#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;J)V
@2.3.0
+#setConsumeDelay(J)V
-#setMissingQueuePublisher(Ljava/util/function/Consumer;)V
-#setGlobalQos(Z)V
-#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;J)V
@2.3.3
+#setMissingQueuePublisher(Ljava/util/function/Consumer;)V
@2.3.7
+#setGlobalQos(Z)V
@2.3.13
+#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;J)V
@2.4.0
-#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;J)V
@2.4.1
+#rollbackOnExceptionIfNecessary(Ljava/lang/Throwable;J)V
@2.4.6
+#setMessageAckListener(Lorg/springframework/amqp/rabbit/listener/MessageAckListener;)V

+###org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
+#setRecoveryInterval(J)V
+#setConcurrentConsumers(I)V
+#setReceiveTimeout(J)V
+#setShutdownTimeout(J)V
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#setPrefetchCount(I)V
+#setTxSize(I)V
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#setTransactionAttribute(Lorg/springframework/transaction/interceptor/TransactionAttribute;)V
+#setMessagePropertiesConverter(Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;)V
+#getActiveConsumerCount()I
@1.1.0.RELEASE
+#setDefaultRequeueRejected(Z)V
@1.3.0.RELEASE
+#setMaxConcurrentConsumers(I)V
+#setExclusive(Z)V
+#setStartConsumerMinInterval(J)V
+#setStopConsumerMinInterval(J)V
+#setConsecutiveActiveTrigger(I)V
+#setConsecutiveIdleTrigger(I)V
+#setConsumerArguments(Ljava/util/Map;)V
+#setRabbitAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#setQueueNames([Ljava/lang/String;)V
+#setQueues([Lorg/springframework/amqp/core/Queue;)V
+#addQueueNames([Ljava/lang/String;)V
+#addQueues([Lorg/springframework/amqp/core/Queue;)V
+#removeQueueNames([Ljava/lang/String;)Z
+#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
@1.3.5.RELEASE
+#setMissingQueuesFatal(Z)V
@1.3.9.RELEASE
+#setDeclarationRetries(I)V
+#setFailedDeclarationRetryInterval(J)V
+#setRetryDeclarationInterval(J)V
@1.4.0.RELEASE
+#setAutoDeclare(Z)V
-#setDeclarationRetries(I)V
-#setFailedDeclarationRetryInterval(J)V
-#setRetryDeclarationInterval(J)V
@1.4.3.RELEASE
+#setDeclarationRetries(I)V
+#setFailedDeclarationRetryInterval(J)V
+#setRetryDeclarationInterval(J)V
@1.4.5.RELEASE
+#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
@1.5.0.RELEASE
+#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#setExclusiveConsumerExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
@1.5.2.RELEASE
+#toString()Ljava/lang/String;
@1.6.0.RELEASE
+#setMismatchedQueuesFatal(Z)V
+#setIdleEventInterval(J)V
@1.7.1.RELEASE
+#setAlwaysRequeueWithTxManagerRollback(Z)V
@1.7.4.RELEASE
+#setNoLocal(Z)V
+#setPossibleAuthenticationFailureFatal(Z)V
@1.7.5.RELEASE
+#setConsumerStartTimeout(J)V
@2.0.0.RELEASE
+#setConcurrency(Ljava/lang/String;)V
-#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
-#setRecoveryInterval(J)V
-#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
-#setNoLocal(Z)V
-#setShutdownTimeout(J)V
-#setTaskExecutor(Ljava/util/concurrent/Executor;)V
-#setPrefetchCount(I)V
-#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
-#setTransactionAttribute(Lorg/springframework/transaction/interceptor/TransactionAttribute;)V
-#setMessagePropertiesConverter(Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;)V
-#setDefaultRequeueRejected(Z)V
-#setConsumerArguments(Ljava/util/Map;)V
-#setRabbitAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
-#setMismatchedQueuesFatal(Z)V
-#setPossibleAuthenticationFailureFatal(Z)V
-#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
-#setQueues([Lorg/springframework/amqp/core/Queue;)V
-#setAutoDeclare(Z)V
-#addQueues([Lorg/springframework/amqp/core/Queue;)V
-#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
-#setFailedDeclarationRetryInterval(J)V
-#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
-#setExclusiveConsumerExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
-#setIdleEventInterval(J)V
-#setAlwaysRequeueWithTxManagerRollback(Z)V
-#setConsumerStartTimeout(J)V
@2.0.1.RELEASE
+#setConsumerStartTimeout(J)V
@2.0.7.RELEASE
+#addQueues([Lorg/springframework/amqp/core/Queue;)V
+#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
@2.0.8.RELEASE
-#addQueues([Lorg/springframework/amqp/core/Queue;)V
-#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
@2.1.0.RELEASE
+#addQueues([Lorg/springframework/amqp/core/Queue;)V
+#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
@2.2.0.RELEASE
+#setBatchSize(I)V
*#setTxSize(I)V[deprecated]
+#setConsumerBatchEnabled(Z)V
@2.2.4.RELEASE
+#isConsumerBatchEnabled()Z
@2.3.0
-#setTxSize(I)V[deprecated]
@2.3.16
+#stop(Ljava/lang/Runnable;)V
@2.4.0
-#stop(Ljava/lang/Runnable;)V
@2.4.4
+#stop(Ljava/lang/Runnable;)V

+###org/springframework/amqp/rabbit/listener/FatalListenerExecutionException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V
@1.4.0.RELEASE
-###org/springframework/amqp/rabbit/listener/FatalListenerExecutionException

+###org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer$ContainerDelegate
@1.0.0.RELEASE
+#invokeListener(Lcom/rabbitmq/client/Channel;Lorg/springframework/amqp/core/Message;)V
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer$ContainerDelegate

+###org/springframework/amqp/rabbit/listener/ConsumerCancelledException
@1.1.0.RELEASE
+#<init>()V
@1.4.0.RELEASE
-###org/springframework/amqp/rabbit/listener/ConsumerCancelledException

+###org/springframework/amqp/rabbit/listener/MessageRejectedWhileStoppingException
@1.0.0.RELEASE
+#<init>()V
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/listener/MessageRejectedWhileStoppingException

+###org/springframework/amqp/rabbit/listener/ListenerExecutionFailedException
@1.0.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
@1.3.2.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;Lorg/springframework/amqp/core/Message;)V
+#getFailedMessage()Lorg/springframework/amqp/core/Message;
@1.4.0.RELEASE
-###org/springframework/amqp/rabbit/listener/ListenerExecutionFailedException

+###org/springframework/amqp/rabbit/listener/ActiveObjectCounter
@1.0.0.RELEASE
+#<init>()V
+#add(Ljava/lang/Object;)V
+#release(Ljava/lang/Object;)V
+#await(Ljava/lang/Long;Ljava/util/concurrent/TimeUnit;)Z
+#getCount()I
+#reset()V
@1.7.5.RELEASE
+#deactivate()V
+#isActive()Z
@2.0.0.RELEASE
+#await(JLjava/util/concurrent/TimeUnit;)Z
-#await(Ljava/lang/Long;Ljava/util/concurrent/TimeUnit;)Z
-#deactivate()V
-#isActive()Z
@2.0.1.RELEASE
+#deactivate()V
+#isActive()Z
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/listener/ActiveObjectCounter

+###org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer
@1.0.0.RELEASE
+#<init>()V
+#setAcknowledgeMode(Lorg/springframework/amqp/core/AcknowledgeMode;)V
+#getAcknowledgeMode()Lorg/springframework/amqp/core/AcknowledgeMode;
+#setQueueNames([Ljava/lang/String;)V
+#setQueues([Lorg/springframework/amqp/core/Queue;)V
+#getQueueNames()[Ljava/lang/String;
+#isExposeListenerChannel()Z
+#setExposeListenerChannel(Z)V
+#setMessageListener(Ljava/lang/Object;)V
+#getMessageListener()Ljava/lang/Object;
+#setErrorHandler(Lorg/springframework/util/ErrorHandler;)V
+#setAutoStartup(Z)V
+#isAutoStartup()Z
+#setPhase(I)V
+#getPhase()I
+#setBeanName(Ljava/lang/String;)V
+#afterPropertiesSet()V
+#destroy()V
+#initialize()V
+#shutdown()V
+#isActive()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#isRunning()Z
@1.3.0.RELEASE
+#addQueueNames([Ljava/lang/String;)V
+#addQueues([Lorg/springframework/amqp/core/Queue;)V
+#removeQueueNames([Ljava/lang/String;)Z
+#removeQueues([Lorg/springframework/amqp/core/Queue;)Z
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@1.4.0.RELEASE
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#setupMessageListener(Ljava/lang/Object;)V
@1.4.2.RELEASE
+#setDeBatchingEnabled(Z)V
+#setAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
@1.6.0.RELEASE
+#getListenerId()Ljava/lang/String;
+#setListenerId(Ljava/lang/String;)V
@1.6.9.RELEASE
+#setLookupKeyQualifier(Ljava/lang/String;)V
@1.7.0.RELEASE
-#setLookupKeyQualifier(Ljava/lang/String;)V
@1.7.2.RELEASE
+#setLookupKeyQualifier(Ljava/lang/String;)V
@1.7.4.RELEASE
+#setForceCloseChannel(Z)V
@2.0.0.RELEASE
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#setMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
+#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/core/ChannelAwareMessageListener;)V
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
+#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
+#setConsumerArguments(Ljava/util/Map;)V
+#setExclusive(Z)V
+#setNoLocal(Z)V
+#setDefaultRequeueRejected(Z)V
+#setPrefetchCount(I)V
+#setShutdownTimeout(J)V
+#setIdleEventInterval(J)V
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#setTransactionAttribute(Lorg/springframework/transaction/interceptor/TransactionAttribute;)V
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#setRecoveryInterval(J)V
+#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#setMessagePropertiesConverter(Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;)V
+#setRabbitAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#setMissingQueuesFatal(Z)V
+#setMismatchedQueuesFatal(Z)V
+#setPossibleAuthenticationFailureFatal(Z)V
+#isPossibleAuthenticationFailureFatal()Z
+#setAutoDeclare(Z)V
+#setFailedDeclarationRetryInterval(J)V
+#setStatefulRetryFatalWithNullMessageId(Z)V
+#setExclusiveConsumerExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
+#setAlwaysRequeueWithTxManagerRollback(Z)V
@2.0.9.RELEASE
*#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
*#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
+#setErrorHandlerLoggerName(Ljava/lang/String;)V
@2.0.14.RELEASE
+#lazyLoad()V
@2.1.0.RELEASE
*#setMessageListener(Ljava/lang/Object;)V[deprecated]
+#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/listener/api/ChannelAwareMessageListener;)V[deprecated]
+#setAmqpAdmin(Lorg/springframework/amqp/core/AmqpAdmin;)V
+#setRabbitAdmin(Lorg/springframework/amqp/core/AmqpAdmin;)V[deprecated]
+#setupMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
-#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/core/ChannelAwareMessageListener;)V
-#setRabbitAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
-#setErrorHandlerLoggerName(Ljava/lang/String;)V
-#setupMessageListener(Ljava/lang/Object;)V
-#lazyLoad()V
@2.1.1.RELEASE
*#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
*#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
+#setErrorHandlerLoggerName(Ljava/lang/String;)V
@2.1.4.RELEASE
+#addAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#removeAfterReceivePostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)Z
@2.1.5.RELEASE
+#lazyLoad()V
@2.1.8.RELEASE
-#stop(Ljava/lang/Runnable;)V
@2.2.0.RELEASE
+#setBatchingStrategy(Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)V
+#setMicrometerTags(Ljava/util/Map;)V
+#setMicrometerEnabled(Z)V
-#setMessageListener(Ljava/lang/Object;)V[deprecated]
-#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/listener/api/ChannelAwareMessageListener;)V[deprecated]
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
-#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
-#setRabbitAdmin(Lorg/springframework/amqp/core/AmqpAdmin;)V[deprecated]
@2.2.3.RELEASE
+#stop(Ljava/lang/Runnable;)V
@2.2.8.RELEASE
+#getConsumerArguments()Ljava/util/Map;
@2.2.12.RELEASE
+#setjavaLangErrorHandler(Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer$JavaLangErrorHandler;)V
@2.2.17.RELEASE
+#setGlobalQos(Z)V
@2.3.0
+#setConsumeDelay(J)V
-#setGlobalQos(Z)V
@2.3.7
+#setGlobalQos(Z)V
@2.3.16
-#stop(Ljava/lang/Runnable;)V
@2.4.0
+#stop(Ljava/lang/Runnable;)V
@2.4.4
-#stop(Ljava/lang/Runnable;)V
@2.4.6
+#setMessageAckListener(Lorg/springframework/amqp/rabbit/listener/MessageAckListener;)V
@3.0.0
+#getMessageListener()Lorg/springframework/amqp/core/MessageListener;
+#setObservationEnabled(Z)V
+#setObservationConvention(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservationConvention;)V

+###org/springframework/amqp/rabbit/listener/adapter/MessageListenerAdapter
@1.0.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/Object;)V
+#<init>(Ljava/lang/Object;Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#setDelegate(Ljava/lang/Object;)V
+#setEncoding(Ljava/lang/String;)V
+#setDefaultListenerMethod(Ljava/lang/String;)V
+#setResponseRoutingKey(Ljava/lang/String;)V
+#setResponseExchange(Ljava/lang/String;)V
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#setMandatoryPublish(Z)V
+#setImmediatePublish(Z)V
+#onMessage(Lorg/springframework/amqp/core/Message;)V
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
@1.2.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;)V
@1.3.0.RELEASE
*#setImmediatePublish(Z)V[deprecated]
@1.4.0.RELEASE
-#setEncoding(Ljava/lang/String;)V
-#setResponseRoutingKey(Ljava/lang/String;)V
-#setResponseExchange(Ljava/lang/String;)V
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
-#setMandatoryPublish(Z)V
-#setImmediatePublish(Z)V[deprecated]
-#onMessage(Lorg/springframework/amqp/core/Message;)V
@1.5.0.RELEASE
+#setQueueOrTagToMethodName(Ljava/util/Map;)V
+#addQueueOrTagToMethodName(Ljava/lang/String;Ljava/lang/String;)V
+#removeQueueOrTagToMethodName(Ljava/lang/String;)Ljava/lang/String;

+###org/springframework/amqp/rabbit/core/RabbitAdmin
@1.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setAutoStartup(Z)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;
+#declareExchange(Lorg/springframework/amqp/core/Exchange;)V
+#deleteExchange(Ljava/lang/String;)Z
+#declareQueue(Lorg/springframework/amqp/core/Queue;)V
+#declareQueue()Lorg/springframework/amqp/core/Queue;
+#deleteQueue(Ljava/lang/String;)Z
+#deleteQueue(Ljava/lang/String;ZZ)V
+#purgeQueue(Ljava/lang/String;Z)V
+#declareBinding(Lorg/springframework/amqp/core/Binding;)V
+#removeBinding(Lorg/springframework/amqp/core/Binding;)V
+#isAutoStartup()Z
+#afterPropertiesSet()V
+#initialize()V
@1.2.0.RELEASE
+#setIgnoreDeclarationExceptions(Z)V
+#getQueueProperties(Ljava/lang/String;)Ljava/util/Properties;
@1.3.0.RELEASE
+#declareQueue(Lorg/springframework/amqp/core/Queue;)Ljava/lang/String;
-#declareQueue(Lorg/springframework/amqp/core/Queue;)V
@1.6.0.RELEASE
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#getLastDeclarationExceptionEvent()Lorg/springframework/amqp/rabbit/core/DeclarationExceptionEvent;
@1.7.7.RELEASE
+#setDeclareCollections(Z)V
@1.7.8.RELEASE
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
@2.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
-#setDeclareCollections(Z)V
-#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
@2.0.3.RELEASE
+#setDeclareCollections(Z)V
@2.0.4.RELEASE
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
@2.1.0.RELEASE
*#setDeclareCollections(Z)V[deprecated]
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#purgeQueue(Ljava/lang/String;)I
+#setBeanName(Ljava/lang/String;)V
+#getBeanName()Ljava/lang/String;
@2.1.9.RELEASE
+#setExplicitDeclarationsOnly(Z)V
@2.2.0.RELEASE
+#getQueueInfo(Ljava/lang/String;)Lorg/springframework/amqp/core/QueueInformation;
-#setDeclareCollections(Z)V[deprecated]
@2.4.0
+#isRedeclareManualDeclarations()Z
+#setRedeclareManualDeclarations(Z)V
+#resetAllManualDeclarations()V

+###org/springframework/amqp/rabbit/core/RabbitTemplate$ConfirmCallback
@1.1.0.RELEASE
+#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;Z)V
@1.4.0.RELEASE
+#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;ZLjava/lang/String;)V
-#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;Z)V
@2.1.0.RELEASE
+#confirm(Lorg/springframework/amqp/rabbit/connection/CorrelationData;ZLjava/lang/String;)V
-#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;ZLjava/lang/String;)V

+###org/springframework/amqp/rabbit/core/RabbitOperations
@1.0.0.RELEASE
+#execute(Lorg/springframework/amqp/rabbit/core/ChannelCallback;)Ljava/lang/Object;
@2.0.0.RELEASE
+#invoke(Lorg/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback;)Ljava/lang/Object;
+#waitForConfirms(J)Z
+#waitForConfirmsOrDie(J)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
@2.1.0.RELEASE
+#invoke(Lorg/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback;Lcom/rabbitmq/client/ConfirmCallback;Lcom/rabbitmq/client/ConfirmCallback;)Ljava/lang/Object;
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
@2.2.3.RELEASE
+#start()V
+#stop()V
+#isRunning()Z
@2.3.0
+#send(Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V

+###org/springframework/amqp/rabbit/core/ChannelCallback
@1.0.0.RELEASE
+#doInRabbit(Lcom/rabbitmq/client/Channel;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/core/RabbitTemplate
@1.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setExchange(Ljava/lang/String;)V
+#setRoutingKey(Ljava/lang/String;)V
+#setQueue(Ljava/lang/String;)V
+#setEncoding(Ljava/lang/String;)V
+#setReplyTimeout(J)V
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#setMessagePropertiesConverter(Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#send(Lorg/springframework/amqp/core/Message;)V
+#send(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#convertAndSend(Ljava/lang/Object;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V
+#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#receive()Lorg/springframework/amqp/core/Message;
+#receive(Ljava/lang/String;)Lorg/springframework/amqp/core/Message;
+#receiveAndConvert()Ljava/lang/Object;
+#receiveAndConvert(Ljava/lang/String;)Ljava/lang/Object;
+#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/core/Message;
+#convertSendAndReceive(Ljava/lang/Object;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/lang/Object;
+#execute(Lorg/springframework/amqp/rabbit/core/ChannelCallback;)Ljava/lang/Object;
@1.1.0.RELEASE
+#setReplyQueue(Lorg/springframework/amqp/core/Queue;)V
+#setConfirmCallback(Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ConfirmCallback;)V
+#setReturnCallback(Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback;)V
+#setMandatory(Z)V
+#setImmediate(Z)V
+#getUnconfirmed(J)Ljava/util/Collection;
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#correlationconvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#handleConfirm(Lorg/springframework/amqp/rabbit/support/PendingConfirm;Z)V
+#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#isConfirmListener()Z
+#isReturnListener()Z
+#removePendingConfirmsReference(Lcom/rabbitmq/client/Channel;Ljava/util/SortedMap;)V
+#getUUID()Ljava/lang/String;
+#onMessage(Lorg/springframework/amqp/core/Message;)V
@1.2.0.RELEASE
*#setImmediate(Z)V[deprecated]
+#setCorrelationKey(Ljava/lang/String;)V
@1.3.0.RELEASE
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
*#correlationconvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V[deprecated]
+#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#receiveAndReply(Lorg/springframework/amqp/core/ReceiveAndReplyCallback;)Z
+#receiveAndReply(Ljava/lang/String;Lorg/springframework/amqp/core/ReceiveAndReplyCallback;)Z
+#receiveAndReply(Lorg/springframework/amqp/core/ReceiveAndReplyCallback;Ljava/lang/String;Ljava/lang/String;)Z
+#receiveAndReply(Ljava/lang/String;Lorg/springframework/amqp/core/ReceiveAndReplyCallback;Ljava/lang/String;Ljava/lang/String;)Z
+#receiveAndReply(Lorg/springframework/amqp/core/ReceiveAndReplyCallback;Lorg/springframework/amqp/core/ReplyToAddressCallback;)Z
+#receiveAndReply(Ljava/lang/String;Lorg/springframework/amqp/core/ReceiveAndReplyCallback;Lorg/springframework/amqp/core/ReplyToAddressCallback;)Z
-#setImmediate(Z)V[deprecated]
@1.4.0.RELEASE
+#setMandatoryExpression(Lorg/springframework/expression/Expression;)V
+#setSendConnectionFactorySelectorExpression(Lorg/springframework/expression/Expression;)V
+#setReceiveConnectionFactorySelectorExpression(Lorg/springframework/expression/Expression;)V
+#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
@1.4.2.RELEASE
+#setBeforePublishPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#setAfterReceivePostProcessor([Lorg/springframework/amqp/core/MessagePostProcessor;)V
@1.5.0.RELEASE
*#setReplyQueue(Lorg/springframework/amqp/core/Queue;)V[deprecated]
+#setReplyAddress(Ljava/lang/String;)V
+#setReceiveTimeout(J)V
*#setAfterReceivePostProcessor([Lorg/springframework/amqp/core/MessagePostProcessor;)V[deprecated]
+#setAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#expectedQueueNames()Ljava/util/Collection;
+#sendAndReceive(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
@1.6.0.RELEASE
+#getExchange()Ljava/lang/String;
+#getRoutingKey()Ljava/lang/String;
+#setUseTemporaryReplyQueues(Z)V
+#setUserIdExpression(Lorg/springframework/expression/Expression;)V
+#setUserIdExpressionString(Ljava/lang/String;)V
+#receive(J)Lorg/springframework/amqp/core/Message;
+#receive(Ljava/lang/String;J)Lorg/springframework/amqp/core/Message;
+#receiveAndConvert(J)Ljava/lang/Object;
+#receiveAndConvert(Ljava/lang/String;J)Ljava/lang/Object;
+#revoke(Lcom/rabbitmq/client/Channel;)V
-#removePendingConfirmsReference(Lcom/rabbitmq/client/Channel;Ljava/util/SortedMap;)V
@1.6.2.RELEASE
+#determineConfirmsReturnsCapability(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
@1.6.7.RELEASE
+#setCorrelationDataPostProcessor(Lorg/springframework/amqp/rabbit/core/CorrelationDataPostProcessor;)V
@2.0.0.RELEASE
+#getEncoding()Ljava/lang/String;
+#setMandatoryExpressionString(Ljava/lang/String;)V
+#setUseDirectReplyToContainer(Z)V
+#setBeanName(Ljava/lang/String;)V
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#getUnconfirmedCount()I
+#start()V
+#stop()V
+#isRunning()Z
+#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#receiveAndConvert(Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#receiveAndConvert(Ljava/lang/String;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#receiveAndConvert(JLorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#receiveAndConvert(Ljava/lang/String;JLorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#isMandatoryFor(Lorg/springframework/amqp/core/Message;)Ljava/lang/Boolean;
+#invoke(Lorg/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback;)Ljava/lang/Object;
+#waitForConfirms(J)Z
+#waitForConfirmsOrDie(J)V
+#doSend(Lcom/rabbitmq/client/Channel;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;ZLorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#addListener(Lcom/rabbitmq/client/Channel;)V
-#setReplyQueue(Lorg/springframework/amqp/core/Queue;)V[deprecated]
-#setAfterReceivePostProcessor([Lorg/springframework/amqp/core/MessagePostProcessor;)V[deprecated]
-#correlationconvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V[deprecated]
@2.0.1.RELEASE
+#setUserCorrelationId(Z)V
@2.0.2.RELEASE
+#isUsePublisherConnection()Z
+#setUsePublisherConnection(Z)V
@2.0.11.RELEASE
+#setReplyErrorHandler(Lorg/springframework/util/ErrorHandler;)V
@2.1.0.RELEASE
+#setNoLocalReplyConsumer(Z)V
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#sendAndReceive(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Lorg/springframework/amqp/core/Message;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/connection/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
+#invoke(Lorg/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback;Lcom/rabbitmq/client/ConfirmCallback;Lcom/rabbitmq/client/ConfirmCallback;)Ljava/lang/Object;
+#doSend(Lcom/rabbitmq/client/Channel;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;ZLorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#handleConfirm(Lorg/springframework/amqp/rabbit/connection/PendingConfirm;Z)V
-#setReplyErrorHandler(Lorg/springframework/util/ErrorHandler;)V
-#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#correlationConvertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#sendAndReceive(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
-#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
-#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/core/Message;
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/amqp/rabbit/support/CorrelationData;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/lang/Object;
-#invoke(Lorg/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback;)Ljava/lang/Object;
-#doSend(Lcom/rabbitmq/client/Channel;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;ZLorg/springframework/amqp/rabbit/support/CorrelationData;)V
-#handleConfirm(Lorg/springframework/amqp/rabbit/support/PendingConfirm;Z)V
@2.1.2.RELEASE
*#setQueue(Ljava/lang/String;)V[deprecated]
+#setDefaultReceiveQueue(Ljava/lang/String;)V
@2.1.3.RELEASE
+#setReplyErrorHandler(Lorg/springframework/util/ErrorHandler;)V
@2.1.4.RELEASE
+#addBeforePublishPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#removeBeforePublishPostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)Z
+#addAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#removeAfterReceivePostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)Z
@2.1.5.RELEASE
+#getAfterReceivePostProcessors()Ljava/util/Collection;
@2.2.0.RELEASE
-#setQueue(Ljava/lang/String;)V[deprecated]
@2.2.3.RELEASE
+#destroy()V
@2.2.22.RELEASE
+#getDefaultReceiveQueue()Ljava/lang/String;
@2.3.0
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
*#setReturnCallback(Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback;)V[deprecated]
+#setReturnsCallback(Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnsCallback;)V
+#send(Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
+#handleReturn(Lcom/rabbitmq/client/Return;)V
-#getDefaultReceiveQueue()Ljava/lang/String;
@2.3.5
+#nullSafeExchange(Ljava/lang/String;)Ljava/lang/String;
+#nullSafeRoutingKey(Ljava/lang/String;)Ljava/lang/String;
@2.3.7
+#setUseChannelForCorrelation(Z)V
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
*#onMessage(Lorg/springframework/amqp/core/Message;)V[deprecated]
@2.3.14
+#getDefaultReceiveQueue()Ljava/lang/String;
@2.4.0
-#getDefaultReceiveQueue()Ljava/lang/String;
@2.4.2
+#getDefaultReceiveQueue()Ljava/lang/String;
@2.4.4
-#determineConfirmsReturnsCapability(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
@2.4.8
+#addConsumerArg(Ljava/lang/String;Ljava/lang/Object;)V
+#removeConsumerArg(Ljava/lang/String;)Ljava/lang/Object;
@3.0.0
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setObservationEnabled(Z)V
+#setObservationConvention(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservationConvention;)V
-#setReturnCallback(Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback;)V[deprecated]
-#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
-#onMessage(Lorg/springframework/amqp/core/Message;)V[deprecated]

+###org/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback
@1.1.0.RELEASE
+#returnedMessage(Lorg/springframework/amqp/core/Message;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
@2.3.0
+#returnedMessage(Lorg/springframework/amqp/core/ReturnedMessage;)V
@3.0.0
-###org/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback

+###org/springframework/amqp/rabbit/core/ChannelAwareMessageListener
@1.0.0.RELEASE
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/core/ChannelAwareMessageListener

+###org/springframework/amqp/rabbit/core/support/RabbitGatewaySupport
@1.0.0.RELEASE
+#<init>()V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#setRabbitTemplate(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
+#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;
+#afterPropertiesSet()V
@1.5.0.RELEASE
-###org/springframework/amqp/rabbit/core/support/RabbitGatewaySupport

+###org/springframework/amqp/rabbit/listener/MessageListenerContainer
@1.4.0.RELEASE
+#setupMessageListener(Ljava/lang/Object;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
@2.0.9.RELEASE
*#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
@2.0.14.RELEASE
+#lazyLoad()V
@2.1.0.RELEASE
+#setupMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
-#setupMessageListener(Ljava/lang/Object;)V
-#lazyLoad()V
@2.1.1.RELEASE
*#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
@2.1.5.RELEASE
+#lazyLoad()V
@2.2.0.RELEASE
-#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;[deprecated]
@2.2.4.RELEASE
+#isConsumerBatchEnabled()Z
@2.3.10
+#setAutoStartup(Z)V
+#getMessageListener()Ljava/lang/Object;
+#afterPropertiesSet()V
@2.4.0
+#setQueueNames([Ljava/lang/String;)V
+#setListenerId(Ljava/lang/String;)V

+###org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry
@1.4.0.RELEASE
+#<init>()V
+#getListenerContainer(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;
+#getListenerContainers()Ljava/util/Collection;
+#registerListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;Lorg/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory;)V
+#destroy()V
+#getPhase()I
+#isAutoStartup()Z
+#start()V
+#stop()V
+#stop(Ljava/lang/Runnable;)V
+#isRunning()Z
@1.4.5.RELEASE
+#registerListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;Lorg/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory;Z)V
@1.5.0.RELEASE
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@1.5.2.RELEASE
+#getListenerContainerIds()Ljava/util/Set;
@1.5.6.RELEASE
+#onApplicationEvent(Lorg/springframework/context/event/ContextRefreshedEvent;)V
+#onApplicationEvent(Lorg/springframework/context/ApplicationEvent;)V
@2.0.6.RELEASE
+#unregisterListenerContainer(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;

+###org/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory
@1.4.0.RELEASE
+#createListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;)Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;
@2.1.0.RELEASE
+#createListenerContainer()Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;

+###org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar
@1.4.0.RELEASE
+#<init>()V
+#setEndpointRegistry(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry;)V
+#getEndpointRegistry()Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry;
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
+#getMessageHandlerMethodFactory()Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;
+#setContainerFactory(Lorg/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory;)V
+#setContainerFactoryBeanName(Ljava/lang/String;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#afterPropertiesSet()V
+#registerEndpoint(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;Lorg/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory;)V
+#registerEndpoint(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;)V
@2.3.7
+#getCustomMethodArgumentResolvers()Ljava/util/List;
+#setCustomMethodArgumentResolvers([Lorg/springframework/messaging/handler/invocation/HandlerMethodArgumentResolver;)V
+#getValidator()Lorg/springframework/validation/Validator;
+#setValidator(Lorg/springframework/validation/Validator;)V

+###org/springframework/amqp/rabbit/listener/RabbitListenerEndpoint
@1.4.0.RELEASE
+#getId()Ljava/lang/String;
+#setupListenerContainer(Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;)V
@1.5.0.RELEASE
+#getGroup()Ljava/lang/String;
@2.0.0.RELEASE
+#getConcurrency()Ljava/lang/String;
+#getAutoStartup()Ljava/lang/Boolean;
@2.0.9.RELEASE
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
@2.1.0.RELEASE
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
-#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
@2.1.1.RELEASE
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
@2.2.0.RELEASE
+#getTaskExecutor()Lorg/springframework/core/task/TaskExecutor;
+#setBatchListener(Z)V
+#setBatchingStrategy(Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)V
+#getAckMode()Lorg/springframework/amqp/core/AcknowledgeMode;
@2.2.5.RELEASE
+#getReplyPostProcessor()Lorg/springframework/amqp/rabbit/listener/adapter/ReplyPostProcessor;
@2.3.0
+#getReplyContentType()Ljava/lang/String;
+#isConverterWinsContentType()Z
@2.4.7
+#getBatchingStrategy()Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;
@3.0.0
+#getBatchListener()Ljava/lang/Boolean;

+###org/springframework/amqp/rabbit/listener/QueuesNotAvailableException
@1.3.5.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/listener/AbstractRabbitListenerEndpoint
@1.4.0.RELEASE
+#<init>()V
+#setId(Ljava/lang/String;)V
+#getId()Ljava/lang/String;
+#setQueues([Lorg/springframework/amqp/core/Queue;)V
+#getQueues()Ljava/util/Collection;
+#getQueueNames()Ljava/util/Collection;
+#setQueueNames([Ljava/lang/String;)V
+#setExclusive(Z)V
+#isExclusive()Z
+#setPriority(Ljava/lang/Integer;)V
+#getPriority()Ljava/lang/Integer;
+#setAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#getAdmin()Lorg/springframework/amqp/rabbit/core/RabbitAdmin;
+#setupListenerContainer(Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;)V
+#toString()Ljava/lang/String;
@1.5.0.RELEASE
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#getGroup()Ljava/lang/String;
+#setGroup(Ljava/lang/String;)V
@2.0.0.RELEASE
+#setConcurrency(Ljava/lang/String;)V
+#getConcurrency()Ljava/lang/String;
+#setAutoStartup(Ljava/lang/Boolean;)V
+#getAutoStartup()Ljava/lang/Boolean;
@2.0.9.RELEASE
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.1.0.RELEASE
+#setAdmin(Lorg/springframework/amqp/core/AmqpAdmin;)V
+#getAdmin()Lorg/springframework/amqp/core/AmqpAdmin;
-#setAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
-#getAdmin()Lorg/springframework/amqp/rabbit/core/RabbitAdmin;
-#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.1.1.RELEASE
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.2.0.RELEASE
+#getTaskExecutor()Lorg/springframework/core/task/TaskExecutor;
+#setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
+#isBatchListener()Z
+#setBatchListener(Z)V
+#getBatchingStrategy()Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;
+#setBatchingStrategy(Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)V
+#getAckMode()Lorg/springframework/amqp/core/AcknowledgeMode;
+#setAckMode(Lorg/springframework/amqp/core/AcknowledgeMode;)V
@2.2.5.RELEASE
+#getReplyPostProcessor()Lorg/springframework/amqp/rabbit/listener/adapter/ReplyPostProcessor;
+#setReplyPostProcessor(Lorg/springframework/amqp/rabbit/listener/adapter/ReplyPostProcessor;)V
@2.3.0
+#getReplyContentType()Ljava/lang/String;
+#setReplyContentType(Ljava/lang/String;)V
+#isConverterWinsContentType()Z
+#setConverterWinsContentType(Z)V
@3.0.0
+#getBatchListener()Ljava/lang/Boolean;

+###org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint
@1.4.0.RELEASE
+#<init>()V
+#setBean(Ljava/lang/Object;)V
+#getBean()Ljava/lang/Object;
+#setMethod(Ljava/lang/reflect/Method;)V
+#getMethod()Ljava/lang/reflect/Method;
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
@2.0.0.RELEASE
+#setReturnExceptions(Z)V
+#setErrorHandler(Lorg/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler;)V
@2.1.0.RELEASE
+#setErrorHandler(Lorg/springframework/amqp/rabbit/listener/api/RabbitListenerErrorHandler;)V
-#setErrorHandler(Lorg/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler;)V
@2.4.0
+#setAdapterProvider(Lorg/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint$AdapterProvider;)V

+###org/springframework/amqp/rabbit/listener/adapter/ReplyFailureException
@1.4.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/listener/adapter/AbstractAdaptableMessageListener
@1.4.0.RELEASE
+#<init>()V
+#setResponseRoutingKey(Ljava/lang/String;)V
+#setEncoding(Ljava/lang/String;)V
+#setResponseExchange(Ljava/lang/String;)V
+#setMandatoryPublish(Z)V
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#onMessage(Lorg/springframework/amqp/core/Message;)V
@1.4.2.RELEASE
+#setReplyPostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)V
@1.6.0.RELEASE
+#setResponseAddress(Ljava/lang/String;)V
+#setBeanResolver(Lorg/springframework/expression/BeanResolver;)V
@2.0.0.RELEASE
+#getEncoding()Ljava/lang/String;
@2.0.3.RELEASE
*#setReplyPostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)V[deprecated]
+#setBeforeSendReplyPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
@2.0.6.RELEASE
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
+#setRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
@2.1.0.RELEASE
-#onMessage(Lorg/springframework/amqp/core/Message;)V
@2.1.4.RELEASE
+#containerAckMode(Lorg/springframework/amqp/core/AcknowledgeMode;)V
@2.1.8.RELEASE
+#setDefaultRequeueRejected(Z)V
@2.2.0.RELEASE
-#setReplyPostProcessor(Lorg/springframework/amqp/core/MessagePostProcessor;)V[deprecated]
@2.2.5.RELEASE
+#setReplyPostProcessor(Lorg/springframework/amqp/rabbit/listener/adapter/ReplyPostProcessor;)V
@2.3.0
+#setReplyContentType(Ljava/lang/String;)V
+#setConverterWinsContentType(Z)V

+###org/springframework/amqp/rabbit/listener/adapter/MessagingMessageListenerAdapter
@1.4.0.RELEASE
+#<init>()V
+#setHandlerMethod(Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;)V
+#setHeaderMapper(Lorg/springframework/amqp/support/AmqpHeaderMapper;)V
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
@1.5.0.RELEASE
+#setHandlerMethod(Lorg/springframework/amqp/rabbit/listener/adapter/HandlerAdapter;)V
-#setHandlerMethod(Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;)V
@1.6.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;)V
@1.7.10.RELEASE
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;ZLorg/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler;)V
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.0.6.RELEASE
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
@2.1.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;ZLorg/springframework/amqp/rabbit/listener/api/RabbitListenerErrorHandler;)V
+#setHandlerAdapter(Lorg/springframework/amqp/rabbit/listener/adapter/HandlerAdapter;)V
-#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;ZLorg/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler;)V
-#setHandlerMethod(Lorg/springframework/amqp/rabbit/listener/adapter/HandlerAdapter;)V
@2.2.21.RELEASE
+#isAsyncReplies()Z
@2.3.0
-#isAsyncReplies()Z
@2.3.13
+#isAsyncReplies()Z
@2.4.0
-#isAsyncReplies()Z
@2.4.1
+#isAsyncReplies()Z

+###org/springframework/amqp/rabbit/listener/exception/FatalListenerStartupException
@1.4.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/listener/exception/ListenerExecutionFailedException
@1.4.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;Lorg/springframework/amqp/core/Message;)V
+#getFailedMessage()Lorg/springframework/amqp/core/Message;
@1.6.7.RELEASE
*#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V[deprecated]
@2.0.0.RELEASE
-#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V[deprecated]
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/listener/exception/ListenerExecutionFailedException

+###org/springframework/amqp/rabbit/listener/exception/FatalListenerExecutionException
@1.4.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;)V
+#<init>(Ljava/lang/String;)V

+###org/springframework/amqp/rabbit/listener/exception/ConsumerCancelledException
@1.4.0.RELEASE
+#<init>()V
@1.5.0.RELEASE
-###org/springframework/amqp/rabbit/listener/exception/ConsumerCancelledException

+###org/springframework/amqp/rabbit/connection/RoutingConnectionFactory
@1.4.5.RELEASE
+#getTargetConnectionFactory(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;

+###org/springframework/amqp/rabbit/connection/RabbitConnectionFactoryBean
@1.4.0.RELEASE
+#<init>()V
+#setUseSSL(Z)V
+#setSslPropertiesLocation(Lorg/springframework/core/io/Resource;)V
+#setHost(Ljava/lang/String;)V
+#setPort(I)V
+#setUsername(Ljava/lang/String;)V
+#setPassword(Ljava/lang/String;)V
+#setVirtualHost(Ljava/lang/String;)V
+#setUri(Ljava/net/URI;)V
+#setUri(Ljava/lang/String;)V
+#setRequestedChannelMax(I)V
+#setRequestedFrameMax(I)V
+#setConnectionTimeout(I)V
+#setRequestedHeartbeat(I)V
+#setClientProperties(Ljava/util/Map;)V
+#setSaslConfig(Lcom/rabbitmq/client/SaslConfig;)V
+#setSocketFactory(Ljavax/net/SocketFactory;)V
+#setSocketConfigurator(Lcom/rabbitmq/client/SocketConfigurator;)V
+#setSharedExecutor(Ljava/util/concurrent/ExecutorService;)V
+#setThreadFactory(Ljava/util/concurrent/ThreadFactory;)V
+#setExceptionHandler(Lcom/rabbitmq/client/ExceptionHandler;)V
+#getObjectType()Ljava/lang/Class;
@1.4.4.RELEASE
+#setSslAlgorithm(Ljava/lang/String;)V
@1.5.0.RELEASE
+#setKeyStore(Ljava/lang/String;)V
+#setTrustStore(Ljava/lang/String;)V
+#setKeyStorePassphrase(Ljava/lang/String;)V
+#setTrustStorePassphrase(Ljava/lang/String;)V
@1.6.2.RELEASE
+#setKeyStoreType(Ljava/lang/String;)V
+#setTrustStoreType(Ljava/lang/String;)V
@1.6.4.RELEASE
+#setKeyStoreResource(Lorg/springframework/core/io/Resource;)V
+#setTrustStoreResource(Lorg/springframework/core/io/Resource;)V
+#setSecureRandom(Ljava/security/SecureRandom;)V
@1.6.6.RELEASE
+#isSkipServerCertificateValidation()Z
+#setSkipServerCertificateValidation(Z)V
@1.7.0.RELEASE
+#setUseNio(Z)V
+#setNioParams(Lcom/rabbitmq/client/impl/nio/NioParams;)V
+#setMetricsCollector(Lcom/rabbitmq/client/MetricsCollector;)V
@1.7.1.RELEASE
+#setAutomaticRecoveryEnabled(Z)V
+#setTopologyRecoveryEnabled(Z)V
@1.7.10.RELEASE
+#setEnableHostnameVerification(Z)V
+#setHostnameVerifier(Ljavax/net/ssl/HostnameVerifier;)V[deprecated]
@2.0.0.RELEASE
+#setChannelRpcTimeout(I)V
-#setEnableHostnameVerification(Z)V
-#setHostnameVerifier(Ljavax/net/ssl/HostnameVerifier;)V[deprecated]
@2.0.6.RELEASE
+#setEnableHostnameVerification(Z)V
@2.1.2.RELEASE
+#afterPropertiesSet()V
@2.1.6.RELEASE
+#setKeyStoreAlgorithm(Ljava/lang/String;)V
+#setTrustStoreAlgorithm(Ljava/lang/String;)V
@2.1.8.RELEASE
+#getRabbitConnectionFactory()Lcom/rabbitmq/client/ConnectionFactory;
@2.3.0
+#setCredentialsProvider(Lcom/rabbitmq/client/impl/CredentialsProvider;)V
+#setCredentialsRefreshService(Lcom/rabbitmq/client/impl/CredentialsRefreshService;)V
+#setResourceLoader(Lorg/springframework/core/io/ResourceLoader;)V

+###org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor
@1.4.0.RELEASE
+#<init>()V
+#getOrder()I
+#setEndpointRegistry(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry;)V
+#setContainerFactoryBeanName(Ljava/lang/String;)V
+#setMessageHandlerMethodFactory(Lorg/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory;)V
+#setBeanFactory(Lorg/springframework/beans/factory/BeanFactory;)V
+#afterSingletonsInstantiated()V
+#postProcessBeforeInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
+#postProcessAfterInitialization(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
@1.6.0.RELEASE
+#setBeanClassLoader(Ljava/lang/ClassLoader;)V
@1.6.4.RELEASE
+#setEnvironment(Lorg/springframework/core/env/Environment;)V
@2.2.0.RELEASE
+#setCharset(Ljava/nio/charset/Charset;)V

+###org/springframework/amqp/rabbit/annotation/RabbitListener
@1.4.0.RELEASE
+#id()Ljava/lang/String;
+#containerFactory()Ljava/lang/String;
+#queues()[Ljava/lang/String;
+#exclusive()Z
+#priority()Ljava/lang/String;
+#admin()Ljava/lang/String;
@1.5.0.RELEASE
+#bindings()[Lorg/springframework/amqp/rabbit/annotation/QueueBinding;
+#group()Ljava/lang/String;
@2.0.0.RELEASE
+#queuesToDeclare()[Lorg/springframework/amqp/rabbit/annotation/Queue;
+#returnExceptions()Ljava/lang/String;
+#errorHandler()Ljava/lang/String;
+#concurrency()Ljava/lang/String;
+#autoStartup()Ljava/lang/String;
@2.2.0.RELEASE
+#executor()Ljava/lang/String;
+#ackMode()Ljava/lang/String;
@2.2.5.RELEASE
+#replyPostProcessor()Ljava/lang/String;
@2.3.0
+#messageConverter()Ljava/lang/String;
+#replyContentType()Ljava/lang/String;
+#converterWinsContentType()Ljava/lang/String;
@3.0.0
+#batch()Ljava/lang/String;

+###org/springframework/amqp/rabbit/annotation/RabbitBootstrapConfiguration
@1.4.0.RELEASE
+#<init>()V
+#rabbitListenerAnnotationProcessor()Lorg/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor;
+#defaultRabbitListenerEndpointRegistry()Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry;
@2.1.5.RELEASE
+#registerBeanDefinitions(Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
-#rabbitListenerAnnotationProcessor()Lorg/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor;
-#defaultRabbitListenerEndpointRegistry()Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry;

+###org/springframework/amqp/rabbit/annotation/RabbitListenerConfigurer
@1.4.0.RELEASE
+#configureRabbitListeners(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar;)V

+###org/springframework/amqp/rabbit/annotation/EnableRabbit
@1.4.0.RELEASE

+###org/springframework/amqp/rabbit/config/RabbitListenerConfigUtils
@1.4.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/config/AbstractRabbitListenerContainerFactory
@1.4.0.RELEASE
+#<init>()V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setErrorHandler(Lorg/springframework/util/ErrorHandler;)V
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#setAcknowledgeMode(Lorg/springframework/amqp/core/AcknowledgeMode;)V
+#setChannelTransacted(Ljava/lang/Boolean;)V
+#setAutoStartup(Ljava/lang/Boolean;)V
+#setPhase(I)V
+#createListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;)Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;
+#createListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;)Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;
@2.0.0.RELEASE
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#setPrefetchCount(Ljava/lang/Integer;)V
+#setDefaultRequeueRejected(Ljava/lang/Boolean;)V
+#getAdviceChain()[Lorg/aopalliance/aop/Advice;
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
+#setRecoveryInterval(Ljava/lang/Long;)V
+#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#setMissingQueuesFatal(Ljava/lang/Boolean;)V
+#setMismatchedQueuesFatal(Ljava/lang/Boolean;)V
+#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
+#setIdleEventInterval(Ljava/lang/Long;)V
+#setFailedDeclarationRetryInterval(Ljava/lang/Long;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
@2.0.3.RELEASE
+#setBeforeSendReplyPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
@2.0.6.RELEASE
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
+#setReplyRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
@2.1.1.RELEASE
+#setContainerConfigurer(Ljava/util/function/Consumer;)V
@2.2.0.RELEASE
+#setBatchListener(Z)V
+#setBatchingStrategy(Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)V
+#setDeBatchingEnabled(Ljava/lang/Boolean;)V
@2.2.2.RELEASE
*#setContainerConfigurer(Ljava/util/function/Consumer;)V[deprecated]
+#setContainerCustomizer(Lorg/springframework/amqp/rabbit/config/ContainerCustomizer;)V
@2.2.17.RELEASE
+#setGlobalQos(Z)V
@2.3.0
-#setContainerConfigurer(Ljava/util/function/Consumer;)V[deprecated]
-#setGlobalQos(Z)V
@2.3.7
+#setGlobalQos(Z)V
@2.4.0
-#setDefaultRequeueRejected(Ljava/lang/Boolean;)V
-#setBeforeSendReplyPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
-#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
-#setReplyRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
@2.4.5
-#getAdviceChain()[Lorg/aopalliance/aop/Advice;
-#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
@2.4.6
+#setMessageAckListener(Lorg/springframework/amqp/rabbit/listener/MessageAckListener;)V
@3.0.0
+#setMicrometerEnabled(Z)V
+#setObservationEnabled(Z)V
+#setObservationConvention(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservationConvention;)V

+###org/springframework/amqp/rabbit/config/SimpleRabbitListenerContainerFactory
@1.4.0.RELEASE
+#<init>()V
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#setTxSize(Ljava/lang/Integer;)V
+#setConcurrentConsumers(Ljava/lang/Integer;)V
+#setMaxConcurrentConsumers(Ljava/lang/Integer;)V
+#setStartConsumerMinInterval(Ljava/lang/Long;)V
+#setStopConsumerMinInterval(Ljava/lang/Long;)V
+#setConsecutiveActiveTrigger(Ljava/lang/Integer;)V
+#setConsecutiveIdleTrigger(Ljava/lang/Integer;)V
+#setPrefetchCount(Ljava/lang/Integer;)V
+#setReceiveTimeout(Ljava/lang/Long;)V
+#setDefaultRequeueRejected(Ljava/lang/Boolean;)V
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
+#setRecoveryInterval(Ljava/lang/Long;)V
+#setMissingQueuesFatal(Ljava/lang/Boolean;)V
@1.4.5.RELEASE
+#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
@1.5.0.RELEASE
+#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
@1.6.0.RELEASE
+#setMismatchedQueuesFatal(Ljava/lang/Boolean;)V
+#setIdleEventInterval(Ljava/lang/Long;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@1.7.4.RELEASE
+#getAdviceChain()[Lorg/aopalliance/aop/Advice;
@2.0.0.RELEASE
+#setDeBatchingEnabled(Ljava/lang/Boolean;)V
-#setTaskExecutor(Ljava/util/concurrent/Executor;)V
-#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
-#setPrefetchCount(Ljava/lang/Integer;)V
-#setDefaultRequeueRejected(Ljava/lang/Boolean;)V
-#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
-#getAdviceChain()[Lorg/aopalliance/aop/Advice;
-#setRecoveryInterval(Ljava/lang/Long;)V
-#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
-#setMissingQueuesFatal(Ljava/lang/Boolean;)V
-#setMismatchedQueuesFatal(Ljava/lang/Boolean;)V
-#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
-#setIdleEventInterval(Ljava/lang/Long;)V
-#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
-#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
@2.2.0.RELEASE
*#setTxSize(Ljava/lang/Integer;)V[deprecated]
+#setBatchSize(Ljava/lang/Integer;)V
+#setConsumerBatchEnabled(Z)V
-#setDeBatchingEnabled(Ljava/lang/Boolean;)V
@2.3.0
-#setTxSize(Ljava/lang/Integer;)V[deprecated]

+###org/springframework/amqp/rabbit/config/SimpleRabbitListenerEndpoint
@1.4.0.RELEASE
+#<init>()V
+#setMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
+#getMessageListener()Lorg/springframework/amqp/core/MessageListener;

+###org/springframework/amqp/rabbit/support/ExpressionFactoryBean
@1.4.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#setParserConfiguration(Lorg/springframework/expression/spel/SpelParserConfiguration;)V
+#getObjectType()Ljava/lang/Class;

+###org/springframework/amqp/rabbit/support/ValueExpression
@1.4.0.RELEASE
+#<init>(Ljava/lang/Object;)V
+#getValue()Ljava/lang/Object;
+#getValue(Ljava/lang/Object;)Ljava/lang/Object;
+#getValue(Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Object;
+#getValue(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;)Ljava/lang/Object;
+#getValue(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
+#getValue(Ljava/lang/Class;)Ljava/lang/Object;
+#getValue(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
+#getValue(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Class;)Ljava/lang/Object;
+#getValueType()Ljava/lang/Class;
+#getValueType(Ljava/lang/Object;)Ljava/lang/Class;
+#getValueType(Lorg/springframework/expression/EvaluationContext;)Ljava/lang/Class;
+#getValueType(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;)Ljava/lang/Class;
+#getValueTypeDescriptor()Lorg/springframework/core/convert/TypeDescriptor;
+#getValueTypeDescriptor(Ljava/lang/Object;)Lorg/springframework/core/convert/TypeDescriptor;
+#getValueTypeDescriptor(Lorg/springframework/expression/EvaluationContext;)Lorg/springframework/core/convert/TypeDescriptor;
+#getValueTypeDescriptor(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;)Lorg/springframework/core/convert/TypeDescriptor;
+#isWritable(Lorg/springframework/expression/EvaluationContext;)Z
+#isWritable(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;)Z
+#isWritable(Ljava/lang/Object;)Z
+#setValue(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;)V
+#setValue(Ljava/lang/Object;Ljava/lang/Object;)V
+#setValue(Lorg/springframework/expression/EvaluationContext;Ljava/lang/Object;Ljava/lang/Object;)V
+#getExpressionString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/logback/AmqpAppender$Event
@1.4.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/logback/AmqpAppender;Lch/qos/logback/classic/spi/ILoggingEvent;)V
+#getEvent()Lch/qos/logback/classic/spi/ILoggingEvent;
+#getProperties()Ljava/util/Map;
+#incrementRetries()I
@1.5.0.RELEASE
+#<init>(Lch/qos/logback/classic/spi/ILoggingEvent;)V
-#<init>(Lorg/springframework/amqp/rabbit/logback/AmqpAppender;Lch/qos/logback/classic/spi/ILoggingEvent;)V

+###org/springframework/amqp/rabbit/logback/AmqpAppender
@1.4.0.RELEASE
+#<init>()V
+#setRoutingKeyPattern(Ljava/lang/String;)V
+#getHost()Ljava/lang/String;
+#setHost(Ljava/lang/String;)V
+#getPort()I
+#setPort(I)V
+#getVirtualHost()Ljava/lang/String;
+#setVirtualHost(Ljava/lang/String;)V
+#getUsername()Ljava/lang/String;
+#setUsername(Ljava/lang/String;)V
+#getPassword()Ljava/lang/String;
+#setPassword(Ljava/lang/String;)V
+#getExchangeName()Ljava/lang/String;
+#setExchangeName(Ljava/lang/String;)V
+#getExchangeType()Ljava/lang/String;
+#setExchangeType(Ljava/lang/String;)V
+#getRoutingKeyPattern()Ljava/lang/String;
+#isDeclareExchange()Z
+#setDeclareExchange(Z)V
+#getContentType()Ljava/lang/String;
+#setContentType(Ljava/lang/String;)V
+#getContentEncoding()Ljava/lang/String;
+#setContentEncoding(Ljava/lang/String;)V
+#getApplicationId()Ljava/lang/String;
+#setApplicationId(Ljava/lang/String;)V
+#getSenderPoolSize()I
+#setSenderPoolSize(I)V
+#getMaxSenderRetries()I
+#setMaxSenderRetries(I)V
+#isDurable()Z
+#setDurable(Z)V
+#getDeliveryMode()Ljava/lang/String;
+#setDeliveryMode(Ljava/lang/String;)V
+#isAutoDelete()Z
+#setAutoDelete(Z)V
+#isGenerateId()Z
+#setGenerateId(Z)V
+#getCharset()Ljava/lang/String;
+#setCharset(Ljava/lang/String;)V
+#setLayout(Lch/qos/logback/core/Layout;)V
+#setAbbreviation(I)V
+#start()V
+#stop()V
+#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/logback/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@1.5.6.RELEASE
+#setAddresses(Ljava/lang/String;)V
+#getAddresses()Ljava/lang/String;
+#setClientConnectionProperties(Ljava/lang/String;)V
@1.7.1.RELEASE
+#isIncludeCallerData()Z
+#setIncludeCallerData(Z)V
@1.7.4.RELEASE
+#getQueuedEventCount()I
@1.7.7.RELEASE
-#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/logback/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@1.7.14.RELEASE
+#isAddMdcAsHeaders()Z
+#setAddMdcAsHeaders(Z)V
@2.0.0.RELEASE
+#getUri()Ljava/net/URI;
+#setUri(Ljava/net/URI;)V
+#getPort()Ljava/lang/Integer;
+#setPort(Ljava/lang/Integer;)V
+#isUseSsl()Z
+#setUseSsl(Z)V
+#getSslAlgorithm()Ljava/lang/String;
+#setSslAlgorithm(Ljava/lang/String;)V
+#getSslPropertiesLocation()Ljava/lang/String;
+#setSslPropertiesLocation(Ljava/lang/String;)V
+#getKeyStore()Ljava/lang/String;
+#setKeyStore(Ljava/lang/String;)V
+#getKeyStorePassphrase()Ljava/lang/String;
+#setKeyStorePassphrase(Ljava/lang/String;)V
+#getKeyStoreType()Ljava/lang/String;
+#setKeyStoreType(Ljava/lang/String;)V
+#getTrustStore()Ljava/lang/String;
+#setTrustStore(Ljava/lang/String;)V
+#getTrustStorePassphrase()Ljava/lang/String;
+#setTrustStorePassphrase(Ljava/lang/String;)V
+#getTrustStoreType()Ljava/lang/String;
+#setTrustStoreType(Ljava/lang/String;)V
+#getEncoder()Lch/qos/logback/core/encoder/Encoder;
+#setEncoder(Lch/qos/logback/core/encoder/Encoder;)V
+#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/logback/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
-#getPort()I
-#setPort(I)V
-#isAddMdcAsHeaders()Z
-#setAddMdcAsHeaders(Z)V
@2.0.3.RELEASE
-#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/logback/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@2.0.13.RELEASE
+#isAddMdcAsHeaders()Z
+#setAddMdcAsHeaders(Z)V
@2.1.0.RELEASE
-#isAddMdcAsHeaders()Z
-#setAddMdcAsHeaders(Z)V
@2.1.1.RELEASE
+#setConnectionName(Ljava/lang/String;)V
@2.1.7.RELEASE
+#setVerifyHostname(Z)V
+#isVerifyHostname()Z
+#isAddMdcAsHeaders()Z
+#setAddMdcAsHeaders(Z)V
@2.1.8.RELEASE
+#getSaslConfig()Ljava/lang/String;
+#setSaslConfig(Ljava/lang/String;)V

+###org/springframework/amqp/rabbit/logback/AmqpAppender$EventSender
@1.4.0.RELEASE
+#run()V

+###org/springframework/amqp/rabbit/core/BatchingRabbitTemplate
@1.4.1.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/core/support/BatchingStrategy;Lorg/springframework/scheduling/TaskScheduler;)V
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
+#flush()V
+#start()V
+#stop()V
+#isRunning()Z
@2.0.0.RELEASE
+#doStart()V
+#doStop()V
-#start()V
-#stop()V
@2.1.0.RELEASE
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)V
-#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)V
@2.2.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;Lorg/springframework/scheduling/TaskScheduler;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;Lorg/springframework/scheduling/TaskScheduler;)V
-#<init>(Lorg/springframework/amqp/rabbit/core/support/BatchingStrategy;Lorg/springframework/scheduling/TaskScheduler;)V

+###org/springframework/amqp/rabbit/core/RabbitMessageOperations
@1.4.0.RELEASE
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/messaging/Message;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/messaging/core/MessagePostProcessor;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Lorg/springframework/messaging/core/MessagePostProcessor;)V
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/Message;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Class;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Class;Lorg/springframework/messaging/core/MessagePostProcessor;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Class;Lorg/springframework/messaging/core/MessagePostProcessor;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/core/RabbitMessagingTemplate
@1.4.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
+#setRabbitTemplate(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
+#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;
+#setAmqpMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#getAmqpMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#afterPropertiesSet()V
+#send(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/messaging/Message;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/messaging/core/MessagePostProcessor;)V
+#convertAndSend(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Lorg/springframework/messaging/core/MessagePostProcessor;)V
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/messaging/Message;)Lorg/springframework/messaging/Message;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Class;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Class;Lorg/springframework/messaging/core/MessagePostProcessor;)Ljava/lang/Object;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Ljava/lang/Class;Lorg/springframework/messaging/core/MessagePostProcessor;)Ljava/lang/Object;
@2.2.22.RELEASE
+#setUseTemplateDefaultReceiveQueue(Z)V
+#receive()Lorg/springframework/messaging/Message;
+#receiveAndConvert(Ljava/lang/Class;)Ljava/lang/Object;
@2.3.0
-#setUseTemplateDefaultReceiveQueue(Z)V
-#receive()Lorg/springframework/messaging/Message;
-#receiveAndConvert(Ljava/lang/Class;)Ljava/lang/Object;
@2.3.14
+#setUseTemplateDefaultReceiveQueue(Z)V
+#receive()Lorg/springframework/messaging/Message;
+#receiveAndConvert(Ljava/lang/Class;)Ljava/lang/Object;
@2.4.0
-#setUseTemplateDefaultReceiveQueue(Z)V
-#receive()Lorg/springframework/messaging/Message;
-#receiveAndConvert(Ljava/lang/Class;)Ljava/lang/Object;
@2.4.2
+#setUseTemplateDefaultReceiveQueue(Z)V
+#receive()Lorg/springframework/messaging/Message;
+#receiveAndConvert(Ljava/lang/Class;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/core/support/BatchingStrategy
@1.4.1.RELEASE
+#addToBatch(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
+#nextRelease()Ljava/util/Date;
+#releaseBatch()Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
@1.4.2.RELEASE
+#releaseBatches()Ljava/util/Collection;
-#releaseBatch()Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/core/support/BatchingStrategy

+###org/springframework/amqp/rabbit/core/support/SimpleBatchingStrategy
@1.4.1.RELEASE
+#<init>(IIJ)V
+#addToBatch(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
+#nextRelease()Ljava/util/Date;
+#releaseBatch()Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
@1.4.2.RELEASE
+#releaseBatches()Ljava/util/Collection;
-#releaseBatch()Lorg/springframework/amqp/rabbit/core/support/MessageBatch;
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/core/support/SimpleBatchingStrategy

+###org/springframework/amqp/rabbit/core/support/MessageBatch
@1.4.1.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#getExchange()Ljava/lang/String;
+#getRoutingKey()Ljava/lang/String;
+#getMessage()Lorg/springframework/amqp/core/Message;
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/core/support/MessageBatch

+###org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean$Type
@2.0.0.RELEASE
+#values()[Lorg/springframework/amqp/rabbit/config/ListenerContainerFactoryBean$Type;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/config/ListenerContainerFactoryBean$Type;

+###org/springframework/amqp/rabbit/config/ListenerContainerFactoryBean
@2.0.0.RELEASE
+#<init>()V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#setBeanName(Ljava/lang/String;)V
+#setApplicationContext(Lorg/springframework/context/ApplicationContext;)V
+#setType(Lorg/springframework/amqp/rabbit/config/ListenerContainerFactoryBean$Type;)V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setChannelTransacted(Z)V
+#setAcknowledgeMode(Lorg/springframework/amqp/core/AcknowledgeMode;)V
+#setQueueNames([Ljava/lang/String;)V
+#setQueues([Lorg/springframework/amqp/core/Queue;)V
+#setExposeListenerChannel(Z)V
+#setMessageListener(Ljava/lang/Object;)V
+#setErrorHandler(Lorg/springframework/util/ErrorHandler;)V
+#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V
+#setDeBatchingEnabled(Z)V
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
+#setAfterReceivePostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#setAutoStartup(Z)V
+#setPhase(I)V
+#setListenerId(Ljava/lang/String;)V
+#setConsumerTagStrategy(Lorg/springframework/amqp/support/ConsumerTagStrategy;)V
+#setConsumerArguments(Ljava/util/Map;)V
+#setNoLocal(Ljava/lang/Boolean;)V
+#setExclusive(Z)V
+#setDefaultRequeueRejected(Z)V
+#setPrefetchCount(I)V
+#setShutdownTimeout(J)V
+#setIdleEventInterval(J)V
+#setTransactionManager(Lorg/springframework/transaction/PlatformTransactionManager;)V
+#setTransactionAttribute(Lorg/springframework/transaction/interceptor/TransactionAttribute;)V
+#setTaskExecutor(Ljava/util/concurrent/Executor;)V
+#setRecoveryInterval(J)V
+#setRecoveryBackOff(Lorg/springframework/util/backoff/BackOff;)V
+#setMessagePropertiesConverter(Lorg/springframework/amqp/rabbit/support/MessagePropertiesConverter;)V
+#setRabbitAdmin(Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#setMissingQueuesFatal(Z)V
+#setPossibleAuthenticationFailureFatal(Ljava/lang/Boolean;)V
+#setMismatchedQueuesFatal(Z)V
+#setAutoDeclare(Z)V
+#setFailedDeclarationRetryInterval(J)V
+#setExclusiveConsumerExceptionLogger(Lorg/springframework/amqp/support/ConditionalExceptionLogger;)V
+#setConsumersPerQueue(I)V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#setMonitorInterval(J)V
+#setConcurrentConsumers(I)V
+#setMaxConcurrentConsumers(I)V
+#setStartConsumerMinInterval(J)V
+#setStopConsumerMinInterval(J)V
+#setConsecutiveActiveTrigger(I)V
+#setConsecutiveIdleTrigger(I)V
+#setReceiveTimeout(J)V
+#setTxSize(I)V
+#setDeclarationRetries(I)V
+#setRetryDeclarationInterval(J)V
+#getObjectType()Ljava/lang/Class;
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
+#isAutoStartup()Z
+#stop(Ljava/lang/Runnable;)V
@2.0.9.RELEASE
*#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
@2.1.0.RELEASE
+#setMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
-#setMessageListener(Ljava/lang/Object;)V
@2.1.1.RELEASE
*#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
@2.2.0.RELEASE
+#setBatchSize(I)V
*#setTxSize(I)V[deprecated]
+#setConsumerBatchEnabled(Z)V
-#setMessageConverter(Lorg/springframework/amqp/support/converter/MessageConverter;)V[deprecated]
@2.2.17.RELEASE
+#setGlobalQos(Z)V
@2.3.0
-#setGlobalQos(Z)V
-#setTxSize(I)V[deprecated]
@2.3.7
+#setGlobalQos(Z)V
@2.4.6
+#setMicrometerEnabled(Z)V
+#setMicrometerTags(Ljava/util/Map;)V
+#setSMLCCustomizer(Lorg/springframework/amqp/rabbit/config/ContainerCustomizer;)V
+#setDMLCCustomizer(Lorg/springframework/amqp/rabbit/config/ContainerCustomizer;)V

+###org/springframework/amqp/rabbit/config/DirectRabbitListenerContainerFactory
@2.0.0.RELEASE
+#<init>()V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#setMonitorInterval(J)V
+#setConsumersPerQueue(Ljava/lang/Integer;)V
@2.1.4.RELEASE
+#setMessagesPerAck(Ljava/lang/Integer;)V
+#setAckTimeout(Ljava/lang/Long;)V

+###org/springframework/amqp/rabbit/config/ContainerCustomizer
@2.2.2.RELEASE
+#configure(Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;)V
@2.4.0
+#configure(Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;)V
-#configure(Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;)V

+###org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer
@2.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setConsumersPerQueue(I)V
+#setMonitorInterval(J)V
+#setQueueNames([Ljava/lang/String;)V
+#addQueueNames([Ljava/lang/String;)V
+#removeQueueNames([Ljava/lang/String;)Z
+#setMessageListener(Ljava/lang/Object;)V
+#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/core/ChannelAwareMessageListener;)V
+#setMessageListener(Lorg/springframework/amqp/core/MessageListener;)V
+#getChannelHolder()Lorg/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer$ChannelHolder;
+#releaseConsumerFor(Lorg/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer$ChannelHolder;ZLjava/lang/String;)V
@2.1.0.RELEASE
*#setMessageListener(Ljava/lang/Object;)V[deprecated]
+#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/listener/api/ChannelAwareMessageListener;)V[deprecated]
-#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/core/ChannelAwareMessageListener;)V
@2.2.0.RELEASE
-#setMessageListener(Ljava/lang/Object;)V[deprecated]
-#setChannelAwareMessageListener(Lorg/springframework/amqp/rabbit/listener/api/ChannelAwareMessageListener;)V[deprecated]

+###org/springframework/amqp/rabbit/listener/support/ContainerUtils
@2.2.0.RELEASE
+#shouldRequeue(ZLjava/lang/Throwable;Lorg/apache/commons/logging/Log;)Z
+#isRejectManual(Ljava/lang/Throwable;)Z

+###org/springframework/amqp/rabbit/listener/api/RabbitListenerErrorHandler
@2.1.0.RELEASE
+#handleError(Lorg/springframework/amqp/core/Message;Lorg/springframework/messaging/Message;Lorg/springframework/amqp/rabbit/listener/exception/ListenerExecutionFailedException;)Ljava/lang/Object;
@2.2.0.RELEASE
+#handleError(Lorg/springframework/amqp/core/Message;Lorg/springframework/messaging/Message;Lorg/springframework/amqp/rabbit/support/ListenerExecutionFailedException;)Ljava/lang/Object;
-#handleError(Lorg/springframework/amqp/core/Message;Lorg/springframework/messaging/Message;Lorg/springframework/amqp/rabbit/listener/exception/ListenerExecutionFailedException;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/listener/api/ChannelAwareBatchMessageListener
@2.2.0.RELEASE
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
+#onMessageBatch(Ljava/util/List;Lcom/rabbitmq/client/Channel;)V

+###org/springframework/amqp/rabbit/listener/api/ChannelAwareMessageListener
@2.1.0.RELEASE
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
+#onMessage(Lorg/springframework/amqp/core/Message;)V
@2.2.0.RELEASE
+#onMessageBatch(Ljava/util/List;Lcom/rabbitmq/client/Channel;)V

+###org/springframework/amqp/rabbit/listener/adapter/ReplyingMessageListener
@2.0.0.RELEASE
+#handleMessage(Ljava/lang/Object;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/listener/adapter/MessagingMessageListenerAdapter$MessagingMessageConverterAdapter
@2.2.0.RELEASE

+###org/springframework/amqp/rabbit/listener/adapter/InvocationResult
@2.1.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;Ljava/lang/reflect/Type;)V
+#getReturnValue()Ljava/lang/Object;
+#getSendTo()Lorg/springframework/expression/Expression;
+#getReturnType()Ljava/lang/reflect/Type;
+#toString()Ljava/lang/String;
@2.2.3.RELEASE
*#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;Ljava/lang/reflect/Type;)V[deprecated]
+#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;Ljava/lang/reflect/Type;Ljava/lang/Object;Ljava/lang/reflect/Method;)V
+#getBean()Ljava/lang/Object;
+#getMethod()Ljava/lang/reflect/Method;
@2.3.0
-#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;Ljava/lang/reflect/Type;)V[deprecated]

+###org/springframework/amqp/rabbit/listener/adapter/DelegatingInvocableHandler
@1.5.0.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;)V
+#getBean()Ljava/lang/Object;
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
+#getMethodNameFor(Ljava/lang/Object;)Ljava/lang/String;
@1.5.2.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
+#getDefaultReplyTo()Lorg/springframework/amqp/core/Address;
-#<init>(Ljava/util/List;Ljava/lang/Object;)V
@1.6.0.RELEASE
-#getDefaultReplyTo()Lorg/springframework/amqp/core/Address;
@2.0.0.RELEASE
+#getMethodFor(Ljava/lang/Object;)Ljava/lang/reflect/Method;
@2.0.3.RELEASE
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;)V
+#hasDefaultHandler()Z
@2.1.0.RELEASE
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/listener/adapter/InvocationResult;
-#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
@2.1.7.RELEASE
+#getInvocationResultFor(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/listener/adapter/InvocationResult;
@2.2.21.RELEASE
+#isAsyncReplies()Z
@2.3.0
-#isAsyncReplies()Z
@2.3.7
+#<init>(Ljava/util/List;Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;Ljava/lang/Object;Lorg/springframework/beans/factory/config/BeanExpressionResolver;Lorg/springframework/beans/factory/config/BeanExpressionContext;Lorg/springframework/validation/Validator;)V
@2.3.13
+#isAsyncReplies()Z
@2.4.0
-#isAsyncReplies()Z
@2.4.1
+#isAsyncReplies()Z

+###org/springframework/amqp/rabbit/listener/adapter/HandlerAdapter
@1.5.0.RELEASE
+#<init>(Lorg/springframework/messaging/handler/invocation/InvocableHandlerMethod;)V
+#<init>(Lorg/springframework/amqp/rabbit/listener/adapter/DelegatingInvocableHandler;)V
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
+#getMethodAsString(Ljava/lang/Object;)Ljava/lang/String;
+#getBean()Ljava/lang/Object;
@2.0.0.RELEASE
+#getReturnType(Ljava/lang/Object;)Ljava/lang/Object;
@2.1.0.RELEASE
+#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/listener/adapter/InvocationResult;
-#invoke(Lorg/springframework/messaging/Message;[Ljava/lang/Object;)Ljava/lang/Object;
@2.1.7.RELEASE
+#getInvocationResultFor(Ljava/lang/Object;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/listener/adapter/InvocationResult;
@2.2.3.RELEASE
+#getMethodFor(Ljava/lang/Object;)Ljava/lang/reflect/Method;
*#getReturnType(Ljava/lang/Object;)Ljava/lang/Object;[deprecated]
+#getReturnTypeFor(Ljava/lang/Object;)Ljava/lang/reflect/Type;
@2.2.21.RELEASE
+#isAsyncReplies()Z
@2.3.0
-#getReturnType(Ljava/lang/Object;)Ljava/lang/Object;[deprecated]
-#isAsyncReplies()Z
@2.3.13
+#isAsyncReplies()Z
@2.4.0
-#isAsyncReplies()Z
@2.4.1
+#isAsyncReplies()Z

+###org/springframework/amqp/rabbit/listener/adapter/ReplyPostProcessor
@2.2.5.RELEASE

+###org/springframework/amqp/rabbit/listener/adapter/BatchMessagingMessageListenerAdapter
@2.2.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/reflect/Method;ZLorg/springframework/amqp/rabbit/listener/api/RabbitListenerErrorHandler;Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)V
+#onMessageBatch(Ljava/util/List;Lcom/rabbitmq/client/Channel;)V

+###org/springframework/amqp/rabbit/listener/adapter/AbstractAdaptableMessageListener$ReplyExpressionRoot
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/core/Message;Ljava/lang/Object;Ljava/lang/Object;)V
+#getRequest()Lorg/springframework/amqp/core/Message;
+#getSource()Ljava/lang/Object;
+#getResult()Ljava/lang/Object;
@2.1.0.RELEASE
-#<init>(Lorg/springframework/amqp/core/Message;Ljava/lang/Object;Ljava/lang/Object;)V

+###org/springframework/amqp/rabbit/listener/AsyncConsumerStartedEvent
@1.7.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#getConsumer()Ljava/lang/Object;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/ListenerContainerConsumerTerminatedEvent
@2.0.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;)V
+#getReason()Ljava/lang/String;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer$WrappedTransactionException
@2.0.0.RELEASE

+###org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer
@2.0.0.RELEASE
+#<init>()V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#setConsumersPerQueue(I)V
+#setExclusive(Z)V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#setMonitorInterval(J)V
+#setQueueNames([Ljava/lang/String;)V
+#setMissingQueuesFatal(Z)V
+#setMessagesPerAck(I)V
+#setAckTimeout(J)V
+#addQueueNames([Ljava/lang/String;)V
+#removeQueueNames([Ljava/lang/String;)Z
@2.1.0.RELEASE
+#addQueues([Lorg/springframework/amqp/core/Queue;)V
+#removeQueues([Lorg/springframework/amqp/core/Queue;)Z

+###org/springframework/amqp/rabbit/listener/ListenerContainerIdleEvent
@1.6.0.RELEASE
+#<init>(Ljava/lang/Object;JLjava/lang/String;[Ljava/lang/String;)V
+#getIdleTime()J
+#getQueueNames()[Ljava/lang/String;
+#getListenerId()Ljava/lang/String;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/exception/MessageRejectedWhileStoppingException
@2.2.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/listener/AsyncConsumerStoppedEvent
@1.7.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;)V
+#getConsumer()Ljava/lang/Object;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/ConsumeOkEvent
@1.7.5.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V
+#toString()Ljava/lang/String;
@1.7.7.RELEASE
+#getQueue()Ljava/lang/String;
+#getConsumerTag()Ljava/lang/String;
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/listener/ConsumeOkEvent

+###org/springframework/amqp/rabbit/listener/ListenerFailedRuleBasedTransactionAttribute
@2.1.0.RELEASE
+#<init>()V
+#rollbackOn(Ljava/lang/Throwable;)Z

+###org/springframework/amqp/rabbit/listener/ListenerContainerConsumerFailedEvent
@1.5.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Throwable;Z)V
+#getReason()Ljava/lang/String;
+#isFatal()Z
+#getThrowable()Ljava/lang/Throwable;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/ConditionalRejectingErrorHandler$DefaultExceptionStrategy
@1.6.3.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/listener/ConditionalRejectingErrorHandler;)V
+#isFatal(Ljava/lang/Throwable;)Z
@1.6.4.RELEASE
+#<init>()V
-#<init>(Lorg/springframework/amqp/rabbit/listener/ConditionalRejectingErrorHandler;)V

+###org/springframework/amqp/rabbit/listener/DirectReplyToMessageListenerContainer$ChannelHolder
@2.0.0.RELEASE
+#getChannel()Lcom/rabbitmq/client/Channel;
+#getConsumerEpoch()I
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/AsyncConsumerRestartedEvent
@1.7.0.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
+#getOldConsumer()Ljava/lang/Object;
+#getNewConsumer()Ljava/lang/Object;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer$JavaLangErrorHandler
@2.2.12.RELEASE
+#handle(Ljava/lang/Error;)V

+###org/springframework/amqp/rabbit/listener/MissingQueueEvent
@2.1.18.RELEASE
+#<init>(Ljava/lang/Object;Ljava/lang/String;)V
+#getQueue()Ljava/lang/String;
+#toString()Ljava/lang/String;
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/listener/MissingQueueEvent

+###org/springframework/amqp/rabbit/listener/MultiMethodRabbitListenerEndpoint
@1.5.0.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/Object;)V
@2.0.3.RELEASE
+#<init>(Ljava/util/List;Ljava/lang/reflect/Method;Ljava/lang/Object;)V
@2.3.7
+#setValidator(Lorg/springframework/validation/Validator;)V
@2.4.0
*#<init>(Ljava/util/List;Ljava/lang/Object;)V[deprecated]
@3.0.0
-#<init>(Ljava/util/List;Ljava/lang/Object;)V[deprecated]

+###org/springframework/amqp/rabbit/support/ActiveObjectCounter
@2.2.0.RELEASE
+#<init>()V
+#add(Ljava/lang/Object;)V
+#release(Ljava/lang/Object;)V
+#await(JLjava/util/concurrent/TimeUnit;)Z
+#getCount()I
+#reset()V
+#deactivate()V
+#isActive()Z

+###org/springframework/amqp/rabbit/support/Delivery
@1.7.0.RELEASE
+#<init>(Ljava/lang/String;Lcom/rabbitmq/client/Envelope;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#getConsumerTag()Ljava/lang/String;
+#getEnvelope()Lcom/rabbitmq/client/Envelope;
+#getProperties()Lcom/rabbitmq/client/AMQP$BasicProperties;
+#getBody()[B
@2.1.0.RELEASE
+#<init>(Ljava/lang/String;Lcom/rabbitmq/client/Envelope;Lcom/rabbitmq/client/AMQP$BasicProperties;[BLjava/lang/String;)V
+#getQueue()Ljava/lang/String;
-#<init>(Ljava/lang/String;Lcom/rabbitmq/client/Envelope;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V

+###org/springframework/amqp/rabbit/support/ConsumerCancelledException
@1.5.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/support/ArgumentBuilder
@2.0.0.RELEASE
+#<init>()V

+###org/springframework/amqp/rabbit/support/ListenerExecutionFailedException
@2.2.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/Throwable;[Lorg/springframework/amqp/core/Message;)V
+#getFailedMessage()Lorg/springframework/amqp/core/Message;
+#getFailedMessages()Ljava/util/Collection;

+###org/springframework/amqp/rabbit/support/ListenerContainerAware
@1.5.0.RELEASE
+#expectedQueueNames()Ljava/util/Collection;

+###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
@2.0.0.RELEASE
+#getReturnType()Lorg/springframework/core/ParameterizedTypeReference;
+#setReturnType(Lorg/springframework/core/ParameterizedTypeReference;)V
@3.0.0
-###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture

+###org/springframework/amqp/rabbit/core/RabbitAdminEvent
@1.6.0.RELEASE
+#<init>(Ljava/lang/Object;)V

+###org/springframework/amqp/rabbit/core/RabbitOperations$OperationsCallback
@2.0.0.RELEASE
+#doInRabbit(Lorg/springframework/amqp/rabbit/core/RabbitOperations;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/core/CorrelationDataPostProcessor
@1.6.7.RELEASE
+#postProcess(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/rabbit/support/CorrelationData;
@2.1.0.RELEASE
+#postProcess(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/connection/CorrelationData;)Lorg/springframework/amqp/rabbit/connection/CorrelationData;
-#postProcess(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/support/CorrelationData;)Lorg/springframework/amqp/rabbit/support/CorrelationData;

+###org/springframework/amqp/rabbit/core/ConsumeOkNotReceivedException
@2.0.0.RELEASE
+#<init>(Ljava/lang/String;)V

+###org/springframework/amqp/rabbit/core/RabbitTemplate$TemplateConsumer
@2.0.0.RELEASE
+#<init>(Lcom/rabbitmq/client/Channel;)V
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/core/RabbitGatewaySupport
@1.5.0.RELEASE
+#<init>()V
+#setConnectionFactory(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#setRabbitTemplate(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
+#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;
+#afterPropertiesSet()V
@1.6.4.RELEASE
*#setRabbitTemplate(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V[deprecated]
+#setRabbitOperations(Lorg/springframework/amqp/rabbit/core/RabbitOperations;)V
*#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;[deprecated]
+#getRabbitOperations()Lorg/springframework/amqp/rabbit/core/RabbitOperations;
@2.0.0.RELEASE
-#setRabbitTemplate(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V[deprecated]
-#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;[deprecated]

+###org/springframework/amqp/rabbit/core/BrokerEventListener
@2.1.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;[Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;[Ljava/lang/String;)V
+#setApplicationEventPublisher(Lorg/springframework/context/ApplicationEventPublisher;)V
+#getBindingsFailedException()Ljava/lang/Exception;
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
+#setPhase(I)V
+#isAutoStartup()Z
+#setAutoStartup(Z)V
+#stop(Ljava/lang/Runnable;)V
+#onMessage(Lorg/springframework/amqp/core/Message;)V
+#onCreate(Lorg/springframework/amqp/rabbit/connection/Connection;)V
@2.1.8.RELEASE
-#stop(Ljava/lang/Runnable;)V

+###org/springframework/amqp/rabbit/core/BrokerEvent
@2.1.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/amqp/core/MessageProperties;)V
+#getEventType()Ljava/lang/String;
+#getEventProperties()Ljava/util/Map;
+#getMessageProperties()Lorg/springframework/amqp/core/MessageProperties;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/core/DeclarationExceptionEvent
@1.6.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/amqp/core/Declarable;Ljava/lang/Throwable;)V
+#getDeclarable()Lorg/springframework/amqp/core/Declarable;
+#getThrowable()Ljava/lang/Throwable;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/core/DeclareExchangeConnectionListener
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/core/Exchange;Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#onCreate(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#onClose(Lorg/springframework/amqp/rabbit/connection/Connection;)V

+###org/springframework/amqp/rabbit/annotation/RabbitListeners
@1.6.0.RELEASE
+#value()[Lorg/springframework/amqp/rabbit/annotation/RabbitListener;

+###org/springframework/amqp/rabbit/annotation/QueueBinding
@1.5.0.RELEASE
+#value()Lorg/springframework/amqp/rabbit/annotation/Queue;
+#exchange()Lorg/springframework/amqp/rabbit/annotation/Exchange;
+#key()Ljava/lang/String;
@1.6.0.RELEASE
+#ignoreDeclarationExceptions()Ljava/lang/String;
+#arguments()[Lorg/springframework/amqp/rabbit/annotation/Argument;
@2.0.0.RELEASE
+#key()[Ljava/lang/String;
-#key()Ljava/lang/String;
@2.1.0.RELEASE
+#declare()Ljava/lang/String;
+#admins()[Ljava/lang/String;

+###org/springframework/amqp/rabbit/annotation/RabbitHandler
@1.5.0.RELEASE
@2.0.3.RELEASE
+#isDefault()Z

+###org/springframework/amqp/rabbit/annotation/RabbitListenerConfigurationSelector
@2.1.6.RELEASE
+#<init>()V
+#selectImports(Lorg/springframework/core/type/AnnotationMetadata;)[Ljava/lang/String;

+###org/springframework/amqp/rabbit/annotation/Argument
@1.6.0.RELEASE
+#name()Ljava/lang/String;
+#value()Ljava/lang/String;
+#type()Ljava/lang/String;

+###org/springframework/amqp/rabbit/annotation/Queue
@1.5.0.RELEASE
+#value()Ljava/lang/String;
+#durable()Ljava/lang/String;
+#exclusive()Ljava/lang/String;
+#autoDelete()Ljava/lang/String;
@1.6.0.RELEASE
+#ignoreDeclarationExceptions()Ljava/lang/String;
+#arguments()[Lorg/springframework/amqp/rabbit/annotation/Argument;
@2.0.0.RELEASE
+#name()Ljava/lang/String;
@2.1.0.RELEASE
+#declare()Ljava/lang/String;
+#admins()[Ljava/lang/String;

+###org/springframework/amqp/rabbit/annotation/Exchange
@1.5.0.RELEASE
+#value()Ljava/lang/String;
+#type()Ljava/lang/String;
+#durable()Ljava/lang/String;
+#autoDelete()Ljava/lang/String;
@1.6.0.RELEASE
+#internal()Ljava/lang/String;
+#ignoreDeclarationExceptions()Ljava/lang/String;
+#arguments()[Lorg/springframework/amqp/rabbit/annotation/Argument;
@1.6.4.RELEASE
+#delayed()Ljava/lang/String;
@2.0.0.RELEASE
+#name()Ljava/lang/String;
@2.1.0.RELEASE
+#declare()Ljava/lang/String;
+#admins()[Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/ConnectionBlockedEvent
@2.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/Connection;Ljava/lang/String;)V
+#getConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#getReason()Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/ShutDownChannelListener
@2.0.0.RELEASE
+#onCreate(Lcom/rabbitmq/client/Channel;Z)V
+#onShutDown(Lcom/rabbitmq/client/ShutdownSignalException;)V

+###org/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType
@2.2.0.RELEASE
+#values()[Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;

+###org/springframework/amqp/rabbit/connection/PublisherCallbackChannelFactory
@2.1.6.RELEASE
+#createChannel(Lcom/rabbitmq/client/Channel;Ljava/util/concurrent/ExecutorService;)Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel;

+###org/springframework/amqp/rabbit/connection/ConnectionFactoryConfigurationUtils
@2.1.0.RELEASE
+#updateClientConnectionProperties(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;Ljava/lang/String;)V

+###org/springframework/amqp/rabbit/connection/CorrelationData$Confirm
@2.1.0.RELEASE
+#<init>(ZLjava/lang/String;)V
+#isAck()Z
+#getReason()Ljava/lang/String;
+#toString()Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/ConnectionUnblockedEvent
@2.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#getConnection()Lorg/springframework/amqp/rabbit/connection/Connection;

+###org/springframework/amqp/rabbit/connection/ConnectionNameStrategy
@1.7.0.RELEASE
+#obtainNewConnectionName(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/SimplePropertyValueConnectionNameStrategy
@2.1.0.RELEASE
+#<init>(Ljava/lang/String;)V
+#setEnvironment(Lorg/springframework/core/env/Environment;)V
+#obtainNewConnectionName(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/AutoRecoverConnectionNotCurrentlyOpenException
@1.7.0.RELEASE

+###org/springframework/amqp/rabbit/connection/PendingConfirm
@2.1.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/CorrelationData;J)V
+#getCorrelationData()Lorg/springframework/amqp/rabbit/connection/CorrelationData;
+#getTimestamp()J
+#setCause(Ljava/lang/String;)V
+#getCause()Ljava/lang/String;
+#toString()Ljava/lang/String;
@2.2.10.RELEASE
+#isReturned()Z
+#setReturned(Z)V
+#waitForReturnIfNeeded()Z
+#countDown()V

+###org/springframework/amqp/rabbit/connection/CorrelationData
@2.1.0.RELEASE
+#<init>()V
+#<init>(Ljava/lang/String;)V
+#getId()Ljava/lang/String;
+#setId(Ljava/lang/String;)V
+#getFuture()Lorg/springframework/util/concurrent/SettableListenableFuture;
+#getReturnedMessage()Lorg/springframework/amqp/core/Message;
+#toString()Ljava/lang/String;
@2.1.5.RELEASE
+#setReturnedMessage(Lorg/springframework/amqp/core/Message;)V
@2.3.3
*#getReturnedMessage()Lorg/springframework/amqp/core/Message;[deprecated]
*#setReturnedMessage(Lorg/springframework/amqp/core/Message;)V[deprecated]
+#getReturned()Lorg/springframework/amqp/core/ReturnedMessage;
+#setReturned(Lorg/springframework/amqp/core/ReturnedMessage;)V
@3.0.0
+#getFuture()Ljava/util/concurrent/CompletableFuture;
-#getFuture()Lorg/springframework/util/concurrent/SettableListenableFuture;
-#getReturnedMessage()Lorg/springframework/amqp/core/Message;[deprecated]
-#setReturnedMessage(Lorg/springframework/amqp/core/Message;)V[deprecated]

+###org/springframework/amqp/rabbit/connection/ClosingRecoveryListener
@2.1.0.RELEASE
+#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
+#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
+#addRecoveryListenerIfNecessary(Lcom/rabbitmq/client/Channel;)V
+#removeChannel(Lcom/rabbitmq/client/impl/recovery/AutorecoveringChannel;)V

+###org/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener
@2.1.0.RELEASE
+#handleConfirm(Lorg/springframework/amqp/rabbit/connection/PendingConfirm;Z)V
+#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#revoke(Lcom/rabbitmq/client/Channel;)V
+#getUUID()Ljava/lang/String;
+#isConfirmListener()Z
+#isReturnListener()Z
@2.3.0
*#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V[deprecated]
+#handleReturn(Lcom/rabbitmq/client/Return;)V
@3.0.0
-#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V[deprecated]

+###org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl
@2.1.0.RELEASE
+#<init>(Lcom/rabbitmq/client/Channel;)V
+#<init>(Lcom/rabbitmq/client/Channel;Ljava/util/concurrent/ExecutorService;)V
+#setAfterAckCallback(Ljava/util/function/Consumer;)V
+#addShutdownListener(Lcom/rabbitmq/client/ShutdownListener;)V
+#removeShutdownListener(Lcom/rabbitmq/client/ShutdownListener;)V
+#getCloseReason()Lcom/rabbitmq/client/ShutdownSignalException;
+#notifyListeners()V
+#isOpen()Z
+#getChannelNumber()I
+#getConnection()Lcom/rabbitmq/client/Connection;
+#close(ILjava/lang/String;)V
+#abort()V
+#abort(ILjava/lang/String;)V
+#getDefaultConsumer()Lcom/rabbitmq/client/Consumer;
+#setDefaultConsumer(Lcom/rabbitmq/client/Consumer;)V
+#basicQos(IIZ)V
+#basicQos(IZ)V
+#basicQos(I)V
+#basicPublish(Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#basicPublish(Ljava/lang/String;Ljava/lang/String;ZZLcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#basicPublish(Ljava/lang/String;Ljava/lang/String;ZLcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Ljava/lang/String;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclare(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDeclarePassive(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeclareOk;
+#exchangeDelete(Ljava/lang/String;Z)Lcom/rabbitmq/client/AMQP$Exchange$DeleteOk;
+#exchangeDelete(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$DeleteOk;
+#exchangeBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$BindOk;
+#exchangeBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$BindOk;
+#exchangeUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Exchange$UnbindOk;
+#exchangeUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Exchange$UnbindOk;
+#queueDeclare()Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDeclare(Ljava/lang/String;ZZZLjava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDeclarePassive(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$DeclareOk;
+#queueDelete(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$DeleteOk;
+#queueDelete(Ljava/lang/String;ZZ)Lcom/rabbitmq/client/AMQP$Queue$DeleteOk;
+#queueBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$BindOk;
+#queueBind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$BindOk;
+#queueUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$UnbindOk;
+#queueUnbind(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Lcom/rabbitmq/client/AMQP$Queue$UnbindOk;
+#queuePurge(Ljava/lang/String;)Lcom/rabbitmq/client/AMQP$Queue$PurgeOk;
+#basicGet(Ljava/lang/String;Z)Lcom/rabbitmq/client/GetResponse;
+#basicAck(JZ)V
+#basicNack(JZZ)V
+#basicReject(JZ)V
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/Consumer;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicConsume(Ljava/lang/String;ZLjava/lang/String;ZZLjava/util/Map;Lcom/rabbitmq/client/DeliverCallback;Lcom/rabbitmq/client/CancelCallback;Lcom/rabbitmq/client/ConsumerShutdownSignalCallback;)Ljava/lang/String;
+#basicCancel(Ljava/lang/String;)V
+#basicRecover()Lcom/rabbitmq/client/AMQP$Basic$RecoverOk;
+#basicRecover(Z)Lcom/rabbitmq/client/AMQP$Basic$RecoverOk;
+#txSelect()Lcom/rabbitmq/client/AMQP$Tx$SelectOk;
+#txCommit()Lcom/rabbitmq/client/AMQP$Tx$CommitOk;
+#txRollback()Lcom/rabbitmq/client/AMQP$Tx$RollbackOk;
+#confirmSelect()Lcom/rabbitmq/client/AMQP$Confirm$SelectOk;
+#getNextPublishSeqNo()J
+#waitForConfirms()Z
+#waitForConfirms(J)Z
+#waitForConfirmsOrDie()V
+#waitForConfirmsOrDie(J)V
+#asyncRpc(Lcom/rabbitmq/client/Method;)V
+#rpc(Lcom/rabbitmq/client/Method;)Lcom/rabbitmq/client/Command;
+#addConfirmListener(Lcom/rabbitmq/client/ConfirmListener;)V
+#addConfirmListener(Lcom/rabbitmq/client/ConfirmCallback;Lcom/rabbitmq/client/ConfirmCallback;)Lcom/rabbitmq/client/ConfirmListener;
+#removeConfirmListener(Lcom/rabbitmq/client/ConfirmListener;)Z
+#clearConfirmListeners()V
+#addReturnListener(Lcom/rabbitmq/client/ReturnListener;)V
+#addReturnListener(Lcom/rabbitmq/client/ReturnCallback;)Lcom/rabbitmq/client/ReturnListener;
+#removeReturnListener(Lcom/rabbitmq/client/ReturnListener;)Z
+#clearReturnListeners()V
+#exchangeBindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#exchangeDeclareNoWait(Ljava/lang/String;Ljava/lang/String;ZZZLjava/util/Map;)V
+#exchangeDeclareNoWait(Ljava/lang/String;Lcom/rabbitmq/client/BuiltinExchangeType;ZZZLjava/util/Map;)V
+#exchangeDeleteNoWait(Ljava/lang/String;Z)V
+#exchangeUnbindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#queueBindNoWait(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
+#queueDeclareNoWait(Ljava/lang/String;ZZZLjava/util/Map;)V
+#queueDeleteNoWait(Ljava/lang/String;ZZ)V
+#consumerCount(Ljava/lang/String;)J
+#asyncCompletableRpc(Lcom/rabbitmq/client/Method;)Ljava/util/concurrent/CompletableFuture;
+#messageCount(Ljava/lang/String;)J
+#getDelegate()Lcom/rabbitmq/client/Channel;
+#close()V
+#getPendingConfirmsCount(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;)I
+#getPendingConfirmsCount()I
+#addListener(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;)V
+#expire(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;J)Ljava/util/Collection;
+#handleAck(JZ)V
+#handleNack(JZ)V
+#addPendingConfirm(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;JLorg/springframework/amqp/rabbit/connection/PendingConfirm;)V
+#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V
+#shutdownCompleted(Lcom/rabbitmq/client/ShutdownSignalException;)V
+#hashCode()I
+#equals(Ljava/lang/Object;)Z
+#toString()Ljava/lang/String;
@2.1.1.RELEASE
*#<init>(Lcom/rabbitmq/client/Channel;)V[deprecated]
@2.1.6.RELEASE
+#factory()Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannelFactory;
@2.2.0.RELEASE
-#<init>(Lcom/rabbitmq/client/Channel;)V[deprecated]
@2.3.0
+#handle(Lcom/rabbitmq/client/Return;)V
-#handleReturn(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/rabbitmq/client/AMQP$BasicProperties;[B)V

+###org/springframework/amqp/rabbit/connection/PublisherCallbackChannel
@2.1.0.RELEASE
+#addListener(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;)V
+#expire(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;J)Ljava/util/Collection;
+#getPendingConfirmsCount(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;)I
+#getPendingConfirmsCount()I
+#addPendingConfirm(Lorg/springframework/amqp/rabbit/connection/PublisherCallbackChannel$Listener;JLorg/springframework/amqp/rabbit/connection/PendingConfirm;)V
+#getDelegate()Lcom/rabbitmq/client/Channel;
+#setAfterAckCallback(Ljava/util/function/Consumer;)V

+###org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory
@1.5.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Ljava/util/Map;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLorg/springframework/core/io/Resource;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Ljava/util/Map;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLorg/springframework/core/io/Resource;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#getHost()Ljava/lang/String;
+#getPort()I
+#getVirtualHost()Ljava/lang/String;
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#removeConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)Z
+#clearConnectionListeners()V
+#getTargetConnectionFactory(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#destroy()V
@1.6.0.RELEASE
+#getUsername()Ljava/lang/String;
@2.4.4
+#resetConnection()V
@2.4.8
+#setNodeLocator(Lorg/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$NodeLocator;)V
@3.0.0
+#setNodeLocator(Lorg/springframework/amqp/rabbit/connection/NodeLocator;)V
-#setNodeLocator(Lorg/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$NodeLocator;)V

+###org/springframework/amqp/rabbit/batch/SimpleBatchingStrategy
@2.2.0.RELEASE
+#<init>(IIJ)V
+#addToBatch(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/batch/MessageBatch;
+#nextRelease()Ljava/util/Date;
+#releaseBatches()Ljava/util/Collection;
+#canDebatch(Lorg/springframework/amqp/core/MessageProperties;)Z
+#deBatch(Lorg/springframework/amqp/core/Message;Ljava/util/function/Consumer;)V

+###org/springframework/amqp/rabbit/batch/MessageBatch
@2.2.0.RELEASE
+#<init>(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#getExchange()Ljava/lang/String;
+#getRoutingKey()Ljava/lang/String;
+#getMessage()Lorg/springframework/amqp/core/Message;

+###org/springframework/amqp/rabbit/batch/BatchingStrategy
@2.2.0.RELEASE
+#addToBatch(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/batch/MessageBatch;
+#nextRelease()Ljava/util/Date;
+#releaseBatches()Ljava/util/Collection;
+#canDebatch(Lorg/springframework/amqp/core/MessageProperties;)Z
+#deBatch(Lorg/springframework/amqp/core/Message;Ljava/util/function/Consumer;)V

+###org/springframework/amqp/rabbit/retry/MessageBatchRecoverer
@2.2.2.RELEASE
+#recover(Lorg/springframework/amqp/core/Message;Ljava/lang/Throwable;)V
+#recover(Ljava/util/List;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/retry/ImmediateRequeueMessageRecoverer
@2.1.0.RELEASE
+#<init>()V
+#recover(Lorg/springframework/amqp/core/Message;Ljava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager
@1.7.0.RELEASE

+###org/springframework/amqp/rabbit/log4j2/AmqpAppender$Event
@1.6.0.RELEASE
+#<init>(Lorg/apache/logging/log4j/core/LogEvent;Ljava/util/Map;)V
+#getEvent()Lorg/apache/logging/log4j/core/LogEvent;
+#getProperties()Ljava/util/Map;
+#incrementRetries()I

+###org/springframework/amqp/rabbit/log4j2/AmqpAppender
@1.6.0.RELEASE
+#<init>(Ljava/lang/String;Lorg/apache/logging/log4j/core/Filter;Lorg/apache/logging/log4j/core/Layout;ZLorg/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager;)V
+#createAppender(Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
+#append(Lorg/apache/logging/log4j/core/LogEvent;)V
+#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@1.6.10.RELEASE
+#createAppender(Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
+#stop()V
-#createAppender(Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@1.7.0.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#stop()V
@1.7.3.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@1.7.4.RELEASE
+#getQueuedEventCount()I
@1.7.7.RELEASE
-#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@1.7.14.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.0.0.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
+#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.0.1.RELEASE
+#<init>(Ljava/lang/String;Lorg/apache/logging/log4j/core/Filter;Lorg/apache/logging/log4j/core/Layout;ZLorg/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager;Ljava/util/concurrent/BlockingQueue;)V
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#<init>(Ljava/lang/String;Lorg/apache/logging/log4j/core/Filter;Lorg/apache/logging/log4j/core/Layout;ZLorg/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager;)V
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.0.3.RELEASE
-#postProcessMessageBeforeSend(Lorg/springframework/amqp/core/Message;Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Event;)Lorg/springframework/amqp/core/Message;
@2.0.13.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.1.0.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.1.1.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.1.7.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.1.8.RELEASE
+#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
@2.2.4.RELEASE
*#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;[deprecated]
+#newBuilder()Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
@2.3.0
+#<init>(Ljava/lang/String;Lorg/apache/logging/log4j/core/Filter;Lorg/apache/logging/log4j/core/Layout;Z[Lorg/apache/logging/log4j/core/config/Property;Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager;Ljava/util/concurrent/BlockingQueue;)V
-#<init>(Ljava/lang/String;Lorg/apache/logging/log4j/core/Filter;Lorg/apache/logging/log4j/core/Layout;ZLorg/springframework/amqp/rabbit/log4j2/AmqpAppender$AmqpManager;Ljava/util/concurrent/BlockingQueue;)V
-#createAppender(Lorg/apache/logging/log4j/core/config/Configuration;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/Filter;ZLjava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;ILorg/apache/logging/log4j/core/async/BlockingQueueFactory;Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;[deprecated]

+###org/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder
@2.2.4.RELEASE
+#setConfiguration(Lorg/apache/logging/log4j/core/config/Configuration;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setName(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setLayout(Lorg/apache/logging/log4j/core/Layout;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setFilter(Lorg/apache/logging/log4j/core/Filter;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setIgnoreExceptions(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setUri(Ljava/net/URI;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setHost(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setPort(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setAddresses(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setUser(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setPassword(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setVirtualHost(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setUseSsl(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setVerifyHostname(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setSslAlgorithm(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setSslPropertiesLocation(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setKeyStore(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setKeyStorePassphrase(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setKeyStoreType(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setTrustStore(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setTrustStorePassphrase(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setTrustStoreType(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setSaslConfig(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setSenderPoolSize(I)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setMaxSenderRetries(I)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setApplicationId(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setRoutingKeyPattern(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setGenerateId(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setDeliveryMode(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setExchange(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setExchangeType(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setDeclareExchange(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setDurable(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setAutoDelete(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setContentType(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setContentEncoding(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setConnectionName(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setClientConnectionProperties(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setAsync(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setCharset(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setBufferSize(I)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setBlockingQueueFactory(Lorg/apache/logging/log4j/core/async/BlockingQueueFactory;)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#setAddMdcAsHeaders(Z)Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender$Builder;
+#build()Lorg/springframework/amqp/rabbit/log4j2/AmqpAppender;
+#build()Ljava/lang/Object;

+###org/springframework/amqp/rabbit/log4j2/AmqpAppender$EventSender
@1.6.0.RELEASE
+#run()V

+###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitFuture
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#cancel(Z)Z
+#getConfirm()Lorg/springframework/util/concurrent/ListenableFuture;
+#getNackCause()Ljava/lang/String;
@3.0.0
-###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitFuture

+###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
@3.0.0
-###org/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture

+###org/springframework/amqp/rabbit/AsyncRabbitTemplate
@1.6.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer;Ljava/lang/String;)V
+#setAutoStartup(Z)V
+#setPhase(I)V
+#setMandatory(Z)V
+#setEnableConfirms(Z)V
+#setCharset(Ljava/nio/charset/Charset;)V
+#getBeanName()Ljava/lang/String;
+#setBeanName(Ljava/lang/String;)V
+#getConnectionFactory()Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#setReceiveTimeout(J)V
+#setTaskScheduler(Lorg/springframework/scheduling/TaskScheduler;)V
+#getMessageConverter()Lorg/springframework/amqp/support/converter/MessageConverter;
+#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
+#convertSendAndReceive(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#start()V
+#stop()V
+#isRunning()Z
+#getPhase()I
+#isAutoStartup()Z
+#stop(Ljava/lang/Runnable;)V
+#onMessage(Lorg/springframework/amqp/core/Message;)V
+#returnedMessage(Lorg/springframework/amqp/core/Message;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;ZLjava/lang/String;)V
+#toString()Ljava/lang/String;
@1.6.3.RELEASE
*#setCharset(Ljava/nio/charset/Charset;)V[deprecated]
@2.0.0.RELEASE
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;Ljava/lang/String;Ljava/lang/String;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;)V
+#setMandatoryExpression(Lorg/springframework/expression/Expression;)V
+#setMandatoryExpressionString(Ljava/lang/String;)V
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
+#onMessage(Lorg/springframework/amqp/core/Message;Lcom/rabbitmq/client/Channel;)V
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#convertSendAndReceive(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
+#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
-#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer;)V
-#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer;Ljava/lang/String;)V
-#setCharset(Ljava/nio/charset/Charset;)V[deprecated]
-#onMessage(Lorg/springframework/amqp/core/Message;)V
@2.1.0.RELEASE
+#confirm(Lorg/springframework/amqp/rabbit/connection/CorrelationData;ZLjava/lang/String;)V
-#confirm(Lorg/springframework/amqp/rabbit/support/CorrelationData;ZLjava/lang/String;)V
@2.1.8.RELEASE
-#stop(Ljava/lang/Runnable;)V
@2.2.0.RELEASE
+#getRabbitTemplate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate;
@2.3.0
+#returnedMessage(Lorg/springframework/amqp/core/ReturnedMessage;)V
-#returnedMessage(Lorg/springframework/amqp/core/Message;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
@3.0.0
+#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/RabbitMessageFuture;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/RabbitMessageFuture;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/RabbitMessageFuture;
+#convertSendAndReceive(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/RabbitConverterFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#convertSendAndReceive(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
+#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Ljava/util/concurrent/CompletableFuture;
+#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Ljava/util/concurrent/CompletableFuture;
+#sendAndReceive(Lorg/springframework/amqp/core/Message;)Ljava/util/concurrent/CompletableFuture;
-#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
-#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
-#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitMessageFuture;
-#convertSendAndReceive(Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/amqp/rabbit/AsyncRabbitTemplate$RabbitConverterFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceiveAsType(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceiveAsType(Ljava/lang/Object;Lorg/springframework/core/ParameterizedTypeReference;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/Object;Lorg/springframework/amqp/core/MessagePostProcessor;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#convertSendAndReceive(Ljava/lang/Object;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendAndReceive(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendAndReceive(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;
-#sendAndReceive(Lorg/springframework/amqp/core/Message;)Lorg/springframework/util/concurrent/ListenableFuture;

+###org/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler
@2.0.0.RELEASE
+#handleError(Lorg/springframework/amqp/core/Message;Lorg/springframework/messaging/Message;Lorg/springframework/amqp/rabbit/listener/exception/ListenerExecutionFailedException;)Ljava/lang/Object;
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/listener/RabbitListenerErrorHandler

+###org/springframework/amqp/rabbit/listener/adapter/AbstractAdaptableMessageListener$ResultHolder
@1.6.0.RELEASE
+#<init>(Ljava/lang/Object;Lorg/springframework/expression/Expression;)V
+#toString()Ljava/lang/String;
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/listener/adapter/AbstractAdaptableMessageListener$ResultHolder

+###org/springframework/amqp/rabbit/support/LogAppenderUtils
@1.5.6.RELEASE
+#updateClientConnectionProperties(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;Ljava/lang/String;)V
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/support/LogAppenderUtils

+###org/springframework/amqp/rabbit/support/ClosingRecoveryListener
@1.7.10.RELEASE
+#handleRecovery(Lcom/rabbitmq/client/Recoverable;)V
+#handleRecoveryStarted(Lcom/rabbitmq/client/Recoverable;)V
+#addRecoveryListenerIfNecessary(Lcom/rabbitmq/client/Channel;)V
+#removeChannel(Lcom/rabbitmq/client/impl/recovery/AutorecoveringChannel;)V
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/support/ClosingRecoveryListener

+###org/springframework/amqp/rabbit/core/RabbitManagementTemplate
@1.5.0.RELEASE
+#<init>()V
+#<init>(Lcom/rabbitmq/http/client/Client;)V
+#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
+#getClient()Lcom/rabbitmq/http/client/Client;
+#addExchange(Lorg/springframework/amqp/core/Exchange;)V
+#addExchange(Ljava/lang/String;Lorg/springframework/amqp/core/Exchange;)V
+#purgeQueue(Lorg/springframework/amqp/core/Queue;)V
+#purgeQueue(Ljava/lang/String;Lorg/springframework/amqp/core/Queue;)V
+#deleteQueue(Lorg/springframework/amqp/core/Queue;)V
+#deleteQueue(Ljava/lang/String;Lorg/springframework/amqp/core/Queue;)V
+#getQueue(Ljava/lang/String;)Lorg/springframework/amqp/core/Queue;
+#getQueue(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/core/Queue;
+#getQueues()Ljava/util/List;
+#getQueues(Ljava/lang/String;)Ljava/util/List;
+#addQueue(Lorg/springframework/amqp/core/Queue;)V
+#addQueue(Ljava/lang/String;Lorg/springframework/amqp/core/Queue;)V
+#deleteExchange(Lorg/springframework/amqp/core/Exchange;)V
+#deleteExchange(Ljava/lang/String;Lorg/springframework/amqp/core/Exchange;)V
+#getExchange(Ljava/lang/String;)Lorg/springframework/amqp/core/Exchange;
+#getExchange(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/core/Exchange;
+#getExchanges()Ljava/util/List;
+#getExchanges(Ljava/lang/String;)Ljava/util/List;
+#getBindings()Ljava/util/List;
+#getBindings(Ljava/lang/String;)Ljava/util/List;
+#getBindingsForExchange(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
@1.6.4.RELEASE
+#<init>(Ljava/lang/String;)V
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/core/RabbitManagementTemplate

+###org/springframework/amqp/rabbit/connection/PublisherCallbackChannelConnectionFactory
@1.5.0.RELEASE
+#isPublisherConfirms()Z
+#isPublisherReturns()Z
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/connection/PublisherCallbackChannelConnectionFactory

+###org/springframework/amqp/rabbit/transaction/ListenerFailedRuleBasedTransactionAttribute
@1.6.6.RELEASE
+#<init>()V
+#rollbackOn(Ljava/lang/Throwable;)Z
@2.1.0.RELEASE
-###org/springframework/amqp/rabbit/transaction/ListenerFailedRuleBasedTransactionAttribute

+###org/springframework/amqp/rabbit/listener/ContainerUtils
@2.1.0.RELEASE
+#shouldRequeue(ZLjava/lang/Throwable;Lorg/apache/commons/logging/Log;)Z
@2.1.9.RELEASE
+#isRejectManual(Ljava/lang/Throwable;)Z
@2.2.0.RELEASE
-###org/springframework/amqp/rabbit/listener/ContainerUtils

+###org/springframework/amqp/rabbit/core/AmqpNackReceivedException
@2.3.3
+#<init>(Ljava/lang/String;Lorg/springframework/amqp/core/Message;)V
+#getFailedMessage()Lorg/springframework/amqp/core/Message;

+###org/springframework/amqp/rabbit/core/RabbitTemplate$ReturnsCallback
@2.3.0
+#returnedMessage(Lorg/springframework/amqp/core/Message;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V[deprecated]
+#returnedMessage(Lorg/springframework/amqp/core/ReturnedMessage;)V
+#delegate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback;[deprecated]
@3.0.0
-#returnedMessage(Lorg/springframework/amqp/core/Message;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V[deprecated]
-#delegate()Lorg/springframework/amqp/rabbit/core/RabbitTemplate$ReturnCallback;[deprecated]

+###org/springframework/amqp/rabbit/annotation/MultiRabbitBootstrapConfiguration
@2.3.5
+#<init>()V
+#registerBeanDefinitions(Lorg/springframework/core/type/AnnotationMetadata;Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;)V
+#setEnvironment(Lorg/springframework/core/env/Environment;)V

+###org/springframework/amqp/rabbit/annotation/MultiRabbitListenerAnnotationBeanPostProcessor
@2.3.0
+#<init>()V

+###org/springframework/amqp/rabbit/connection/AbstractConnectionFactory$AddressShuffleMode
@2.3.0
+#values()[Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory$AddressShuffleMode;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory$AddressShuffleMode;

+###org/springframework/amqp/rabbit/connection/ThreadChannelConnectionFactory
@2.3.0
+#<init>(Lcom/rabbitmq/client/ConnectionFactory;)V
+#isSimplePublisherConfirms()Z
+#setSimplePublisherConfirms(Z)V
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#closeThreadChannel()V
+#destroy()V
@2.3.2
+#setPublisherConnectionFactory(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;)V
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#resetConnection()V
@2.3.7
+#prepareSwitchContext()Ljava/lang/Object;
+#switchContext(Ljava/lang/Object;)V

+###org/springframework/amqp/rabbit/connection/PooledChannelConnectionFactory
@2.3.0
+#<init>(Lcom/rabbitmq/client/ConnectionFactory;)V
+#setPoolConfigurer(Ljava/util/function/BiConsumer;)V
+#isSimplePublisherConfirms()Z
+#setSimplePublisherConfirms(Z)V
+#createConnection()Lorg/springframework/amqp/rabbit/connection/Connection;
+#destroy()V
@2.3.2
+#setPublisherConnectionFactory(Lorg/springframework/amqp/rabbit/connection/AbstractConnectionFactory;)V
+#addConnectionListener(Lorg/springframework/amqp/rabbit/connection/ConnectionListener;)V
+#resetConnection()V

+###org/springframework/amqp/rabbit/connection/AfterCompletionFailedException
@2.3.10
+#<init>(ILjava/lang/Throwable;)V
+#getSyncStatus()I

+###org/springframework/amqp/rabbit/connection/ConnectionFactoryContextWrapper
@2.3.0
+#<init>(Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;)V
+#call(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
+#call(Ljava/lang/String;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
+#run(Ljava/lang/Runnable;)V
+#run(Ljava/lang/String;Ljava/lang/Runnable;)V

+###org/springframework/amqp/rabbit/retry/RepublishMessageRecovererWithConfirms
@2.3.3
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Ljava/lang/String;Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;)V
+#<init>(Lorg/springframework/amqp/rabbit/core/RabbitTemplate;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/rabbit/connection/CachingConnectionFactory$ConfirmType;)V
+#setConfirmTimeout(J)V

+###org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy
@1.6.0.RELEASE
+#values()[Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy;
@2.0.0.RELEASE
-###org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter$CorrelationIdPolicy

+###org/springframework/amqp/rabbit/config/CompositeContainerCustomizer
@2.4.8
+#<init>(Ljava/util/List;)V
+#configure(Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;)V

+###org/springframework/amqp/rabbit/config/BaseRabbitListenerContainerFactory
@2.4.0
+#<init>()V
+#createListenerContainer(Lorg/springframework/amqp/rabbit/listener/RabbitListenerEndpoint;)Lorg/springframework/amqp/rabbit/listener/MessageListenerContainer;
+#setDefaultRequeueRejected(Ljava/lang/Boolean;)V
+#setBeforeSendReplyPostProcessors([Lorg/springframework/amqp/core/MessagePostProcessor;)V
+#setRetryTemplate(Lorg/springframework/retry/support/RetryTemplate;)V
+#setReplyRecoveryCallback(Lorg/springframework/retry/RecoveryCallback;)V
@2.4.5
+#getAdviceChain()[Lorg/aopalliance/aop/Advice;
+#setAdviceChain([Lorg/aopalliance/aop/Advice;)V
@3.0.0
+#setReplyPostProcessorProvider(Ljava/util/function/Function;)V

+###org/springframework/amqp/rabbit/listener/MethodRabbitListenerEndpoint$AdapterProvider
@2.4.0
+#getAdapter(ZLjava/lang/Object;Ljava/lang/reflect/Method;ZLorg/springframework/amqp/rabbit/listener/api/RabbitListenerErrorHandler;Lorg/springframework/amqp/rabbit/batch/BatchingStrategy;)Lorg/springframework/amqp/rabbit/listener/adapter/MessagingMessageListenerAdapter;

+###org/springframework/amqp/rabbit/listener/MessageAckListener
@2.4.6
+#onComplete(ZJLjava/lang/Throwable;)V

+###org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$NodeLocator
@2.4.8
+#locate([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$FactoryFinder;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#createClient(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
+#close(Ljava/lang/Object;)V
+#restCall(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
@3.0.0
-###org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$NodeLocator

+###org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$FactoryFinder
@2.4.8
+#locate(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
@3.0.0
-###org/springframework/amqp/rabbit/connection/LocalizedQueueConnectionFactory$FactoryFinder

+###org/springframework/amqp/rabbit/connection/RestTemplateNodeLocator
@2.4.8
+#<init>()V
+#createClient(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/RestTemplateHolder;
+#restCall(Lorg/springframework/amqp/rabbit/connection/RestTemplateHolder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#restCall(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#createClient(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/connection/WebFluxNodeLocator
@2.4.8
+#<init>()V
+#restCall(Lorg/springframework/web/reactive/function/client/WebClient;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#createClient(Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/web/reactive/function/client/WebClient;
+#restCall(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;
+#createClient(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;

+###org/springframework/amqp/rabbit/config/FederatedExchangeParser
@1.1.0.RELEASE
+#<init>()V
@1.3.0.RELEASE
-###org/springframework/amqp/rabbit/config/FederatedExchangeParser

+###org/springframework/amqp/rabbit/support/DeclareExchangeConnectionListener
@1.5.4.RELEASE
+#<init>(Lorg/springframework/amqp/core/Exchange;Lorg/springframework/amqp/rabbit/core/RabbitAdmin;)V
+#onCreate(Lorg/springframework/amqp/rabbit/connection/Connection;)V
+#onClose(Lorg/springframework/amqp/rabbit/connection/Connection;)V
@1.6.0.RELEASE
-###org/springframework/amqp/rabbit/support/DeclareExchangeConnectionListener

+###org/springframework/amqp/rabbit/RabbitConverterFuture
@3.0.0
+#getReturnType()Lorg/springframework/core/ParameterizedTypeReference;
+#setReturnType(Lorg/springframework/core/ParameterizedTypeReference;)V

+###org/springframework/amqp/rabbit/RabbitMessageFuture
@3.0.0

+###org/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation$DefaultRabbitListenerObservationConvention
@3.0.0
+#<init>()V
+#getLowCardinalityKeyValues(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitMessageReceiverContext;)Lio/micrometer/common/KeyValues;
+#getContextualName(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitMessageReceiverContext;)Ljava/lang/String;
+#getContextualName(Lio/micrometer/observation/Observation$Context;)Ljava/lang/String;
+#getLowCardinalityKeyValues(Lio/micrometer/observation/Observation$Context;)Lio/micrometer/common/KeyValues;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservationConvention
@3.0.0
+#supportsContext(Lio/micrometer/observation/Observation$Context;)Z
+#getName()Ljava/lang/String;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitMessageReceiverContext
@3.0.0
+#<init>(Lorg/springframework/amqp/core/Message;Ljava/lang/String;)V
+#getListenerId()Ljava/lang/String;
+#getSource()Ljava/lang/String;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation$ListenerLowCardinalityTags
@3.0.0
+#values()[Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation$ListenerLowCardinalityTags;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation$ListenerLowCardinalityTags;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation$TemplateLowCardinalityTags
@3.0.0
+#values()[Lorg/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation$TemplateLowCardinalityTags;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation$TemplateLowCardinalityTags;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservationConvention
@3.0.0
+#supportsContext(Lio/micrometer/observation/Observation$Context;)Z
+#getName()Ljava/lang/String;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation$DefaultRabbitTemplateObservationConvention
@3.0.0
+#<init>()V
+#getLowCardinalityKeyValues(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitMessageSenderContext;)Lio/micrometer/common/KeyValues;
+#getContextualName(Lorg/springframework/amqp/rabbit/support/micrometer/RabbitMessageSenderContext;)Ljava/lang/String;
+#getContextualName(Lio/micrometer/observation/Observation$Context;)Ljava/lang/String;
+#getLowCardinalityKeyValues(Lio/micrometer/observation/Observation$Context;)Lio/micrometer/common/KeyValues;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation
@3.0.0
+#values()[Lorg/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/support/micrometer/RabbitTemplateObservation;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation
@3.0.0
+#values()[Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation;
+#valueOf(Ljava/lang/String;)Lorg/springframework/amqp/rabbit/support/micrometer/RabbitListenerObservation;

+###org/springframework/amqp/rabbit/support/micrometer/RabbitMessageSenderContext
@3.0.0
+#<init>(Lorg/springframework/amqp/core/Message;Ljava/lang/String;Ljava/lang/String;)V
+#getBeanName()Ljava/lang/String;
+#getDestination()Ljava/lang/String;

+###org/springframework/amqp/rabbit/connection/NodeLocator
@3.0.0
+#locate([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/springframework/amqp/rabbit/connection/FactoryFinder;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;
+#createClient(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
+#close(Ljava/lang/Object;)V
+#restCall(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;

+###org/springframework/amqp/rabbit/connection/FactoryFinder
@3.0.0
+#locate(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/amqp/rabbit/connection/ConnectionFactory;

+###org/springframework/amqp/rabbit/aot/RabbitRuntimeHints
@3.0.0
+#<init>()V
+#registerHints(Lorg/springframework/aot/hint/RuntimeHints;Ljava/lang/ClassLoader;)V

+###org/springframework/amqp/rabbit/TimeoutTask
@3.0.0
+#run()V

+###org/springframework/amqp/rabbit/RabbitFuture
@3.0.0
+#cancel(Z)Z
+#getConfirm()Ljava/util/concurrent/CompletableFuture;
+#getNackCause()Ljava/lang/String;
